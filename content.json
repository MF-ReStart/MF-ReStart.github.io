{"meta":{"title":"荒原饮露","subtitle":"青春不是隔岸观火啊","description":"","author":"荒原饮露","url":"https://www.missf.top","root":"/"},"pages":[{"title":"","date":"2020-04-15T12:15:19.830Z","updated":"2020-04-13T10:37:51.000Z","comments":false,"path":"categories/index.html","permalink":"https://www.missf.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-04-15T12:15:19.829Z","updated":"2020-04-13T10:37:41.000Z","comments":false,"path":"tags/index.html","permalink":"https://www.missf.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ansible的yaml基本语法(6)","slug":"ansible的yaml基本语法(6)","date":"2020-05-23T08:37:52.000Z","updated":"2020-05-25T03:58:32.637Z","comments":true,"path":"2020/05/23/ansible的yaml基本语法(6)/","link":"","permalink":"https://www.missf.top/2020/05/23/ansible%E7%9A%84yaml%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95(6)/","excerpt":"","text":"ansible的yaml基本语法 大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tab键，只允许使用空格 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 yaml文件以”—“作为文档的开始，”…”作为文档的结束 # 表示注释，从这个字符一直到行尾，都会被解析器忽略 相同缩进级别的行以”-“(破折号和空格)开头的组成一个列表 yaml支持的三种数据结构 数组: 一组按次序排列的值，又称为序列（sequence） / 列表（list） 对象: 键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary） 纯量: 单个的、不可再分的值 数组相同缩进级别的行以“- ”（破折号和空格）开头组成一个列表就是数组 --- fruits: - Apple - Banana - orange - melon # 行内表示法 fruits: ['Apple', 'Banana', 'orange', 'melon'] 对象对象的一组键值对，使用冒号结构表示(冒号后面要有个空格) sb: name: Alex job: python skill: brag # 行内表示法 sb: {name: Alex, job: python, skill: brag} 纯量数值number: 12 float: 15.20布尔值表示true的值 true, True, TRUE, yes, Yes, YES, on, On, ON, y, Y 表示false的值 false, False, FALSE, no, No, NO, off, Off, OFF, n, N强制类型转换yaml 允许使用两个感叹号，强制转换数据类型 a: !!str 123 d: !!str true # 这个true的数据类型不再是布尔值，而是str类型字符串字符串默认不使用引号表示 str: 这是字符串 s1: &#39;内容\\n字符串&#39; # 如果字符之中包含空格和特殊字符，需要放在引号之中，单引号和双引号都可以使用，双引号不会对特殊字符转义空值null: 用~表示 parent: ~ 引用&amp;用来建立锚点(defaults)，&lt;&lt;表示合并到当前数据，*****用来引用锚点 defaults: &amp;defaults adapter: postgres host: localhost development: database: myapp_development &lt;&lt;: *defaults test: database: myapp_test &lt;&lt;: *defaults # 上面的写法等同于下面的代码: defaults: adapter: postgres host: localhost development: database: myapp_development adapter: postgres host: localhost test: database: myapp_test adapter: postgres host: localhost参考palybooks更多的yaml语法请参考: http://docs.ansible.com/YAMLSyntax.html","categories":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/categories/ansible/"}],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/tags/ansible/"},{"name":"自动化运维","slug":"自动化运维","permalink":"https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"}]},{"title":"使用coding持续集成Java项目","slug":"使用coding持续集成Java项目","date":"2020-05-18T07:42:59.000Z","updated":"2020-05-20T03:35:25.668Z","comments":true,"path":"2020/05/18/使用coding持续集成Java项目/","link":"","permalink":"https://www.missf.top/2020/05/18/%E4%BD%BF%E7%94%A8coding%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90Java%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"coding介绍在说到持续集成这方面，相信所有做运维的小伙伴都知道Jenkins，就是那个拿着托盘的老头子。但是说到coding，可能很多人都没听说过。什么是coding呢？coding涵盖了软件开发从构想到交付的一切所需，使研发团队在云端高效协同，实践敏捷开发与 DevOps，提升软件交付质量与速度。这是来自官网的介绍，下面就让我们一起学习coding吧！ 第一次接触coding在去年的七月份，我有幸参加了腾讯的724运维分享日，就在那时候接触到了coding。 这是腾讯滨海大厦四楼，现在看着还历历在目，但是当年的sz number one却散落在天涯！ 一群运维小伙伴看着这个墙哈哈大笑… 和一群志同道合的人在一起时，即使不认识也会有莫名的亲切感啊。 第一次看到coding的介绍时都不知道说的啥，现在回头看时才觉得自己成长了。 (就如Alex吹牛逼说的: 如果你不觉得一年前的自己是傻逼，那就说明你这一年都没有成长) 下图是coding创始人张海龙先生 额…扯远了，下面就让我们来学习coding吧！ 注册codingcoding所有的东西都是在这个云平台上实现的，所谓的使研发团队在云端高效协同说的就是这个吧！ 创建项目选择DevOps项目模板 填写项目基本信息 下载若依的源码若依源码gitee地址 配置若依数据库 将若依自带的两个SQL文件导入到ry数据库 初始化本地仓库git init git add . git commit -m \"第一次提交\" 配置coding SSH秘钥在Windows电脑生成ssh密钥对，然后将id_rsa.pub公钥添加到coding SSH公钥 推送本地仓库到coding 注意: 如果已经在coding配置了ssh秘钥，git添加远程仓库的时候不要使用https的地址，不然还是会提示需要输入coding的账号密码 git remote add origin git@e.coding.net:missf/RuoYi.git # 配置了SSH秘钥的，一定要填写项目的git地址 git push -u origin master # 这样推送时就不需要输入账号密码啦 持续集成创建持续集成任务 新建构建计划 录入项目凭据在服务器生成SSH秘钥对，将私钥录入到coding的凭据管理，coding就能持续集成部署代码到服务器 编写静态配置的 Jenkinsfile 配置环境变量 这里附上完整Jenkinsfile pipeline { agent any stages { stage('检出') { steps { checkout([$class: 'GitSCM', branches: [[name: env.GIT_BUILD_REF]], userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]]) } } stage('构建') { steps { echo '构建中...' sh 'java -version' sh 'mvn package' echo '构建完成.' } } stage('压缩jar包') { steps { echo '压缩中...' sh 'cd /root/workspace/ruoyi-admin/target/ && tar -zcf /tmp/ruoyi-admin.tar.gz ruoyi-admin.jar' echo '压缩完成.' } } stage('部署') { steps { echo '部署中...' script { def remote = [:] remote.name = 'java-server' remote.allowAnyHosts = true remote.host = \"${env.REMOTE_HOST}\" remote.port = 50312 remote.user = \"${env.REMOTE_USER_NAME}\" // 把「CODING 凭据管理」中的「凭据 ID」填入 credentialsId，而 id_rsa 无需修改 withCredentials([sshUserPrivateKey(credentialsId: \"${env.REMOTE_CRED}\", keyFileVariable: 'id_rsa')]) { remote.identityFile = id_rsa // SSH 上传文件到服务器 sshPut remote: remote, from: '/tmp/ruoyi-admin.tar.gz', into: '/tmp/' // 解压缩 sshCommand remote: remote, sudo: false, command: \"tar -zxf /tmp/ruoyi-admin.tar.gz -C /home/ruoyi/\" // 执行Java应用启停脚本 sshCommand remote: remote, sudo: true, command: \"sh /home/ruoyi/start.sh stop && sh /home/ruoyi/start.sh start\" } } echo '部署完成' } } } } 触发规则本地仓库推送代码到master分支时就会自动触发持续集成任务 开启缓存目录开启缓存目录后可以大大提升构建的速度 立即构建 查看构建过程构建失败可以查看完整日志分析失败原因 服务器的启停脚本[root@java-server ~]# cd /home/ruoyi/ [root@java-server ruoyi]# ll total 65080 drwxr-xr-x 2 root root 4096 May 18 10:18 logs -rw-r--r-- 1 root root 67 May 18 17:04 nohup.out -rw-r--r-- 1 root root 66627886 May 18 17:04 ruoyi-admin.jar -rwxr-xr-x 1 root root 760 May 18 14:29 start.sh [root@java-server ruoyi]# cat start.sh #!/bin/bash WORKSPACE=/home/ruoyi if [ -d \"${WORKSPACE}\" ]; then cd ${WORKSPACE} else echo \"${WORKSPACE} directory does not exist\" exit 1 fi APP_NAME='ruoyi-admin.jar' USE_JAVA_HOME='/usr/local/jdk1.8.0_211' JVM_OPTS='-Xms512m -Xmx512m' CONFIG_OPTS='' if [ $1 == 'start' ]; then echo 'start service '$APP_NAME nohup java -jar ${JVM_OPTS} ${APP_NAME} > ${WORKSPACE}/nohup.out 2>&1 & elif [ $1 == 'stop' ]; then echo 'stop service '$APP_NAME PID=$(ps -ef | grep -v grep | grep ${APP_NAME} | awk '{print $2}') if [ -z ${PID} ]; then echo ${APP_NAME} ' had stopped' else kill ${PID} sleep 2 if [ $? -ne 0 ]; then echo ${APP_NAME} ' stop failed' exit 1 fi fi fi 查看持续集成的效果","categories":[{"name":"coding","slug":"coding","permalink":"https://www.missf.top/categories/coding/"}],"tags":[{"name":"coding","slug":"coding","permalink":"https://www.missf.top/tags/coding/"},{"name":"持续集成","slug":"持续集成","permalink":"https://www.missf.top/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"}]},{"title":"ansible模块学习(5)","slug":"ansible模块学习(5)","date":"2020-05-12T03:12:59.000Z","updated":"2020-05-25T03:56:49.378Z","comments":true,"path":"2020/05/12/ansible模块学习(5)/","link":"","permalink":"https://www.missf.top/2020/05/12/ansible%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0(5)/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 ansible模块学习command模块ansible的默认模块，可以不用-m指定，-a是command的参数 ansible all -m command -a &quot;hostname&quot; 10.10.110.122 | CHANGED | rc=0 &gt;&gt; localhost.localdomain 10.10.110.123 | CHANGED | rc=0 &gt;&gt; localhost.localdomaincommand模块不支持调用$HOME这样的变量，还有像&lt;, &gt;, |, ;, &amp;这些都将不可用，但是command 模块更安全，因为他不受用户环境的影响。 也很大的避免了潜在的shell注入风险。 shell模块shell 模块可以帮助我们在远程主机上执行命令。与command模块不同的是，shell模块在远程主机中执行命令时，会经过远程主机上的 /bin/sh 程序处理，能够使用&lt;, &gt;, |, ;, &amp;这些符号和环境变量。 copy模块copy模块的作用就是将Control node的文件拷贝到Managed nodes scr: 用于指定控制节点上被copy的文件或目录 dest: 用于指定文件将被拷贝到管理节点的路径，dest为必须参数 content: 当不使用src指定拷贝的文件时，可以使用content直接指定文件内容，src与content两个参数必有其一 force: 当管理节点的目标路径存在同名文件，并且两个文件内容不同，是否强制覆盖，可选值有yes和no，默认值为yes backup: 当管理节点的目标路径存在同名文件，并且两个文件内容不同，是否对管理节点的文件进行备份，可选值有yes和no owner: 指定文件拷贝到管理节点后的属主，但是管理节点上必须有对应的用户 group: 指定文件拷贝到管理节点后的属组，但是管理节点上必须有对应的组 mode: 指定文件拷贝到管理节点后的权限，可以使用mode=0644表示，也使用mode=u+x表示 将控制节点的/etc/hosts文件复制到管理节点的/root目录下，如果管理节点的/root目录已经存在文件，则会默认覆盖 ansible all -m copy -a &quot;src=/etc/hosts dest=/root/&quot; # 如无意外这里你看到的字体颜色是黄色的，这是成功执行并且状态发生了改变的复制文件，指定文件的属主和属组，需要注意的是管理节点必须存在对应的用户和组 ansible all -m copy -a &quot;src=/etc/hosts dest=/tmp/ owner=mwj group=mwj&quot;复制文件，如果管理节点的目标路径已存在同名文件且内容不相同，则对管理节点的文件先进行备份，再把控制节点的文件复制到管理节点 ansible all -m copy -a &quot;src=/etc/hosts dest=/tmp/ backup=yes&quot; # 在返回的结果列表能看到: &quot;backup_file&quot;: &quot;/tmp/hosts.15575.2020-05-12@22:28:50~&quot; # ansibel是用哈希值去校验两个文件的内容是否一致的 file模块file模块可以完成对文件增删查改的基本操作 path: 用于指定要操作的文件或目录，必须参数 state: ansible无法从path=/test/a/b得知我们想要创建目录还是文件，所以需要使用state参数配和path来声明操作的类型 state=directory 创建的是目录 state=touch 创建的是文件 state=link 创建的是软连接文件 state=hard 创建的是硬链接文件 state=absent 删除文件或者目录，absent意为”缺席” src: 当state设置为link或者hard时，我们必须指明软硬链链接到哪个文件，通过src参数即可指定链接源 force: 当state=link的时候，可配合force=yes参数强制创建链接文件，但是强制创建会有两种情况 情况一: 当要创建的链接文件所指向的源文件并不存在时，使用此参数可以先强制创建出链接文件 情况二: 当要创建链接文件的路径中已经存在与链接文件同名的文件时，将force设置为yes，会将同名文件覆盖为链接文件 owner: 用于指定被操作文件或目录的属主 group: 用于指定被操作文件或目录的属组 mdoe: 用于指定被操作文件或目录的权限，使用mode=755，设置特殊权限则可以使用mode=4700 recurse: 当要操作的对象为目录，将recurse设置为yes，可以递归的修改目录中文件的属性 在管理节点上创建一个名为testdir的目录，如果目录已存在则不进行任何操作 ansible all -m file -a &quot;path=/testdir/ state=directory&quot;在管理节点上创建一个名为testfile的文件，如果文件已存在则会更新文件的时间戳 ansible all -m file -a &quot;path=/testdir/testfile state=touch&quot;在管理节点创建一个名为/testdir/linkfile的链接文件，链接的源文件/testdir/testfile已存在 ansible all -m file -a &quot;path=/testdir/linkfile state=link src=/testdir/testfile&quot;在管理节点上删除指定的文件或目录 ansible all -m file -a &quot;path=/testdir/testfile state=absent&quot;fetch模块从管理节点拉取文件到控制节点 dest: 用来存放从管理节点拉取到的文件 src: 管理节点被拉取的文件，必须是文件不能是目录 flat: 默认为no，会将拉取到控制节点的文件以hostname/file的命名存放在dest目录，如果为yes，则直接按文件名存放 Validate_checksum: 拉取文件之后进行MD5检查 拉取管理节点的/etc/hosts文件到控制节点的/data/目录 ansible all -m fetch -a &quot;src=/etc/hosts dest=/data/&quot; # 这里flat默认为no，所以拉取之后存放的方式是这样的 tree /data/ /data/ ├── 10.10.110.122 │ └── etc │ └── hosts └── 10.10.110.123 └── etc └── hosts ansible all -m fetch -a &quot;src=/etc/hosts dest=/data/ flat=yes&quot; # flat=yes是直接按文件名存放 tree /data/ /data/ └── hosts # 只有一个hosts文件是因为第一个hosts被覆盖掉了blockinfile模块blockinfile模块可以帮助我们在指定的文件中插入”一段文本”，这段文本是被标记过的，我们在这段文本上做了记号，以便在以后的操作中可以通过”标记”找到这段文本，然后修改或者删除它 path: 指定要操作的文件 block: 此参数用于指定我们想要插入的那”一段文本”，此参数有一个别名叫”content”，使用content或block的作用是相同的 marker: 自定义开始和结束的标记，marker=#{mark}test:开始为# BEGIN test，结束为# END test insertafter: 在插入一段文本时，默认会在文件的末尾插入文本，如果你想要将文本插入在某一行的后面，可以使用此参数指定对应的行 insertbefore: 在插入一段文本时，默认会在文件的末尾插入文本，如果你想要将文本插入在某一行的前面，可以使用此参数指定对应的行 backup: 是否在修改文件之前对文件进行备份 create: 当要操作的文件并不存在时，是否创建对应的文件 在管理节点的/testdir/rc.local文件末尾插入一行systemctl start mariadb ansible all -m blockinfile -a &#39;path=/testdir/rc.local block=&quot;systemctl start mariadb&quot;&#39;自定义插入的开始和结束的标记 ansible all -m blockinfile -a &#39;path=/testdir/rc.local block=&quot;systemctl restart mysqld\\nnginx -s reload&quot; marker=&quot;#{mark} serivce to start&quot;&#39; # 查看被插入的文本 #BEGIN serivce to start systemctl restart mysqld nginx -s reload #END serivce to start使用create参数，如果指定的文件不存在则创建它 ansible all -m blockinfile -a &#39;path=/testdir/date block=&quot;今天是5月12号\\n汶川地震12周年&quot; marker=&quot;#{mark} 日期记录&quot; create=yes&#39;使用backup参数，可以在操作修改文件之前对文件进行备份 ansible all -m blockinfile -a &#39;path=/testdir/date block=&quot;今天是5月12号\\n汶川地震12周年&quot; marker=&quot;#{mark} 日期记录&quot; backup=yes&#39;lineinfile模块我们可以借助lineinfile模块，确保”某一行文本”存在于指定的文件中，还可以根据正则表达式替换”某一行文本” path: 指定要操作的文件 line: 使用此参数指定文本内容 regexp: 使用正则表达式匹配对应的行 state: 当想要删除对应的文本时，需要将state参数的值设置为absent backrefs: 开启后向引用，line参数中就能对regexp参数中的分组进行后向引用了 insertafter参数: 借助insertafter参数可以将文本插入到“指定的行”之后 insertbefore参数: 借助insertbefore参数可以将文本插入到“指定的行”之前 backup: 是否在修改文件之前对文件进行备份 create: 当要操作的文件并不存在时，是否创建对应的文件 确保”test lineinfile”这行文本存在于/testdir/date文件中，如果存在则不做任何操作，如果不存在则在末尾插入 ansible all -m lineinfile -a &#39;path=/testdir/date line=&quot;test lineinfile&quot;&#39;根据正则表达式替换”某一行”，如果多行能够匹配正则，只有最后匹配的行才会被替换，如果没有匹配到则会在末尾插入line的内容 ansible all -m lineinfile -a &#39;path=/testdir/date regexp=&quot;^test&quot; line=&quot;被替换后的内容&quot;&#39;根据正则匹配删除对应的行，如果文件多行都与正则匹配，则删除多行 ansible all -m lineinfile -a &#39;path=/testdir/date regexp=&quot;^#.*-$&quot; state=absent&#39; # 删除#开头-结尾中间有任意个字符的行find模块find模块可以帮助我们在管理节点中查找符合条件的文件，就像find命令一样 paths: 必须参数，指定在哪个目录中查找文件，可以指定多个路径，路径间用逗号隔开 recurse: 默认只会在指定的目录中查找文件，当recurse参数设置为yes时，表示会递归的查找文件 hidden: 默认不会去查找隐藏文件，只有当hidden参数的值设置为yes时才会查找隐藏文件 file_type: 默认只会根据条件查找”文件”，可以通过file_type指定文件类型，any | directory | file | link patterns: 使用此参数指定需要查找的文件名称，支持使用shell(比如通配符)或者正则表达式去匹配文件名称 use_regex: 当use_regex设置为yes时，表示使用python正则解析patterns参数中的表达式 contains: 使用此参数可以根据文章内容查找文件，此参数的值为一个正则表达式 age: 用此参数可以根据时间范围查找文件，默认以文件的mtime为标准与指定的时间进行对比 age_stamp: 文件的时间属性中有三个时间种类:atime、ctime、mtime，当我们根据时间范围查找文件时，可以指定以哪个时间种类为准 size: 使用此参数可以根据文件大小查找文件 get_checksum: 当有符合查找条件的文件被找到时，会同时返回对应文件的sha1校验码 在管理节点的/etc目录中查找包含www字符串的文件，不进行递归并忽略隐藏文件 ansible all -m find -a &#39;paths=/etc contains=&quot;.*www.*&quot;&#39;在管理节点的/etc目录查找以.sh结尾的文件，包括隐藏文件并进行递归查找 ansible all -m find -a &#39;paths=/etc patterns=&quot;*.sh&quot; hidden=yes recurse=yes&#39;在管理节点的/etc目录查找链接文件，包括隐藏文件并进行递归查找 ansible all -m find -a &#39;paths=/etc file_type=link hidden=yes recurse=yes&#39;在管理节点的/etc目录查找以.sh结尾的文件，只不过patterns对应的表达式为正则表达式，包括所有文件类型 ansible all -m find -a &#39;paths=/etc patterns=&quot;\\*.sh&quot; file_type=any use_regex=yes&#39;在管理节点的/etc目录递归查找mtime在4天以内的文件 ansible all -m find -a &#39;paths=/etc age=-4d recurse=yes&#39;在管理节点的/etc目录递归查找大于2G的文件 ansible all -m find -a &#39;paths=/etc size=2g recurse=yes&#39;在管理节点的/etc目录递归查找.conf结尾的文件，并且返回符合条件的文件的sha1校验码 ansible all -m find -a &#39;paths=/etc patterns=&quot;*.conf&quot; recurse=yes get_checksum=yes&#39;replace模块replace模块可以根据我们指定的正则表达式替换文件中的字符串，文件中所有被正则匹配到的字符串都会被替换 path: 必须参数，指定要操作的文件，别名:dest | destfile | name regexp: 必须参数，指定一个python正则表达式，文件中与正则匹配的字符串将会被替换 replace: 指定最终要替换成的字符串 backup: 是否在修改文件之前对文件进行备份，最好设置为yes 将管理主机的/testdir/date文件中所有的ansible替换为saltstack，操作前进行文件备份 ansible all -m replace -a &#39;path=/testdir/date regexp=&quot;ansible&quot; replace=saltstack backup=yes&#39;","categories":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/categories/ansible/"}],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/tags/ansible/"},{"name":"自动化运维","slug":"自动化运维","permalink":"https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"}]},{"title":"ansible主机清单(4)","slug":"ansible主机清单(4)","date":"2020-05-10T02:12:59.000Z","updated":"2020-05-25T01:57:56.324Z","comments":true,"path":"2020/05/10/ansible主机清单(4)/","link":"","permalink":"https://www.missf.top/2020/05/10/ansible%E4%B8%BB%E6%9C%BA%E6%B8%85%E5%8D%95(4)/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 认识主机清单Ansible可同时操作属于一个组的多台主机， 组和主机之间的关系通过 inventory 文件配置. 默认的文件路径为 /etc/ansible/hosts，执行命令的时候使用 -i 参数即可指定主机清单。 主机清单示例主机清单文件主要有 ini 和 yaml 格式两种语法格式 mail.example.com # 定义主机fqdn地址, 需要已经与控制节点ssh互信 localhost ansible_connection=local # ansible_connection可以定义连接类型, local是在本地执行,默认是smart host4 ansible_host=10.10.110.123 ansible_port=50312 ansible_user=root ansible_password=12345 # 指定别名，定义主机ssh连接信息 www[1:50].example.com # 定义 1-50范围内的主机 www-[a:d].example.com # 定义 a-d 范围内的主机 [dbservers] three.example.com ansible_python_interpreter=/usr/local/bin/python3 # 定义python执行ansible，这个是指定被控节点的python 192.168.77.123 ansible_ruby_interpreter=/usr/bin/ruby.1.9.3 # 定义ruby执行文件 webservers:vars] # 定义webservers组的变量 ntp_server=ntp.example.com proxy=proxy.example.com [server:children] # 定义server组的子成员，执行server组时，webservers和dbservers组内的管理节点也会执行 webservers dbservers ini和yaml格式对比# 先写出ini风格 [dbserver] db1 ansible_host=10.10.110.122 ansible_port=22 ansible_user=root ansible_password=0 [webserver] web1 ansible_host=10.10.110.123 ansible_port=22 ansible_user=root ansible_password=0 [server:children] dbserver webserver # 定义子组成员时，需要children关键字 # 和上面一样的配置，这是yaml风格的写法 all: children: server: children: dbserver: hosts: 10.10.110.122 webserver: hosts: 10.10.110.123 yaml格式配置的还是挺复杂的，可读性也差，建议使用ini方式来设置主机清单。 默认组在主机清单中，ansible会自动的生成两个组。 all 所有的主机 ungrouped 包含没有组的主机 尽管这两个组是永远存在的，但也有可能是隐藏的，不会出现group_names之类的组列表中。 主机变量和组变量如果你不想在主机清单中定义主机的变量或者组的变量，ansible还支持在特定的目录中定义变量，变量文件必须以yaml语法定义。 默认在/etc/ansible/host_vars/ 目录中定义主机变量，文件名称以主机名称命名，结束可以用”.yml”,”.yaml”,”.json”三种格式。 cat /etc/ansible/host_vars/db1 ntp_server: acme.example.org database_server: storage.example.org 默认在 /etc/ansible/group_vars/ 目录中定义组变量，文件名称以组名称命名，结束可以用”.yml”,”.yaml”,”.json”三种格式。 cat /etc/ansible/group_vars/dbserver ntp_server: acme.example.org database_server: storage.example.org 变量优先级问题，如果在各个环节都设置了变量，到底哪个变量生效呢？优先顺序，all最低，host最高: all group parent group child group host 使用多个主机清单在命令参数中，使用多个 -i 就可以指定多个主机清单 ansible all -i staging -i production -m ping ansible all -i /tmp/staging -i /tmp/production -m ping 使用 ssh 秘钥连接主机# 生成秘钥 ssh-keygen -t rsa # 发送公钥文件到管理节点 ssh-copy-id -i /root/.ssh/id_rsa.pub -p 22 root@10.10.110.122 # 现在主机清单里不用再填写账号密码了","categories":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/categories/ansible/"}],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/tags/ansible/"},{"name":"自动化运维","slug":"自动化运维","permalink":"https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"}]},{"title":"ansible快速开始(3)","slug":"ansible快速开始(3)","date":"2020-05-09T01:12:59.000Z","updated":"2020-05-20T01:42:37.378Z","comments":true,"path":"2020/05/09/ansible快速开始(3)/","link":"","permalink":"https://www.missf.top/2020/05/09/ansible%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B(3)/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 Ansible快速开始环境信息control os: centos 7.7 x64 ansible version: 2.9.7 python version:2.7.5 任务在Control node上去连接Managed nodes 定义主机清单 定义一个简单的通过ssh认证的主机清单 cat /etc/ansible/hosts 10.10.110.122 ansible_user=root ansible_pass=0 ansible_port=22 主机清单的配置含义: ansible_host 定义管理节点ip地址 ansible_user 连接管理节点的用户 ansible_pass 连接管理节点的用户密码 ansible_port 连接端口号默认是22 执行ansible命令 测试Control node和Managed nodes的连接状态 ansible 10.10.110.122 -m ping # 命令中的含义 -192.168.77.135 用于匹配主机清单中的主机名称 -m ping 指定 ping 模块，用于测试与管理节点的连接状态 如果提示如下错误: 10.10.110.122 | FAILED! =&gt; { “msg”: “Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this. Please add this host’s fingerprint to your known_hosts file to manage this host.”} 这是因为Control node和Managed nodes第一次连接需要先添加指纹信息，可以先使用ssh连接一次，如果机器太多的话，可以在ansible配置文件开启host_key_checking = False cat /etc/ansible/ansible.cfg host_key_checking = False 再次测试连接状态 ansible 10.10.110.122 -m ping 10.10.110.122 | SUCCESS => { \"ansible_facts\": { \"discovered_interpreter_python\": \"/usr/bin/python\" }, \"changed\": false, \"ping\": \"pong\" } # 看到\"ping\": \"pong\"表示连接成功","categories":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/categories/ansible/"}],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/tags/ansible/"},{"name":"自动化运维","slug":"自动化运维","permalink":"https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"}]},{"title":"ansible安装(2)","slug":"ansible安装(2)","date":"2020-05-08T03:12:59.000Z","updated":"2020-05-20T01:42:30.764Z","comments":true,"path":"2020/05/08/ansible安装(2)/","link":"","permalink":"https://www.missf.top/2020/05/08/ansible%E5%AE%89%E8%A3%85(2)/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 安装 Ansible 对管理主机的要求 目前,只要机器上安装了 Python 2（版本2.6或2.7）或Python 3（版本3.5及更高版本）都可以运行Ansible (windows系统不可以做管理主机) 管理主机的系统可以是 Red Hat, Debian, CentOS, macOS, BSD的各种版本。 对节点主机的要求 通常我们使用 ssh 与节点通信，默认使用 sftp. 如果 sftp 不可用，可在 ansible.cfg 配置文件中配置成 scp 的方式. 在节点上也需要安装Python 2（2.6或更高版本）或Python 3（3.5或更高版本） 如果节点启用了selinux, 在使用copy/file/template时需要安装 libselinux-python 包。 在管理节点上安装Ansible# Centos/RHEL wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo yum install -y ansible # Ubuntu sudo apt update sudo apt install software-properties-common sudo apt-add-repository --yes --update ppa:ansible/ansible sudo apt install ansible bash命令行自动补全 在Ansible 2.9之后，就支持了命令行参数补齐功能 # Centos/RHEL yum install -y epel-release yum install -y python-argcomplete 将补全加入环境变量activate-global-python-argcomplete source /etc/profile","categories":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/categories/ansible/"}],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/tags/ansible/"},{"name":"自动化运维","slug":"自动化运维","permalink":"https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"}]},{"title":"ansible介绍(1)","slug":"ansible介绍(1)","date":"2020-05-07T08:12:59.000Z","updated":"2020-05-25T01:57:24.525Z","comments":true,"path":"2020/05/07/ansible介绍(1)/","link":"","permalink":"https://www.missf.top/2020/05/07/ansible%E4%BB%8B%E7%BB%8D(1)/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 Ansible介绍Ansible 是2012年推出的一种通用自动化工具，ansible也是我接触的第一个自动化运维工具，ansible可以帮助我们完成一些批量任务，或者完成一些经常性的重复工作，在服务器集群场景下，ansible是我们运维的利器，Ansible 在2015年时被Redhat公司收购。Ansible是用Python编写的，它使用SSH在不同的机器上执行命令。Ansible是无代理的，这使得入手更容易。您只需要在相关机器上安装SSH和Python。Ansible使用声明式YAML语言”playbook”将一组主机(“hosts”)映射到定义明确的角色。 也许你会说，我写个shell脚本不也一样能实现批量服务器的管理吗？这里我想说的是，ansible支持一些优秀的特性: 支持幂等性 No Agent 支持palybook实现复杂的任务 使用yaml语言 先来说说什么是幂等性，假如我要在目标主机安装Nginx，但是我不确定这个主机是否已经安装了Nginx，当使用ansible完成这个任务时，问题就会变得简单，如果目标主机已经安装Nginx，则ansible不会进行任何操作，如果目标主机未安装Nginx，ansible才会开始工作，ansible是以导向为结果的，我们指定一个状态，ansible就会自动判断，把服务器的状态调整为我们指定的状态，我多次执行，结果都是一样的，这就是幂等性。 使用zabbix监控一百台服务器，这一百台服务器都需要安装zabbix agent，但是ansible是不需要在管理节点上安装客户端代理程序的，因为它基于ssh工作，只要Control node能通过ssh连接到Managed nodes就能通过ansible管理对应的管理节点了，还有就是ansible的控制节点不用单独启动服务，能直接运行命令。 Ansible的目标实现一切自动化 Ansible的应用场景 自动化部署应用 自动化管理配置 自动化的持续交付 自动化的云服务管理 自动化网络设备管理 Ansible的工作原理 安装ansible到管理节点，定义好主机清单，编写好palybook，就能运行ansible批量管理管理节点。步骤如下: 在控制节点上安装ansible 配置主机清单: 将被控节点的连接信息配置到主机清单中 定义playbook: 指定运行主机和执行任务 对节点主机的要求通常我们使用 ssh 与节点通信，默认使用 sftp. 如果 sftp 不可用，可在 ansible.cfg 配置文件中配置成 scp 的方式. 在节点上也需要安装Python 2（2.6或更高版本）或Python 3（3.5或更高版本） Ansible的概念控制节点(Control node)任何装有Ansible的机器可称为 控制节点 。 您可以从任何控制节点运行命令和剧本，并调用/usr/bin/ansible或/usr/bin/ansible-playbook命令，您可以将任何安装了Python的计算机用作控制节点,笔记本电脑,共享桌面和服务器都可以运行Ansible。 但是不能将Windows计算机用作控制节点。您也可以有多个控制节点。 管理节点(Managed nodes)使用Ansible管理的网络设备或服务器可称为 管理节点。 受管节点有时也称为 主机 。 受管节点上是不需要安装Ansible的。 主机清单(Inventory)托管节点的列表。库存文件有时也称为主机文件。您的目录可以为每个托管节点指定诸如IP地址之类的信息。库存还可以组织托管节点，创建和嵌套组，以便于扩展。 模块(Modules)Ansible执行的具体代码。每个模块都有特定的用途，从管理特定类型数据库的用户到管理特定类型网络设备上的VLAN接口。您可以使用任务调用单个模块，也可以调用剧本中的几个不同模块。 任务(Tasks)Ansible的行动单位。tasks包含一组由module组成的任务列表, 您可以使用特别的命令一次性执行单个任务。 剧本(Playbooks)保存了已排序的任务列表，因此可以按此顺序重复运行这些任务。剧本可以包括变量和任务。剧本是用 YAML 编写的，易于阅读、编写、共享和理解。","categories":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/categories/ansible/"}],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/tags/ansible/"},{"name":"自动化运维","slug":"自动化运维","permalink":"https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"}]},{"title":"Python基础day07","slug":"Python基础day07","date":"2020-04-28T11:42:45.000Z","updated":"2020-05-13T02:11:06.919Z","comments":true,"path":"2020/04/28/Python基础day07/","link":"","permalink":"https://www.missf.top/2020/04/28/Python%E5%9F%BA%E7%A1%80day07/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 闭包一般情况下，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。 # 闭包 def outer(): a = 6 def inner(): b = 8 print(a) print(b) return inner if __name__ == '__main__': res = outer() res() 可迭代对象我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for…in…中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。那么，在这个迭代过程中就应该有一个“记录员”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“记录员”称为迭代器(Iterator)。可迭代对象的本质就是可以向我们提供一个这样的“记录员”即迭代器帮助我们对其进行迭代遍历使用 转化成迭代器# 内部含有\"__iter__\"并且含有\"__next__\"方法的就是迭代器，遵循迭代器协议 s2 = \"cdfv\" ol = s2.__iter__() # 可迭代对象通过__iter__或者iter()方法转化成迭代器 # print(ol) print(ol.__next__()) # 一个next对应一个值，一一对应 print(ol.__next__()) print(ol.__next__()) print(ol.__next__()) c d f v 判断对象是否为迭代器# 判断一个对象是否是可迭代对象，方法一 s1 = 'asdf' jo = iter(s1) # 将可迭代对象转化成迭代器 print(jo) print(\"__iter__\" in dir(jo) and \"__next__\" in dir(jo)) # 判断是否同时含有这两个方法 &lt;str_iterator object at 0x000000FE3E7E0898> True # 判断一个对象是否是可迭代对象，方法二 from collections.abc import Iterable,Iterator # 导入Iterable,Iterator方法 so = 'asdf' print(isinstance(so,Iterable)) # 判断对象是否是可迭代 print(isinstance(so,Iterator)) # 判断对象是否是迭代器 生成器生成器本质上是迭代器，生成器是自己用Python代码写的迭代器，平时我们用iter将一个迭代对象转化成迭代器，是调用iter方法底层的C代码实现的。 # 将一个函数变成生成器函数 def fun(): print(123) print(456) yield 789 fun() s = fun() # 将函数赋值使用next打印，不能使用fun()调用函数进行打印 print(next(s)) # 一个next去取一个yield的值，之所以打印三个值是函数内部打印的，next(s)只打印了789 123 456 789 生成器的send方法一个send对应一个yield，但是如果send中有传值，就会将这个值发送给上一个yield def func(): # 1.定义函数 a = yield 123 print(a) yield '有志青年' yield '好好学习' yield '天天向上' genor = func() # 2.函数赋值 print(genor.send(None)) # 3.取一个yield，打印123 print(genor.send('Alex')) # 4.取下一个yield，并将Alex赋值给上一个yield，先执行的a = Alex;print(a),再打印有志青年 生成器的yield fromdef func(): lst = ['努力','奋斗','向上','乐观'] yield lst # 将列表当成一个整体 genor = func() print(next(genor)) ['努力', '奋斗', '向上', '乐观'] def func(): lst = ['努力','奋斗','向上','乐观'] yield from lst # 将列表中的每个元素逐个输出 genor = func() # print(next(genor)) for i in genor: print(i) 努力 奋斗 向上 乐观 列表所有值+1info = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] for index,i in enumerate(info): # info[0] = 0 + 1 info[index] += 1 print(info) 列表推导式和生成器表达式列表推导式列表推导式就是用一行代码构建一个简单或者复杂的列表，减少代码量的同时又可以装逼 print([i for i in range(1,26)]) # 构建一个1 - 25的列表 print(['python%s期' % i for i in range(1,26)]) # 构建一个稍微复杂的列表 print([i for i in range(1,31) if i % 3 == 0]) # 构建一个30以内所有能被3整除的数 print([i ** 2 for i in range(1,31) if i % 3 == 0]) # 所有能被3整除的数的平方 print(['青年%s号' % i for i in range(1,31,2)]) print(['*' if i % 3 == 0 else i for i in range(1,21)]) # 如果i能被3整除就为*，否则从range里面取值 # 将列表中至少含有两个e的字符串放到一个列表中 names = [['Tefe','oIred','Edvl','fgte','vfeke','vfd'],['dcvr','vfer','vfree']] ll = [] for i in names: for name in i: if name.count('e') >= 2: ll.append(name) print(ll) print([name for i in names for name in i if name.count('e') >= 2]) # 列表推导式能一行代码完成 生成器表达式生成器表达式与列表推导式几乎一模一样，就是[]换成了(),但是生成器在内存方面更占优势，列表推导式是一次性将数据加载到内存，而生成器则是取一点生成一点，更加节省内存 genor = ('python%s期' % i for i in range(1,26)) print(genor) for i in genor: print(i) 字典推导式print({i:None for i in range(1,11)}) # 值为None，key从range(1,11)取 am = {'s':'cd','wf':10,'r5':'km'} print({value:key for key,value in am.items()}) # 将字典的键值对换 集合推导式lp = {12,-9,75} print({i ** 2 for i in lp}) 匿名函数# 匿名函数 def func(x,y): return x + y print(func(2,78)) # 针对这种自有返回值的函数，可以写成简化的匿名函数 func = lambda x,y:x * y # 只能写成一行 print(func(3,56)) suf = lambda x,y,z:x * y * z print(suf(45,4,2))","categories":[{"name":"Python","slug":"Python","permalink":"https://www.missf.top/categories/Python/"}],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"Python基础day06","slug":"Python基础day06","date":"2020-04-27T05:45:29.000Z","updated":"2020-05-13T02:10:53.177Z","comments":true,"path":"2020/04/27/Python基础day06/","link":"","permalink":"https://www.missf.top/2020/04/27/Python%E5%9F%BA%E7%A1%80day06/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 ​ 函数思考:不能使用len方法去统计一个字符串的长度 s = 'cdvfdcmkcd' count = 0 for i in s: count += 1 print(count) d = [1,2,3,4,5,] count = 0 for i in d: count += 1 print(count) 可以实现，但如果我在多处使用就会有重复性的代码。初学者一定要培养一种对代码完美的偏执，其实这也是面向过程编程的缺点:代码重复性较多，代码的可读性差。 函数初识一个函数就是封装一个功能 d = [1,2,3,4,5,] def my_len(): # 定义函数名my_len count = 0 for i in d: count += 1 print(count) my_len() # 调用函数，不调用不会执行代码 函数返回值函数中遇到return直接结束，给函数的调用者返回一个值，不写默认为None def date(): print('我叫荒原饮露') print('我在学习Python') print('我在让自己变得更加优秀') return # 直接结束函数 print('我以后要...') # return后面的不会输出 date() print('加油') 我叫荒原饮露 我在学习Python 我在让自己变得更加优秀 加油 # 如果不写返回值，默认返回一个None df = date() print(df) 我叫荒原饮露 我在学习Python 我在让自己变得更加优秀 None # 返回多个值 def date(): return 'faker','doinb','jacklove' skt,fpx,ig = date() print(skt) print(fpx) print(ig) faker doinb jacklove 函数的参数def date(a,b): # 函数的定义:形式参数 print('faker') print(a,b) x = 2 y = 3 date(x,y) # 函数的执行者:实际参数,将实参x,y传递给形参a,b faker 2 3 位置参数def date(positon,sex): # 实参和形参的位置必须要对应 print('%s附近的%s' % (positon,sex)) date('深圳','女性') # 调用函数时，传入两个参数 深圳附近的女性 键值对参数def date(tq,name,dc): # 形式参数与实际参数的键对应，位置不需对应 print('我叫%s,我喜欢的季节是%s,我学习%s已经一个月了' % (name,tq,dc)) date(name=\"小马哥\",tq=\"秋季\",dc=\"Python\") # 以键值对的方式传入实际参数 混合参数# 注意:位置参数必须在关键字参数的前面，不然会报错 def date(cs,home,tq,name,dc): print('我叫%s,我喜欢的季节是%s,我学习%s已经一个月了' % (name,tq,dc)) print('%s赚钱%s花,一分别想带回%s' % (cs,cs,home)) date('深圳','家',name=\"小马哥\",tq=\"秋季\",dc=\"Python\") 默认参数def date(soft,posi,sex=\"女\"): # 默认参数需要放置位置参数的后面 print('打开%s软件,搜索%s附近的%s' % (soft,posi,sex)) date('约会',posi='深圳南山区') 万能参数# 万能参数：两个形式参数，接收所有的位置参数，关键字参数 def date(*args,**kwargs): print(args) # 位置参数 print(kwargs) # 关键字参数 date('南山区','18',posi='深圳',sex='laddyboy') ('南山区', '18') # 将位置参数返回为一个元组 {'posi': '深圳', 'sex': 'laddyboy'} # 将关键字参数返回为一个字典 *的魔性用法# *的魔性用法 def fun(*args,**kwargs): print(args,kwargs) fun(*(1,2,'alex'),*('mk,j'),**{'ed':'12'},**{'cds':'lkj'}) # 在调用函数时*是将多个元组的元素整合成一个元组，**是将多个字典整合成一个字典 (1, 2, 'alex', 'm', 'k', ',', 'j') {'ed': '12', 'cds': 'lkj'} 形参的顺序问题def fun(a,b,*args,sex='女',**kwargs): print(a) print(b) print(args) print(sex) print(kwargs) fun(1,2,3,'oi','cd',sex=\"男\",name=\"alex\") 1 2 男 (3, 'oi', 'cd') {'name': 'alex'} # 按照位置参数 *args 默认参数 **kwargs的顺序 判断数值大小def sum(a,b): # 定义两个形式参数，用来接收实际参数 if a > b: return a else: return b print(sum(1,5)) 三元运算符dc = \"A\" if 6 > 3 else \"B\" # 如果条件成立dc就等于A，否则等于B print(dc) A def max(a,b): return a if a > b else b # 如果a大于b，就return a否则return b df = max(150,48) print(df) 150 函数的命名空间# 函数的命名空间 name = 'alex' age = '23' def fun(): sex = '女' print(sex) fun() # 变量赋值时会在内存中开辟一个名称空间用来存放变量名和对应的值 # 定义函数时会在内存中开辟一个函数内存地址，但不会存放函数体的内容 # 但函数调用时会再开辟一个临时名称空间，存放函数体的内容，并且临时名称空间随着函数的调用结束而消失 在python解释器开始执行之后, 就会在内存中开辟一个空间, 每当遇到一个变量的时候, 就把变量名和值之间的关系记录下来, 但是当遇到函数定义的时候, 解释器只是把函数名读入内存, 表示这个函数存在了, 至于函数内部的变量和逻辑, 解释器是不关心的. 也就是说一开始的时候函数只是加载进来, 仅此而已, 只有当函数被调用和访问的时候, 解释器才会根据函数内部声明的变量来进行开辟变量的内部空间. 随着函数执行完毕, 这些函数内部变量占用的空间也会随着函数执行完毕而被清空 我们给这个存放名字与值的关系的空间起了一个名字——命名空间 全局名称空间:存放的是py文件中变量与值的对应关系 局部名称空间:存放的是函数体里面的变量与值的对应关系 内置名称空间:内置函数，关键字等 加载到内存的顺序内置名称空间 —&gt; 全局名称空间 —&gt; 局部名称空间(当函数执行时) 取值顺序# 取值顺序，就近原则 # 局部名称空间 ---> 全局名称空间 name = 'mwj' def fun(): name = 'lok' print(name) fun() lok globals和localsname = 'li' def fun(): name = 'alex' def inner(): name = 'qw' print(globals()) # 返回一个字典：包含全局作用域的所有内容 print(locals()) # 返回一个字典：当前作用域的所有内容 inner() fun() {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000009D39BA5860>, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)>, '__file__': 'C:/Python3.7/Python_Scripts/t5.py', '__cached__': None, 'name': 'li', 'fun': &lt;function fun at 0x0000009D39B5C1E0>} {'name': 'qw'} 高阶函数# 高阶函数 def fun1(): print(111) def fun2(): print(222) fun1() def fun3(): print(333) fun2() print(555) fun3() print(666) # 555 333 222 111 666,代码从上至下执行，函数调用函数 def fun(): print(1) def inner(): print(2) def inner2(): print(3) print(4) inner() print(5) fun() # 1 4 2 5,从上至下执行，函数定义之后不调用则不会被输出 global nonlocal# global nonlocal def fun(): global name name = \"alex\" fun() print(name) # 可以在局部声明一个全局变量，如果不声明为全局变量，print(name)不输出alex # 原本内层函数不能对外层函数的变量只能引用不能修改 def war(): name = \"alex\" def inner(): nonlocal name # 使用nonlocal 可以使内层函数对外层函数进行修改 name += \"b\" print(name) inner() war() 局部作用域不能引用全局作用域变量count = 1 def fun(): count += 1 # 执行报错 print(count) # 可以打印 fun() # 执行会报错，是因为局部作用域不能对全局作用域的变量只能引用不能修改 # 通过global在局部作用域声明，可以进行修改 count = 1 def fun(): global count count += 1 print(count) fun() 函数名作为函数的参数def fun(x): print(x) print(\"in fun\") def fun1(): print(\"in fun1\") fun(fun1) # 调用fun函数并且将fun1作为参数，输出的是fun1函数的内存地址，fun1函数被作为参数时是一个变量 &lt;function fun1 at 0x00000055024C9620> in fun 函数名可以当做函数的返回值# 函数名可以当做函数的返回值 def fun(x): print(\"in fun\") return x def fun1(): print(\"in fun1\") re = fun(fun1) print(re) in fun &lt;function fun1 at 0x00000030B6739620>","categories":[{"name":"Python","slug":"Python","permalink":"https://www.missf.top/categories/Python/"}],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"Python基础day05","slug":"Python基础day05","date":"2020-04-26T05:21:29.000Z","updated":"2020-05-13T06:32:49.285Z","comments":true,"path":"2020/04/26/Python基础day05/","link":"","permalink":"https://www.missf.top/2020/04/26/Python%E5%9F%BA%E7%A1%80day05/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 Python文件操作全部读取file1 = open(r\"d:\\java_restart2.sh\",encoding=\"utf-8\",mode=\"r\") # 文件路径，文件编码，操作方式 content = file1.read() # 将读取到文件的内容复制给content print(content) # 打印文件的内容 读取n个字符file1 = open(r\"d:\\java_restart2.sh\",encoding=\"utf-8\",mode=\"r\") content = file1.read(11) print(content) 按行读取file1 = open(r\"d:\\java_restart2.sh\",encoding=\"utf-8\",mode=\"r\") content = file1.readline() print(content) 返回列表file1 = open(r\"d:\\java_restart2.sh\",encoding=\"utf-8\",mode=\"r\") content = file1.readlines() print(content) # 返回一个列表，用原文件的每一行作为列表的每一个元素 for循环读取# 读取大文件时逐行读取防止内存崩溃，涉及到迭代器 file1 = open(r\"d:\\java_restart2.sh\",encoding=\"utf-8\",mode=\"r\") for line in file1: print(line.strip()) file1.close() 读取文件的方式 read() 全部读取 read(n) 读取n个字符 readline() 按行读取 readlines() 返回一个列表，列表的元素是原文件的每一行数据 for循环读取 读取大文件时逐行读取防止内存崩溃 写入文件的方式写入空文件f1 = open(\"file1\",encoding=\"utf-8\",mode=\"w\") # 打开文件句柄 content = f1.write(\"我也不知道写什么啊\") # 写入操作 f1.close() # 关闭文件句柄 # 如果写入文件不存在，open()将自动创建它 # 如果文件已存在已有内容，会清空再写入 写入多行f1 = open(\"file1\",encoding=\"utf-8\",mode=\"w\") f1.write(\"我也不知道写什么啊\") f1.write(\"我也不知道写什么啊\") f1.write(\"我也不知道写什么啊\") f1.close() # 加换行符 f1 = open(\"file1\",encoding=\"utf-8\",mode=\"w\") f1.write(\"我也不知道写什么啊\\n\") f1.write(\"我也不知道写什么啊\\n\") f1.close() # 在打开一个文件句柄后，可以重新写入多次而不被清空，只有在文件句柄被关闭后，下一次写入才会被清空 追加文件内容# 没有文件创建文件追加内容，有此文件则在原文件的末尾追加新内容 f1 = open(\"file1\",encoding=\"utf-8\",mode=\"a\") f1.write(\"我也不知道写什么啊\\n\") f1.write(\"我也不知道写什么啊\\n\") f1.close() 读写非文字类文件# 音视频或者图片类型的文件，以bytes读取和写入 f3 = open(\"tr.jpg\",mode=\"rb\") # 用rb模式打开一张图片 content = f3.read() # 以bytes读取原图片数据 f4 = open(\"ting.jpg\",mode=\"wb\") f4.write(content) # 将数据写到一个新文件图片 f3.close() f4.close() 读写模式先读后写f1 = open(\"file1\",encoding=\"utf-8\",mode=\"r+\") content = f1.read() # 读取内容 print(content) f1.write(\"alex\") # 写入内容，这里是以追加的方式写入，不会清空文件内容 f1.close() 调整光标写入f1 = open(\"file1\",encoding=\"utf-8\",mode=\"r+\") f1.seek(0) # 将光标调整到最前 f1.write(\"jkl\") # 在最前面写入jkl，会将原来前面的三个字符替换掉 f1.close() f1.seek(0,2) # 将光标调到最后面 f1.write(\"ooo\") # 在下一行写入ooo f1.close() 强制保存f1 = open(\"file1\",encoding=\"utf-8\",mode=\"r+\") f1.write(\"TES.123\") f1.flush() #强制保存，相当于Crtl + s f1.close() 判断文件句柄是否可读可写# readable writeable f2 = open(\"file\",encoding=\"utf-8\",mode=\"w\") # 写入模式 print(f2.read()) # 读取会报错 print(f2.readable()) # 由于是写入模式不能读 False print(f2.writable()) True 按照字节调整光标位置# tell seek f1 = open(\"file2\",encoding=\"utf-8\") ret = f1.read() # 读取文件，光标会移动到下一行 print(f1.tell()) # 获取当前文件指针的位置 f1.seek(3) # 移动指针到指定的位置 print(f1.read()) # 从指针位置往后读取 f1.close() 截取文件# truncate 只能在可写的模式下截取原文件，只能从头截取 f1 = open(\"file1\",encoding=\"utf-8\",mode=\"r+\") ret = f1.truncate(12) # 截取文件的前12个字节,文件其他内容会被清空，只保留截取到的字节 print(f1.read()) f1.close() 中华人民 # utf-8编码下，一个中文字符等于三个字节，如果是截取4个字节会报错 with open操作方式# 1.自动关闭文件句柄 with open(\"file4\",encoding=\"utf-8\") as f1: content = f1.read() print(content) # 2.同一语句可操作创建多个文件句柄 with open(\"file1\",encoding=\"utf-8\") as f1,open(\"file2\",encoding=\"utf-8\",mode=\"w\") as f2: print(f1.read()) # 对file1进行读取操作 f2.write(\"777\") # 对file2进行写入操作 # 3.with open 可能引起IO错误的操作 with open(\"file1\",encoding=\"utf-8\") as f1: f1.read() # 打开文件句柄f1进行读取操作，文件句柄自动关闭 with open(\"file1\",encoding=\"utf-8\",mode=\"w\") as f2: f1.write(\"777\") # 又打开文件句柄f2进行写操作，如果文件句柄f1没有及时关闭又打开了f2文件句柄程序就会报错 关于文件的修改文件的数据都是存放在硬盘上的，因此只存在覆盖，不存在修改一说，我们平时看到的修改文件，都是模拟出来的效果，修改file5文件中的Alex字符为Sb，并且将原文件复制为新文件file.bak，删除原文件，修改新文件的名字为file5，修改速度非常快，根本看不到生成的file5.bak文件，具体的说有两种实现方式 将硬盘存放的该文件的内容全部加载到内存，在内存中是可以修改的，修改完毕后，再由内存覆盖到硬盘 # file5文件内容 Alex是个屌丝，即使Alex有特斯拉也还是屌丝 你们真逗，Alex再牛逼，也掩饰不了资深屌丝的气息 import os with open(\"file5\",encoding=\"utf-8\") as f1,open(\"file5.bak\",encoding=\"utf-8\",mode=\"w\") as f2: # 打开两个文件句柄，f1只读，f2可写 old_content = f1.read() # 将f1内容赋值给old_content new_content = old_content.replace(\"Alex\",\"Sb\") # 将Alex替换为Sb的数据赋值给new_content f2.write(new_content) # 将新数据写入f2 os.remove(\"file5\") # 删除文件file5 os.rename(\"file5.bak\",\"file5\") # 将新文件命名为file5 # 这样有一个不好的地方，old_content = f1.read()这里是一次性将文件加载到内存中的 将硬盘存放的该文件的内容一行一行地读入内存，修改完毕就写入新文件，最后用新文件覆盖源文件 import os with open(\"file5\",encoding=\"utf-8\") as f1,open(\"file5.bak\",encoding=\"utf-8\",mode=\"w\") as f2: for line in f1: new_line = line.replace(\"Sb\",\"Alex\") # 将一行的数据替换完成赋值给新的一行 f2.write(new_line) # 逐行写入 os.remove(\"file5\") os.rename(\"file5.bak\",\"file5\") # 不会将文件一次加载到内存","categories":[{"name":"Python","slug":"Python","permalink":"https://www.missf.top/categories/Python/"}],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"Python基础day04","slug":"Python基础day04","date":"2020-04-25T10:21:29.000Z","updated":"2020-05-13T02:10:35.333Z","comments":true,"path":"2020/04/25/Python基础day04/","link":"","permalink":"https://www.missf.top/2020/04/25/Python%E5%9F%BA%E7%A1%80day04/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 基础数据类型补充判断数值是否相等top1 = 'alex' top2 = 'alex' print(top1 == top2) True 内存地址# 打印mem会先找到mem的内存地址，然后再找到内存地址指向的数据 mem = 'mk' print(id(mem)) 170332332864 判断内存地址是否相同f = [1,2,3] g = [1,2,3] print(f == g) # True print(f is g) # False # 判断的是两个对象的内存地址是否相同,虽然f的值等于g，但是内存地址却不是指向同一个 数据类型 可变/不可变 整型 不可变 字符串 不可变 元组 不可变 列表 可变 集合 可变 字典 可变 代码块# 代码块 代码全都是基于代码块去运行的，一个文件就是一个代码块，不同的文件就是不同的代码块 # 代码块的缓存机制 Python在执行同一个代码块的初始化对象的命令时，会检查其值是否已经存在， 如果存在，会将其重用，如果有同样的记录那么它会重复使用这个字典中的值， 但是要注意的是，只有在同一个代码块下，才会实现这个缓存机制 满足此机制的数据类型:int str bool 优点：节省内存，提升性能 小数据池Python自动将-5~256的整数进行了缓存，当你将这些整数赋值给变量时，并不会重新创建对象，而是使用已经创建好的缓存对象。python会将一定规则的字符串在字符串驻留池中，创建一份，当你将这些字符串赋值给变量时，并不会重新创建对象， 而是使用在字符串驻留池中创建好的对象。 小数据(又称驻留机制、驻存机制) 能够应用于不同的代码块 适应的数据类型:int str bool int:-5 ~ 256 str:一定条件下的str满足小数据池 bool:全部 优点:节省内存 提升性能 编码进阶不同的编码之间不能互相识别（会出现报错或者乱码），文字通过网络传输，或者硬盘存储不能使用Unicode编码方式。 ASCII早期的密码本，英文字母，数字，特殊字符 8位(bit) == 1byte 在ascll码中,8位bit表示一个字节表示一个字符 hello = 01101000 01100101 01100111 0110011 01100101 Unicode万国码包含全世界所有的文字 32位bit表示4个字节表示一个字符 a:10001000 00010010 00100000 00010010 中:00000000 10010010 00000000 10010010 utf-8最少用8位表示一个字符 a:01000010,8位bit表示一个字节表示一个字符 欧洲文字:00000010 00100000 16位bit表示两个字节表示一个字符 中国文字:00000010 00000010 00000010 24位bit表示三个字节表示一个字符 gbk最包含英文和自己国家的语言 a:00000010 8位bit表示一个字节表示一个字符 中:00000010 0000001016 16位bit表示两个字节表示一个字符 在Python3x环境下，唯独str类型的内部编码方式是Unicode， 所以Python3x中的字符串不能用于直接的网络传输和文件存储 补充一个数据类型：bytes类型，与str类型是海尔兄弟， bytes内部编码方式为非Unicode，bytes类型能用于网络传输和文件存储，还拥有str的其他特性 但是bytes中文是16进制表示，看不懂，所以常用的还是str类型 bytes类型b1 = 'alex' b2 = b'alex' print(b1,type(b1)) alex &lt;class 'str'> print(b2,type(b2)) b'alex' &lt;class 'bytes'> 数据类型转换# str ---> gbk s0 = '荒原饮露' b1 = s0.encode('gbk') # 编码，将字符串转换为gbk print(b1) b'\\xbb\\xc4\\xd4\\xad\\xd2\\xfb\\xc2\\xb6' # 可以看到 一个中文两个字节 y2 = b1.decode('gbk') # 解码 print(y2) 荒原饮露 # str ---> utf-8 s2 = '努力奋斗' b2 = s2.encode('utf-8') print(b2) b'\\xe5\\x8a\\xaa\\xe5\\x8a\\x9b\\xe5\\xa5\\x8b\\xe6\\x96\\x97' # 一个中文三个字节 b3 = b2.decode('utf-8') print(b3) 努力奋斗 # gbk ---> utf-8 si = '编码' s1 = si.encode('gbk') print(s1) b'\\xb1\\xe0\\xc2\\xeb' # 得到gbk编码的bytes类型 1 = s1.decode('gbk') # 解码再加密 b2 = b1.encode('utf-8') print(b2) b'\\xe7\\xbc\\x96\\xe7\\xa0\\x81' # utf-8编码的bytes类型 深浅拷贝# 赋值运算 jk = [1,2,3] yu = jk # yu变量和jk变量都指向同一个内存地址 yu.append(789) # 修改这个列表的时候，两个变量的值都被修改 print(jk,yu) [1, 2, 3, 789] [1, 2, 3, 789] 浅拷贝lo = ['de',15,['er',4,2]] ko = lo.copy() # ko拷贝lo的列表，得到一样的数据，但是浅copy只会拷贝内存中的第一层数据 lo.append('lp') # lo往列表追加一个元素lp print(id(lo),lo) print(id(ko),ko) 205292790408 ['de', 15, ['er', 4, 2], 'lp'] 205293284808 ['de', 15, ['er', 4, 2]] # 可以看到两个列表的内存地址都是不一样的，往lo列表追加lp元素，ko列表是没有跟随lo列表追加lp元素的 lo[2].append('io') # 往lo列表的小列表里面追加io元素 print(lo,ko) ['de', 15, ['er', 4, 2, 'io'], 'lp'] ['de', 15, ['er', 4, 2, 'io']] # 可以看到，lo和ko列表的小列表都被追加了io元素，简而言之，列表里面的小列表里面的元素是共用的。ko拷贝lo的列表，只会拷贝lo外层列表，而不会拷贝lo的内层列表，lo外层列表发生改变ko不会跟随，但是lo内层列表发生改变ko会跟随，复制一个列表时，lo = ['de',15,['er',4,2]]，de和15元素的地址发生改变，['er',4,2]小列表的元素还是指向原来的地址 # 全切片是浅copy ki = ['cf',['ijni','678',15],90] ji = ki[:] ki[1].append('mk') print(ki,ji) ['cf', ['ijni', '678', 15, 'mk'], 90] ['cf', ['ijni', '678', 15, 'mk'], 90] 深拷贝# 深copy会在内存中对原列表以及列表里面的可变的数据类型重新创建一份，而列表中不可变得数据类型还是沿用原来的 import copy lo = ['fr','ty',['rt','km',12],45] ko = copy.deepcopy(lo) print(lo,ko) lo[2].append('test') print(lo,ko) ['fr', 'ty', ['rt', 'km', 12], 45] ['fr', 'ty', ['rt', 'km', 12], 45] ['fr', 'ty', ['rt', 'km', 12, 'test'], 45] ['fr', 'ty', ['rt', 'km', 12], 45] # 往lo小列表追加元素，ko的小列表的元素不是指向原来的地址，ko的小列表元素没有被改 深拷贝和浅拷贝的区别# 以下所有的内容都是基于内存地址来说的。 # 可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型 # 不可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型 # 总结：不可变数据类型更改后地址发生改变，可变数据类型更改地址不发生改变 深拷贝和浅拷贝的需要注意的点# 在浅拷贝时，拷贝出来的新对象的地址和原对象是不一样的，但是新对象里面的可变元素（如列表）的地址和原对象里的可变元素的地址是相同的，也就是说浅拷贝它拷贝的是浅层次的数据结构（不可变元素），对象里的可变元素作为深层次的数据结构并没有被拷贝到新地址里面去，而是和原对象里的可变元素指向同一个地址，所以在新对象或原对象里对这个可变元素做修改时，两个对象是同时改变的，但是深拷贝不会这样，这个是浅拷贝相对于深拷贝最根本的区别","categories":[{"name":"Python","slug":"Python","permalink":"https://www.missf.top/categories/Python/"}],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"Python基础day03","slug":"Python基础day03","date":"2020-04-24T10:14:29.000Z","updated":"2020-05-13T02:10:25.517Z","comments":true,"path":"2020/04/24/Python基础day03/","link":"","permalink":"https://www.missf.top/2020/04/24/Python%E5%9F%BA%E7%A1%80day03/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 验证码# 代入验证码项目，输入姓名密码之后有空格也不会报错 username = input(\"请输入姓名:\").strip() passworrd = input(\"请输入密码:\").strip() code = 'AeTrd'.upper() your_code = input(\"请输入验证码:\").upper() if your_code == code: if username == 'alex' and passworrd == 'sb': print('登录成功') else: print('用户名或者密码错误') else: print('验证码不正确') 将一行字符串竖着打印# while循环 t = '荒原饮露cchkskhdiqwuey' s = len(t) # 先统计字符串的长度 # print(s) index = 0 # 设定一个索引值 while index &lt; s: # 如果索引值小于变量s则进入循环 print(t[index]) # 从0开始打印字符串的索引，直到index&lt;s不成立退出循环 index += 1 # index每次自增1 # for循环 t = '荒原饮露cchkskhdiqwuey' for i in t: print(i) # 还可以进行拼接，print(i+'lo') 猜数字# 猜数字,只有猜对了才会退出 num = 66 while True: cai = int(input(\"请输入你要猜的数字:\")) if cai > num: print(\"猜的数字大了！\") elif cai &lt; num: print(\"猜的数字小了\") else: print(\"猜对了！\") break # 三次猜测不对就退出 num = 66 i = 0 while i &lt; 3: j = int(input(\"请输入数字:\")) if j > num: print(\"数字大了!\") elif j &lt; num: print(\"数字小了!\") else: print(\"猜对了!\") break i += 1 计算器# 方式一 content = input(\"请输入内容:\").strip() # 将输入的字符串，去掉前后两端的空格 plus_index = content.find('+') # 找到加号位置，并返回加号的索引数 num1 = content[:plus_index].strip() # 取加号前面的区域并且去掉空格 num2 = content[plus_index+1:] # 取加号后面的区域也去掉空格 sum3 = int(num1) + int(num2) # 将取到的无空格值相加 print(sum3) # 方式二 content = input(\"请输入内容:\").strip() # 将输入的字符串，进行去前后两端的空格 li = content.split('+') # 将字符串转换为列表，指定以+进行分割 print(li) ['15 ', ' 16'] # 将得到的元素相加 sum1 = int(li[0]) + int(li[1]) # 将字符串类型的两个元素强制转换为int，会去掉空格 print(sum1) 列表为什么需要列表 字符串如果长度过于长取值时会很费劲，取出来的数据是字符串类型，使用不方便 字符串有长度限制(只能存储少量的字符串类型的数据) 基于以上原因Python提供了一个另外的数据类型:容器类数据类型 什么是列表 列表能存储大量的、不同的数据类型，列表存放什么数据类型，取出来之后还是什么数据类型 列表可以存放的数据类型:数字，字符串，布尔值，小列表，元组，字典，集合，对象 32位Python的限制是 536870912 64位Python的限制是 1152921504606846975 列表是有序的、有索引值的、可切片、方便取值 列表取值# 取第一个元素 sl = ['alex','荒原','154'] sl1 = print(sl[0],type(sl)) # 输出索引和索引类型 print(sl1) # alex &lt;class 'list'> 定义列表时是字符串 sl = ['alex','荒原','154'] sl1 = print(sl[0:2]) # 0 1 2，顾首不顾尾，只取前两个元素 print(sl1) # ['alex', '荒原'] # 反向取值 sl = ['alex','荒原','154'] sl1 = print(sl[-1:-4:-1]) print(sl1) # ['154', '荒原', 'alex'] 列表的增加sl.append(\"abc\") # 增加abc元素 print(sl) sl.append(True) # 增加布尔值 print(sl) name_list = [] # 空列表 while True: # 如果不执行break,则一直执行while True username = input(\"请输入姓名:\").strip() # 用户输入字符串 if username.upper() == 'Q':break # 如果输入是q，无论大小写都执行break name_list.append(username) # 判断到不是q则增加到列表 print(name_list) # 插入 lk = ['mjk','ctr','tpo',100] lk.insert(1,'yu') # 在索引1的位置，插入'yu',索引从零开始 print(lk) ['mjk', 'yu', 'ctr', 'tpo', 100] # 迭代者追加 lk = ['mjk','ctr','tpo',100] lk.extend('abc') print(lk) ['mjk', 'ctr', 'tpo', 100, 'a', 'b', 'c'] lk = ['mjk','ctr','tpo',100] lk.extend(['asd','cvf','cdd']) print(lk) ['mjk', 'ctr', 'tpo', 100, 'asd', 'cvf', 'cdd'] 列表的删除# 按照索引去删除 lk = ['mjk','ctr','tpo',100] ret = lk.pop(1) # 删除索引为1的元素 print(lk) ['mjk', 'tpo', 100] # 按照元素去删除 lk = ['mjk','ctr','tpo',100] lk.remove('tpo') # 指定删除那个 print(lk) ['mjk','ctr',100]. # 清空列表 lk = ['mjk','ctr','tpo',100] lk.clear() print(lk) [] # del 1.按照索引删除单个元素 lk = ['mjk','ctr','tpo',100] del lk[0] print(lk) ['ctr','tpo',100] 2.按照切片删除一部分元素 lk = ['mjk','ctr','tpo',100] del lk[:2] print(lk) ['tpo', 100] 3.按照切片（步长）删除一部分元素 lk = ['mjk','ctr','tpo',100,'cff','ioo','tyy'] s = lk[:5:2] # 取区域为0-5，步长为2 print(s) ['mjk', 'tpo', 'cff'] del lk[:5:2] # 取区域为0-5，步长为2，这些元素全部删除 print(lk) ['ctr', 100, 'ioo', 'tyy'] 列表的修改# 利用索引修改 lk = ['mjk','ctr','tpo',100,'cff','ioo','tyy'] lk[0] = 'we' # 利用索引定义要修改的元素的位置 print(lk) # 利用切片修改 lk = ['mjk','ctr','tpo',100,'cff','ioo','tyy'] lk[:2] = 'op' print(lk) ['o', 'p', 'tpo', 100, 'cff', 'ioo', 'tyy'] # 利用切片+步长修改 lk = ['mjk','ctr','tpo',100,'cff','ioo','tyy'] lk[:4:2] = 'op' # 注意步长的个数和修改后的字符串个数 print(lk) ['o', 'ctr', 'p', 100, 'cff', 'ioo', 'tyy'] 列表的查询# 按照索引查询 lk = ['mjk','ctr','tpo',100,'cff','ioo','tyy'] print(lk[1]) # 打印一个 # for 循环 for i in lk: print(i) # 输出列表所有元素 列表的其他操作# 计算列表元素的总个数 lk = ['mjk','ctr','tpo',100,'cff','ioo','tyy','cff'] print(len(lk)) 8 # 计算某个元素出现的个数 print(lk.count('cff')) 2 # 通过元素找索引，找到第一个返回，找不到就报错 print(lk.index('ctr')) 1 # 从小到大排列 fg = [2,9,4,6,7,1,8] fg.sort() print(fg) [1, 2, 4, 6, 7, 8, 9] # 从大到小排列 fg.sort(reverse=True) print(fg) [9, 8, 7, 6, 4, 2, 1] # 列表翻转 fg = [2,9,4,6,7,1,8] fg.reverse() print(fg) # 英文字符排序，按照元素首字母的ASCLL码的大小排序 fg = ['dfg','arfd','wer','fgv'] fg.sort() print(fg) ['arfd', 'dfg', 'fgv', 'wer'] 列表的嵌套ll = [1,2,'taibai',[1,'alex',3,]] # 列表里面有嵌套的小列表 # 将taibai改成大写 ll[2] = ll[2].upper() print(ll) # 往小列表追加元素'老男孩教育' ll[3] = ll.append('老男孩教育') print(ll) # 将alex改成alexsb ll[3][1] = ll[3][1] + 'sb' print(ll) # 打印嵌套列表元素 lj = ['wedi','lko','cjd',['dkd','oto'],'top'] for i in lj: if type(i) == list: # 加个判断如果某个元素类型为list，则再循环一遍，打印出来 for o in i: print(o) else: # 否则正常打印 print(i) 元组用来存放一些重要的信息，放在列表中不安全，需要一个容器类的数据类型，比如：个人信息，密码等。元组不能修改，但是元组里面的列表可以修改。 tu = (1,'alex',True,[1,2,3]) # 定义一个元组 tu[-1][2] = '12' # 往列表里面追加元素 print(tu) (1, 'alex', True, [1, 2, '12']) # 存放一些重要数据时，需要用元组存放 字典列表如果存储大量的数据，查询速度相对较慢，因为列表存储的数据一般没有什么关联性。针对这个问题，Python提供了一个基础数据类型：字典(dict) 回顾数据类型 分类 数据类型 容器型数据类型 list，tuple，dict，set 非容器型数据类型 str，bool，int 可变数据类型（不可哈希） list，dict，set 不可变数据类型（可哈希） str，bool，int，tuple 字典是由键值对形式存储的数据类型，字典的键必须是不可变的数据类型，唯一不重复的，字典的值可以是任意数据类型或者对象。基于字典的键是不可变的，字典的键会通过一种哈希算法，将键的值换算成内存地址，所以字典的查询速度非常快。字典在Python3.6之前是无序的，在3.6及以后字典会按照字典创建时的顺序排列。字典可以存储大量关联性数据。 字典的增加dic = {'name':'barry','age':18,'sex':'man'} # 用字典定义三个键值对 dic['dfgh'] = 150 # 没有则添加这个键值对 dic['age'] = 28 # 有age这个键就将值覆盖为28 print(dic) {'name': 'barry', 'age': 28, 'sex': 'man', 'dfgh': 150} dic.setdefault('port') # 没有这个键值对就会添加并赋值为空 dic.setdefault('name','yiyi') # 有name这个值则不修改，没有则增加 print(dic) {'name': 'barry', 'age': 18, 'sex': 'man', 'port': None} 字典的删除# pop 通过键去删除键值对 dic = {'name':'barry','age':18,'sex':'man'} ret = dic.pop('sex') print(dic) {'name': 'barry', 'age': 18} # 删除一个不存在的键就会报错 dic = {'name':'barry','age':18,'sex':'man'} ret1 = dic.pop('name2') # 为了程序能执行下去，想要不报错的话，可以添加一个返回值 dic = {'name':'barry','age':18,'sex':'man'} ty = dic.pop('re','没有此键') print(ty) 没有此键 # clear 清空 dic = {'name':'barry','age':18,'sex':'man'} dic.clear() print(dic) {} # popitem 删除最后一个键值对，3.5之前是随机删除，3.6删除最后一个键值对 dic = {'name':'barry','age':18,'sex':'man'} lo = dic.popitem() print(dic) {'name': 'barry', 'age': 18} # 删除整个字典 dic = {'name':'barry','age':18,'sex':'man'} del dic print(dic) 字典的修改# 改 dic = {'name':'barry','age':18,'sex':'man'} dic['age'] = 28 #重新定义age键的值 print(dic) # update 更新 dic1 = {'name':'barry','age':18,'sex':'man'} dic2 = {'name':'nji','age':'18','id':'001'} dic2.update(dic1) #将dic1字典中的键值对覆盖添加到dic2，dic1不变 print(dic2) {'name': 'barry', 'age': 18, 'id': '001', 'sex': 'man'} # update 正常添加 dic = {'name':'barry','age':18,'sex':'man'} dic.update(weight=150,high=175) #一次添加多个键值对 print(dic) {'name': 'barry', 'age': 18, 'sex': 'man', 'weight': 150, 'high': 175} 字典的查询# 查 dic = {'name':'barry','age':18,'sex':'man'} print(dic['name']) # 按键查对应的值，没有此键会报错 barry tr = dic.get('age1','没有此键') # 定义没有此键时的返回值 print(tr) 没有此键 字典的其他操作dic = {'name':'barry','age':18,'sex':'man'} print(dic.keys()) dict_keys(['name', 'age', 'sex']) print(dic.values()) dict_values(['barry', 18, 'man']) print(dic.items()) dict_items([('name', 'barry'), ('age', 18), ('sex', 'man')]) # for循环得到的是keys值 for i in dic: print(i) name age sex 字典的嵌套联系# 字典的嵌套练习 dic = { 'l1':['alex', '太白'], 'id':3, 1:{ 'data': 20181225, 'place': '深圳校区', 'class': 'python3期', 'name_list': ['awq', 'xx'], } } # 1.给小列表['alex', '太白'] alex后面插入一个字符串，'aaa' dic['l1'].insert(1,'aaa') print(dic) # 2.将id对应的3变成1 dic['id'] = 1 # 3.将1对应的字典的data的值变成20181224 dic[1]['data'] = 20181224 print(dic) # 4.将name_list对应的awq全部变成大写 dic[1]['name_list'][0] = dic[1]['name_list'][0].swapcase() print(dic) # 5.将name_list对应的xx删除 dic[1]['name_list'].pop(1) print(dic) 将字典数据格式化输出# 格式化输出 msg = '我叫%s,我身高%s，年龄%s' % ('ed',180,23) print(msg) # 将字典数据格式化输出 dic = {'name':'barry','age':18,'sex':'男'} mk = '我叫%(name)s,今年%(age)s,性别%(sex)s' % dic print(mk) 返回一个新的字典# 返回一个新的字典，键从可迭代对象里面获取，值不变 dic1 = dict.fromkeys('top','ed') dic2 = dict.fromkeys(['lop'],'努力') print(dic1) {'t': 'ed', 'o': 'ed', 'p': 'ed'} print(dic2) {'lop': '努力'} dicu = dict.fromkeys([1,2,3],['alex']) print(dicu) {1: ['alex'], 2: ['alex'], 3: ['alex']} # 坑:值如果是一个可变的数据类型，那么所有的值都是一个内存地址 dicu[1].append(000) print(dicu) {1: ['alex', 0], 2: ['alex', 0], 3: ['alex', 0]} # 给dicu[1]这个列表赋值000，所有列表的值都是000，因为列表所有的值都指向一个内存地址 数据类型的补充# 数据类型的补充 str ---> list split list ---> str join 0,'',[],{},(),set() ---> bool:false # 列表和元组的互换 # list &lt;---> tuple jk = [1,2,3] yu = tuple(jk) print(yu) uy = list(yu) print(uy) # dict ---> list dico = {'name':'kasha','ui':'io'} print(list(dico)) ['name', 'ui'] # dict ---> tuple dich = {'name':'yu','age':15} print(tuple(dich)) ('name', 'age') # 元组中只有一个元素并且没有逗号，则它不是元组，它与元素数据类型相同 t1 = (1,) t2 = ('al',) t3 = ([1,2,3],) print(t1,t2,t3) (1,) ('al',) ([1, 2, 3],) t1 = (1) t2 = ('al') t3 = ([1,2,3]) print(t1,t2,t3) 1 al [1, 2, 3] 将索引为奇数位的元素删除# 将索引为奇数位的元素删除,列表是不等长的 # 方法一 li = [11,36,56,48,79,45,21,65] del li[1::2] # 1-所有，步长为2 print(li) # 方法二 li = [11,36,56,48,79,45,21,65] new_li = [] # 定义一个空列表 for index in range(len(li)): # 循环 if index % 2 == 0: # 如果能被2整除 new_li.append(li[index]) # 如果能整除，就加入到new_li列表里面，这样索引是奇数位的元素就被删除了 li = new_li print(li) # 方法三 li = [11,36,56,48,79,45,21,65] for index in range(len(li)-1,-1,-1): if index % 2 == 1: li.pop(index) print(li) 将字典中键含有k元素的键值对删除# 将字典中键含有k元素的键值对删除 dict = {'ko':'ty','df':54,'13k':'hu','jl':'lp'} # 循环列表时不能改变字典的大小 lo = [] # 定义一个空的列表 for i in dict: # 将字典循环给i，赋值时是只将key赋值 if 'k' in i: # 如果k存在于i中 lo.append(i) # 则把这些有k元素的键值对添加到lo这个空字典 for y in lo: # 将lo字典循环给y dict.pop(y) # 通过键去删除键值对 print(dict) enumerate()# enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中 s1 = \"Hello\" for i,y in enumerate(s1,start=1): print(i,y) 1 H 2 e 3 l 4 l 5 o s2 = [\"top\",\"jun\",\"mid\",\"adc\",\"sup\"] for i,j in enumerate(s2,start=1): print(i,j) 1 top 2 jun 3 mid 4 adc 5 su 集合集合创建# 集合的创建 set1 = {\"er\",\"mk\",\"lk\"} print(set1) set2 = ('lk','oi',\"er\") # 不一定要{}或者(),只要是迭代对象就行 print(set2) 集合的无序特点# 集合是无序的 set1 = {\"we\",\"rng\",\"skt\",\"top\"} set1.add(\"fpx\") print(set1) {'rng', 'top', 'skt', 'fpx', 'we'} #增加一个元素，不会按照顺序添加，每一次执行代码，顺序都会改变 集合的迭代增加set1 = {\"we\",\"rng\",\"skt\",\"top\"} set1.update(\"fpx\") #迭代增加会把整个字符串拆分为多个字符进行增加 print(set1) {'skt', 'x', 'rng', 'top', 'f', 'p', 'we'} 集合的删除set1 = {\"we\",\"rng\",\"skt\",\"top\"} set1.remove(\"skt\") # 指定删除元素 print(set1) {'top', 'we', 'rng'} set1 = {\"we\",\"rng\",\"skt\",\"top\"} set1.pop() # 随机删除一个元素 print(set1) set1 = {\"we\",\"rng\",\"skt\",\"top\"} set1.clear() # 清空集合 print(set1) set() 集合的元素是不可变类型set1 = {\"we\",\"gb\",[\"rf\",\"gb\"]} print(set1) # 集合里面存在列表元素，执行会报错 set1 = {\"we\",\"gb\",(\"vf\",\"jin\",1)} print(set1) # 集合里面存在元组元素可以执行，因为元组是不可变类型 面试必考# 面试必考 list1 = [1,2,3,4,5] list2 = [2,3,4,5,6] # 将list1和list2的元素集合起来并去重 new_list = list1 + list2 print(new_list) new_set = list(set(new_list)) #将new_list转换为集合，再转换为list print(new_set) [1, 2, 3, 4, 5, 2, 3, 4, 5, 6] [1, 2, 3, 4, 5, 6] 电影投票# 电影投票:程序先给出几个目前正在上映的电影列表. 由用户给每个电影投票. # 最终将该用户投票信息公布出来 lst = ['北京遇上西雅图', '解救吴先生', '美国往事', '西西里的美丽传说'] lst = ['北京遇上西雅图', '解救吴先生', '美国往事', '西西里的美丽传说'] # print(lst) dic = dict.fromkeys(lst,0) #定义一个字典，key来自lst列表，值是0 while True: for num,name in enumerate(lst,start=1): #定义电影序号和电影来自lst列表 print('{}\\t{}'.format(num,name)) #列出电影序号和电影 name_num = input('请输入你喜欢的电影序号，或者q/Q退出:').strip() #记录用户所喜欢的电影序号 if name_num.isdigit(): #如果用户输入的是数字则进入，否则输出206行的：你输入有误，请重新输入 name_num = int(name_num) #用户输入的必须是整数 if 0 &lt; name_num &lt; len(lst): #控制用户输入数字的范围必须是比0大，比列表总长度小 dic[lst[name_num-1]] += 1 #将用户输入的值记录到dic空字典，lst[name_num-1] == dic字典的第一元素，是0 print('已成功为%s投票' %(lst[name_num-1])) #提示用户投票成功 else: print(\"没有该序号的电影，请重新输入\") #如果输入的范围不对，提示没有这个序号的电影 elif name_num.upper() == 'Q': #如果用户输入q就退出 break else: print(\"你输入有误，请重新输入\") for movie_name,total_num in dic.items(): #以列表返回可遍历的键值 print(\"%s电影的总得票数%s\" %(movie_name,total_num))","categories":[{"name":"Python","slug":"Python","permalink":"https://www.missf.top/categories/Python/"}],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"Python基础day02","slug":"Python基础day02","date":"2020-04-24T04:14:29.000Z","updated":"2020-05-13T02:09:42.806Z","comments":true,"path":"2020/04/24/Python基础day02/","link":"","permalink":"https://www.missf.top/2020/04/24/Python%E5%9F%BA%E7%A1%80day02/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 格式化输出# 格式化输出 name = input(\"请输入姓名：\") age = input(\"请输入年龄：\") job = input(\"请输入职业：\") hobby = input(\"请输入爱好\") msg = \"\"\"------ info of %s ------ Name : %s Age : %s job : %s Hobbie : %s ------ end ------\"\"\" % (name,name,age,job,hobby) print(msg) # 坑:单个%号默认被当成一个占位符，如果想单纯的表示%号，请使用%% msg = '我叫%s,今年%s岁,python入门1%%.' % ('荒原饮露','23') print(msg) 运算符 运算符 描述 实例 = 简单的赋值运算符 c = a + b 将 a + b 的运算结果赋值给c += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c *= a 等效于 c = c * a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c *= a 等效于 c = c * a //= 取整赋值运算符 c //= a 等效于 c = c // a and “与”，如果 x 为False，x and y 返回False，否则返回y的计算值 两边为True才为True or “或”， 如果 x 为True，返回True，否则它返回y的计算值 一边为True则为True not “非”， 如果 x 为True，返回False，如果 x 为False，返回True True则False，反之 逻辑运算符的优先级() > not > and > or and 两个条件必须同时成立才为True or 两个条件有一个成立则为True not 条件为True则结果为False，条件为False则结果为True 运算符的不等式计算print(2 > 1 and 3 > 4) 两边式子同时成立，才会为True，否则为False print(2 > 1 and 3 > 4 or 4 &lt; 5 and 6 &lt; 7) 先计算and，式子为False or True，结果则为True print(1 > 2 and 3 &lt; 4 or 4 > 5 and 2 > 1 or 9 &lt; 8) 先计算and，式子为False or False or False，结果为False 运算符数字计算x or y # if x is True，return x else return y.如果x为True则返回X，否则返回y print(1 or 2) 1 print(3 or 2) 3 print(0 or 2) 2 # x and y和x or y是相反的 print(1 and 2) 2 print(8 and 0) 0 print(-100 and 2) 2 print(1 and 2 or 3 and 5) == print(2 or 5) 2 编码初识ASCII ASCII:早期的密码本，只包含英文字母，数字，特殊字符与01的对应关系 采用 8位比特（bit） == 1byte（字节） 在ascll编码中 8位比特表示一个字节表示一个字符 h e l l o = 01101000 01100101 01100111 0110011 01100101 缺点:只为英文使用者考虑，不能处理中文和其他国家的文字 GBK 由于ASCII编码，于是每个国家都提出了不同的编码来适应自己的语言 GBK 只包含本国文字（以及英文字母，数字，特殊字符）与01对应关系 GBK是采用单双字节变长编码，英文使用单字节编码，完全兼容ASCII字符编码，中文部分采用双字节编码 a 太 白 = 01101000 01100101 01100111 0110011 01100101 # 1个英文占1个字节，1个中文字符占2个字节，共5字节 UNICODE 由于ASCII编码的局限性，unicode应运而生 unicode:万国码，将全世界所有的文字都统一到一套编码里面 采用32位比特(bit)== 4byte 在unicode编码中 32位比特表示4个字节表示一个字符 a：00000000 00010010 00000000 00010010 中：00000000 10010010 00000000 10010010 缺点:如果使用unicode编码来存储英文，这会大量浪费空间，因为我们知道一个英文字符只占一个字节，而另外三个字节就浪费掉了，这样在存储和传输上非常不划算 UTF-8 utf-8:包含全世界所有的文字与二进制01的对应关系,最少用8位表示一个字符 utf-8是一种针对Unicode的可变长度字符编码,是对Unicode编码的压缩和优化，将所有的字符和符号进行分类 英文: 00000010 8位表示一个字节表示一个字符 欧洲文字: 00000010 00100000 16位表示两个字节表示一个字符 中国(亚洲): 00000010 00000010 00000010 24位表示三个字节表示一个字符 例子 'old男孩' GBK:7个字节 utf-8:9个字节 十进制转换为二进制关键要点:除二取余，倒序排列，高位补零。 将十进制数42不断除以2，得到的余数非别是:010101，然后倒序排列，42所对应的二进制就是101010，然后高位补零就是:00101010 负整数转换为二进制，以-42为例，先得到42的二进制，然后取反(0变1，1变0)再加一，就是11010101 + 1，结果为11010110 二进制转换成十进制 1 0 0 1 0 1 1 0 1 * 2^7 0 * 2^6 0 * 2^5 1 * 2^4 0 * 2^3 1 * 2^2 1 * 2^1 0 * 2^0 将这些数相加，得到的就是10010110这个二进制数的十进制数 128 + 0 + 0 + 16 + 0 + 4 + 2 + 0 = 150 数据类型之间的转换int（整数） --> bool（布尔值） 非零即True bool（布尔值） --> int（整数） True 1 False 0 str（字符串） --> bool（布尔值） 非空即True str（字符串） --> int（整数） str（13 ）转换为整数，会强制去掉空格变成int（13） bool（布尔值） --> str（字符串） 还是True，但是str类型的True，失去True的意义 y = True u = str(y) print(u,type(u)) True &lt;class 'str'> # 由于是str数据类型的True，下面的3 + u会报错，如果是bool数据类型的True可以与数字相加 print(3 + u) 字符串的切片字符串索引示意图请记住切片原则:顾首不顾尾 按照索引取值s = 'python骑士计划第三期' s1 = s[0] s2 = s[-1] print(s1) # p print(s2) # 期 按照切片取值s = 'python骑士计划第三期' # 照切片取值，顾首不顾尾，s5 = s[6:-3] 6就是第六个字符以后，-3就是倒数第三个字符以前 s3 = s[0:6] # 是从零开始数。取整个字符串可以写成s3 = s[:6],取整个字符串是s3 = s[:] print(s3) # python s4 = s[:6] # 相当于s[0:6]，0可以不写，默认从零开始 print(s4) # python s5 = s[6:-3] print(s5) # 骑士计划 s6 = s[6:10] print(s6) # 骑士计划 切片加步长取值# 步长就是每一步的长度，取pto字符串，要先划分区域，再定义隔几个字符去取 s = 'python骑士计划第三期' s7 = s[:6:2] # 划分区域为 0-6（区域为:python，从首个字符串开始取），步长为2 print(s7) # pto s8 = s[7::2] # 划分区域为 7-最后（区域为:士计划第三期，从第七个字符之后开始取），步长为2 print(s8) # 士划三 s9 = s[-1:-4:-1] # 倒叙取值要加上反向步长 print(s9) # 期三第 print(s[:5:-1]) # 后面是-1所以是反向取值，区域定义为 0-5（python），但是区域也是反向的，所以是从期到n的区域里面取 骑士计划第三期 字符串的常用操作capitalize() 首字母大写s = 'faker' s1 = s.capitalize() print(s) # faker print(s1) # Faker center() 将字符串居中s = 'missf.top' s1 = s.center(50) print(s1) missf.top # 设置50的长度并把字符串居中 s2 = s.center(50,'*') print(s2) ********************missf.top********************* # 设置50的长度定义填充物并把字符串居中 swapcase() 大小写翻转sr = 'KubeRnEteS' print(sr.swapcase()) kUBErNeTEs title() 非字母隔开单词的首字母大写s = 'tpshow9nohup@mid' # 注意：第一个字母也会变成大写 print(s.title()) Tpshow9Nohup@Mid upper() 不区分大小写# 用途:验证码不区分大小写 username = input(\"请输入姓名:\") passworrd = input(\"请输入密码:\") code = 'AeTrd'.upper() your_code = input(\"请输入验证码:\").upper() if your_code == code: if username == 'alex' and passworrd == 'sb': print('登录成功') else: print('用户名或者密码错误') else: print('验证码不正确') startswich() endswith() 判断以什么为开头和结尾s = 'mowenjieadcarry' print(s.startswith('o')) False # 字符串不是以o开头，结果为False print(s.startswith('mo')) True # 字符串以mo开头，结果为True print(s.startswith('j',5)) # 切割五个字符之后是否是j开头，结果为True True print(s.endswith('ry')) # 判断以什么为结尾 True find() index() 通过元素找索引s = 'mowenjieadcarry' print(s.find('a')) 8 # 返回a元素前面的索引数 print(s.find('a',9,)) 11 # 从第九个字符后面开始找，找到的是第二个a # find和index功能几乎一样，区别只有find找不到会返回-1,index会报错 strip() 默认去除字符串前后的空格/换行符/制表符# strip() 默认去除字符串前后两端的空格，换行符，制表符 s = '\\n barry \\t \\n' print(s.strip()) # barry # strip 去除字符串两边的字符 s = 'kkohuang yuan yin lure' print(s.strip('kore')) # 会把kore切割成最小单位，从前后两边逐个去除 huang yuan yin lu # lstrip 只从前面去除 print(s.lstrip('k')) ohuang yuan yin lure # rstrip() 只从后面去除 print(s.rstrip('re')) kkohuang yuan yin lu split() 将字符串转化为列表s = 'kkohuang yuan yin lure' print(s.split()) # 默认以空格分割元素 ['kkohuang', 'yuan', 'yin', 'lure'] t = 'top:mid:adc' print(t.split(':')) # 指定以冒号进行分割 ['top', 'mid', 'adc'] print(t.split(':',1)) # 指定以冒号进行分割,分割一次 ['top', 'mid:adc'] t = ':mid:adc' # 只有两个分割符，但是转换成列表之后参数个数是n+1 print(t.split(':')) ['', 'mid', 'adc'] join() 列表转化为字符串t = ':mid:adc' s9 = '-'.join(t) # 将每个字符通过指定的连接符连接在一起 print(s9) :-m-i-d-:-a-d-c t1 = ['liz','zsd','awa'] s10 = ' '.join(t1) # 以空格为分隔符 print(s10) liz zsd awa # 将列表的多个元素转换回字符串 replace() 字符串替换t = 'faker是世界第一中单，faker也是一个屌丝，faker' s11 = t.replace('faker','55开',2) # 可以指定替换的次数，不指定次数则全部替换 print(s11) 55开是世界第一中单，55开也是一个屌丝，faker format() 格式化输出# 第一种 s = '我叫{}，我玩{}，我主玩的位置是{}'.format('bang','英雄联盟','adc') print(s) # 我叫bang，我玩英雄联盟，我主玩的位置是adc # 第二种 s = '我叫{0}，今年{1}，性别{2}，我依然叫{0}'.format('小明','20','女') print(s) # 我叫小明，今年20，性别女，我依然叫小明 # 第三种 s = \"\"\" 我叫{name}，今年{age}，性别{sex}，我依然叫{name} \"\"\".format(age=20,sex='女',name='小明') print(s) # 我叫小明，今年20，性别女，我依然叫小明 is 判断字符串和数字组成name ='huanyuan135' print(name.isalnum()) # 判断字符串由字母或数字组成 True print(name.isalpha()) # 判断字符串只由字母组成 False print(name.isdigit()) # 判断字符串只由数字组成 False count 计算字符串中某个字符出现的次数s = 'cdcdcdcdcdjvnjfnvjfn:jsvnsvpojwpd' print(s.count('f')) # 计算这个字符串f字符出现的次数 2 print(s.count('d')) 6 print(s.count('d',0,8)) # 切片，顾首不顾尾，从零开始到第八个字符的前面截断 4 print(s.count('d',8)) # 从零开始数，第八个字符到结束 2 len 统计字符串长度s = 'cdcdcdcdcdjvnjfnvjfn:jsvnsvpojwpd' print(len(s)) # 内置函数 33","categories":[{"name":"Python","slug":"Python","permalink":"https://www.missf.top/categories/Python/"}],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"Python基础day01","slug":"Python基础day01","date":"2020-04-23T04:14:29.000Z","updated":"2020-05-13T02:09:34.447Z","comments":true,"path":"2020/04/23/Python基础day01/","link":"","permalink":"https://www.missf.top/2020/04/23/Python%E5%9F%BA%E7%A1%80day01/","excerpt":"","text":"我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 ​ ——塔里克 Python发展史 创始人:Guido，国人叫龟叔，在1989年的圣诞节写出来的 2005 - 2012，龟叔去了谷歌工作，谷歌大量使用Python 2005年国内第一家使用Python的公司—豆瓣 2012年国内兴起云计算的热潮，Python借助OpenStack又火了一把 2014年AI兴起，大量的公司使用Python去写算法 直到2017年Python才真正进入大众的视野 Python的应用领域 WEB开发:最火的Python web框架Django，还有支持异步高并发的Tornado，短小精悍的flask 网络编程:支持高并发的Twisted网络框架 爬虫:Python在爬虫领域几乎是霸主地位，具有非常多的爬虫模块支持 云计算:著名的云计算框架OpenStack就是用Python写的 人工智能和数据分析:Python是目前人工智能和数据分析领域公认的必备语言 自动化运维:在Linux运维领域，Python能做很多事情，特别是处理数据的能力非常出色 游戏开发:Python能做游戏开发，但是使用Python开发游戏的公司可能没有这么多 编译型语言核心:通过编译器将人类写出来的代码一次性全部编译成机器语言让计算机可以识别和执行 代表语言：c，c++，golang，java 优点:执行效率高 缺点:开发效率低，不可以跨平台 一般多用于研究所、研究院，对执行效率要求高，大数据的计算、底层的开发 解释型语言核心:解释器逐行解释代码，再逐行执行（python是解释器，java中叫虚拟机） 代表语言:Python，php，Java，ruby 优点:开发效率高，可以跨平台，可移植性强 缺点:执行效率相对编译型语言慢 Python的优缺点优点 Python是一门高级语言，不用关心底层内存指针等等 由于Python开源的本质，Python已经被移植到许多平台，具备非常高的可移植性 Python可以嵌入c语言的代码，c语言也可以嵌入Python的代码，具备可嵌入性 大量现有的第三方库和模块的支持，使得开发效率大大提高 缺点 执行速度比编译型语言慢，如果运行Python花了0.1s，同样的代码c语言花了0.01秒，这样c就比Python快了十倍 Python源码是以明文形式存放的，如果项目要求源代码必须是加密的，一开始就不应该选择Python 线程不能利用多核CPU的问题，这也是Python被人诟病最多的一个缺点 变量官方解释:将程序中一些中间结果暂时存到内存中，供后面程序调用 变量命名规则 变量必须由数字，字母，下划线任意组合 不能是数字开头 不能使用Python中的关键字（具体关键字后面再介绍） 变量要具有描述性 变量不能过长 变量不能使用中文 尽量使用驼峰体 定义Python变量age1 = 12 age2 = age1 age3 = age2 age2 = 24 print (age1,age2,age3) 12 24 12 # 注意：程序中会大量的出现和使用变量，变量中会暂存一些少量的数据，给其他变量代指 Python常量常量，用于定义不变的值。例如:身份证号，圆周率，历史记载，新中国成立时间:1949101 使用常量Python中的常量可以改变（不像c改变常量会报错），但约定俗成Python中将变量全部变成大写，就是表示常量，将一些不想让别人改变的量设置成常量，放在文件最上面 Python注释对某一段代码做解释说明，一般是精简的代码，别人可能看不懂，需要做简单的解释 单行注释#好好学习，天天向上 多行注释'''被注释的内容''' \"\"\" 被注释的内容 \"\"\" 基础数据类型初识int 整型i1 = 10 i2 = 20 print (i1 * i2) # 200 str 字符串python中凡是用引号引起来的内容就是字符串数据类型 ret1 = '荒原饮露' ret2 = \"荒原饮露\" ret3 = \"\"\"荒原饮露\"\"\" ret4 = '''荒原饮露''' print (ret1,ret2,ret3,ret4) bool 布尔值true # 真 false # 假 用于判断条件，逻辑语句真假 单双引号搭配使用msg = \"I' m huangyuanyinlu,18 year\" print (msg) # I' m huangyuanyinlu,18 year 字符串相加相乘a1 = 'Alex' a2 = 'sb' print (a1 + a2) # Alexsb print (a1 * 10) # AlexAlexAlexAlexAlexAlexAlexAlexAlexAlex input 用户交互让用户输入用户名密码，得到用户输入的数据，起到了人与程序的交互作用 name = input(\"请输入你的名字：\") age = input(\"请输入你的年龄：\") sex = input(\"请输入你的性别：\") print (name,age,sex) # 这里注意一点:凡是input得到的值，都是字符串数据类型 将用户输入的变量进行拼接name = input(\"请输入你的名字：\") age = input(\"请输入你的年龄：\") sex = input(\"请输入你的性别：\") msg = '我的姓名是' + name + ',' + '我的年龄是' + age + ',' + '我的性别是' + sex + '.' print (msg) # 我的姓名是荒原饮露,我的年龄是23,我的性别是男 if 流程控制语句if 单分支age = input (\"请输入年龄:\") age = int(age) # Python3x之后，input得到的数据都是字符串类型 print (age,type(age)) # 输出变量的数据类型 if age > 10: print('你已经不是10岁的小孩了'） if 多分支jineng = input('请输入你的技能:') if jineng == '三分球': print('可以参加三分球大赛') elif jineng == '中投': print('可以参加中距离投篮') elif jineng == '突破': print('可以参加1V1对抗赛') else: print('买票进场吧') if 嵌套# 登陆示例 username = input('请输入用户名：') password = input('请输入密码：') if username == '荒原饮露': if password == '123': print('登录成功') else: print('密码错误') else: print('用户名不存在') # 买票示例 has_ticket = int(input('请输入车票号码:')) knife_length = int(input('请输入刀的长度:')) if has_ticket == 23: print('车票检查通过，准备开始安检') if knife_length &lt; 20: print('刀不超过20厘米，允许上车') else: print('刀超过20厘米，不允许上车') else: print(\"没有车票\") while 循环单次循环flag = True while flag: print('麦迪') print('科比') print('杜兰特') flag = False print('詹姆斯') # flag = False后面的依然会输出，因为运行到最后才会重新回到while 打印1到100# 方法一 count = 1 flag = True while flag: print(count) count = count + 1 if count == 101: flag = False # 方法二 count = 1 while count &lt; 101: print(count) count = count + 1 # 不要见方法二代码少就不去理解方法一，因为方法一包含flag = True的编程思想 计算1加到100count = 1 sum = 0 while count &lt;= 101: sum = sum + count count = count + 1 if count == 101: break print(sum) # break是直接终止循环 continue打印1到10，但是跳过7 count = 0 while count &lt; 10: count = count + 1 if count == 7: continue # continue是跳出本次循环，继续执行下一个循环 print(count) count = 0 while count &lt; 10: count = count + 1 if count == 7: # 判断count的值，直接+1 count = count + 1 print(count) 打印100以内的偶数# 利用对2取余去判断是否偶数 count = 0 while count &lt; 101: if count % 2 == 0: print(count) count = count + 1 # 每次自加2去打印偶数，虽然这样的做法不专业，但是也是体现灵活编程思维的一种方式 count = 0 while count &lt; 101: print(count) count = count + 2 while else# while else :只有在while循环被break打断时，才不会执行else程序，否则循环完之后一定会执行else程序 count = 0 while count &lt;= 5: count = count + 1 if count == 3:break print(\"Loop\",count) else: print(\"循环正常执行\") count = 0 while count &lt;= 5: count = count + 1 print(\"Loop\",count) else: print(\"循环正常执行\") # while循环没有被打断，打印完Loop1-6之后还是会打印循环正常执行","categories":[{"name":"Python","slug":"Python","permalink":"https://www.missf.top/categories/Python/"}],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"Hello World","slug":"Hello-World","date":"2019-03-28T04:14:29.000Z","updated":"2020-05-08T03:02:07.895Z","comments":true,"path":"2019/03/28/Hello-World/","link":"","permalink":"https://www.missf.top/2019/03/28/Hello-World/","excerpt":"","text":"所有无法深入问题本质的那些人，最终都将离开这个行业。","categories":[{"name":"Hello World","slug":"Hello-World","permalink":"https://www.missf.top/categories/Hello-World/"}],"tags":[{"name":"Hello World","slug":"Hello-World","permalink":"https://www.missf.top/tags/Hello-World/"}]},{"title":"我在人间凑数的日子","slug":"我在人间凑数的日子","date":"2019-03-28T04:14:29.000Z","updated":"2020-05-20T01:57:28.886Z","comments":true,"path":"2019/03/28/我在人间凑数的日子/","link":"","permalink":"https://www.missf.top/2019/03/28/%E6%88%91%E5%9C%A8%E4%BA%BA%E9%97%B4%E5%87%91%E6%95%B0%E7%9A%84%E6%97%A5%E5%AD%90/","excerpt":"","text":"语言这东西，在表达爱意的时候如此无力，在表达伤害的时候，却如此锋利。 你住的城市下雨了，想问你有没有带伞，可我不敢。因为我怕你说没带，而我又无能为力，就像是我爱你，却给不了你想要的温暖。 十年太长，什么都会变。一辈子太短，一件事也有可能做不完。回忆永远站在背后，你无法抛弃，只能拥抱。 没有回音的山谷不值得纵身一跃。 世界上只有一种英雄、看透了生活的真相，却依然热爱生活。 你联系我，我就听你说，你不联系我，我就顺其自然，实不相瞒，我很想你，但问题不大，我能控制，因为比较酷。 我不知道凌晨五点该说晚安还是早安，也不知道这个年龄是该说爱还是喜欢。 曾经我发誓要把生命献给爱情，后来我没死，青春替我偿了命。 我与春风皆过客，你携秋水揽星河。 我曾踏足山巅，也曾进入低谷，二者都让我受益良多。 从此无心爱良夜，任他明月下西楼。 仅一夜之间，我的心判若两人。你自人山人海中来，原来只为给我一场空欢喜。你来时携风带雨，我无处可避，你走时乱了四季，我久病难医。 前天我的右腿撞到了石头，当时觉的疼一阵也就没事了，今天发现那已经是一块青紫，人生很多事都要延迟很久很久才会感觉到疼，你能想象吗，也许等你到四十多岁的某个夏夜，开车回家在某个路口等红绿灯的时候，你突然反应过来原来十九岁的时候那个人说的那句话原来是这个意思，而这时候你已经过了小半生。 我吹过你吹过的晚风，那我们算不算相拥。 明智的放弃胜过盲目的执着，去吹吹风吧，能清醒的话，感冒也没关系。 以后不见面的日子要按年算了。 我渴望能见你一面，但请你记得，我不会开口要见你，这不是因为骄傲，你知道我在你面前毫无骄傲可言，而是因为，唯有你也想见我的时候，我们的见面才会有意义。 真正的离别没有长亭古道，也没有劝君更尽一杯酒，只是在一个和往常一样的清晨，有的人留在昨天了。","categories":[{"name":"荒原饮露","slug":"荒原饮露","permalink":"https://www.missf.top/categories/%E8%8D%92%E5%8E%9F%E9%A5%AE%E9%9C%B2/"}],"tags":[{"name":"荒原饮露","slug":"荒原饮露","permalink":"https://www.missf.top/tags/%E8%8D%92%E5%8E%9F%E9%A5%AE%E9%9C%B2/"},{"name":"记忆","slug":"记忆","permalink":"https://www.missf.top/tags/%E8%AE%B0%E5%BF%86/"},{"name":"语录","slug":"语录","permalink":"https://www.missf.top/tags/%E8%AF%AD%E5%BD%95/"}]}],"categories":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/categories/ansible/"},{"name":"coding","slug":"coding","permalink":"https://www.missf.top/categories/coding/"},{"name":"Python","slug":"Python","permalink":"https://www.missf.top/categories/Python/"},{"name":"Hello World","slug":"Hello-World","permalink":"https://www.missf.top/categories/Hello-World/"},{"name":"荒原饮露","slug":"荒原饮露","permalink":"https://www.missf.top/categories/%E8%8D%92%E5%8E%9F%E9%A5%AE%E9%9C%B2/"}],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://www.missf.top/tags/ansible/"},{"name":"自动化运维","slug":"自动化运维","permalink":"https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"},{"name":"coding","slug":"coding","permalink":"https://www.missf.top/tags/coding/"},{"name":"持续集成","slug":"持续集成","permalink":"https://www.missf.top/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"},{"name":"Python基础","slug":"Python基础","permalink":"https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"},{"name":"Hello World","slug":"Hello-World","permalink":"https://www.missf.top/tags/Hello-World/"},{"name":"荒原饮露","slug":"荒原饮露","permalink":"https://www.missf.top/tags/%E8%8D%92%E5%8E%9F%E9%A5%AE%E9%9C%B2/"},{"name":"记忆","slug":"记忆","permalink":"https://www.missf.top/tags/%E8%AE%B0%E5%BF%86/"},{"name":"语录","slug":"语录","permalink":"https://www.missf.top/tags/%E8%AF%AD%E5%BD%95/"}]}