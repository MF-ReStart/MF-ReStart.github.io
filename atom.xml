<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒原饮露</title>
  
  <subtitle>可能是未来的架构师，也可能送外卖。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.missf.top/"/>
  <updated>2021-01-26T06:00:38.958Z</updated>
  <id>https://www.missf.top/</id>
  
  <author>
    <name>荒原饮露</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP SOCKET 的 backlog 参数用途</title>
    <link href="https://www.missf.top/post/fe2ea6ca.html"/>
    <id>https://www.missf.top/post/fe2ea6ca.html</id>
    <published>2021-01-25T02:17:28.000Z</published>
    <updated>2021-01-26T06:00:38.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># tcp三次握手</span>tcp标志位有6种标示: SYN<span class="token punctuation">(</span>synchronous建立联机<span class="token punctuation">)</span> ACK<span class="token punctuation">(</span>acknowledgement确认<span class="token punctuation">)</span> PSH<span class="token punctuation">(</span>push传送<span class="token punctuation">)</span> FIN<span class="token punctuation">(</span>finish结束<span class="token punctuation">)</span> RST<span class="token punctuation">(</span>reset重置<span class="token punctuation">)</span> URG<span class="token punctuation">(</span>urgent紧急<span class="token punctuation">)</span>Sequence number<span class="token punctuation">(</span>顺序号码<span class="token punctuation">)</span> Acknowledge number<span class="token punctuation">(</span>确认号码<span class="token punctuation">)</span>第一次握手: client ---------------<span class="token operator">></span> server    <span class="token comment" spellcheck="true"># client发送后状态为:SYN_SEND server接受后状态为:SYN_RCVD server收到请求后会将这个请求放到syns queue队列中</span>client发送位码为 <span class="token punctuation">[</span>SYN＝1,seq number<span class="token operator">=</span> x<span class="token punctuation">(</span>随机产生<span class="token punctuation">)</span><span class="token punctuation">]</span> 的数据包到server,server由SYN<span class="token operator">=</span>1得知client要求建立联机第二次握手: server ---------------<span class="token operator">></span> client    <span class="token comment" spellcheck="true"># client收到SYN+ACK将状态改为:ESTABLISHED(半连接状态)</span>server收到client建立联机的请求后,向client发送<span class="token punctuation">[</span>ack number<span class="token operator">=</span>x + 1<span class="token punctuation">(</span>client的seq number+1<span class="token punctuation">)</span>,SYN<span class="token operator">=</span>1,ACK<span class="token operator">=</span>1,seq number<span class="token operator">=</span> y<span class="token punctuation">(</span>随机产生<span class="token punctuation">)</span><span class="token punctuation">]</span>的数据包第三次握手: client ---------------<span class="token operator">></span> server    <span class="token comment" spellcheck="true"># server收到ACK将状态修改为:ESTABLISHED 并把该请求从syns queue队列放到accept queue队列</span>client收到数据包后检查ack number是否正确<span class="token punctuation">(</span>即client第一次发送的seq number+1<span class="token punctuation">)</span>,以及位码是否为ACK<span class="token operator">=</span>1,如果正确,client会发送 <span class="token punctuation">[</span>ack number<span class="token operator">=</span>y+1<span class="token punctuation">(</span>server的seq number+1<span class="token punctuation">)</span>,ACK<span class="token operator">=</span>1<span class="token punctuation">]</span>数据包给server,server接受之后确认ack number<span class="token operator">=</span>y+1值与ACK<span class="token operator">=</span>1,连接建立成功<span class="token comment" spellcheck="true"># syns queue队列: 用于保存半连接状态的请求</span>队列大小通过/proc/sys/net/ipv4/tcp_max_syn_backlog指定,著名的SYN洪水攻击就是建立大量的半连接状态请求,然后丢弃,导致syns queue不能保存正常的请求,注意半连接队列长度不能超过全连接队列长度<span class="token comment" spellcheck="true"># accept queue队列: 用于保存全连接状态的请求</span>队列大小通过/proc/sys/net/core/somaxconn指定,net.core.somaxconn 定义了系统级别的全连接队列最大长度,backlog 只是应用层传入的参数,不可能超过内核参数,所以 backlog 必须小于等于 net.core.somaxconn<span class="token comment" spellcheck="true"># backlog 的定义是已连接但未进行 accept 处理的 SOCKET 队列大小</span>backlog 是底层方法 int listen 的一个参数,Nginx/Tomcat 等这种 Web 服务器,都提供了 backlog 参数设置入口只增大应用层 backlog 参数大小是没有意义的,因为可能内核参数关于连接队列设置的都很小,必须综合应用层和内核参数一起调整systemnet.core.somaxconn <span class="token operator">=</span> 65535 <span class="token comment" spellcheck="true"># 默认为128,定义系统中每一个端口最大的监听队列长度</span>net.core.netdev_max_backlog <span class="token operator">=</span> 65535 <span class="token comment" spellcheck="true"># 默认为1000,请求被切换到CPU处理前被网卡缓存的速率包,根据网卡文档加大值可以提高性能</span>net.ipv4.tcp_max_syn_backlog <span class="token operator">=</span> 65535 <span class="token comment" spellcheck="true"># 默认为1024,对于还未获得对方确认的连接请求,可保存在syns queue队列中的最大数目</span>前端 Nginx/Tomcatlisten 80 backlog<span class="token operator">=</span>65535<span class="token punctuation">;</span> 后台 PHPlisten.backlog <span class="token operator">=</span> 65535<span class="token comment" spellcheck="true"># 这里还有一个需要注意的点</span>如果机器的性能不高,我们依然增大 backlog 参数和内核连接队列,反而会适得其反假设 PHP-fpm 的 QPS<span class="token punctuation">(</span>每秒响应次数<span class="token punctuation">)</span> 是 5000,那么处理完 65535 个请求大概需要 13 秒但是前端 Nginx 和 PHP-fpm 的连接已经等待超时,当 PHP-fpm 处理完最后一个请求,再往这个 SOCKET ID 写数据时,却发现连接已经关闭,得到的是<span class="token string">"error: Broken Pipe"</span>这也是为什么 2013 年 12 月 14 日发布的 PHP5.5.6 中 backlog 参数被修改为 65535,后来在 2014 年 7 月 22 日又修改为了 511<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小记&quot;&gt;&lt;a href=&quot;#小记&quot; class=&quot;headerlink&quot; title=&quot;小记&quot;&gt;&lt;/a&gt;小记&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Backlog" scheme="https://www.missf.top/categories/Backlog/"/>
    
    
      <category term="Backlog" scheme="https://www.missf.top/tags/Backlog/"/>
    
      <category term="高并发" scheme="https://www.missf.top/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Vim 学习笔记</title>
    <link href="https://www.missf.top/post/bc97b757.html"/>
    <id>https://www.missf.top/post/bc97b757.html</id>
    <published>2021-01-20T05:47:57.000Z</published>
    <updated>2021-03-01T07:51:33.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习缘由"><a href="#学习缘由" class="headerlink" title="学习缘由"></a>学习缘由</h1><p>我也想成为使用 vim 写 python 代码的人，我觉得这样非常酷</p><h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1><p>vim 源于 vi 但不是 vi，vi 作为计算机的文本编辑器历史极为悠远，它是由美国计算机科学家比尔·乔伊编写并于 1976 年发布的。vim 诞生得要晚一些，它的第一个版本由布莱姆·米勒在 1991 年发布，这个兄弟也是一位声名显赫的程序员，80 年代买了一台 Amiga 电脑，打开电脑一看，居然没有他最常用的 vi 编辑器，对于米勒来说这是不可接受的。愤怒的米勒决定自己开发一个文本编辑器，完全复制 vi 的功能，并起名为 vi IMitation(模拟)。随着 vim 的不断发展，更多更好的功能被加了进来，正式名称改成了 vi IMproved(增强)，也就形成了现代的 vim，vim 的开发语言是 C 和 VimScript，目前最新的稳定版本是 8.2</p><h1 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h1><p>vim 是一款完全面向程序员的软件，几乎没有使用 vim 编辑文字的普通用户，这可能是因为 vim 的学习曲线陡峭导致的。但是一旦熟练使用 vim 之后，就可以不依赖鼠标，双手尽可能停留在键盘中央的区域，这样使得我们编码、 插入、移动、定位、查找都不需要产生停顿和间隙，极大的提高了我们工作的效率</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Red Hat 和 CentOS 系统默认的 vim 版本是 7.4，我们使用编译安装可以升级到最新版本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 现在 vim 最新版本是 8.2</span>yum -y remove vim<span class="token function">wget</span> -O vim-8.2.2377.tar.gz https://github.com/vim/vim/archive/v8.2.2377.tar.gz<span class="token function">tar</span> xf vim-8.2.2377.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> vim-8.2.2377./configure --prefix<span class="token operator">=</span>/usr/local/vim/ --enable-pythoninterp<span class="token operator">=</span>yes --with-python-config-dir<span class="token operator">=</span>/usr/lib64/python2.7/config<span class="token function">make</span> -j4 <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token function">ln</span> -s /usr/local/vim/bin/vim /usr/bin/vim<span class="token function">ln</span> -s /usr/local/vim/bin/vimdiff /usr/bin/vimdiff<span class="token comment" spellcheck="true"># 如果 ./configure 过程中遇到</span>no terminal library foundchecking <span class="token keyword">for</span> tgetent<span class="token punctuation">(</span><span class="token punctuation">)</span>… configure: error: NOT FOUND<span class="token operator">!</span>      You need to <span class="token function">install</span> a terminal library<span class="token punctuation">;</span> <span class="token keyword">for</span> example ncurses.      Or specify the name of the library with –with-tlib.<span class="token comment" spellcheck="true"># Ubuntu 解决方法</span><span class="token function">sudo</span> apt <span class="token function">install</span> libncurses5-dev<span class="token comment" spellcheck="true"># CentOS 解决方法</span>yum <span class="token function">install</span> ncurses-devel.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>打开文件</p><pre class="line-numbers language-bash"><code class="language-bash">vim filename<span class="token comment" spellcheck="true"># 如果文件名称存在,就直接打开文件</span><span class="token comment" spellcheck="true"># 如果文件名称不存在,vim 会在退出保存时自动创建文件</span><span class="token comment" spellcheck="true"># vim 命令后没有跟任何文件名称时,无法实现 ":wq" 退出保存的,需要用 ":wq filename" 定义文件名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>退出文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">":q"</span>    <span class="token comment" spellcheck="true"># 退出</span><span class="token string">":q!"</span>    <span class="token comment" spellcheck="true"># 强制不保存退出</span><span class="token string">":w"</span>    <span class="token comment" spellcheck="true"># 保存编辑后的内容(将内存缓冲区的数据写到文件中)</span><span class="token string">":w!"</span>    <span class="token comment" spellcheck="true"># 强制保存编辑后的内容</span><span class="token string">":wq"</span>    <span class="token comment" spellcheck="true"># 保存并退出</span><span class="token string">":wq!"</span>    <span class="token comment" spellcheck="true"># 强制保存并退出</span><span class="token string">":x"</span>    <span class="token comment" spellcheck="true"># 保存并退出</span><span class="token comment" spellcheck="true"># ":x" 和 ":wq" 的区别在于:</span><span class="token string">":wq"</span> 强制性写入文件并退出,即使文件没有被修改也强制写入并更新文件的修改时间<span class="token string">":x"</span> 仅当文件被修改时才写入并更新文件修改时间,否则不会更新文件修改时间<span class="token comment" spellcheck="true"># ":x" 和 ":wq" 在一般情况下没有什么区别,但是进行编程时,如果修改的是源代码文件,即使文件内容没有被修改,但是文件修改时间更新了,在重新编译项目时就得重新编译,产生不必要的系统资源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于更多的 vim 基本使用会在后面一一讲解</p><h1 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h1><p>vim 设计得最特别的地方就是它的模式，与其他大部分编辑器不同，进入 vim 后默认是正常模式，此时键入的字符并不会被插入到所编辑的文件之中。vim 的模式(mode)，是它的麻烦所在，但同时也是它的厉害所在，vim 有四种主要的模式。正常模式(normal 也称普通模式)，如果不加特殊的说明，一般提到的命令都直接在正常模式下输入，在其他的任何模式中，都可以通过 Esc 键返回到正常模式。插入模式(insert)，输入字符时使用，例如在正常模式下键入 i (insert) 或者 a (append) 即可进入插入模式。按 v 进入可视模式(visual)，用于选定文本块，vim 里还提供其他不同的选定方法，包括按行和按列块。命令行模式(command-line)，用于执行较长、较复杂的命令、在正常模式下键入冒号 : 即可进入该模式，使用斜杠 / 和问号 ? 开始搜索也算作命令行模式，命令行模式的命令需要输入回车键才会执行</p><h1 id="配置和选项"><a href="#配置和选项" class="headerlink" title="配置和选项"></a>配置和选项</h1><p>vim 是有配置文件的，我们可以根据使用习惯，配置属于自己的 vim。vim 的配置文件有三个路径，我们可以敲 vim –version 就能看到三行信息，配置文件是存在优先级的。一开始的配置文件是一个很简单的，甚至是一个空文件，随着我们的深入学习和使用，配置文件会变得越来越复杂</p><pre class="line-numbers language-bash"><code class="language-bash">system vimrc file: <span class="token string">"/etc/vimrc"</span>        <span class="token comment" spellcheck="true"># 系统配置</span>     user vimrc file: <span class="token string">"<span class="token variable">$HOME</span>/.vimrc"</span>    <span class="token comment" spellcheck="true"># 用户配置</span> 2nd user vimrc file: <span class="token string">"~/.vim/vimrc"</span>    <span class="token comment" spellcheck="true"># 第二用户配置</span><span class="token comment" spellcheck="true"># 优先级</span>三个文件只要存在一个,vim 就能正常运行如果有用户配置,第二用户配置就无法生效相同的配置项,用户配置会覆盖系统配置系统配置里有而用户配置里没有的配置项,以系统配置为准<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="鼠标支持"><a href="#鼠标支持" class="headerlink" title="鼠标支持"></a>鼠标支持</h1><p>在 vim 里也可以使用鼠标，我们可以设置鼠标在 vim 的那个模式下生效。启用鼠标支持之后在不同的终端使用场景下，也有一定的区别，如果使用 xterm 兼容终端，在多窗口编辑的情况下可以使用鼠标进行窗口切换和拖拽窗口大小，如果使用 linux 兼容终端，那么鼠标支持是不生效的</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 鼠标模式</span>n 普通模式<span class="token function">v</span> 可视模式i 插入模式c 命令行模式h 在帮助文件里a 以上所有模式<span class="token comment" spellcheck="true"># 启用鼠标支持</span><span class="token keyword">set</span> mouse<span class="token operator">=</span>a<span class="token comment" spellcheck="true"># 关闭鼠标支持</span><span class="token keyword">set</span> mouse-<span class="token operator">=</span>a<span class="token comment" spellcheck="true"># 判断终端类型启用鼠标支持模式</span><span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">'mouse'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">'gui_running'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>term <span class="token operator">=</span>~ <span class="token string">'xterm'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>has<span class="token punctuation">(</span><span class="token string">'mac'</span><span class="token punctuation">))</span>    <span class="token keyword">set</span> mouse<span class="token operator">=</span>a  <span class="token keyword">else</span>    <span class="token keyword">set</span> mouse<span class="token operator">=</span>nvi  endifendif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="备份和撤销文件"><a href="#备份和撤销文件" class="headerlink" title="备份和撤销文件"></a>备份和撤销文件</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> backup    <span class="token comment" spellcheck="true"># 对一个文件修改之后生成对应的备份文件</span><span class="token keyword">set</span> undofile    <span class="token comment" spellcheck="true"># 对一个文件修改之后生成对应的撤销文件</span><span class="token keyword">set</span> undodir<span class="token operator">=</span>~/.vim/undodir    <span class="token comment" spellcheck="true"># 指定撤销文件的存放目录</span><span class="token keyword">set</span> backupdir<span class="token operator">=</span>~/.vim/backupdir    <span class="token comment" spellcheck="true"># 指定备份文件的存放目录</span><span class="token comment" spellcheck="true"># 如果没有此目录则自动创建目录</span><span class="token keyword">if</span> <span class="token operator">!</span>isdirectory<span class="token punctuation">(</span><span class="token operator">&amp;</span>undodir<span class="token punctuation">)</span>  call mkdir<span class="token punctuation">(</span><span class="token operator">&amp;</span>undodir, <span class="token string">'p'</span>, 0700<span class="token punctuation">)</span>endif<span class="token keyword">if</span> <span class="token operator">!</span>isdirectory<span class="token punctuation">(</span><span class="token operator">&amp;</span>backupdir<span class="token punctuation">)</span>  call mkdir<span class="token punctuation">(</span><span class="token operator">&amp;</span>backupdir, <span class="token string">'p'</span>, 0700<span class="token punctuation">)</span>endif<span class="token keyword">set</span> enc<span class="token operator">=</span>utf-8    <span class="token comment" spellcheck="true"># enc 是显示文件时的编码(fenc 是当前文件编码,fencs 是打开文件时进行解码的)</span><span class="token keyword">set</span> nocompatible    <span class="token comment" spellcheck="true"># 设置 vim 不需要和 vi 兼容</span><span class="token keyword">set</span> backspace<span class="token operator">=</span>indent,eol,start    <span class="token comment" spellcheck="true"># backspace 键的工作模式,indent:允许删除自动缩进的空格 eol:能够将一行删除完后合并到上一行 start:删除此次进入插入模式前的输入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h1><p>vim 里的基本光标移动是通过 h、j、k、l 四个键来实现的，之所以使用这四个键，是有历史原因的，当时的 vi 开发者的键盘上还没有我们现在独立的光标键，四个光标的符号直接标注在 h、j、k、l 四个字母按键上。因此，即使今天所有的键盘都有了光标移动键，很多资深的 vim 用户仍然使用这四个键来移动光标</p><p>vim 跳转到行首的命令是 0，跳转到行尾的命令是 $，还有使用 ^ 跳转到行首的第一个非空白字符</p><p>对于一次移动超过一个字符的情况，vim 支持使用 b/w 和 B/W，来进行以单词为单位的跳转，用来向后或向前跳转一个单词。大写个小写命令的区别在于，小写命令跟编程语言里的标识符规则相似，认为一个单词是由字母、数字、下划线组成的，而大写的命令则认为非空字符都是单词</p><p>根据单个字符来进行光标移动，分别是 f(find) 和 t(till)，fa 是移动光标到下一个 a 字符，ta 是移动光标到下一个字符 a 的前一个字符，大写的 F/T 代表反向</p><p>对于使用 vim 去阅读一些文档的时候，使用 ( 和 ) 分别是移动光标到上一句和下一句，使用 { 和 } 分别是移动光标到上一段和下一段</p><p>很多环境里，vim 支持使用 &lt;Home&gt; 和 &lt;End&gt; 跳转到文件的开头行和结尾行，如果不行，还可以使用 vi 兼容的 gg 和 G 跳转到开头行和结尾行(G 是跳转到结尾行的第一个字符)</p><pre class="line-numbers language-bash"><code class="language-bash">h:左j:下k:上l:右0:跳转到行首$:跳转到行尾^:跳转到行首的第一个非空白字符b/B:光标移至光标当前所在单词的词首,如果光标已经在单词的词首,则会跳至前一个单词的词首e/E:光标移至光标当前所在单词的词尾,如果光标已经在单词的词尾,则会跳至后一个单词的词尾w/W:向前跳转一个单词或字符串,光标停留在单词词首A:光标移至行尾并进入编辑模式I:光标移至行首并进入编辑模式fa:移动光标到当前行下一个 a 字符2fa:移动光标到当前行第二个 a 字符ta:移动光标到当前行下一个字符 a 的前一个字符2ta:移动光标到当前行第二个字符 a 的前一个字符F/T:代表反向<span class="token punctuation">(</span>:移动光标到上一句<span class="token punctuation">)</span>:移动光标到下一句<span class="token punctuation">{</span>:移动光标到上一段<span class="token punctuation">}</span>:移动光标到下一段%:匹配括号移动光标,包括 <span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>,需要将光标先移动到括号上<span class="token punctuation">(</span>编辑 Nginx 的配置文件时非常方便<span class="token punctuation">)</span>*/<span class="token comment" spellcheck="true">#:匹配光标当前所在的单词的下一个和上一个</span>gg:移动光标到首行的第一个字符G:移动光标到尾行的第一个字符:n/ngg/nG:指定光标跳转到 n 行<span class="token operator">&lt;</span>PageUp<span class="token operator">></span>:向上翻页<span class="token operator">&lt;</span>PageDown<span class="token operator">></span>:向下翻页n<span class="token operator">|</span>:n代表数字,移动到指定的列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文本修改"><a href="#文本修改" class="headerlink" title="文本修改"></a>文本修改</h1><p>在 vim 的一般原则里，常用的功能，按键应尽可能少，因此很多相近的功能在 vim 里会有不同的按键，不仅如此，大写键也一般会重载一个相近但稍稍不同的含义</p><pre class="line-numbers language-bash"><code class="language-bash">dd:删除整行d0:光标位置<span class="token punctuation">(</span>不包含<span class="token punctuation">)</span>删除到行首的所有字符d$/D:光标位置<span class="token punctuation">(</span>包含<span class="token punctuation">)</span>删除到行尾的所有字符db:删除光标当前位置<span class="token punctuation">(</span>不包含<span class="token punctuation">)</span>到单词起始处的所有字符de:删除光标当前位置<span class="token punctuation">(</span>包含<span class="token punctuation">)</span>到单词结尾处的所有字符dw:删除光标当前位置<span class="token punctuation">(</span>包含<span class="token punctuation">)</span>到下个单词起始处的所有字符cc/S:删除整行并进入插入模式c$/C:光标位置删除到行尾并进入插入模式s/cl:删除一个字符并进入插入模式i:在当前光标字符前面进入插入模式I:光标移动到行首非空白字符并进入插入模式a:在当前光标字符后面进入插入模式<span class="token variable">$a</span>/A:光标移动到行尾并进入插入模式o:在当前行的下方插入新行并进入插入模式O:在当前行的上方插入新行并进入插入模式ra:光标下的字符替换为aR:进入替换模式,每次按键替换一个字符<span class="token punctuation">(</span>直到按下<span class="token operator">&lt;</span>Esc<span class="token operator">></span><span class="token punctuation">)</span>u:撤销上一个修改动作<span class="token punctuation">(</span>可多次撤销<span class="token punctuation">)</span>U:撤销当前行上的所有修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h1><p>如果想要在 vim 里拥有高效编辑的能力， 必然要掌握超过单个字符编辑的能力，也就是说，要掌握词(word)、句子(sentense)、段落(paragraph)级别的编辑能力。在 Vim 里，这样以一定标准分隔符界定的概念叫做文本对象(text objects)。文本对象是一个很强大的功能，无论光标处于该文本对象的哪个字符中，我们都可以对整个文本对象进行操作，这也是为什么 vim 是世界上最快的编辑器的原因</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 文本对象常用的编辑命令</span>y:复制d:删除c:替换v:选中<span class="token comment" spellcheck="true"># 文本对象有以下几种(标签用 t 表示)</span>w s p <span class="token string">''</span> <span class="token string">""</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>tag<span class="token operator">></span><span class="token comment" spellcheck="true"># 文本对象的操作范围有两种</span>i:是inner的意思,操作时不包括单词边上的空格符或包围符号a:是arround的意思,操作时包括单词边上的空格符或包围符号<span class="token comment" spellcheck="true"># 文本对象操作列子</span>操作文本对象:<span class="token operator">&lt;</span>h1<span class="token operator">></span>Sample Title<span class="token operator">&lt;</span>/h1<span class="token operator">></span>,光标在Sample单词的S上dw:<span class="token operator">&lt;</span>h1<span class="token operator">></span>Title<span class="token operator">&lt;</span>/h1<span class="token operator">></span>diw:<span class="token operator">&lt;</span>h1<span class="token operator">></span> Title<span class="token operator">&lt;</span>/h1<span class="token operator">></span>daw:<span class="token operator">&lt;</span>h1<span class="token operator">></span>Title<span class="token operator">&lt;</span>/h1<span class="token operator">></span>dit:<span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>/h1<span class="token operator">></span> <span class="token punctuation">(</span>t代表的是<span class="token operator">&lt;</span>tag<span class="token operator">></span>文本对象<span class="token punctuation">)</span>dat:Empty    <span class="token punctuation">(</span>这里因为文本对象的操作范围是a,所有连同包围符号也一并删除<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 操作文本对象:cdmuwfon.rg("stwq jkntrc," + "opac liixisq"),光标在stwq单词的s上(对于成对的标签符号操作时,光标可以在标签内的任何位置)</span>di<span class="token string">":cdmuwfon.rg("</span><span class="token string">" + "</span>opac liixisq<span class="token string">")da"</span>:cdmuwfon.rg<span class="token punctuation">(</span>+ <span class="token string">"opac liixisq"</span><span class="token punctuation">)</span>di<span class="token punctuation">(</span>:cdmuwfon.rg<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (和)都可以</span>da<span class="token punctuation">(</span>:cdmuwfon.rgci<span class="token string">":cdmuwfon.rg("</span><span class="token string">" + "</span>opac liixisq<span class="token string">")  # 并且进入了插入模式ca"</span>:cdmuwfon.rg<span class="token punctuation">(</span>+ <span class="token string">"opac liixisq"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 并且进入了插入模式</span>ci<span class="token punctuation">(</span>:cdmuwfon.rg<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 并且进入了插入模式,这在编程中非常方便</span>ca<span class="token punctuation">(</span>:cdmuwfon.rg  <span class="token comment" spellcheck="true"># 并且进入了插入模式</span>vi<span class="token punctuation">(</span>:进入视图模式并且选中<span class="token string">"stwq jkntrc,"</span> + <span class="token string">"opac liixisq"</span>  <span class="token comment" spellcheck="true"># 可以按d进行删除</span>va<span class="token punctuation">(</span>:进入视图模式并且选中<span class="token punctuation">(</span><span class="token string">"stwq jkntrc,"</span> + <span class="token string">"opac liixisq"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多的文本对象操作可以使用如下的示例进行各种各样的组合，让复杂的操作只需要几个简单的组合键就能完成，极大的提高了我们的工作效率</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>y:复制 d:删除 c:替换 v:选中<span class="token punctuation">]</span> <span class="token punctuation">[</span>i和a 文本对象的操作范围<span class="token punctuation">]</span> <span class="token punctuation">[</span>w s p <span class="token string">''</span> <span class="token string">""</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>tag<span class="token operator">></span> 文本对象<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="重复操作"><a href="#重复操作" class="headerlink" title="重复操作"></a>重复操作</h1><p>vim 里有非常多的命令组合，如果我们需要重复这样的命令，每次都要手敲一遍，这显示不是一件容易的事情。其实 vim 已经想到了这个问题，提前定义好了一些简单的重复键</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">;</span>:重复最近的字符查找操作<span class="token punctuation">(</span>f t<span class="token punctuation">)</span>,:反向n:重复最近的字符查找操作<span class="token punctuation">(</span>/ ?<span class="token punctuation">)</span>N:反向.:重复执行最近的修改操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>vim 的工作环境是由运行支持文件来设定的，如果想要定制 vim ，就需要知道 vim 的目录结构</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 以 vim8.2 为例,标准的安装位置分别在</span>Unix:/usr/share/vim/vim82<span class="token punctuation">(</span>如果是编译安装则取决于你的安装目录<span class="token punctuation">)</span>Windows:C:\Program Files<span class="token punctuation">(</span>x86<span class="token punctuation">)</span>\Vim\vim82<span class="token comment" spellcheck="true"># 这个目录下面还有很多子目录,这些子目录下面就是分类放置的 vim 支持文件</span>syntax:vim的语法加亮文件doc:vim的帮助文件colors:vim的配色方案plugin:vim的<span class="token string">"插件"</span>,即用来增强vim功能的工具<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 syntax 目录为例，目录下有 628 个文件都是以 .vim 作为后缀，就代表 vim 对 628 不同的文件类型提供语法加亮支持，例如 java.vim 文件，就是对 java 类型的文件进行语法加亮，也可以用 :setfiletype java 这样的命令来设置文件的类型</p><p>plugin 目录下的系统内置插件不多</p><pre class="line-numbers language-bash"><code class="language-bash">getscriptPlugin:获得最新的vim脚本的插件<span class="token punctuation">(</span>现在都广泛使用Git<span class="token punctuation">)</span>gzip:编辑.gz压缩文件<span class="token punctuation">(</span>编辑后缀为.gz的文件时自动解压和压缩,用户感知不到这个文件是压缩的<span class="token punctuation">)</span>logiPat:模式匹配的逻辑运算符<span class="token punctuation">(</span>允许以逻辑运算,而非标准正则表达式的方式来写模式匹配表达式<span class="token punctuation">)</span>manpager:使用vim来查看man帮助<span class="token punctuation">(</span>强烈建议试一下,记得使用vim的跳转键 C-<span class="token punctuation">]</span> 和 C-T<span class="token punctuation">)</span>matchparen:对括号进行高亮匹配<span class="token punctuation">(</span>现代编辑器基本都有类似的功能<span class="token punctuation">)</span>netrwPlugin:从网络上编辑文件和浏览远程目录<span class="token punctuation">(</span>支持多种常见协议,如ftp和scp,可直接打开目录来选择文件<span class="token punctuation">)</span>rrhelper:用于支持 --remote-wait 编辑<span class="token punctuation">(</span>vim的多服务器会用到这一功能<span class="token punctuation">)</span>spellfile:在拼写文件缺失时自动下载<span class="token punctuation">(</span>vim一般只安装了英文的拼写文件<span class="token punctuation">)</span>tarPlugin:编辑压缩的tar文件<span class="token punctuation">(</span>tar 不支持写入<span class="token punctuation">)</span>tohtml:把语法加亮的结果转成HTML文件并保存vimballPlugin:创建和解开.vba文件<span class="token punctuation">(</span>过时<span class="token punctuation">)</span>zipPlugin:编辑zip文件<span class="token punctuation">(</span>zip 可支持写入<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打开远程文件和浏览目录</span>format: protocol://<span class="token punctuation">[</span>user@<span class="token punctuation">]</span>hostname<span class="token punctuation">[</span>:port<span class="token punctuation">]</span>/<span class="token punctuation">[</span>path<span class="token punctuation">]</span>vim scp://root@k8s-node1/test    <span class="token comment" spellcheck="true"># 打开root用户家目录下的test文件</span>vim scp://root@k8s-node1//etc/docker/    <span class="token comment" spellcheck="true"># 使用远程终端的绝对路径,要使用双斜杠</span><span class="token comment" spellcheck="true"># 使用vim查看man帮助文档</span><span class="token function">export</span> MANPAGER<span class="token operator">=</span><span class="token string">"vim -M +MANPAGER -"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h1><p>vim 的插件严格来说应该叫包，我们安装一个插件，就是在 .vim 目录下解压插件包，基本上是安装之后就不管了，即使这个插件有更新，我们也不能及时的更新到最新的版本。现在 git 的流行，让我们对版本的控制变得简单，而在有了包管理器之后，配合 git 的版本控制，能够让我们非常方便的安装插件和更新插件，已经一系列对插件的管理操作</p><p>安装 minpac 包管理器并通过包管理器安装插件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装 minpac</span><span class="token function">git</span> clone https://github.com/k-takata/minpac.git ~/.vim/pack/minpac/opt/minpac<span class="token comment" spellcheck="true"># 初始化包管理器和指定需要安装的插件(写入到 vim 的配置文件)</span>function<span class="token operator">!</span> PackInit<span class="token punctuation">(</span><span class="token punctuation">)</span> abort  packadd minpac  call minpac<span class="token comment" spellcheck="true">#init()</span>  call minpac<span class="token comment" spellcheck="true">#add('k-takata/minpac', {'type': 'opt'})</span>  <span class="token string">" Additional plugins here.  call minpac#add('vim-jp/syntax-vim-ex')  call minpac#add('tyru/open-browser.vim')  call minpac#add('rkulla/pydiction')    # python 补全插件endfunction"</span> Plugin settings here.<span class="token string">" Define user commands for updating/cleaning the plugins."</span> Each of them calls PackInit<span class="token punctuation">(</span><span class="token punctuation">)</span> to load minpac and register" the information of plugins, <span class="token keyword">then</span> performs the task.command<span class="token operator">!</span> PackUpdate call PackInit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> call minpac<span class="token comment" spellcheck="true">#update()    # 自定义命令</span>command<span class="token operator">!</span> PackClean  call PackInit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> call minpac<span class="token comment" spellcheck="true">#clean()</span>command<span class="token operator">!</span> PackStatus packadd minpac <span class="token operator">|</span> call minpac<span class="token comment" spellcheck="true">#status()</span><span class="token comment" spellcheck="true"># 保存 .vimrc 文件,重启 vim 之后我们就有了三个自定义的命令(命令模式下)</span>PackUpdatePackCleanPackStatus<span class="token comment" spellcheck="true"># 安装插件</span>在 .vimrc 文件写入插件的 GitHub 项目的用户名/项目名,通过 :PackUpdate 命令更新插件插件格式为:call minpac<span class="token comment" spellcheck="true">#add('[package-author]/[package-name]')</span><span class="token comment" spellcheck="true"># 删除插件</span>同样需要编辑 .vimrc 文件,删除不需要的插件,通过 :PackClean 命令更新插件,插件就会被删除<span class="token comment" spellcheck="true"># 查看插件状态</span>:PackStatus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插件安装成功的界面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.imgdb.cn/item/601539b33ffa7d37b3df3b31.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h1><p>一般而言，对于终端 vim 来说，它是没法分辨用户是输入操作还是粘贴操作的。因此在粘贴内容时，Vim 的很多功能，特别是智能缩进、制表符转换等功能(这些功能是用于输入操作的)，就会修改粘贴的内容，导致我们粘贴的内容显示的结果不对，或者出现乱码。要解决这个问题，我们就得让 vim 知道，我们的操作到底是输入操作还是粘贴操作，vim 有一个 paste 选项，就是用来切换输入和粘贴的状态的，如果现在处于 :set paste 状态，vim 就认为现在是粘贴操作，智能缩进、制表符转换等功能就不会修改粘贴的内容，不过每次都手动修改这个状态是非常麻烦的，下面有两个优化方法</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 方法一,通过自定义键来切换paste和nopaste的状态</span><span class="token keyword">set</span> pastetoggle<span class="token operator">=</span><span class="token operator">&lt;</span>F2<span class="token operator">></span>  <span class="token comment" spellcheck="true"># 在插入模式下,按&lt;F2>会切换paste状态</span>nnoremap <span class="token operator">&lt;</span>F2<span class="token operator">></span> :set invpaste paste?<span class="token operator">&lt;</span>CR<span class="token operator">></span>  <span class="token comment" spellcheck="true"># 在命令模式下,按&lt;F2>会切换paste状态</span>imap <span class="token operator">&lt;</span>F2<span class="token operator">></span> <span class="token operator">&lt;</span>C-O<span class="token operator">></span>:set invpaste paste?<span class="token operator">&lt;</span>CR<span class="token operator">></span>  <span class="token comment" spellcheck="true"># 以nopaste状态进入插入模式后,可以按一次&lt;F2>切换paste状态</span><span class="token comment" spellcheck="true"># 方法二,进入插入模式的时候自动开启paste,退出插入模式自动关闭paste</span><span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">'autocmd'</span><span class="token punctuation">)</span>  augroup vimrcExtension    autocmd<span class="token operator">!</span>    autocmd InsertEnter * <span class="token keyword">set</span> <span class="token function">paste</span>    autocmd InsertLeave * <span class="token keyword">set</span> nopaste    <span class="token keyword">if</span> <span class="token operator">!</span> has<span class="token punctuation">(</span><span class="token string">'gui_running'</span><span class="token punctuation">)</span>      <span class="token keyword">set</span> ttimeoutlen<span class="token operator">=</span>10      autocmd InsertEnter * <span class="token keyword">set</span> ttimeoutlen<span class="token operator">=</span>0      autocmd InsertEnter * <span class="token keyword">set</span> ttimeoutlen<span class="token operator">=</span>1000    endif  augroup endendif<span class="token comment" spellcheck="true"># 一直处于 paste 开启的状态下虽然不影响基本的功能,但是会影响其他插件的正常工作(例如 python 补全插件就无法使用了)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="交换文件"><a href="#交换文件" class="headerlink" title="交换文件"></a>交换文件</h1><p>对一个单独的文件使用多个 vim 会话进行编辑，很容易出现冲突的情况，所以使用 vim 时肯定会遇到过 Swap file “.filename.swp” already exists! 这个错误提示，出现这个错误提示有两种原因</p><ol><li>上次编辑这个文件时，发生了意外崩溃，导致文件没有存盘就退出了</li><li>有另一个会话正在使用 vim 编辑这个文件</li></ol><p>当错误提示的 process ID 后面没有 (still running) 的字样，就是第一种情况，否则就是第二种情况。第一种情况下，vim 支持即使没有存盘的情况下仍然保存编辑状态，我们可以按 r 键来恢复上次没有存盘的内容，在文件恢复之后，vim 仍然不会删除崩溃时保留下来的那个交换文件，因此我们恢复文件内容之后，确定内容无误就可以保存文件。重新打开文件，按 d 键可以删除交换文件，也可以单独使用 rm -f 删除交换文件(交换文件一般是 .filename.swp 的格式)。第二种情况下，是有另一个会话正在使用 vim 编辑这个文件，这时候是没有 delete 交换文件这一选项的，这时候一般选择 q 或者 a 放弃编辑，如果只是要查看文件，那也可以选择 o 以只读文件打开，需要用到 e 强行进行编辑的情况很少</p><pre class="line-numbers language-bash"><code class="language-bash">Swap <span class="token function">file</span> <span class="token string">".nginx.conf.swp"</span> already exists<span class="token operator">!</span><span class="token punctuation">[</span>O<span class="token punctuation">]</span>pen Read-Only, <span class="token punctuation">(</span>E<span class="token punctuation">)</span>dit anyway, <span class="token punctuation">(</span>R<span class="token punctuation">)</span>ecover, <span class="token punctuation">(</span>Q<span class="token punctuation">)</span>uit, <span class="token punctuation">(</span>A<span class="token punctuation">)</span>bort:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="编辑多个文件"><a href="#编辑多个文件" class="headerlink" title="编辑多个文件"></a>编辑多个文件</h1><p>vim 支持一次性打开多个文件，只需要在命令行上写出多个文件即可，还支持通配符的方式。例如我们可以使用 vim *.cpp 或者 vim *.yaml 去编辑多个文件，但是执行这个命令之后只会打开所有文件中的第一个文件，这是 vim 为了确保低配置环境也能正常工作而设计的，避免不必要的内存浪费，其实在执行上述命令的时候，vim 建立了一个文件列表，并且暂时只打开其中的第一个文件，接下来用户可以在不退出 vim 的情况下，查看文件列表，继续编辑下一个文件或者退出编辑</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">":args"</span> <span class="token comment" spellcheck="true"># 显示编辑的所有文件列表,其中[]括起来的文件是你正在编辑的文件</span><span class="token string">":args **/*.yaml/filename"</span> <span class="token comment" spellcheck="true"># 在进入 vim 之后,打开当前目录下的 *.yaml 文件和打开指定文件</span><span class="token string">":next/:n"</span> <span class="token comment" spellcheck="true"># 编辑下一个文件,如果当前文件未存盘则会报错,命令后面加!则会放弃修改内容,可以设置 vim 在切换文件时自动存盘:set autowrite</span><span class="token string">":Next/:previous"</span> <span class="token comment" spellcheck="true"># 打开上一个文件</span><span class="token string">":first/rewind"</span> <span class="token comment" spellcheck="true"># 回到文件列表的第一个文件</span><span class="token string">":last"</span> <span class="token comment" spellcheck="true"># 打开文件列表的最后一个文件</span><span class="token string">":n|normal ggp"</span> <span class="token comment" spellcheck="true"># 切换到下一个文件并在正常模式下执行 ggp 命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="缓冲区的管理和切换"><a href="#缓冲区的管理和切换" class="headerlink" title="缓冲区的管理和切换"></a>缓冲区的管理和切换</h1><p>vim 里会对每一个已打开或要打开的文件创建一个缓冲区，这个缓冲区就是文件在 vim 中的映射，它是 vim 里的一个基本概念。缓冲区(buffer)就是一块内存区域，里面存储着正在编辑的文件，如果没有把缓冲区里的文件存盘，那么原始文件不会被更改。在多文件编辑的时候你也会有同样数量的缓冲区，不过缓冲区的数量常常会比编辑多文件时的文件列表数更高，因为你用 :e/:o 等命令另外打开的文件不会改变命令行参数(就是不加入到 :args 的文件列表)，但同样会增加缓冲区的数量。 此外 :args 代表参数列表 / 文件列表，真的只是文件的列表而已。比起文件列表，缓冲区中有更多信息，最基本的就是记忆了光标的位置。在 vim 里，除了切换到下一个文件这样的批处理操作外，操作缓冲区的命令比简单操作文件的命令更为方便</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用通配符命令编辑多个文件</span>vim *.yaml<span class="token comment" spellcheck="true"># :args 查看文件列表</span><span class="token punctuation">[</span>deployment.yaml<span class="token punctuation">]</span> emptyDir.yaml     hostpath-vol.yaml ingress.yaml      nfs-vol.yaml      service.yaml<span class="token comment" spellcheck="true"># :ls/:files/:buffers 查看缓冲区列表</span>  1 %a   <span class="token string">"deployment.yaml"</span>              line 45  2      <span class="token string">"emptyDir.yaml"</span>                line 0  3      <span class="token string">"hostpath-vol.yaml"</span>            line 0  4      <span class="token string">"ingress.yaml"</span>                 line 0  5      <span class="token string">"nfs-vol.yaml"</span>                 line 0  6      <span class="token string">"service.yaml"</span>                 line 0Press ENTER or <span class="token function">type</span> <span class="token function">command</span> to <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，文件列表和缓冲区列表都展示了打开的所有文件，而且分别使用 [] 和 %a 标示了当前正在编辑的文件。不过缓存区列表比文件列表给出了更多的文件信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 缓冲区示例</span>1 %a   <span class="token string">"deployment.yaml"</span>              line 45<span class="token comment" spellcheck="true"># 参数意义</span>1:代表缓冲区列表文件的编号%a:缓冲区的状态<span class="token string">"deployment.yaml"</span>:文件名字line 45:光标所在的行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缓冲区状态</p><pre class="line-numbers language-bash"><code class="language-bash">%:当前缓冲区a:活动缓存区,当前显示在屏幕上的<span class="token comment" spellcheck="true">#:交换缓冲区(最近的缓冲区)</span><span class="token operator">=</span>:只读缓冲区+:已经更改的缓冲区-:非活动的缓冲区h:隐藏的缓冲区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开缓冲区</p><pre class="line-numbers language-bash"><code class="language-bash">:buffer number <span class="token comment" spellcheck="true"># 以缓冲区列表文件编号来打开缓冲区</span>:buffer filename <span class="token comment" spellcheck="true"># 以缓冲区列表文件名字来打开缓冲区</span>:sbuffer number/filename <span class="token comment" spellcheck="true"># 分割当前窗口开始编辑另一个缓冲区,如果没有指定 number/filename,则以当前缓冲区进行窗口分割</span>:ball <span class="token comment" spellcheck="true"># 为每一个缓冲区打开一个窗口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>切换缓冲区</p><pre class="line-numbers language-bash"><code class="language-bash">:bnext <span class="token comment" spellcheck="true"># 切换到下一个缓冲区</span>:bprevious/:bNext <span class="token comment" spellcheck="true"># 切换到上一个缓冲区</span>:blast <span class="token comment" spellcheck="true"># 切换到最后一个缓冲区</span>:bfirst <span class="token comment" spellcheck="true"># 切换到第一个缓冲区</span>:set hidden <span class="token comment" spellcheck="true"># 允许缓冲区在未保存的情况下进行切换(修改由vim进行保存)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除缓冲区</p><pre class="line-numbers language-bash"><code class="language-bash">:bdelete filename/3 <span class="token comment" spellcheck="true"># 根据文件名字或者编号来删除一个缓冲区</span>:1,3 bdelete <span class="token comment" spellcheck="true"># 根据指定范围来删除缓冲区</span>:bdelete<span class="token operator">!</span> filename <span class="token comment" spellcheck="true"># 强制删除缓冲区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>卸载缓冲区</p><pre class="line-numbers language-bash"><code class="language-bash">:bunload filename <span class="token comment" spellcheck="true"># 从内存中卸载一个缓冲区,这个缓冲区打开的所有窗口都会关闭,如果缓冲区被改动过,那么该命令将失败    </span>:bunload<span class="token operator">!</span> <span class="token comment" spellcheck="true"># 强制卸载缓冲区,但所有的改动也将会丢失</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="多窗口编辑"><a href="#多窗口编辑" class="headerlink" title="多窗口编辑"></a>多窗口编辑</h1><p>前面所讲的编辑多个文件，也只是在单个窗口进行的，这样的局限在于，我们既不能同时修改两个文件，也不能在同一窗口对比两个文件。我们想要自己同时查看、编辑多个文件，最基本的命令就是 :split (缩写 :sp)，这个命令后面如果有文件名，表示分割窗口并打开指定的文件，如果没有文件名，那就表示仅仅把当前窗口分割开，当前编辑的文件在两个窗口里都显示，:split 默认使用水平分割的方式。竖直分割的命令是 :vsplit (缩写 :vs)，竖直分割要求屏幕比较宽，但如果你想对比两个文件时，竖直分割就会更方便</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>Ctrl-w<span class="token operator">></span> s/:split/:sp <span class="token comment" spellcheck="true"># 水平分割当前窗口</span><span class="token operator">&lt;</span>Ctrl-w<span class="token operator">></span> v/:vsplit/:vs <span class="token comment" spellcheck="true"># 竖直分割当前窗口</span>:split/:sp filename <span class="token comment" spellcheck="true"># 水平分割窗口并打开指定的文件</span>:vsplit/:vs filename <span class="token comment" spellcheck="true"># 竖直分割窗口并打开指定的文件</span><span class="token operator">&lt;</span>Ctrl-w<span class="token operator">></span> <span class="token punctuation">(</span>h j k l 方向键<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 可以在多窗口之间跳转</span><span class="token operator">&lt;</span>Ctrl-w<span class="token operator">></span> w <span class="token comment" spellcheck="true"># 跳转到下一个(往右和往下跳)窗口,W反向</span><span class="token operator">&lt;</span>Ctrl-w<span class="token operator">></span> n/:new <span class="token comment" spellcheck="true"># 打开一个新窗口</span><span class="token operator">&lt;</span>Ctrl-w<span class="token operator">></span> c/:close <span class="token comment" spellcheck="true"># 关闭当前窗口,如果当前窗口已经是最后一个则无效</span><span class="token operator">&lt;</span>Ctrl-w<span class="token operator">></span> q/:quit <span class="token comment" spellcheck="true"># 退出当前窗口,当最后一个窗口退出时则退出 vim</span><span class="token operator">&lt;</span>Ctrl-w<span class="token operator">></span> o/:only <span class="token comment" spellcheck="true"># 只保留当前窗口,关闭其他所有窗口</span><span class="token operator">&lt;</span>Ctrl-w<span class="token operator">></span> <span class="token operator">=</span> <span class="token comment" spellcheck="true"># 使得所有窗口大小相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h1><p>多窗口编辑中有一个非常有用的功能，那就是比较两个文件的内容。vim 对此有特殊的支持，使用 vimdiff 或 gvimdiff 命令，后面跟上需要比较的两个文件，就能打开两个窗口比较两个文件了。在比较时，vim 会折叠相同的代码行，并加亮两边文本不同的部分，窗口的滚动也是联动的</p><pre class="line-numbers language-bash"><code class="language-bash">vimdiff emptyDir1.yaml emptyDir2.yaml <span class="token comment" spellcheck="true"># 比较两个文件的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比较文件的实际截图如下</p><p><img src="https://img.imgdb.cn/item/60337cf45f4313ce25aab2e2.jpg" alt=""></p><h1 id="NERDTree-插件"><a href="#NERDTree-插件" class="headerlink" title="NERDTree 插件"></a>NERDTree 插件</h1><p>NERDTree 是最为著名的一个文件浏览 / 管理插件，就是你知道文件大概在哪里，但不知道文件具体名字时的一个好选择。跟很多 vim 插件一 样，NERDTree 会利用多窗口的特性</p><p>安装 NERDTree 插件</p><pre class="line-numbers language-bash"><code class="language-bash">在vimrc的<span class="token string">"Other plugins"</span>下面加入以下语句call minpac<span class="token comment" spellcheck="true">#add('preservim/nerdtree')</span>执行:PackUpdate命令进行安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装成功之后，NERDTree 缺省就会抢占 netrw 使用的路径形式，我们在 vim 中可以使用 e . 来打开 NERDTree(. 代表当前路径) ，也可以在打开一个文件之后使用 :NERDTreeToggle 命令。在打开 NERDTree 窗口之后，使用还是相当直观的，并且按下 ? 就可以查看帮助信息</p><p>在文件或目录上敲回车或双击立即打开该文件或目录</p><p>在文件上使用 go 会预览该文件，也就是光标不会跳转到文件所在的窗口中</p><p>按 i 会打开文件到一个新的水平分割的窗口中，按 s 会打开文件到一个新的竖直分割的窗口中，按 t 会打开文件到一个新的标签页中</p><p>NERDTree 会自动过滤隐藏文件和目录，但如果你需要看到它们的话，也可以用 I 来开启和关闭隐藏文件的显示</p><p>按 m 会出现一个菜单，允许添加、删除、更名等操作</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.imgdb.cn/item/60338c755f4313ce25b1dffc.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>通过前面的学习，可能你已经知道搜索命令 / 和替换命令 :s 的用法了。其实，我们输入的待查找内容是被 vim 当成正则表达式来看待的，这里我们来简单学习一下 vim 里的正则表达式，它跟其他常用的正则表达式还是有区别的。在一个搜索表达式里(或者称为模式 pattern)，. 、* 、^ 、$ 、~ 、[] 、\ 是有特殊含义的字符</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">.</span> 可以匹配除换行符外的任何字符: 如a.可以匹配<span class="token string">"aa"</span> <span class="token string">"ab"</span> <span class="token string">"ac"</span>等,但不能匹配<span class="token string">"a"</span> <span class="token string">"b"</span>或<span class="token string">"ba"</span>,如果需要匹配换行符<span class="token punctuation">(</span>跨行匹配<span class="token punctuation">)</span>的话,则需要使用\_.* 表示之前的匹配源<span class="token punctuation">(</span>最普通的情况为单个字符,匹配源可以是一个字符串,但需要该字符串需要组成一个项,如:\<span class="token punctuation">(</span>ab\<span class="token punctuation">)</span>*<span class="token punctuation">)</span>重复零次或多次: 如aa*可以匹配<span class="token string">"a"</span> <span class="token string">"aa"</span> <span class="token string">"aaa"</span>^ 匹配一行的开头,如果出现在模式的开头的话<span class="token punctuation">;</span>在其他位置代表字符本身$ 匹配一行的结尾,如果出现在模式的结尾的话<span class="token punctuation">;</span>在其他位置代表字符本身~ 匹配上一次替换的字符串,即如果上一次你把<span class="token string">"foo"</span>替换成了<span class="token string">"bar"</span>,那~就匹配<span class="token string">"bar"</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> 匹配方括号内的任一字符,方括号内如果第一个字符是^,表示对结果取反,除开头之外的-表示范围:如<span class="token punctuation">[</span>A-Za-z<span class="token punctuation">]</span>表示任意一个拉丁字母,<span class="token punctuation">[</span>^-+*/<span class="token punctuation">]</span> 表示除了<span class="token string">"-"</span> <span class="token string">"+"</span> <span class="token string">"*"</span> <span class="token string">"/"</span>外的任意字符\ 的含义取决于下一个字符,在大部分的情况下把某些含有特殊意义的字符进行转义,让它们代表字符本身<span class="token punctuation">(</span>. * \ ^ $ ~ <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除此之外的字符都是普通字符，没有特殊含义。不过，需要注意的是，如果使用 / 开始一个搜索命令，或者在替换命令(:s)中使用 / 作为模式的分隔符，那模式中的 / 必须写作 / 才行，否则 Vim 看到 / 就会以为模式结束了，导致错误发生。为了方便书写，我们可以用其他的符号作为模式的分隔符，例如想把”/image/“全部替换成”/images/“的话，我们可以把 :%s//image///images//g 写成 :%s#/image/#/images/#g，这只能适用于替换命令，而在使用搜索命令 / 时我们就没有办法了，只能把模式里的 / 写作 /</p><p>通过 \ 开始的特殊表达式</p><pre class="line-numbers language-bash"><code class="language-bash">\? 表示之前的匹配源重复零次或一次:如 aa\? 可以匹配<span class="token string">"a"</span> <span class="token string">"aa"</span>但不能完整匹配<span class="token string">"aaa"</span><span class="token punctuation">(</span>可以匹配其前两个字符、后两个或最后一个字符<span class="token punctuation">)</span>\+ 表示之前的匹配源重复一次或多次:如 aa\+ 可以匹配<span class="token string">"aa"</span> <span class="token string">"aaa"</span>但不能匹配<span class="token string">"a"</span>或<span class="token string">"b"</span>\<span class="token punctuation">{</span>n,m<span class="token punctuation">}</span> 表示之前的匹配源重复 n 到 m 遍之间,两个数字可以省略部分或全部:如 a\<span class="token punctuation">{</span>3<span class="token punctuation">}</span><span class="token punctuation">(</span>可读作:3个<span class="token string">"a"</span><span class="token punctuation">)</span>可以匹配<span class="token string">"aaa"</span> a\<span class="token punctuation">{</span>,3<span class="token punctuation">}</span><span class="token punctuation">(</span>可读作:最多3个<span class="token string">"a"</span><span class="token punctuation">)</span>可以匹配<span class="token string">""</span> <span class="token string">"a"</span> <span class="token string">"aa"</span>和<span class="token string">"aaa"</span> 两个数字都省略时等价于* 也就是之前的匹配源可以重复零次或多次\<span class="token punctuation">(</span>和\<span class="token punctuation">)</span> 括起一个模式,将其组成为单个匹配源:如 \<span class="token punctuation">(</span>foo\<span class="token punctuation">)</span>\? 可以表示单词<span class="token string">"foo"</span>出现零次或一次 \<span class="token punctuation">(</span>和\<span class="token punctuation">)</span>还有一个附加作用,是捕获匹配的内容,按\<span class="token punctuation">(</span>出现的先后顺序,可以用 \1 \2到 \9来引用,如果你不需要捕获匹配内容的话,用\%<span class="token punctuation">(</span> 和 \<span class="token punctuation">)</span> 的性能更高\<span class="token operator">&amp;</span> 是分支内多个邻接<span class="token punctuation">(</span>concat<span class="token punctuation">)</span>的分隔符,概念上可以和与操作相比,表示每一项都需要匹配成功,然后取最后一项的结果返回:如 .*foo.*\<span class="token operator">&amp;</span>.*bar.* 匹配同时出现了<span class="token string">"foo"</span>和<span class="token string">"bar"</span>的完整行\<span class="token operator">|</span> 是多个分支的分隔符,概念上可以和或操作相比,表示任意一项匹配成功即可:如foo\<span class="token operator">|</span>bar 可匹配<span class="token string">"foo"</span>或<span class="token string">"bar"</span>两单词之一\<span class="token operator">&lt;</span> 匹配单词的开头\<span class="token operator">></span> 匹配单词的结尾\s 匹配空白字符 <span class="token operator">&lt;</span>Space<span class="token operator">></span> 和 <span class="token operator">&lt;</span>Tab<span class="token operator">></span>\S 匹配非空白字符\d 匹配数字,相当于 <span class="token punctuation">[</span>0-9<span class="token punctuation">]</span>\D 匹配非数字,相当于 <span class="token punctuation">[</span>^0-9<span class="token punctuation">]</span>\x 匹配十六进制数字,相当于 <span class="token punctuation">[</span>0-9A-Fa-f<span class="token punctuation">]</span>\X 匹配非十六进制数字,相当于 <span class="token punctuation">[</span>^0-9A-Fa-f<span class="token punctuation">]</span>\w 匹配单词字符,相当于 <span class="token punctuation">[</span>0-9A-Za-z_<span class="token punctuation">]</span>\W 匹配非单词字符,相当于 <span class="token punctuation">[</span>^0-9A-Za-z_<span class="token punctuation">]</span>\h 匹配单词首字符,相当于 <span class="token punctuation">[</span>A-Za-z_<span class="token punctuation">]</span>\H 匹配非单词首字符,相当于 ^<span class="token punctuation">[</span>A-Za-z_<span class="token punctuation">]</span>\c 忽略大小写进行匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象地讨论正则表达式恐怕你也不容易记住，还是拿一些具体的例子来练习一下吧</p><h1 id="搜索替换实例"><a href="#搜索替换实例" class="headerlink" title="搜索替换实例"></a>搜索替换实例</h1><p>搜索表达式</p><pre class="line-numbers language-bash"><code class="language-bash">/aae <span class="token comment" spellcheck="true"># 往后查找aae,没有使用界定符,会查找到aaes qaae等单词</span>/\<span class="token operator">&lt;</span>name\<span class="token operator">></span> <span class="token comment" spellcheck="true"># 搜索单词name,使用\&lt; \>进行界定单词的开头和结尾,这样的话names是搜索不到的</span>/\<span class="token operator">&lt;</span>\<span class="token punctuation">(</span>red\<span class="token operator">|</span>blue\<span class="token punctuation">)</span>\<span class="token operator">></span> <span class="token comment" spellcheck="true"># 搜索单词red或blue</span>?aae <span class="token comment" spellcheck="true"># 往前查找aae,没有使用界定符,会查找到aaes qaae等单词</span>* <span class="token comment" spellcheck="true"># 搜索光标下的单词(光标停留在name上,键入*会跳转到下一个name)</span>n <span class="token comment" spellcheck="true"># 光标跳转到后一个</span>N <span class="token comment" spellcheck="true"># 光标跳转到前一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>替换表达式</p><pre class="line-numbers language-bash"><code class="language-bash">Example:<span class="token punctuation">[</span>range<span class="token punctuation">]</span>s/<span class="token punctuation">{</span>pattern<span class="token punctuation">}</span>/<span class="token punctuation">{</span>string<span class="token punctuation">}</span>/<span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># flags 有如下四个选项</span>c confirm 每次替换前询问e error 不显示错误g globle 不询问,整行替换,如果不加g选项,则只替换每行的第一个匹配到的字符串i ignore 忽略大小写这些选项可以合并使用,如cgi表示不区分大小写,整行替换,替换前询问<span class="token comment" spellcheck="true"># 替换例子</span>:s<span class="token operator">!</span>ma<span class="token operator">!</span>am<span class="token operator">!</span> <span class="token comment" spellcheck="true"># 把当前行的ma替换成am</span>:s<span class="token operator">!</span>ma<span class="token operator">!</span>am<span class="token operator">!</span>g <span class="token comment" spellcheck="true"># g标记表示替换行中的所有匹配点(不加g只会替换行中的一个匹配点)</span>:%s<span class="token operator">!</span>ma<span class="token operator">!</span>am<span class="token operator">!</span>g <span class="token comment" spellcheck="true"># 把全文的ma替换成am(1,$s!ma!am!g也是一样的效果)</span>:1,10s<span class="token operator">!</span>ma<span class="token operator">!</span>am<span class="token operator">!</span> <span class="token comment" spellcheck="true"># 表示把第1到第10行(包含1到10行)的ma替换成am</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除替换表达式</p><pre class="line-numbers language-bash"><code class="language-bash">:%s<span class="token operator">!</span>\s\+<span class="token variable">$!!g</span> <span class="token comment" spellcheck="true"># 删除全文行尾的空白字符(&lt;Space> 和 &lt;Tab>)</span>:%s<span class="token operator">!</span>^\s\+<span class="token operator">!</span><span class="token operator">!</span>g <span class="token comment" spellcheck="true"># 删除全文行首的空白字符(&lt;Space> 和 &lt;Tab>)</span>:g/^\s*$/d <span class="token comment" spellcheck="true"># 全局删除沒有內容的空行</span>:%s<span class="token operator">!</span>^\s*$\n<span class="token operator">!</span><span class="token operator">!</span>g <span class="token comment" spellcheck="true"># 把沒有內容的空行(空格 制表符 换行符)替换为空,等于删除空行的效果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文件类型和关联设定"><a href="#文件类型和关联设定" class="headerlink" title="文件类型和关联设定"></a>文件类型和关联设定</h1><p>程序源代码通常由文件组成，每个文件都有一个关联的文件类型。这个文件类型决定了 vim 对其进行处理的一些基本设定，可能受影响的设定具体有以下方面</p><p>如何对文件进行高亮(不同的语言高亮不一样，例如 .c 和 .py 文件)</p><p>制表符 &lt;tab&gt; 的宽度(4个空格数或者8个空格)</p><p>是否在键入 &lt;tab&gt; 时扩展为空格字符</p><p>每次缩进的空格数(可以和制表符宽度不同)</p><p>采用何种自动缩进方法</p><p>其他可适用的选项</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启文件类型检测(写入vimrc配置文件)</span>filetype plugin indent on <span class="token comment" spellcheck="true"># filetype on</span>打开文件类型检测功能,它相当于文件类型检测功能的开关<span class="token comment" spellcheck="true"># filetype plugin on</span>允许vim加载文件类型插件,vim会根据检测到的文件类型,在runtimepath中搜索该类型的所有插件并执行<span class="token comment" spellcheck="true"># filetype indent on </span>允许vim为不同类型的文件定义不同的缩进格式<span class="token comment" spellcheck="true"># 查看文件类型检测是否开启</span>:filetype<span class="token comment" spellcheck="true"># 如果文件的类型未能被正确的检测出来,可以手动设置文件类型</span>:set filetype<span class="token operator">=</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="插入模式自动补全"><a href="#插入模式自动补全" class="headerlink" title="插入模式自动补全"></a>插入模式自动补全</h1><p>自动补全是一个编辑器中很主流的功能，编辑器能够在用户输入一部分内容时就能猜到用户希望输入的是什么，并能够予以提示。自动补全可以节约我们输入的工作量，非常值得我们去学习，vim 内置就有自动补全的功能，补全的对象如下</p><pre class="line-numbers language-bash"><code class="language-bash">整行补全 CTRL-X CTRL-L根据当前文件里关键字补全 CTRL-N/CTRL-P根据字典补全 CTRL-X CTRL-K根据同义词字典补全 CTRL-X CTRL-T根据头文件内关键字补全 CTRL-X CTRL-I根据标签补全 CTRL-X CTRL-<span class="token punctuation">]</span>补全文件名或路径 CTRL-X CTRL-F补全宏定义 CTRL-X CTRL-D补全vim命令 CTRL-X CTRL-V用户自定义补全方式 CTRL-X CTRL-U拼写建议 CTRL-X CTRL-S停止补全并且不应用匹配项 CTRL-E在补全菜单应用对象且离开补全模式 CTRL-Y/<span class="token operator">&lt;</span>Enter<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CTRL-N 和 CTRL-P 分别是对当前文件里的关键字进行补全(往下查找和往上查找)，其他补全都需要先进入 CTRL-X 模式，再键入对应的命令进入对应的补全模式。使用 CTRL-N 和 CTRL-P 上下移动时，输入的文本也会随之变化。使用 &lt;Up&gt; 和 &lt;Down&gt; 上下移动时，输入的文字并不会变化。使用 &lt;PageUp&gt; 和 &lt;PageDown&gt; 键，可以在补全菜单中翻页。使用 Esc 键，将关闭弹出菜单，但会保留之前应用的对象。也就是说，如果你不希望应用任何对象完成补全时，应该使用 CTRL-E 键，而不是使用 Esc 键来取消补全操作</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.imgdb.cn/item/603c67ca5f4313ce252d81e4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>补全文件名字或者路径(基于文件系统)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.imgdb.cn/item/603c68635f4313ce252e318f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Python-开发环境"><a href="#Python-开发环境" class="headerlink" title="Python 开发环境"></a>Python 开发环境</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;学习缘由&quot;&gt;&lt;a href=&quot;#学习缘由&quot; class=&quot;headerlink&quot; title=&quot;学习缘由&quot;&gt;&lt;/a&gt;学习缘由&lt;/h1&gt;&lt;p&gt;我也想成为使用 vim 写 python 代码的人，我觉得这样非常酷&lt;/p&gt;
&lt;h1 id=&quot;历史&quot;&gt;&lt;a href=&quot;#历
      
    
    </summary>
    
    
      <category term="Vim" scheme="https://www.missf.top/categories/Vim/"/>
    
    
      <category term="Vim" scheme="https://www.missf.top/tags/Vim/"/>
    
      <category term="编辑器" scheme="https://www.missf.top/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Wrk 性能测试工具</title>
    <link href="https://www.missf.top/post/bcbad8d3.html"/>
    <id>https://www.missf.top/post/bcbad8d3.html</id>
    <published>2021-01-04T02:58:13.000Z</published>
    <updated>2021-01-20T05:51:09.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wrk-简介"><a href="#wrk-简介" class="headerlink" title="wrk 简介"></a>wrk 简介</h1><p>wrk 是一款针对 HTTP 协议的基准测试工具，它能够在单机多核 CPU 的条件下，使用系统自带的高性能 I/O 机制，如 epoll，kqueue 等，通过多线程和事件模式，对目标机器产生大量的负载。wrk 是复用了 redis 的 ae 异步事件驱动框架，准确来说 ae 事件驱动框架并不是 redis 发明的，它来自于 Tcl 的解释器 jim，这个小巧高效的框架，因为被 redis 采用而被大家所熟知</p><h1 id="wrk-安装"><a href="#wrk-安装" class="headerlink" title="wrk 安装"></a>wrk 安装</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Ubuntu/Debian</span><span class="token function">apt-get</span> <span class="token function">install</span> build-essential libssl-dev <span class="token function">git</span> -y<span class="token function">git</span> clone https://github.com/wg/wrk.git wrk<span class="token function">cd</span> wrk <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -j4<span class="token function">cp</span> wrk /usr/local/bin<span class="token comment" spellcheck="true"># CentOS/RedHat</span>yum groupinstall <span class="token string">'Development Tools'</span>yum <span class="token function">install</span> -y openssl-devel <span class="token function">git</span><span class="token function">git</span> clone https://github.com/wg/wrk.git wrk<span class="token function">cd</span> wrk <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -j4<span class="token function">cp</span> wrk /usr/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证安装是否成功</p><pre class="line-numbers language-bash"><code class="language-bash">wrk -v    <span class="token comment" spellcheck="true"># 查看版本</span>wrk  <span class="token punctuation">[</span>epoll<span class="token punctuation">]</span> Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> 2012 Will GlozerUsage: wrk <span class="token operator">&lt;</span>options<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span>                              Options:                                                -c, --connections <span class="token operator">&lt;</span>N<span class="token operator">></span>  Connections to keep <span class="token function">open</span> 跟服务器建立并保持的TCP连接数量    -d, --duration    <span class="token operator">&lt;</span>T<span class="token operator">></span>  Duration of <span class="token function">test</span> 压测时间               -t, --threads     <span class="token operator">&lt;</span>N<span class="token operator">></span>  Number of threads to use 使用多少个线程进行压测       -s, --script      <span class="token operator">&lt;</span>S<span class="token operator">></span>  Load Lua script <span class="token function">file</span> 指定Lua脚本路径           -H, --header      <span class="token operator">&lt;</span>H<span class="token operator">></span>  Add header to request 为每一个HTTP请求添加HTTP头              --latency          Print latency statistics 在压测结束后打印延迟统计信息           --timeout     <span class="token operator">&lt;</span>T<span class="token operator">></span>  Socket/request <span class="token function">timeout</span> 超时时间         -v, --version          Print version details 打印wrk的详细版本信息        Numeric arguments may include a SI unit <span class="token punctuation">(</span>1k, 1M, 1G<span class="token punctuation">)</span> 代表数字参数支持国际单位  Time arguments may include a <span class="token function">time</span> unit <span class="token punctuation">(</span>2s, 2m, 2h<span class="token punctuation">)</span> 代表时间参数支持时间单位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于线程数：并不是设置得越大，压测效果越好，线程设置过大，反而会导致线程切换过于频繁，效果降低，一般来说，推荐设置成压测机器 CPU 核心数的 2 倍到 4 倍</p><h1 id="wrk-测试"><a href="#wrk-测试" class="headerlink" title="wrk 测试"></a>wrk 测试</h1><pre class="line-numbers language-bash"><code class="language-bash">wrk -t2 -c10 -d20s --latency http://10.244.169.184Running 20s <span class="token function">test</span> @ http://10.244.169.184  2 threads and 10 connections  Thread Stats   Avg<span class="token punctuation">(</span>平均值<span class="token punctuation">)</span>      Stdev<span class="token punctuation">(</span>标准差<span class="token punctuation">)</span>     Max<span class="token punctuation">(</span>最大值<span class="token punctuation">)</span>   +/- Stdev<span class="token punctuation">(</span>正负一个标准差所占比例<span class="token punctuation">)</span>    Latency<span class="token punctuation">(</span>延迟<span class="token punctuation">)</span>     7.08ms    9.11ms  85.30ms   88.17%    Req/Sec<span class="token punctuation">(</span>每秒请求数<span class="token punctuation">)</span>     1.08k   524.84     2.34k    59.13%  Latency Distribution <span class="token punctuation">(</span>延迟分布<span class="token punctuation">)</span>     50%    3.34ms<span class="token punctuation">(</span>50%的请求在3.34ms效应<span class="token punctuation">)</span>     75%    7.07ms     90%   18.22ms     99%   45.30ms  42574 requests <span class="token keyword">in</span> 20.10s, 34.51MB <span class="token function">read</span>Requests/sec:   2117.96<span class="token punctuation">(</span>QPS 即平均每秒处理请求数为 2117.96<span class="token punctuation">)</span>Transfer/sec:   1.72MB<span class="token punctuation">(</span>平均每秒流量<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这仅仅是一个 get 请求的测试。如果想进行 POST 请求，或者每一次请求的参数都不一样，用来模拟用户使用的实际场景，可以使用 Lua 脚本来进行一系列更复杂的测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;wrk-简介&quot;&gt;&lt;a href=&quot;#wrk-简介&quot; class=&quot;headerlink&quot; title=&quot;wrk 简介&quot;&gt;&lt;/a&gt;wrk 简介&lt;/h1&gt;&lt;p&gt;wrk 是一款针对 HTTP 协议的基准测试工具，它能够在单机多核 CPU 的条件下，使用系统自带的高性能 
      
    
    </summary>
    
    
      <category term="性能测试" scheme="https://www.missf.top/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="性能测试" scheme="https://www.missf.top/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Wrk" scheme="https://www.missf.top/tags/Wrk/"/>
    
  </entry>
  
  <entry>
    <title>Kubeadm 快速搭建 k8s 集群</title>
    <link href="https://www.missf.top/post/50806d3a.html"/>
    <id>https://www.missf.top/post/50806d3a.html</id>
    <published>2020-11-20T07:47:02.000Z</published>
    <updated>2021-01-11T05:41:54.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubeadm-简介"><a href="#Kubeadm-简介" class="headerlink" title="Kubeadm 简介"></a>Kubeadm 简介</h1><p>kubeadm 是一个提供了 kubeadm init 和 kubeadm join 的工具，作为创建 Kubernetes 集群的 “快捷途径” 的最佳实践</p><p>kubeadm 通过执行必要的操作来启动和运行最小可用集群。按照设计，它只关注启动引导，而非配置机器。同样的，安装各种 “锦上添花” 的扩展，例如 Kubernetes Dashboard，监控方案，以及特定云平台的扩展，都不在讨论范围内</p><p>k8s 官方社区推出 Kubeadm 工具的原因，就是为了让 kubernetes 集群的部署变得快速简单</p><h1 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h1><p>一台或多台机器，操作系统(CentOS 7、Ubuntu 16.04+、Red Hat Enterprise Linux (RHEL) 7 等)</p><p>每台机器 2 GB 或更多的 RAM</p><p>2 核 CPU 或更多</p><p>集群中的所有机器的网络彼此均能相互连接(公网和内网都可以)</p><p>节点之中不可以有重复的主机名、MAC 地址或 product_uuid</p><p>禁用 swap 分区</p><h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><p>节点规划</p><pre class="line-numbers language-bash"><code class="language-bash">k8s-master 10.10.110.190k8s-ndoe1 10.10.110.191k8s-node2 10.10.110.192<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>架构图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5fb8cee7b18d6271134d01e7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>配置节点</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 关闭防火墙</span>systemctl stop firewalld.servicesystemctl disable firewalld.service<span class="token comment" spellcheck="true"># 关闭seliinux</span><span class="token function">sed</span> -i <span class="token string">'s#^SELINUX=enforcing#SELINUX=disabled#'</span> /etc/selinux/config<span class="token comment" spellcheck="true"># 关闭swap分区</span>swapoff -a<span class="token function">sed</span> -i <span class="token string">'s!^/dev/mapper/centos-swap!#&amp;!'</span> /etc/fstab<span class="token comment" spellcheck="true"># 设置主机名</span>hostnamectl set-hostname <span class="token punctuation">[</span>hostname<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 配置hosts解析</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/hosts <span class="token operator">&lt;&lt;</span> <span class="token string">EOF10.10.110.190 k8s-master10.10.110.191 k8s-node110.10.110.192 k8s-node2EOF</span><span class="token comment" spellcheck="true"># 避免 iptables 被绕过而导致流量无法正确路由</span><span class="token function">cat</span> <span class="token operator">></span> /etc/sysctl.d/k8s.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1vm.swappiness = 0EOF</span>sysctl --system    <span class="token comment" spellcheck="true"># 确保在此步骤之前已加载了 br_netfilter 模块,这可以通过运行 lsmod | grep br_netfilter 来查看,需要加载请执行 modprobe br_netfilter</span><span class="token comment" spellcheck="true"># 时间同步</span>yum <span class="token function">install</span> ntpdate -yntpdate cn.pool.ntp.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装-docker-kubeadm-kubelet-kubectl"><a href="#安装-docker-kubeadm-kubelet-kubectl" class="headerlink" title="安装 docker kubeadm kubelet kubectl"></a>安装 docker kubeadm kubelet kubectl</h1><p>在所有节点安装 docker kubeadm kubelet，kubernetes 默认的 CRI 是 docker，因此先安装 docker 。kubeadm 是用来初始化集群的指令，kubelet 负责在集群中的每个节点上用来启动 pod 和容器，kubectl 是用来与集群通信的命令行工具。安装时需要确保kubeadm、kubelet、kubectl 和 kubeadm 安装的版本相匹配，否则存在发生版本偏差的风险</p><p>安装 docker</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装依赖包</span>yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2<span class="token comment" spellcheck="true"># 添加 Docker 阿里云镜像源</span><span class="token function">wget</span> https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo<span class="token comment" spellcheck="true"># 安装 Docker CE</span>yum <span class="token function">install</span> -y docker-ce<span class="token comment" spellcheck="true"># 启动 Docker 服务并设置开机启动</span>systemctl start dockersystemctl <span class="token function">enable</span> docker<span class="token comment" spellcheck="true"># 配置阿里云镜像服务加速地址</span><span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span> <span class="token string">EOF{    "registry-mirrors": ["https://265wemgl.mirror.aliyuncs.com"]}EOF</span>systemctl daemon-reloadsystemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装 kubeadm kubelet kubectl</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加 kubernetes 阿里云镜像源</span><span class="token function">cat</span> <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF</span><span class="token comment" spellcheck="true"># 指定版本安装</span>yum <span class="token function">install</span> -y kubelet-1.19.0 kubeadm-1.19.0 kubectl-1.19.0systemctl <span class="token function">enable</span> kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="初始化-kubernetes-master-节点"><a href="#初始化-kubernetes-master-节点" class="headerlink" title="初始化 kubernetes master 节点"></a>初始化 kubernetes master 节点</h1><p>在 master 节点执行</p><pre class="line-numbers language-bash"><code class="language-bash">kubeadm init \  --apiserver-advertise-address<span class="token operator">=</span>10.10.110.190 \  --image-repository registry.aliyuncs.com/google_containers \  --kubernetes-version v1.19.0 \  --service-cidr<span class="token operator">=</span>10.10.0.0/12 \  --pod-network-cidr<span class="token operator">=</span>10.244.0.0/16 \  --ignore-preflight-errors<span class="token operator">=</span>all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>–apiserver-advertise-address 服务器所公布的其正在监听的 IP 地址</p></li><li><p>–image-repository 默认拉取镜像地址为 k8s.gcr.io ，这里指定阿里云镜像仓库地址</p></li><li><p>–kubernetes-version 指定 k8s 安装版本</p></li><li><p>–service-cidr 集群内部虚拟网络，Pod 统一访问入口</p></li><li><p>–pod-network-cidr 指明 pod 网络可以使用的 IP 地址段</p></li></ul><p>拷贝 kubectl 连接 k8s 所使用的认证文件到当前用户的默认路径</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p <span class="token variable">$HOME</span>/.kube<span class="token function">sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token variable">$HOME</span>/.kube/config<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token keyword">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token variable">$HOME</span>/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置 k8s 命令自动补全</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> -y epel-release bash-completion<span class="token function">source</span> /usr/share/bash-completion/bash_completion<span class="token function">source</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>kubectl completion bash<span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token string">"source &lt;(kubectl completion bash)"</span> <span class="token operator">>></span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="kubernetes-集群添加节点"><a href="#kubernetes-集群添加节点" class="headerlink" title="kubernetes 集群添加节点"></a>kubernetes 集群添加节点</h1><p>在 10.10.110.191/192 节点上执行，所有 node 节点都需要执行，执行 kubeadm init 输出的 kubeadm join 命令</p><pre class="line-numbers language-bash"><code class="language-bash">kubeadm <span class="token function">join</span> 10.10.110.190:6443 --token j3rqzp.ku4k3ift3i6z1hnb \    --discovery-token-ca-cert-hash sha256:c9460068e3b3bd4d3b111dd1581f50eaada11c2e7a47c958b3a7d158c6ae2170<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时候我们在 master 执行 kubectl get nodes ，发现 node 的状态其实是 NotReady 的</p><h1 id="安装-Pod-网络插件"><a href="#安装-Pod-网络插件" class="headerlink" title="安装 Pod 网络插件"></a>安装 Pod 网络插件</h1><p>我们必须部署一个基于容器网络接口 (CNI) 的 Pod 网络插件，这样 Pods 之间才可以相互通信。在安装网络之前，群集 DNS (CoreDNS)不会启动，这也是为什么 node 的状态其实是 NotReady 的原因。k8s 常用的网络插件包括 calico、flannel、Canal 和 Weave，这里我们使用 calico 来为 kubernetes 集群提供网络策略支持</p><p>部署 calico 网络插件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载 calico 官方配置文件(国内网络可能会下载失败)</span><span class="token function">wget</span> https://docs.projectcalico.org/manifests/calico.yaml<span class="token comment" spellcheck="true"># 修改 calico 配置文件</span>- name: CALICO_IPV4POOL_CIDR  value: <span class="token string">"10.244.0.0/16"</span>    <span class="token comment" spellcheck="true"># 这个默认网段是192.168.0.0/16,修改成前面 kubeadm init 指定的 --pod-network-cidr 一样</span><span class="token comment" spellcheck="true"># 应用配置文件</span>kubectl apply -f calico.yaml<span class="token comment" spellcheck="true"># 查看 pods 运行状态</span>kubectl get pods -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="测试-kubernetes-集群"><a href="#测试-kubernetes-集群" class="headerlink" title="测试 kubernetes 集群"></a>测试 kubernetes 集群</h1><p>我们在搭建好 kubernetes 集群后，创建一个 pod 验证集群是否正常运行</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl create deployment nginx-deploy --image<span class="token operator">=</span>nginxkubectl expose deployment nginx-deploy --port<span class="token operator">=</span>8080 --type<span class="token operator">=</span>NodePort --target-port<span class="token operator">=</span>80kubectl get pod,svc -o wideNodePort 类型的 <span class="token function">service</span> 会从 30000-32767 范围随机分配一个端口--port 指的是 <span class="token function">service</span> CLUSTER-IP 的端口--target-port 指的是 pod 的端口<span class="token punctuation">[</span>root@k8s-master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pod,svc -o wide</span>NAME                               READY   STATUS    RESTARTS   AGE   IP               NODE        NOMINATED NODE   READINESS GATESpod/nginx-deploy-8588f9dfb-h28ck   1/1     Running   0          10m   10.244.169.135   k8s-node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>NAME                   TYPE        CLUSTER-IP    EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>          AGE     SELECTORservice/kubernetes     ClusterIP   10.0.0.1      <span class="token operator">&lt;</span>none<span class="token operator">></span>        443/TCP          6d17h   <span class="token operator">&lt;</span>none<span class="token operator">></span>service/nginx-deploy   NodePort    10.4.54.140   <span class="token operator">&lt;</span>none<span class="token operator">></span>        8080:31234/TCP   14s     app<span class="token operator">=</span>nginx-deploy<span class="token punctuation">[</span>root@k8s-master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get ep</span>NAME           ENDPOINTS            AGEkubernetes     10.10.110.190:6443   6d17hnginx-deploy   10.244.169.135:80    18snodeIP:31234 <span class="token operator">>></span> 10.4.54.140:8080 <span class="token operator">>></span> 10.244.169.135:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用 NodePort 的方式将 service 暴露出去，如果 service 不指定类型那默认是 ClusterIP，只能集群内部访问</p><h1 id="部署-Dashboard"><a href="#部署-Dashboard" class="headerlink" title="部署 Dashboard"></a>部署 Dashboard</h1><p>kubernetes dashboard 是一个用于 kubernetes 集群的通用、基于 web 的用户界面。它允许用户管理在集群中运行的应用程序并对其进行故障排除，以及管理集群本身</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.4/aio/deploy/recommended.yaml<span class="token comment" spellcheck="true"># dashboard 默认的 service 是 ClusterIP 类型,我们需要修改为 NodePort 类型,才能让外部访问到我们的 dashboard</span>---kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30023  selector:    k8s-app: kubernetes-dashboard  type: NodePort---kubectl apply -f recommended.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dashboard 访问地址: <a href="https://nodeIP:30023" target="_blank" rel="noopener">https://nodeIP:30023</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 我们首先在 kubernetes-dashboard 命名空间中创建名为 admin-user 的 service account</span>kubectl create serviceaccount admin-user -n kubernetes-dashboardkubectl get serviceaccounts -n kubernetes-dashboard<span class="token comment" spellcheck="true"># 给 admin-user 用户授权</span>kubectl create clusterrolebinding admin-user --clusterrole<span class="token operator">=</span>cluster-admin --serviceaccount<span class="token operator">=</span>kubernetes-dashboard:admin-user<span class="token comment" spellcheck="true"># 获取 kubernetes-dashboard 命名空间下 admin-user 用户的 token</span>kubectl -n kubernetes-dashboard describe secret <span class="token punctuation">$(</span>kubectl -n kubernetes-dashboard get secret <span class="token operator">|</span> <span class="token function">grep</span> admin-user <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用输出的 token 就可以登录到 dashboard 管理页面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kubeadm-简介&quot;&gt;&lt;a href=&quot;#Kubeadm-简介&quot; class=&quot;headerlink&quot; title=&quot;Kubeadm 简介&quot;&gt;&lt;/a&gt;Kubeadm 简介&lt;/h1&gt;&lt;p&gt;kubeadm 是一个提供了 kubeadm init 和 kubeadm 
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://www.missf.top/categories/k8s/"/>
    
      <category term="Kubeadm" scheme="https://www.missf.top/categories/k8s/Kubeadm/"/>
    
    
      <category term="k8s" scheme="https://www.missf.top/tags/k8s/"/>
    
      <category term="Kubeadm" scheme="https://www.missf.top/tags/Kubeadm/"/>
    
      <category term="集群" scheme="https://www.missf.top/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Xtrabackup 备份与恢复</title>
    <link href="https://www.missf.top/post/4fa06987.html"/>
    <id>https://www.missf.top/post/4fa06987.html</id>
    <published>2020-10-10T08:30:19.000Z</published>
    <updated>2021-01-11T10:33:17.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xtrabackup-简介"><a href="#Xtrabackup-简介" class="headerlink" title="Xtrabackup 简介"></a>Xtrabackup 简介</h1><p>Percona-xtrabackup 是 Percona 公司开发的一个开源免费的用于 MySQL 数据库物理热备的备份工具，支持 MySQL、Percona server、MariaDB，是目前较为受欢迎的主流备份工具。Xtrabackup 支持完全备份和增量备份，备份过程快速可靠，备份过程不会打断正在执行的事务，自动实现备份检验，还原速度快。能对 InnoDB 和 XtraDB 存储引擎的数据库进行非阻塞的备份</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><pre class="line-numbers language-bash"><code class="language-bash">system version: CentOS Linux release 7.7.1908MySQL version: 5.7.31Xtrabackup: 2.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="安装-Xtrabackup"><a href="#安装-Xtrabackup" class="headerlink" title="安装 Xtrabackup"></a>安装 Xtrabackup</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># MySQL5.7版本对应Xtrabackup2.4版本</span><span class="token function">wget</span> https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.4/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.4-1.el7.x86_64.rpm<span class="token comment" spellcheck="true"># Xtrabackup包依赖epel源</span>yum localinstall -y percona-xtrabackup-24-2.4.4-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="创建测试数据库"><a href="#创建测试数据库" class="headerlink" title="创建测试数据库"></a>创建测试数据库</h1><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+</span><span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> pocketremit        <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span><span class="token operator">|</span> test               <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+</span><span class="token number">6</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="全量备份数据库"><a href="#全量备份数据库" class="headerlink" title="全量备份数据库"></a>全量备份数据库</h1><pre class="line-numbers language-bash"><code class="language-bash">innobackupex --defaults-file<span class="token operator">=</span>/etc/my.cnf --user<span class="token operator">=</span>root --password<span class="token operator">=</span><span class="token string">'!1656meRt'</span> --socket<span class="token operator">=</span>/var/lib/mysql/mysql.sock /mysql_backup/<span class="token comment" spellcheck="true"># --user 指定用户</span><span class="token comment" spellcheck="true"># --password 指定密码</span><span class="token comment" spellcheck="true"># /mysql_backup/ 将备份数据存放到此目录,如果不需要以日期命名则 --no-timestamp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查看全量备份的数据"><a href="#查看全量备份的数据" class="headerlink" title="查看全量备份的数据"></a>查看全量备份的数据</h1><p>Xtrabackup 备份之后的数据并不像 MySQLdump 备份这样得到一个 SQL 文件。Xtrabackup 是物理备份的方式，对于非 innodb 表(例如 myisam )，是直接锁表 copy 数据文件，属于一种温备。对于 innodb 表(支持事务)，不锁表，copy 数据页最终以文件方式保存下来，并且把 redo 和 undo 一并备份走，属于热备方式。Xtrabackup 备份时需要读取数据库的配置文件(配置文件必须要配置 datadir ) </p><pre class="line-numbers language-bash"><code class="language-bash">ll /mysql_backup/2020-10-10_18-35-42/total 77872-rw-r----- 1 root root      425 Oct 10 18:35 backup-my.cnf-rw-r----- 1 root root      353 Oct 10 18:35 ib_buffer_pool-rw-r----- 1 root root 79691776 Oct 10 18:35 ibdata1drwxr-x--- 2 root root     4096 Oct 10 18:35 mysqldrwxr-x--- 2 root root     4096 Oct 10 18:35 performance_schemadrwxr-x--- 2 root root     4096 Oct 10 18:35 pocketremitdrwxr-x--- 2 root root    12288 Oct 10 18:35 sysdrwxr-x--- 2 root root     4096 Oct 10 18:35 <span class="token function">test</span>-rw-r----- 1 root root      117 Oct 10 18:35 xtrabackup_checkpoints <span class="token comment" spellcheck="true"># 本次备份数据的起始日志序列号 - 结束日志序列号</span>-rw-r----- 1 root root      453 Oct 10 18:35 xtrabackup_info-rw-r----- 1 root root     2560 Oct 10 18:35 xtrabackup_logfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="修改数据并执行增量备份"><a href="#修改数据并执行增量备份" class="headerlink" title="修改数据并执行增量备份"></a>修改数据并执行增量备份</h1><p>对数据库插入测试数据</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">database</span> slave<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">use</span> slave<span class="token punctuation">;</span><span class="token keyword">Database</span> changedmysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> info<span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ip <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> slave<span class="token punctuation">.</span>info <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">"slave"</span><span class="token punctuation">,</span>inet_aton<span class="token punctuation">(</span><span class="token string">'10.10.110.81'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第一次全量备份的基础上进行增量备份</p><pre class="line-numbers language-bash"><code class="language-bash">innobackupex --defaults-file<span class="token operator">=</span>/etc/my.cnf --user<span class="token operator">=</span>root --password<span class="token operator">=</span><span class="token string">'!1656meRt'</span> --socket<span class="token operator">=</span>/var/lib/mysql/mysql.sock --incremental --incremental-basedir<span class="token operator">=</span>/mysql_backup/2020-10-10_18-35-42 --no-timestamp /mysql_backup/increase1<span class="token comment" spellcheck="true"># --incremental 增量备份</span><span class="token comment" spellcheck="true"># --incremental-basedir 基于这个点进行增量备份,Xtrabackup会去读取xtrabackup_checkpoints文件</span><span class="token comment" spellcheck="true"># --no-timestamp 不生成时间戳文件夹,数据直接放在指定的目录下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h1><p>查看全备和增备的 lsn 号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> 2020-10-10_18-35-42/xtrabackup_checkpoints     <span class="token comment" spellcheck="true"># 全备</span>backup_type <span class="token operator">=</span> full-backupedfrom_lsn <span class="token operator">=</span> 0to_lsn <span class="token operator">=</span> 791234628last_lsn <span class="token operator">=</span> 791234637compact <span class="token operator">=</span> 0recover_binlog_info <span class="token operator">=</span> 0<span class="token function">cat</span> increase1/xtrabackup_checkpoints     <span class="token comment" spellcheck="true"># 增备</span>backup_type <span class="token operator">=</span> incrementalfrom_lsn <span class="token operator">=</span> 791234628to_lsn <span class="token operator">=</span> 791239749last_lsn <span class="token operator">=</span> 791239758compact <span class="token operator">=</span> 0recover_binlog_info <span class="token operator">=</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回滚未提交的事务及同步已经提交的事务至数据文件使数据文件处于一致性状态</p><pre class="line-numbers language-bash"><code class="language-bash">innobackupex --apply-log --redo-only /mysql_backup/2020-10-10_18-35-42/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将增量备份整合到全量备份中</p><pre class="line-numbers language-bash"><code class="language-bash">innobackupex --apply-log --redo-only /mysql_backup/2020-10-10_18-35-42/ --incremental-dir<span class="token operator">=</span>/mysql_backup/increase1/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭数据库并且删除数据</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl stop mysqld<span class="token function">rm</span> -rf /var/lib/mysql/*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>恢复数据(恢复前需要将所有增备整合到全备中再恢复)</p><pre class="line-numbers language-bash"><code class="language-bash">innobackupex --copy-back --datadir<span class="token operator">=</span>/var/lib/mysql /mysql_backup/2020-10-10_18-35-42/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恢复之后修改数据库目录权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> -R mysql.mysql /var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动数据库</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="查看恢复后的数据"><a href="#查看恢复后的数据" class="headerlink" title="查看恢复后的数据"></a>查看恢复后的数据</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZuf6fpaicz5jt7kep555qZ mysql_backup<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -uroot -p'!1656meRt' -e 'show databases;'</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token function">command</span> line interface can be insecure.+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> pocketremit        <span class="token operator">|</span><span class="token operator">|</span> slave              <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">test</span>               <span class="token operator">|</span>+--------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Xtrabackup-简介&quot;&gt;&lt;a href=&quot;#Xtrabackup-简介&quot; class=&quot;headerlink&quot; title=&quot;Xtrabackup 简介&quot;&gt;&lt;/a&gt;Xtrabackup 简介&lt;/h1&gt;&lt;p&gt;Percona-xtrabackup 是 Perco
      
    
    </summary>
    
    
      <category term="Xtrabackup" scheme="https://www.missf.top/categories/Xtrabackup/"/>
    
      <category term="MySQL" scheme="https://www.missf.top/categories/Xtrabackup/MySQL/"/>
    
    
      <category term="Xtrabackup" scheme="https://www.missf.top/tags/Xtrabackup/"/>
    
      <category term="MySQL" scheme="https://www.missf.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MariaDB 主从复制和 Maxscale 中间件实现读写分离及故障切换</title>
    <link href="https://www.missf.top/post/2c9da2f4.html"/>
    <id>https://www.missf.top/post/2c9da2f4.html</id>
    <published>2020-09-14T03:20:58.000Z</published>
    <updated>2020-10-12T06:57:44.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><pre class="line-numbers language-bash"><code class="language-bash">system version: CentOS Linux release 7.7.1908mariadb version: 10.5.2maxscale version: 2.5.3 GAclient: 10.10.110.84mariadb master: 10.10.110.80mariadb slave1: 10.10.110.81mariadb slave2: 10.10.110.82maxscale proxy: 10.10.110.83<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h1><p>当 mariadb master 服务器上的数据发生改变时(增、删、改)，则将其改变写入 binlog 二进制日志中。slave 服务器会在一定时间间隔内对 master 二进制日志进行探测其是否发生改变，如果发生改变，则开启一个 I/O 线程请求 master 二进制事件，同时主节点为每个 I/O 线程启动一个 dump 线程，用于向其发送二进制事件，并保存至从库本地的中继日志中，从库将启动 SQL 线程从中继日志中读取二进制日志，在本地回放，使得从库数据和主库的数据保持一致，最后 IO 线程和 SQL 线程将进入睡眠状态，等待下一次被唤醒</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f602d67160a154a67163d5e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="主从复制的前提条件"><a href="#主从复制的前提条件" class="headerlink" title="主从复制的前提条件"></a>主从复制的前提条件</h1><blockquote><p>master 一定要开启 binlog 二进制日志，并且授予 slave 远程连接的权限</p></blockquote><blockquote><p>主从复制至少需要两个 mysql 实例，可以分布在不同服务器，也可以在同一台服务器</p></blockquote><blockquote><p>master 实例和 slave 实例的 mysql 版本最好相同(如果不同，那么 master 实例版本需要低于 slave 实例)</p></blockquote><blockquote><p>master 实例和 slave 实例之间时间同步</p></blockquote><h1 id="配置-MariaDB-Master-节点"><a href="#配置-MariaDB-Master-节点" class="headerlink" title="配置 MariaDB Master 节点"></a>配置 MariaDB Master 节点</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装MariaDB</span><span class="token function">tee</span> /etc/yum.repos.d/Mariadb.repo <span class="token operator">&lt;&lt;</span> <span class="token string">EOF# mariadb 10.5 CentOS repository list - created 2020-09-14 10:57 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name=mariadbbaseurl=https://mirrors.aliyun.com/mariadb/yum/10.5/centos7-amd64/gpgkey=https://mirrors.aliyun.com/mariadb/yum/RPM-GPG-KEY-MariaDBgpgcheck=1EOF</span>yum clean all <span class="token operator">&amp;&amp;</span> yum makecacheyum <span class="token function">install</span> -y MariaDB-server MariaDB-client<span class="token comment" spellcheck="true"># 配置文件</span><span class="token function">cat</span> /etc/my.cnf.d/server.cnf<span class="token punctuation">..</span>.<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>log-bin<span class="token operator">=</span>mariadb-binserver_id<span class="token operator">=</span>180port<span class="token operator">=</span>53306<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 启动mariadb</span>systemctl start mariadb<span class="token comment" spellcheck="true"># 添加用户slave授予远程连接的权限,供从节点复制binlog</span>GRANT REPLICATION SLAVE ON *.* TO <span class="token string">'slave'</span>@<span class="token string">'10.10.110.%'</span> IDENTIFIED BY <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看主库的binlog记录日志信息偏移量position</span>mariadb <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> show master status<span class="token punctuation">;</span>+--------------------+----------+--------------+------------------+<span class="token operator">|</span> File               <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span>+--------------------+----------+--------------+------------------+<span class="token operator">|</span> mariadb-bin.000001 <span class="token operator">|</span>      529 <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>+--------------------+----------+--------------+------------------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.000 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置-MariaDB-Slave-节点"><a href="#配置-MariaDB-Slave-节点" class="headerlink" title="配置 MariaDB Slave 节点"></a>配置 MariaDB Slave 节点</h1><p>mariadb 10.0.2开始，GTID 是默认打开的。因为 maxscale 故障切换功能需要 mariadb 开启基于 GTID 的主从复制，而且是以  <code>master_use_gtid=current_pos</code> 的方式。因为 <code>master_use_gtid=slave_pos</code> 的方式，master 将从最后一个 GTID 开始给 slave 复制 binlog，通过 <code>@@gtid_slave_pos</code> 这个变量来查看目前最后一个 GTID 的位置，如果A节点 (master) 故障了之后由B节点成为了 master，当 A 节点以 slave 的身份加入到集群时，由于 A 节点之前从未成为过 slave，那么 A 节点的 <code>@@gtid_slave_pos</code> 是空的。为了能让故障的 master 节点故障之后能够重新以 slave 的身份加入到集群，我们需要使用 <code>master_use_gtid=current_pos</code> 的 GTID 方式开启主从复制</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 指定主库信息(master信息会存到/var/lib/mysql/master.info文件)mariadb [(none)]> change master to master_host='10.10.110.80',    -> master_user='slave',    -> master_password='123456',    -> master_port=53306,    -> master_use_gtid=current_pos,    -> master_connect_retry=30;Query OK, 0 rows affected (0.017 sec)# 启动slave线程,若要更改指定的主库信息,需先执行stop slave,修改完成后执行start slavemariadb [(none)]> start slave;Query OK, 0 rows affected (0.003 sec)# 查看slave状态(slave_IO_Running和slave_SQL_Running都为Yes状态)mariadb [(none)]> show slave status\G*************************** 1. row ***************************                slave_IO_State: Waiting for master to send event                   master_Host: 10.10.110.80                   master_User: slave                   master_Port: 53306                 Connect_Retry: 30               master_Log_File: mariadb-bin.000001           Read_master_Log_Pos: 529                Relay_Log_File: localhost-relay-bin.000002                 Relay_Log_Pos: 830         Relay_master_Log_File: mariadb-bin.000001              slave_IO_Running: Yes             slave_SQL_Running: Yes               Replicate_Do_DB:            Replicate_Ignore_DB:             Replicate_Do_Table:         Replicate_Ignore_Table:        Replicate_Wild_Do_Table:    Replicate_Wild_Ignore_Table:                     Last_Errno: 0                    Last_Error:                   Skip_Counter: 0           Exec_master_Log_Pos: 529               Relay_Log_Space: 1143               Until_Condition: None                Until_Log_File:                  Until_Log_Pos: 0            master_SSL_Allowed: No            master_SSL_CA_File:             master_SSL_CA_Path:                master_SSL_Cert:              master_SSL_Cipher:                 master_SSL_Key:          Seconds_Behind_master: 0 master_SSL_Verify_Server_Cert: No                 Last_IO_Errno: 0                 Last_IO_Error:                 Last_SQL_Errno: 0                Last_SQL_Error:    Replicate_Ignore_Server_Ids:               master_Server_Id: 80                master_SSL_Crl:             master_SSL_Crlpath:                     Using_Gtid: Current_Pos                   Gtid_IO_Pos: 0-80-1       Replicate_Do_Domain_Ids:    Replicate_Ignore_Domain_Ids:                  Parallel_Mode: optimistic                     SQL_Delay: 0           SQL_Remaining_Delay: NULL       slave_SQL_Running_State: slave has read all relay log; waiting for more updates              slave_DDL_Groups: 1slave_Non_Transactional_Groups: 0    slave_Transactional_Groups: 01 row in set (0.001 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="验证主从复制"><a href="#验证主从复制" class="headerlink" title="验证主从复制"></a>验证主从复制</h1><p>在 mariadb master 上创建测试数据，然后在 mariadb slave 上查看数据是否已经同步过来</p><pre class="line-numbers language-mysql"><code class="language-mysql">create database mariadb;use mariadb;create table mariadb(name varchar(25),city varchar(30),age int);insert into mariadb.mariadb values("mariadb","china",11);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="MariaDB-开启并行复制"><a href="#MariaDB-开启并行复制" class="headerlink" title="MariaDB 开启并行复制"></a>MariaDB 开启并行复制</h1><p>mariadb的复制通过三步完成:</p><blockquote><p>1.从库的IO线程去主库上读取binlog日志变更，并把读取的事件按顺序存放到relay log</p></blockquote><blockquote><p>2.从库的SQL线程一次读取relay log中的一个事件</p></blockquote><blockquote><p>3.SQL线程依次执行relay log中的事件</p></blockquote><p>mariadb 10之前的版本中，第三步是通过SQL线程来执行的，这意味着一次只能执行一个事件，复制本质上是单线程的。mariadb 10之后的版本中，第三步可以由一个单独的复制工作线程池执行，从而通过并行应用多个事件来提高复制性能</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/my.cnf.d/server.cnf<span class="token punctuation">..</span>.<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>slave-parallel-threads<span class="token operator">=</span>8  <span class="token comment" spellcheck="true"># 在工作线程池中创建8个线程</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看工作线程的数量</p><pre class="line-numbers language-mysql"><code class="language-mysql">MariaDB [(none)]> SHOW PROCESSLIST;+----+-------------+-----------+------+--------------+------+--------------------------------------------------------+------------------+----------+| Id | User        | Host      | db   | Command      | Time | State                                                  | Info             | Progress |+----+-------------+-----------+------+--------------+------+--------------------------------------------------------+------------------+----------+|  5 | system user |           | NULL | Slave_IO     |   27 | Waiting for master to send event                       | NULL             |    0.000 ||  7 | system user |           | NULL | Slave_worker |   27 | Waiting for work from SQL thread                       | NULL             |    0.000 ||  8 | system user |           | NULL | Slave_worker |   27 | Waiting for work from SQL thread                       | NULL             |    0.000 ||  9 | system user |           | NULL | Slave_worker |   27 | Waiting for work from SQL thread                       | NULL             |    0.000 || 10 | system user |           | NULL | Slave_worker |   27 | Waiting for work from SQL thread                       | NULL             |    0.000 || 11 | system user |           | NULL | Slave_worker |   27 | Waiting for work from SQL thread                       | NULL             |    0.000 || 12 | system user |           | NULL | Slave_worker |   27 | Waiting for work from SQL thread                       | NULL             |    0.000 || 13 | system user |           | NULL | Slave_worker |   27 | Waiting for work from SQL thread                       | NULL             |    0.000 || 14 | system user |           | NULL | Slave_worker |   27 | Waiting for work from SQL thread                       | NULL             |    0.000 ||  6 | system user |           | NULL | Slave_SQL    |   27 | Slave has read all relay log; waiting for more updates | NULL             |    0.000 || 15 | root        | localhost | NULL | Query        |    0 | starting                                               | SHOW PROCESSLIST |    0.000 |+----+-------------+-----------+------+--------------+------+--------------------------------------------------------+------------------+----------+11 rows in set (0.000 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="判断主从复制延迟"><a href="#判断主从复制延迟" class="headerlink" title="判断主从复制延迟"></a>判断主从复制延迟</h1><p>Seconds_Behind_Master 是通过 sql_thread 执行的事件的时间戳和 io_thread 复制好的事件的时间戳进行比较，而得到的一个差值</p><blockquote><p> NULL：表示 io_thread 或是 sql_thread 有任何一个发生故障，也就是该线程的 Running 状态是 No 而非 Yes</p></blockquote><blockquote><p>0：该值为零，是我们极为渴望看到的情况，表示主从复制良好，可以认为 lag 不存在</p></blockquote><blockquote><p>正值：表示主从已经出现延时，数字越大表示从库落后主库越多</p></blockquote><blockquote><p>负值：几乎很少见，其实这是一个 BUG 值，该参数是不应该出现负值的</p></blockquote><p>仅仅依靠 Seconds_Behind_Master 的值来监测主从同步数据是否延迟是绝对不可靠的，如果网络存在延迟，即使我们看到 Seconds_Behind_Master 的值为零，也会存在很大的偏差。更加严谨的判断主从延时的做法是：</p><blockquote><p>对 master 和 slave 同时发起 SHOW BINARY LOGS 请求，判断二者 binlog 的差异</p></blockquote><blockquote><p>对 slave 发起 SHOW slave STATUS\G 的请求，查看 Read_Master_Log_Pos 和 Exec_Master_Log_Pos 是否一致</p></blockquote><h1 id="读写分离和故障切换的实现"><a href="#读写分离和故障切换的实现" class="headerlink" title="读写分离和故障切换的实现"></a>读写分离和故障切换的实现</h1><p>数据写入操作在主库执行，数据读取操作在从库执行，在一定程度上减轻了数据库的压力，主从复制保证了数据的安全</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f606ad0160a154a67249d5b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Maxscale-概述"><a href="#Maxscale-概述" class="headerlink" title="Maxscale 概述"></a>Maxscale 概述</h1><p>maxscale 是由 mariadb 团队开发的一个数据库代理工具，将数据库语句转发到一个或多个数据库服务器，转发是使用基于对数据库语句的语义理解和后端数据库集群中服务器角色的规则来执行的，设计目的是为应用程序提供透明的负载平衡和高可用性功能。mariadb  maxscale 具有可扩展和灵活的架构，通过插件组件支持不同的协议和路由方法</p><h1 id="安装-Maxscale"><a href="#安装-Maxscale" class="headerlink" title="安装 Maxscale"></a>安装 Maxscale</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://downloads.mariadb.com/MaxScale/2.5.3/rhel/7/x86_64/maxscale-2.5.3-2.rhel.7.x86_64.rpmyum -y <span class="token function">install</span> maxscale-2.5.3-2.rhel.7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="MariaDB-Master-主库上创建相关的账户"><a href="#MariaDB-Master-主库上创建相关的账户" class="headerlink" title="MariaDB Master 主库上创建相关的账户"></a>MariaDB Master 主库上创建相关的账户</h1><p>在开始配置之前，需要在 mariadb master 中为 maxscale 创建两个用户，用于 maxscale 的监控模块和路由模块</p><p>monitor_user：该账号监控集群状态，如果发现某个从服务器复制线程停掉了，那么就不向其转发请求了</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 创建监控用户,用于[MariaDB-Monitor]配置CREATE USER 'monitor_user'@'%' IDENTIFIED BY '123456';GRANT REPLICATION CLIENT ON *.* TO 'monitor_user'@'%';# 如果使用 MariaDB Monitor 的自动故障转移，用户将需要额外的授权GRANT SUPER, RELOAD ON *.* TO 'monitor_user'@'%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>routing_user：该账号将不同的请求分发到不同的节点上，当客户端连接到 maxscale 这个节点上时，maxscale 节点会使用该账号去查后端数据库，检查客户端登陆的用户是否有权限或密码是否正确等等</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 创建routing user,用于[Read-Write-Service]配置CREATE USER 'routing_user'@'%' IDENTIFIED BY '123456';GRANT SELECT ON mysql.user TO 'routing_user'@'%';GRANT SELECT ON mysql.db TO 'routing_user'@'%';GRANT SELECT ON mysql.tables_priv TO 'routing_user'@'%';GRANT SELECT ON mysql.columns_priv TO 'routing_user'@'%';GRANT SELECT ON mysql.proxies_priv TO 'routing_user'@'%';GRANT SELECT ON mysql.roles_mapping TO 'routing_user'@'%';GRANT SHOW DATABASES ON *.* TO 'routing_user'@'%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置加密密码"><a href="#配置加密密码" class="headerlink" title="配置加密密码"></a>配置加密密码</h1><p>我们创建的数据库用户信息需要填写到 maxscale 配置文件中，为了防止配置文件出现明文密码，我们可以使用秘钥为密码加密，然后将加密后的字符串填写在 maxscale 配置文件中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成秘钥,密钥将保存到/var/lib/maxscale/.secrets</span>maxkeys    <span class="token comment" spellcheck="true"># 基于秘钥生成123456加密后的字符串(记录下来)</span>maxpasswd /var/lib/maxscale/ 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Maxscale-配置文件"><a href="#Maxscale-配置文件" class="headerlink" title="Maxscale 配置文件"></a>Maxscale 配置文件</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grep -v "^#" /etc/maxscale.cnf</span><span class="token punctuation">[</span>maxscale<span class="token punctuation">]</span>threads<span class="token operator">=</span>autoadmin_host<span class="token operator">=</span>0.0.0.0admin_port<span class="token operator">=</span>8080admin_secure_gui<span class="token operator">=</span>false    <span class="token comment" spellcheck="true"># 关闭GUI安全验证,不然需要配置ssl</span><span class="token punctuation">[</span>server1<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 不需要指定哪个是master和slave,maxscale会自动识别</span>type<span class="token operator">=</span>serveraddress<span class="token operator">=</span>10.10.110.80port<span class="token operator">=</span>53306protocol<span class="token operator">=</span>MariaDBBackend<span class="token punctuation">[</span>server2<span class="token punctuation">]</span>type<span class="token operator">=</span>serveraddress<span class="token operator">=</span>10.10.110.81port<span class="token operator">=</span>53306protocol<span class="token operator">=</span>MariaDBBackend<span class="token punctuation">[</span>server3<span class="token punctuation">]</span>type<span class="token operator">=</span>serveraddress<span class="token operator">=</span>10.10.110.82port<span class="token operator">=</span>53306protocol<span class="token operator">=</span>MariaDBBackend<span class="token punctuation">[</span>MariaDB-Monitor<span class="token punctuation">]</span>type<span class="token operator">=</span>monitormodule<span class="token operator">=</span>mariadbmonservers<span class="token operator">=</span>server1,server2,server3user<span class="token operator">=</span>monitor_userpassword<span class="token operator">=</span>EA25B20FBB2B3EF4562F9D585DE8826B64B328C08571D8F656424252F9560A62monitor_interval<span class="token operator">=</span>2000<span class="token punctuation">[</span>Read-Write-Service<span class="token punctuation">]</span>type<span class="token operator">=</span>servicerouter<span class="token operator">=</span>readwritesplit    <span class="token comment" spellcheck="true"># 配置读写分离的路由</span>servers<span class="token operator">=</span>server1,server2,server3user<span class="token operator">=</span>routing_userpassword<span class="token operator">=</span>EA25B20FBB2B3EF4562F9D585DE8826B64B328C08571D8F656424252F9560A62<span class="token punctuation">[</span>Read-Write-Listener<span class="token punctuation">]</span>type<span class="token operator">=</span>listenerservice<span class="token operator">=</span>Read-Write-Service    <span class="token comment" spellcheck="true"># 监听读写分离的服务</span>protocol<span class="token operator">=</span>MariaDBClientport<span class="token operator">=</span>4006    <span class="token comment" spellcheck="true"># maxscale代理的端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="启动-Maxscale-服务"><a href="#启动-Maxscale-服务" class="headerlink" title="启动 Maxscale 服务"></a>启动 Maxscale 服务</h1><pre class="line-numbers language-bash"><code class="language-bash">systemctl start maxscale.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Maxctrl-管理工具的使用"><a href="#Maxctrl-管理工具的使用" class="headerlink" title="Maxctrl 管理工具的使用"></a>Maxctrl 管理工具的使用</h1><p>maxctrl 如果不指定 COMMAND 将会进入交互式模式，在交互式中可以直接输入 COMMAND，以表格格式显示基础信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示所有后端服务器</span>maxctrl -h 10.10.110.83:8080 list servers┌─────────┬──────────────┬───────┬─────────────┬─────────────────┬─────────┐│ Server  │ Address      │ Port  │ Connections │ State           │ GTID    │├─────────┼──────────────┼───────┼─────────────┼─────────────────┼─────────┤│ server1 │ 10.10.110.80 │ 53306 │ 0           │ Master, Running │ 0-80-15 │├─────────┼──────────────┼───────┼─────────────┼─────────────────┼─────────┤│ server2 │ 10.10.110.81 │ 53306 │ 0           │ Slave, Running  │ 0-80-15 │├─────────┼──────────────┼───────┼─────────────┼─────────────────┼─────────┤│ server3 │ 10.10.110.82 │ 53306 │ 0           │ Slave, Running  │ 0-80-15 │└─────────┴──────────────┴───────┴─────────────┴─────────────────┴─────────┘list services <span class="token comment" spellcheck="true"># 显示所有服务，例如读写分离服务等</span>list monitors <span class="token comment" spellcheck="true"># 显示所有监控信息</span>list listeners <span class="token comment" spellcheck="true"># 显示监听信息</span><span class="token comment" spellcheck="true"># 更多的命令可以去官网自行了解...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="登录-Maxscale-仪表板"><a href="#登录-Maxscale-仪表板" class="headerlink" title="登录 Maxscale 仪表板"></a>登录 Maxscale 仪表板</h1><p>默认情况下用户名是 admin，密码是 mariadb</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f697016160a154a670f066c.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>仪表板界面可以看到以下资源的概览信息：按 monitor 分组的所有服务器，当前会话和所有服务。这些资源的信息每10秒更新一次。监视器、服务器和服务资源都有自己的详细信息页面。可以通过单击仪表板页面上的资源名称来访问它，在详细信息页中，可以修改部分资源参数的值</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f69996e160a154a6728344b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Maxscale-测试读写分离"><a href="#Maxscale-测试读写分离" class="headerlink" title="Maxscale 测试读写分离"></a>Maxscale 测试读写分离</h1><p>验证读写分离的 “读” 操作是否在从库上</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 分别在两个从库上创建数据create database slave;use slave;create table info(name varchar(25),ip int);insert into slave.info values("slave",inet_aton('10.10.110.81'));create database slave;use slave;create table info(name varchar(25),ip int);insert into slave.info values("slave",inet_aton('10.10.110.82'));# 在主库上创建测试用户grant all on *.* to 'check'@'%' identified by '123456';# 连接maxscale查询数据验证读写分离(读操作自动负载均衡)mysql -ucheck -p123456 -P4006 -h 10.10.110.83MariaDB [(none)]> select name,inet_ntoa(ip) from slave.info;+-------+---------------+| name  | inet_ntoa(ip) |+-------+---------------+| slave | 10.10.110.82  |+-------+---------------+1 row in set (0.002 sec)MariaDB [(none)]> select name,inet_ntoa(ip) from slave.info;+-------+---------------+| name  | inet_ntoa(ip) |+-------+---------------+| slave | 10.10.110.81  |+-------+---------------+1 row in set (0.001 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证读写分离的 “写” 操作是否在主库上</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 连接maxscale往里写数据,看slave上数据有没有同步过来create database test;use test;create table test(name varchar(25),city varchar(30),age int);insert into test.test values("mariadb","china",11);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Maxscale-配置故障切换"><a href="#Maxscale-配置故障切换" class="headerlink" title="Maxscale 配置故障切换"></a>Maxscale 配置故障切换</h1><p>编辑 maxscale 的配置文件，配置故障切换参数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grep -v "^#" /etc/maxscale.cnf</span><span class="token punctuation">[</span>maxscale<span class="token punctuation">]</span>threads<span class="token operator">=</span>autoadmin_host<span class="token operator">=</span>0.0.0.0admin_port<span class="token operator">=</span>8080admin_secure_gui<span class="token operator">=</span>false<span class="token punctuation">[</span>server1<span class="token punctuation">]</span>type<span class="token operator">=</span>serveraddress<span class="token operator">=</span>10.10.110.80port<span class="token operator">=</span>53306protocol<span class="token operator">=</span>MariaDBBackend<span class="token punctuation">[</span>server2<span class="token punctuation">]</span>type<span class="token operator">=</span>serveraddress<span class="token operator">=</span>10.10.110.81port<span class="token operator">=</span>53306protocol<span class="token operator">=</span>MariaDBBackend<span class="token punctuation">[</span>server3<span class="token punctuation">]</span>type<span class="token operator">=</span>serveraddress<span class="token operator">=</span>10.10.110.82port<span class="token operator">=</span>53306protocol<span class="token operator">=</span>MariaDBBackend<span class="token punctuation">[</span>MariaDB-Monitor<span class="token punctuation">]</span>type<span class="token operator">=</span>monitormodule<span class="token operator">=</span>mariadbmonservers<span class="token operator">=</span>server1,server2,server3user<span class="token operator">=</span>monitor_userpassword<span class="token operator">=</span>EA25B20FBB2B3EF4562F9D585DE8826B64B328C08571D8F656424252F9560A62monitor_interval<span class="token operator">=</span>2000replication_user<span class="token operator">=</span>slave    <span class="token comment" spellcheck="true"># 复制用户</span>replication_password<span class="token operator">=</span>EA25B20FBB2B3EF4562F9D585DE8826B64B328C08571D8F656424252F9560A62auto_failover<span class="token operator">=</span>true    <span class="token comment" spellcheck="true"># 开启自动故障转移</span>auto_rejoin<span class="token operator">=</span>true    <span class="token comment" spellcheck="true"># 自动重新连接</span>failcount<span class="token operator">=</span>3    <span class="token comment" spellcheck="true"># 故障次数</span>failover_timeout<span class="token operator">=</span>90    <span class="token comment" spellcheck="true"># 故障转移超时</span>switchover_timeout<span class="token operator">=</span>90    <span class="token comment" spellcheck="true"># 故障切换超时</span>verify_master_failure<span class="token operator">=</span>true    <span class="token comment" spellcheck="true"># 自动故障转移启用额外的主故障验证</span>master_failure_timeout<span class="token operator">=</span>10    <span class="token comment" spellcheck="true"># </span><span class="token punctuation">[</span>Read-Write-Service<span class="token punctuation">]</span>type<span class="token operator">=</span>servicerouter<span class="token operator">=</span>readwritesplitservers<span class="token operator">=</span>server1,server2,server3user<span class="token operator">=</span>routing_userpassword<span class="token operator">=</span>EA25B20FBB2B3EF4562F9D585DE8826B64B328C08571D8F656424252F9560A62<span class="token punctuation">[</span>Read-Write-Listener<span class="token punctuation">]</span>type<span class="token operator">=</span>listenerservice<span class="token operator">=</span>Read-Write-Serviceprotocol<span class="token operator">=</span>MariaDBClientport<span class="token operator">=</span>4006<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手动关闭 master 节点，使用 maxctrl 查看 master 状态，可以看到 master 节点会自动切换。当 master节点修复之后会自动重新加入集群</p><pre class="line-numbers language-mysql"><code class="language-mysql">[root@localhost ~]# maxctrl -h 10.10.110.83:8080 list servers┌─────────┬──────────────┬───────┬─────────────┬────────────────┬─────────┐│ Server  │ Address      │ Port  │ Connections │ State          │ GTID    │├─────────┼──────────────┼───────┼─────────────┼────────────────┼─────────┤│ server1 │ 10.10.110.80 │ 53306 │ 0           │ Down           │ 0-80-26 │├─────────┼──────────────┼───────┼─────────────┼────────────────┼─────────┤│ server2 │ 10.10.110.81 │ 53306 │ 0           │ Slave, Running │ 0-81-27 │├─────────┼──────────────┼───────┼─────────────┼────────────────┼─────────┤│ server3 │ 10.10.110.82 │ 53306 │ 0           │ Slave, Running │ 0-82-27 │└─────────┴──────────────┴───────┴─────────────┴────────────────┴─────────┘[root@localhost ~]# maxctrl -h 10.10.110.83:8080 list servers┌─────────┬──────────────┬───────┬─────────────┬─────────────────┬─────────┐│ Server  │ Address      │ Port  │ Connections │ State           │ GTID    │├─────────┼──────────────┼───────┼─────────────┼─────────────────┼─────────┤│ server1 │ 10.10.110.80 │ 53306 │ 0           │ Down            │ 0-80-26 │├─────────┼──────────────┼───────┼─────────────┼─────────────────┼─────────┤│ server2 │ 10.10.110.81 │ 53306 │ 0           │ Master, Running │ 0-81-27 │├─────────┼──────────────┼───────┼─────────────┼─────────────────┼─────────┤│ server3 │ 10.10.110.82 │ 53306 │ 0           │ Slave, Running  │ 0-82-27 │└─────────┴──────────────┴───────┴─────────────┴─────────────────┴─────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;language-bas
      
    
    </summary>
    
    
      <category term="MariaDB" scheme="https://www.missf.top/categories/MariaDB/"/>
    
      <category term="Maxscale" scheme="https://www.missf.top/categories/MariaDB/Maxscale/"/>
    
    
      <category term="MariaDB" scheme="https://www.missf.top/tags/MariaDB/"/>
    
      <category term="数据库" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="读写分离" scheme="https://www.missf.top/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>Elastic 收集 Java 日志</title>
    <link href="https://www.missf.top/post/5a1ae96.html"/>
    <id>https://www.missf.top/post/5a1ae96.html</id>
    <published>2020-09-08T10:20:14.000Z</published>
    <updated>2021-01-20T10:13:35.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h1><p>Tomcat 属于 Java 应用，这里收集 Tomcat 日志作为示例</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载软件包</span><span class="token function">wget</span> -P /server/tools/https://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.53/bin/apache-tomcat-8.5.53.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf apache-tomcat-8.5.53.tar.gz -C /usr/local/ <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> /usr/local/apache-tomcat-8.5.53/ /usr/local/tomcat<span class="token comment" spellcheck="true"># 启动 tomcat</span>/usr/local/tomcat/bin/startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写-Filebeat-pipeline"><a href="#编写-Filebeat-pipeline" class="headerlink" title="编写 Filebeat pipeline"></a>编写 Filebeat pipeline</h1><p>filebeat 获取所有不以 “[“ 开头的行，并将它们合并到上一行以 “[“ 开头的行之后</p><pre class="line-numbers language-json"><code class="language-json">filebeat.inputs<span class="token operator">:</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /usr/local/tomcat/logs/catalina.out  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"catalina"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    server<span class="token operator">:</span> tomcat    type<span class="token operator">:</span> tomcat-catalina  fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>  multiline<span class="token operator">:</span>    pattern<span class="token operator">:</span> '^\<span class="token punctuation">[</span>'    negate<span class="token operator">:</span> <span class="token boolean">true</span>    match<span class="token operator">:</span> after#output.console<span class="token operator">:</span>output.redis<span class="token operator">:</span>  hosts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"10.10.110.194:56379"</span><span class="token punctuation">]</span>  password<span class="token operator">:</span> <span class="token string">"123456"</span>  key<span class="token operator">:</span> <span class="token string">"tomcat"</span>  db<span class="token operator">:</span> <span class="token number">0</span>  datatype<span class="token operator">:</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="模拟-Tomcat-报错日志"><a href="#模拟-Tomcat-报错日志" class="headerlink" title="模拟 Tomcat 报错日志"></a>模拟 Tomcat 报错日志</h1><p>往 Tomcat 的日志写入错误信息，模拟报错信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /usr/local/tomcat/logs/catalina.out <span class="token operator">&lt;&lt;</span> <span class="token string">EOFSep 09, 2020 5:50:33 PM org.apache.catalina.startup.Catalina stopServerSEVERE: Catalina.stop: org.xml.sax.SAXParseException; systemId: file:/usr/local/tomcat/conf/server.xml; lineNumber: 22; columnNumber: 45; Attribute name "dda" associated with an element type "Server" must be followed by the ' = ' character.        at java.xml/com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1243)        at java.xml/com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl<span class="token variable">$JAXPSAXParser</span>.parse(SAXParserImpl.java:635)        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1495)        at org.apache.catalina.startup.Catalina.stopServer(Catalina.java:485)        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.base/java.lang.reflect.Method.invoke(Method.java:566)        at org.apache.catalina.startup.Bootstrap.stopServer(Bootstrap.java:389)        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:479)EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写-Logstash-pipeline"><a href="#编写-Logstash-pipeline" class="headerlink" title="编写 Logstash pipeline"></a>编写 Logstash pipeline</h1><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  redis <span class="token punctuation">{</span>    host => <span class="token string">"10.10.110.194"</span>    port => <span class="token number">56379</span>    password => <span class="token string">"123456"</span>    db => <span class="token string">"0"</span>    data_type => <span class="token string">"list"</span>    key => <span class="token string">"tomcat"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"tomcat-catalina"</span> <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"catalina"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"filebeat-tomcat-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Kibana-展示数据"><a href="#Kibana-展示数据" class="headerlink" title="Kibana 展示数据"></a>Kibana 展示数据</h1><p>这里展示数据是不显示完全的，我们可以指定字段查看更详细的信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f588106160a154a67e70090.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>指定 message 字段，查看被合并成一行的 Tomcat 报错日志</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f5881ef160a154a67e7b65a.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装-Tomcat&quot;&gt;&lt;a href=&quot;#安装-Tomcat&quot; class=&quot;headerlink&quot; title=&quot;安装 Tomcat&quot;&gt;&lt;/a&gt;安装 Tomcat&lt;/h1&gt;&lt;p&gt;Tomcat 属于 Java 应用，这里收集 Tomcat 日志作为示例&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic 收集 Nginx 日志</title>
    <link href="https://www.missf.top/post/baa98a96.html"/>
    <id>https://www.missf.top/post/baa98a96.html</id>
    <published>2020-08-25T06:27:22.000Z</published>
    <updated>2020-09-28T03:33:53.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-配置-Json-格式日志"><a href="#Nginx-配置-Json-格式日志" class="headerlink" title="Nginx 配置 Json 格式日志"></a>Nginx 配置 Json 格式日志</h1><p>修改 Nginx 配置文件，定义输出 json 格式的日志，便于 filebeat 和 logstash 收集</p><pre class="line-numbers language-json"><code class="language-json">http <span class="token punctuation">{</span>    log_format  main  '<span class="token punctuation">{</span><span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token string">"$time_iso8601"</span><span class="token punctuation">,</span> '                        '<span class="token property">"clientRealIp"</span><span class="token operator">:</span> <span class="token string">"$remote_addr"</span><span class="token punctuation">,</span> '                        '<span class="token property">"scheme"</span><span class="token operator">:</span> <span class="token string">"$scheme"</span><span class="token punctuation">,</span> '                        '<span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"$request_method"</span><span class="token punctuation">,</span> '                        '<span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"$host"</span><span class="token punctuation">,</span> '                        '<span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"$request_uri"</span><span class="token punctuation">,</span> '                        '<span class="token property">"size"</span><span class="token operator">:</span> $body_bytes_sent<span class="token punctuation">,</span> '                        '<span class="token property">"referrer"</span><span class="token operator">:</span> <span class="token string">"$http_referer"</span><span class="token punctuation">,</span> '                        '<span class="token property">"agent"</span><span class="token operator">:</span> <span class="token string">"$http_user_agent"</span><span class="token punctuation">,</span> '                        '<span class="token property">"upstream_addr"</span><span class="token operator">:</span> <span class="token string">"$upstream_addr"</span><span class="token punctuation">,</span> '                        '<span class="token property">"request_time"</span><span class="token operator">:</span> $request_time<span class="token punctuation">,</span> '                        '<span class="token property">"request_length"</span><span class="token operator">:</span> $request_length<span class="token punctuation">,</span> '                        '<span class="token property">"upstream_connect_time"</span><span class="token operator">:</span> <span class="token string">"$upstream_connect_time"</span><span class="token punctuation">,</span> '                        '<span class="token property">"upstream_response_time"</span><span class="token operator">:</span> <span class="token string">"$upstream_response_time"</span><span class="token punctuation">,</span> '                        '<span class="token property">"upstream_status"</span><span class="token operator">:</span> <span class="token string">"$upstream_status"</span><span class="token punctuation">,</span> '                        '<span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"$status"</span><span class="token punctuation">}</span>'<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Filebeat-配置文件"><a href="#Filebeat-配置文件" class="headerlink" title="Filebeat 配置文件"></a>Filebeat 配置文件</h1><p>编写 filebeat 配置文件，收集 Nginx 的 access.log 和 error.log，并且添加自定义字段和标签存储到 redis</p><pre class="line-numbers language-json"><code class="language-json">cat /etc/filebeat/filebeat-nginx.yml filebeat.inputs<span class="token operator">:</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  json.keys_under_root<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /usr/local/nginx/logs/access.log  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"access"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    server<span class="token operator">:</span> nginx    type<span class="token operator">:</span> nginx-access  fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  json.keys_under_root<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /usr/local/nginx/logs/error.log  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    server<span class="token operator">:</span> nginx    type<span class="token operator">:</span> nginx-error  fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>processors<span class="token operator">:</span>- drop_fields<span class="token operator">:</span>    fields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"input_type"</span><span class="token punctuation">,</span> <span class="token string">"ecs.version"</span><span class="token punctuation">,</span> <span class="token string">"host.name"</span><span class="token punctuation">,</span> <span class="token string">"agent"</span><span class="token punctuation">,</span> <span class="token string">"log.offset"</span><span class="token punctuation">]</span>#output.console<span class="token operator">:</span>output.redis<span class="token operator">:</span>  hosts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"10.10.110.194:56379"</span><span class="token punctuation">]</span>  password<span class="token operator">:</span> <span class="token string">"123456"</span>  key<span class="token operator">:</span> <span class="token string">"nginx"</span>  db<span class="token operator">:</span> <span class="token number">0</span>  datatype<span class="token operator">:</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="控制台调试-Filebeat-输出的日志数据"><a href="#控制台调试-Filebeat-输出的日志数据" class="headerlink" title="控制台调试 Filebeat 输出的日志数据"></a>控制台调试 Filebeat 输出的日志数据</h1><p>通过 drop_fields 去控制我们想要输出的字段，得到精简的日志数据</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token string">"2020-09-07T18:08:49.000Z"</span><span class="token punctuation">,</span>    <span class="token property">"@metadata"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"beat"</span><span class="token operator">:</span> <span class="token string">"filebeat"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"7.9.0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"nginx"</span><span class="token punctuation">,</span>    <span class="token property">"ecs"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"file"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/usr/local/nginx/logs/access.log"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"json"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"input"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"log"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nginx-access"</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"10.10.110.194 - - [08/Sep/2020:02:08:41 +0800] \"GET /848dd HTTP/1.1\" 404 153 \"-\" \"curl/7.29.0\""</span><span class="token punctuation">,</span>    <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"access"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Logstash-读取-Redis-中的日志数据"><a href="#Logstash-读取-Redis-中的日志数据" class="headerlink" title="Logstash 读取 Redis 中的日志数据"></a>Logstash 读取 Redis 中的日志数据</h1><p>logstash 读取 redis 中的日志数据，并且在 Kibana展示 Nginx 日志</p><pre class="line-numbers language-json"><code class="language-json"># logstash配置文件通过我们定义的fields字段和标签匹配数据<span class="token punctuation">,</span>将不同的数据存储到不同的indexinput <span class="token punctuation">{</span>  redis <span class="token punctuation">{</span>    host => <span class="token string">"10.10.110.194"</span>    port => <span class="token number">56379</span>    password => <span class="token string">"123456"</span>    db => <span class="token string">"0"</span>    data_type => <span class="token string">"list"</span>    key => <span class="token string">"nginx"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span> # 通过字段和标签判断日志数据<span class="token punctuation">,</span>存储到不同的index  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"nginx-access"</span> <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"access"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"filebeat-nginx-access%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"nginx-error"</span> <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"error"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"filebeat-nginx-error%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Kibana-展示-Nginx-日志"><a href="#Kibana-展示-Nginx-日志" class="headerlink" title="Kibana 展示 Nginx 日志"></a>Kibana 展示 Nginx 日志</h1><p>我们可以在 kibana 上创建索引，查看 Nginx 日志，通过字段去统计和展示日志数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f560c25160a154a6759d557.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx-配置-Json-格式日志&quot;&gt;&lt;a href=&quot;#Nginx-配置-Json-格式日志&quot; class=&quot;headerlink&quot; title=&quot;Nginx 配置 Json 格式日志&quot;&gt;&lt;/a&gt;Nginx 配置 Json 格式日志&lt;/h1&gt;&lt;p&gt;修改 Ngi
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic 引入 Filebeat</title>
    <link href="https://www.missf.top/post/9482a90c.html"/>
    <id>https://www.missf.top/post/9482a90c.html</id>
    <published>2020-08-20T03:58:57.000Z</published>
    <updated>2021-01-20T10:13:22.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入-Filebeat-架构简介"><a href="#引入-Filebeat-架构简介" class="headerlink" title="引入 Filebeat 架构简介"></a>引入 Filebeat 架构简介</h1><p>filebeat 代替 logstash 去收集日志数据，然后将收集到的日志数据存储到 redis 或者 kafka，再由 logstash 去消费数据。filebeat 是非常轻量级单用途的日志采集器，属于Beats 家族。早期的 elk 架构使用 logstash 收集、解析日志，但是 logstash 对内存、CPU、IO等资源消耗比较高(因为 logstash 是使用 java 语言编写的)，后来出现了使用golang 编写的 filebeat 日志收集器，可以不依赖任何环境安装即可使用，同时对资源的占用可以忽略不计，使用 filebeat 替代 logstash 去收集日志是非常好的方案</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f55ced6160a154a674c1b90.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="安装-Filebeat"><a href="#安装-Filebeat" class="headerlink" title="安装 Filebeat"></a>安装 Filebeat</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载 filebeat</span><span class="token function">wget</span> https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.9.0-x86_64.rpm<span class="token comment" spellcheck="true"># 安装</span>yum <span class="token function">install</span> -y filebeat-7.9.0-x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写-Filebeat-配置文件"><a href="#编写-Filebeat-配置文件" class="headerlink" title="编写 Filebeat 配置文件"></a>编写 Filebeat 配置文件</h1><p>filebeat 配置文件负责收集日志，然后将数据存到 redis</p><pre class="line-numbers language-json"><code class="language-json">cat /etc/filebeat/filebeat.ymlfilebeat.inputs<span class="token operator">:</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /var/log/messages  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span><span class="token string">"syslog"</span><span class="token punctuation">]</span>  #include_lines<span class="token operator">:</span> <span class="token punctuation">[</span>'sometext'<span class="token punctuation">]</span> Filebeat仅导出与列表中的正则表达式匹配的行  #exclude_lines<span class="token operator">:</span> <span class="token punctuation">[</span>'^DBG'<span class="token punctuation">]</span> Filebeat会删除列表中与正则表达式匹配的所有行  fields<span class="token operator">:</span>    # 可以指定字段向输出添加附加信息    type<span class="token operator">:</span> system  # fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>     # 如果为<span class="token boolean">true</span><span class="token punctuation">,</span>则自定义字段将作为顶级字段而不是作为fields字段的子字典- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /var/log/audit/audit.log  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"audit"</span><span class="token punctuation">,</span><span class="token string">"syslog"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    type<span class="token operator">:</span> system  # fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>output.console<span class="token operator">:</span>    # 将收集到的日志数据输出到控制台<span class="token punctuation">,</span>可以查看fields定义的字段output.redis<span class="token operator">:</span>    # filebeat将收集到的日志存储到redis  hosts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"10.10.110.194:56379"</span><span class="token punctuation">]</span>  password<span class="token operator">:</span> <span class="token string">"123456"</span>  key<span class="token operator">:</span> <span class="token string">"filebeat"</span>  db<span class="token operator">:</span> <span class="token number">0</span>  timeout<span class="token operator">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查看-Filebeat-输出的-Json-数据"><a href="#查看-Filebeat-输出的-Json-数据" class="headerlink" title="查看 Filebeat 输出的 Json 数据"></a>查看 Filebeat 输出的 Json 数据</h1><p>我们在调试日志格式时使用命令去启动 filebeat，使用 systemctl 的方式去调试会出现很多转义符，不便于查看</p><pre class="line-numbers language-json"><code class="language-json">/usr/bin/filebeat -c /etc/filebeat/filebeat.yml    # 这里需要将控制台输出的数据json格式化<span class="token punctuation">{</span>    <span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token string">"2020-09-07T16:17:42.615Z"</span><span class="token punctuation">,</span>    <span class="token property">"@metadata"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"beat"</span><span class="token operator">:</span> <span class="token string">"filebeat"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"7.9.0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"ecs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.5.0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"localhost.localdomain"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"agent"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"ephemeral_id"</span><span class="token operator">:</span> <span class="token string">"660a2bfb-9a56-43a8-ae93-788060f5d243"</span><span class="token punctuation">,</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"6a8ff370-52b5-4f89-ad9c-b6feecf938a9"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"filebeat"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"7.9.0"</span><span class="token punctuation">,</span>        <span class="token property">"hostname"</span><span class="token operator">:</span> <span class="token string">"localhost.localdomain"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"offset"</span><span class="token operator">:</span> <span class="token number">997322</span><span class="token punctuation">,</span>        <span class="token property">"file"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/var/log/messages"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"Sep  8 00:01:01 localhost systemd: Started Session 7 of user root."</span><span class="token punctuation">,</span>    <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span> <span class="token string">"syslog"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span> # 这里由于filebeat配置文件中没有开启fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>这个选项<span class="token punctuation">,</span>所以我们定义的字段会在fields里面        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"system"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"input"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"log"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="定义-Filebeat-输出的-Json-数据"><a href="#定义-Filebeat-输出的-Json-数据" class="headerlink" title="定义 Filebeat 输出的 Json 数据"></a>定义 Filebeat 输出的 Json 数据</h1><p>我们除了可以自己自定义字段，还可以删除一些 filebeat 默认输出的字段，让日志数据更加易于查看</p><pre class="line-numbers language-json"><code class="language-json"># 定义filebeat配置文件<span class="token punctuation">,</span>过滤不需要的json数据filebeat.inputs<span class="token operator">:</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  # json.keys_under_root<span class="token operator">:</span> <span class="token boolean">true</span> 开始json解析<span class="token punctuation">,</span>不是json格式的日志不要开启此选项  paths<span class="token operator">:</span>    - /var/log/messages  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span><span class="token string">"syslog"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    type<span class="token operator">:</span> system  fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /var/log/audit/audit.log  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"audit"</span><span class="token punctuation">,</span><span class="token string">"syslog"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    type<span class="token operator">:</span> system  fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>processors<span class="token operator">:</span>- drop_fields<span class="token operator">:</span>    fields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"input_type"</span><span class="token punctuation">,</span> <span class="token string">"ecs.version"</span><span class="token punctuation">,</span> <span class="token string">"host.name"</span><span class="token punctuation">,</span> <span class="token string">"agent"</span><span class="token punctuation">,</span> <span class="token string">"log.offset"</span><span class="token punctuation">]</span>    # 将这些字段丢弃output.console<span class="token operator">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看自定义之后的 json 数据</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token string">"2020-09-07T17:37:59.500Z"</span><span class="token punctuation">,</span>    <span class="token property">"@metadata"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"beat"</span><span class="token operator">:</span> <span class="token string">"filebeat"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"7.9.0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span> <span class="token string">"syslog"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"input"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"log"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span>    # fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span> 将作为顶级字段    <span class="token property">"ecs"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"file"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/var/log/messages"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"Sep  8 01:35:28 localhost systemd-logind: Removed session 4."</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Logstash-消费-Redis-中的数据"><a href="#Logstash-消费-Redis-中的数据" class="headerlink" title="Logstash 消费 Redis 中的数据"></a>Logstash 消费 Redis 中的数据</h1><p>filebeat 将日志数据存储到 redis 之后，logstash 从 redis 读取日志数据就是非常简单的事情了</p><pre class="line-numbers language-json"><code class="language-json">cat /etc/logstash/conf.d/sys-from-redis.confinput <span class="token punctuation">{</span>  redis <span class="token punctuation">{</span>    host => <span class="token string">"10.10.110.194"</span>    port => <span class="token number">56379</span>    password => <span class="token string">"123456"</span>    db => <span class="token string">"0"</span>    data_type => <span class="token string">"list"</span>    batch_count => <span class="token string">"1"</span>    key => <span class="token string">"filebeat"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"system"</span> <span class="token punctuation">{</span>    # 这里的匹配由filebeat输出的json数据格式来定义    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"messages"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"filebeat-fromredis-messages-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    else if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"audit"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"filebeat-fromredis-audit-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Elasticsearch-查看数据"><a href="#Elasticsearch-查看数据" class="headerlink" title="Elasticsearch 查看数据"></a>Elasticsearch 查看数据</h1><p>索引的命名根据我们在 logstash 处理数据时的定义格式</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f5600d8160a154a675742af.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引入-Filebeat-架构简介&quot;&gt;&lt;a href=&quot;#引入-Filebeat-架构简介&quot; class=&quot;headerlink&quot; title=&quot;引入 Filebeat 架构简介&quot;&gt;&lt;/a&gt;引入 Filebeat 架构简介&lt;/h1&gt;&lt;p&gt;filebeat 代替 lo
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic 引入 Redis</title>
    <link href="https://www.missf.top/post/23bc2fbc.html"/>
    <id>https://www.missf.top/post/23bc2fbc.html</id>
    <published>2020-08-17T10:48:56.000Z</published>
    <updated>2021-01-20T10:13:09.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入-Redis-架构简介"><a href="#引入-Redis-架构简介" class="headerlink" title="引入 Redis 架构简介"></a>引入 Redis 架构简介</h1><p>logstash 分为 shipper(负责收集日志数据)和 indexer(负责对日志做过滤存储到ES)两个角色。当日志量达到一个量级之后，我们就不能继续使用 logstash 去收集和处理数据，由于 ES 的 HTTP API 处理能力有限，在日志写入频繁的情况下可能会超时、丢失，所以用队列来做缓冲在两个 logstash 角色之间可以引入 redis 或者 kafka。使用消息队列的方式可减少 ES 压力，队列起到缓冲作用，也可以一定程度保护数据不丢失。同时我们还能将所有收集到的日志统一在 logstash indexer 进行处理</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f51fb57160a154a6778fb68.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><pre class="line-numbers language-bash"><code class="language-bash">logstash 10.10.110.195    <span class="token comment" spellcheck="true"># logstash shipper 生产数据,将获取到的数据存到 redis</span>logstash + redis 10.10.110.194    <span class="token comment" spellcheck="true"># logstash indexer 消费 redis 中的日志数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="生产日志数据"><a href="#生产日志数据" class="headerlink" title="生产日志数据"></a>生产日志数据</h1><p>编写 logstash pipeline 配置文件，将收集到的日志数据存储到 redis</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  file <span class="token punctuation">{</span>    path => <span class="token punctuation">[</span><span class="token string">"/var/log/messages"</span><span class="token punctuation">]</span>    type => <span class="token string">"syslog"</span>    tags => <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span><span class="token string">"log"</span><span class="token punctuation">]</span>    start_position => <span class="token string">"beginning"</span>  <span class="token punctuation">}</span>  file <span class="token punctuation">{</span>    path => <span class="token punctuation">[</span><span class="token string">"/var/log/audit/audit.log"</span><span class="token punctuation">]</span>    type => <span class="token string">"syslog"</span>    tags => <span class="token punctuation">[</span><span class="token string">"audit"</span><span class="token punctuation">,</span><span class="token string">"log"</span><span class="token punctuation">]</span>    start_position => <span class="token string">"beginning"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  redis <span class="token punctuation">{</span>    host => <span class="token punctuation">[</span><span class="token string">"10.10.110.194:56379"</span><span class="token punctuation">]</span>    password => <span class="token string">"123456"</span>    db => <span class="token string">"0"</span>    data_type => <span class="token string">"list"</span>    key => <span class="token string">"logstash"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 logstash 进行收集日志存储到 redis</p><pre class="line-numbers language-bash"><code class="language-bash">/usr/share/logstash/bin/logstash -rf /etc/logstash/conf.d/syslog-toredis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Redis查看日志数据"><a href="#Redis查看日志数据" class="headerlink" title="Redis查看日志数据"></a>Redis查看日志数据</h1><p>logstash 在收集到日志数据并且添加上标签和类型然后存储到 redis，我们可以返回列表的长度来得知日志数据是否被存储到 redis</p><p><img src="https://pic.imgdb.cn/item/5f55cd21160a154a674bc848.jpg" alt=""></p><h1 id="消费日志数据"><a href="#消费日志数据" class="headerlink" title="消费日志数据"></a>消费日志数据</h1><p>编写 logstash pipeline 配置文件，将 redis 中的日志数据存储到 ES</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  redis <span class="token punctuation">{</span>    host => <span class="token string">"10.10.110.194"</span>    port => <span class="token number">56379</span>    password => <span class="token string">"123456"</span>    db => <span class="token string">"0"</span>    data_type => <span class="token string">"list"</span>    key => <span class="token string">"logstash"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"syslog"</span> <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"messages"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"syslog-fromredis-messages-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    else if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"audit"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"syslog-fromredis-audit-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Redis-查看消费的数据"><a href="#Redis-查看消费的数据" class="headerlink" title="Redis 查看消费的数据"></a>Redis 查看消费的数据</h1><p>日志数据被消费完之后就代表已经写入到 ES</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># redis 中的 key 会全部存到 ES 中(日志数据被消费完)</span>127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7041127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5791127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4541127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3041127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1666127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:56379<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引入-Redis-架构简介&quot;&gt;&lt;a href=&quot;#引入-Redis-架构简介&quot; class=&quot;headerlink&quot; title=&quot;引入 Redis 架构简介&quot;&gt;&lt;/a&gt;引入 Redis 架构简介&lt;/h1&gt;&lt;p&gt;logstash 分为 shipper(负责收集日志
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Kibana 展示系统日志</title>
    <link href="https://www.missf.top/post/c802a07c.html"/>
    <id>https://www.missf.top/post/c802a07c.html</id>
    <published>2020-08-16T10:39:44.000Z</published>
    <updated>2021-01-20T10:11:05.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写-logstash-pipeline-配置文件"><a href="#编写-logstash-pipeline-配置文件" class="headerlink" title="编写 logstash pipeline 配置文件"></a>编写 logstash pipeline 配置文件</h1><p>定义日志收集、过滤、存储的方式</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  file <span class="token punctuation">{</span>    path => <span class="token punctuation">[</span><span class="token string">"/var/log/messages"</span><span class="token punctuation">]</span>    type => <span class="token string">"syslog"</span>    tags => <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span><span class="token string">"log"</span><span class="token punctuation">]</span>    start_position => <span class="token string">"beginning"</span>    # 从文件开头读取    <span class="token punctuation">}</span>  file <span class="token punctuation">{</span>    path => <span class="token punctuation">[</span><span class="token string">"/var/log/audit/audit.log"</span><span class="token punctuation">]</span>    type => <span class="token string">"syslog"</span>    tags => <span class="token punctuation">[</span><span class="token string">"audit"</span><span class="token punctuation">,</span><span class="token string">"log"</span><span class="token punctuation">]</span>    start_position => <span class="token string">"beginning"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"syslog"</span> <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"messages"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>    # 存储带ES        index  => <span class="token string">"syslog-messages-%{+YYYY.MM.dd}"</span>    # index的命名格式      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    else if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"audit"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"syslog-audit-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Logstash-收集日志存储到-ES"><a href="#Logstash-收集日志存储到-ES" class="headerlink" title="Logstash 收集日志存储到 ES"></a>Logstash 收集日志存储到 ES</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动 logstash,systemctl 启动方式可以指定配置文件</span>/usr/share/logstash/bin/logstash -rf /etc/logstash/conf.d/syslog.conf<span class="token comment" spellcheck="true"># logstash 常用参数</span>-n 指定logstash实例的名称,默认为当前主机名-f 指定启动配置文件-e 指定直接执行的配置文件内容,可以不指定-f参数了-r 检测配置文件变化,自动重新加载-t 检查配置的语法是否正确并退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Elasticsearch-查看数据"><a href="#Elasticsearch-查看数据" class="headerlink" title="Elasticsearch 查看数据"></a>Elasticsearch 查看数据</h1><p>索引的命名格式按日期去分割</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f50be45160a154a6732f27c.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="将-ES-的日志索引到-Kibana"><a href="#将-ES-的日志索引到-Kibana" class="headerlink" title="将 ES 的日志索引到 Kibana"></a>将 ES 的日志索引到 Kibana</h1><p>Kibana 的配置文件指定 ES 的地址，使用正则匹配去创建索引</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f50c769160a154a67356974.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>配置时间过滤器字段</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f51e97a160a154a67727f8b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Kibana-展示日志数据"><a href="#Kibana-展示日志数据" class="headerlink" title="Kibana 展示日志数据"></a>Kibana 展示日志数据</h1><p>可以根据日志数据的字段去查看指定的信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f51f25f160a154a6776bac0.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编写-logstash-pipeline-配置文件&quot;&gt;&lt;a href=&quot;#编写-logstash-pipeline-配置文件&quot; class=&quot;headerlink&quot; title=&quot;编写 logstash pipeline 配置文件&quot;&gt;&lt;/a&gt;编写 logstash
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Kibana</title>
    <link href="https://www.missf.top/post/e26112db.html"/>
    <id>https://www.missf.top/post/e26112db.html</id>
    <published>2020-08-14T07:56:54.000Z</published>
    <updated>2021-01-20T10:10:42.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kibana-简述"><a href="#Kibana-简述" class="headerlink" title="Kibana 简述"></a>Kibana 简述</h1><p>Kibana 是一个针对 Elasticsearch 的开源分析及可视化平台，用来搜索、查看交互存储在 Elasticsearch 索引中的数据。使用 Kibana，可以通过各种图表进行高级数据分析及展示。Kibana 让海量数据更容易理解，它操作简单，基于浏览器的用户界面可以快速创建仪表板(dashboard)实时显示 Elasticsearch 查询动态。设置 Kibana 非常简单，无需编码或者额外的基础架构，就可以完成 Kibana 安装并启动 Elasticsearch 索引监测</p><h1 id="Kibana-安装配置"><a href="#Kibana-安装配置" class="headerlink" title="Kibana 安装配置"></a>Kibana 安装配置</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载 Kibana</span><span class="token function">wget</span> https://artifacts.elastic.co/downloads/kibana/kibana-7.8.1-x86_64.rpm<span class="token comment" spellcheck="true"># 安装</span>shasum -a 512 kibana-7.8.1-x86_64.rpmrpm --install kibana-7.8.1-x86_64.rpm<span class="token comment" spellcheck="true"># 修改 Kibana 配置文件</span><span class="token function">grep</span> -v <span class="token string">"^#"</span> /etc/kibana/kibana.ymlserver.port: 5601server.host: <span class="token string">"127.0.0.1"</span>elasticsearch.hosts: <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">]</span>i18n.locale: <span class="token string">"zh-CN"</span><span class="token comment" spellcheck="true"># 启动 Kibana</span>systemctl start kibana.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置-Nginx-代理-Kibana"><a href="#配置-Nginx-代理-Kibana" class="headerlink" title="配置 Nginx 代理 Kibana"></a>配置 Nginx 代理 Kibana</h1><p>配置 Nginx 反向代理实现鉴权</p><pre class="line-numbers language-bash"><code class="language-bash">vim /usr/local/nginx/conf/nginx.confserver <span class="token punctuation">{</span>      listen 9090<span class="token punctuation">;</span>      server_name localhost<span class="token punctuation">;</span>      location / <span class="token punctuation">{</span>        auth_basic <span class="token string">"Restricted Access"</span><span class="token punctuation">;</span>        auth_basic_user_file /usr/local/nginx/conf/passwd.db<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 账号密码文件</span>        proxy_pass http://127.0.0.1:5601<span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置验证登录账号密码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 需要安装 httpd-tools 工具,文件里的密码是密文的</span>htpasswd -c /usr/local/nginx/conf/passwd.db admin    <span class="token comment" spellcheck="true"># 连续输入两次密码</span><span class="token comment" spellcheck="true"># 测试本机 kibana 能否连接,如果本机都不能连接,那么 Nginx 代理就没有意义</span>curl -L -u admin:12345678 http://127.0.0.1:5601<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="登录-Kibana"><a href="#登录-Kibana" class="headerlink" title="登录 Kibana"></a>登录 Kibana</h1><p>登录 kibana 的地址</p><pre class="line-numbers language-bash"><code class="language-bash">http://10.10.110.194:9090/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Nginx 账号密码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f50a2a9160a154a672c41a2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>kibana web 页面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f50a1ee160a154a672c0902.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kibana-简述&quot;&gt;&lt;a href=&quot;#Kibana-简述&quot; class=&quot;headerlink&quot; title=&quot;Kibana 简述&quot;&gt;&lt;/a&gt;Kibana 简述&lt;/h1&gt;&lt;p&gt;Kibana 是一个针对 Elasticsearch 的开源分析及可视化平台，用来搜
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Logstash</title>
    <link href="https://www.missf.top/post/fe947601.html"/>
    <id>https://www.missf.top/post/fe947601.html</id>
    <published>2020-08-11T07:04:57.000Z</published>
    <updated>2020-09-28T03:50:24.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Logstash-概述"><a href="#Logstash-概述" class="headerlink" title="Logstash 概述"></a>Logstash 概述</h1><p>logstash 是 elasticsearch 的数据管道，负责对数据源进行处理。工作原理分别是输入、过滤、输出。其中 input(负责从数据源采集数据)和 output(将数据传输到目的地)是必要的，filter(将数据修改为你指定的格式或内容)是非必要的。logstash 是插件式管理模式，在输入、过滤、输出以及编码过程中都可以使用插件进行定制，Logstash 社区有超过 200 种可用插件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f4ca600160a154a67c1320d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Logstash-安装"><a href="#Logstash-安装" class="headerlink" title="Logstash 安装"></a>Logstash 安装</h1><p>这里使用 yum 是因为二进制安装的 jdk，在 Logstash 启动时会报 could not find java</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装jdk</span>yum <span class="token function">install</span> -y java-11-openjdk java-11-openjdk-devel java-11-openjdk-headless<span class="token comment" spellcheck="true"># 下载logstash</span><span class="token function">wget</span> https://artifacts.elastic.co/downloads/logstash/logstash-7.8.1.rpm<span class="token comment" spellcheck="true"># 安装logstash</span>yum <span class="token function">install</span> -y logstash-7.8.1.rpm<span class="token comment" spellcheck="true"># 修改启动分配内存</span>vim /etc/logstash/jvm.options-Xms512m-Xmx512m<span class="token comment" spellcheck="true"># 第一个logstash示例</span><span class="token function">cd</span> logstash Installation directorybin/logstash -e <span class="token string">'input { stdin { } } output { stdout {} }'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 执行结果如下</p><p><img src="https://pic.imgdb.cn/item/5f4db451160a154a67703955.jpg" alt=""></p><h1 id="Logstash-配置详解"><a href="#Logstash-配置详解" class="headerlink" title="Logstash 配置详解"></a>Logstash 配置详解</h1><p>Logstash 的配置有两个必须元素(input和output)和一个可选元素(filter)</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span> # 输入   stdin <span class="token punctuation">{</span>     ... # 标准输入  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span> # 过滤  ...    # 对数据进行分割、截取等处理 <span class="token punctuation">}</span>output <span class="token punctuation">{</span> # 输出   stdout <span class="token punctuation">{</span>    ...  # 标准输出  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入</p><p>采集各种样式、大小和来源的数据，数据往往以各种各样的形式，或分散或集中地存在于不同的系统中</p><p> Logstash支持各种输入选择 ，可以在同一时间从众多常用来源捕捉事件</p><p>能够以连续的流式传输方式，轻松地从您的日志、指标、Web 应用、数据存储以及各种AWS服务采集数据</p></blockquote><blockquote><p> 过滤</p><p>实时解析和转换数据，Logstash过滤器能够解析各个事件</p><p>识别已命名的字段以构建结构，并将它们转换成通用格式，以便更轻松更快速地分析和实现商业价值</p></blockquote><blockquote><p>输出</p><p>Logstash提供众多输出选择，你可以将数据发送到指定的地方，并且能够灵活地解锁众多下游用例</p></blockquote><h1 id="输入插件-Stdin-示例"><a href="#输入插件-Stdin-示例" class="headerlink" title="输入插件 Stdin 示例"></a>输入插件 Stdin 示例</h1><p>从标准输入读取数据输出到标准输出</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json">mwj<span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-12T18<span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">32</span>.683Z<span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"mwj"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span>test data      <span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-12T18<span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">47</span>.691Z<span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"test data"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输入插件-File-示例"><a href="#输入插件-File-示例" class="headerlink" title="输入插件 File 示例"></a>输入插件 File 示例</h1><p>从文件中读取数据，输出到标准输出</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  file <span class="token punctuation">{</span>    # 调用file这个插件<span class="token punctuation">,</span>logstash社区有非常多的插件可以供我们使用    path =><span class="token string">"/var/log/messages"</span>    # 数据源来自这个文件的内容    tags =><span class="token string">"messages"</span>    # 打标签    type =><span class="token string">"syslog"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>          <span class="token string">"type"</span> => <span class="token string">"syslog"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T11<span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">45</span>.031Z<span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"path"</span> => <span class="token string">"/var/log/messages"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>          <span class="token string">"tags"</span> => <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token string">"messages"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"Aug 13 19:41:44 localhost yum[86466]: Installed: 1:nginx-mod-http-image-filter-1.16.1-1.el7.x86_64"</span><span class="token punctuation">}</span><span class="token punctuation">{</span>          <span class="token string">"type"</span> => <span class="token string">"syslog"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T11<span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">45</span>.032Z<span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"path"</span> => <span class="token string">"/var/log/messages"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>          <span class="token string">"tags"</span> => <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token string">"messages"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"Aug 13 19:41:44 localhost yum[86466]: Installed: 1:nginx-all-modules-1.16.1-1.el7.noarch"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输入插件-TCP-示例"><a href="#输入插件-TCP-示例" class="headerlink" title="输入插件 TCP 示例"></a>输入插件 TCP 示例</h1><p>logstash 从本机端口读取数据，其他机器通过 nc 工具发送数据到 logstash 指定的端口</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  tcp <span class="token punctuation">{</span>    port =><span class="token number">12345</span>    # 监听<span class="token number">12345</span>端口    type =><span class="token string">"nc"</span>        # 通过nc工具使用tcp/udp连接去发送网络数据给logstash  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"type"</span> => <span class="token string">"nc"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T06<span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">13</span>.448Z<span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"10.10.110.191"</span><span class="token punctuation">,</span>          <span class="token string">"port"</span> => <span class="token number">35228</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"we"</span>    # logstash接收到其他机器nc工具发送过来的信息(nc <span class="token number">10.10</span>.<span class="token number">110.194</span> <span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"type"</span> => <span class="token string">"nc"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T06<span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">40</span>.148Z<span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"10.10.110.191"</span><span class="token punctuation">,</span>          <span class="token string">"port"</span> => <span class="token number">35228</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"test"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编解码插件-Json-示例"><a href="#编解码插件-Json-示例" class="headerlink" title="编解码插件 Json 示例"></a>编解码插件 Json 示例</h1><p>只有输入 json 格式的数据才会被成功编解码，不是 json 格式的数据 logstash 不处理</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>    codec => json <span class="token punctuation">{</span>    charset => <span class="token punctuation">[</span><span class="token string">"UTF-8"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>  codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"孙七"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"555@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"听音乐、看电影"</span><span class="token punctuation">}</span><span class="token punctuation">{</span>         <span class="token string">"hobby"</span> => <span class="token string">"听音乐、看电影"</span><span class="token punctuation">,</span>          <span class="token string">"name"</span> => <span class="token string">"孙七"</span><span class="token punctuation">,</span>          <span class="token string">"mail"</span> => <span class="token string">"555@qq.com"</span><span class="token punctuation">,</span>           <span class="token string">"age"</span> => <span class="token number">24</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">09</span>-01T14<span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">24</span>.066Z<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编解码插件-Multline-示例"><a href="#编解码插件-Multline-示例" class="headerlink" title="编解码插件 Multline 示例"></a>编解码插件 Multline 示例</h1><p>multline 会将不是以字母开头的行合并到上一行(next是合并到下一行)，下面模拟 java 日志报错</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>    codec => multiline <span class="token punctuation">{</span>    pattern => <span class="token string">"^\s"</span>    what => <span class="token string">"previous"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>  codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token number">2020</span>-<span class="token number">08</span>-<span class="token number">13</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">195</span> --AsyncResolver-bootstrap-executor<span class="token number">-0</span>--    # 模拟java报错信息      at com.curre      at org.sprin      at org.sprin<span class="token punctuation">{</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">09</span>-01T14<span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">50</span>.642Z<span class="token punctuation">,</span>          <span class="token string">"tags"</span> => <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token string">"multiline"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"[INFO] 2020-08-13 15:56:53,195 --AsyncResolver-bootstrap-executor-0--\n      at com.curre\n      at org.sprin\n      at org.sprin"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="过滤插件-Json-示例"><a href="#过滤插件-Json-示例" class="headerlink" title="过滤插件 Json 示例"></a>过滤插件 Json 示例</h1><p>将 json 数据做过滤放在 content 字段里面</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span>  json <span class="token punctuation">{</span>    source => <span class="token string">"message"</span>    target => <span class="token string">"content"</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"request"</span><span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"404"</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token string">"563"</span><span class="token punctuation">}</span>    # 数据源<span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T09<span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">26</span>.702Z<span class="token punctuation">,</span>       <span class="token string">"content"</span> => <span class="token punctuation">{</span>        <span class="token string">"request"</span> => <span class="token string">"get"</span><span class="token punctuation">,</span>          <span class="token string">"bytes"</span> => <span class="token string">"563"</span><span class="token punctuation">,</span>         <span class="token string">"status"</span> => <span class="token string">"404"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token property">"{\"request\":\"get\", \"status\":\"404\", \"bytes\"</span><span class="token operator">:</span>\<span class="token string">"563\"}"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="过滤插件-Kv-示例"><a href="#过滤插件-Kv-示例" class="headerlink" title="过滤插件 Kv 示例"></a>过滤插件 Kv 示例</h1><p>以 &amp; 和 ? 作为分隔符，得到 key=value 形式的数据</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span>  kv <span class="token punctuation">{</span>    field_split => "&amp;?<span class="token property">"              # 以&amp;和?作为分隔符,得到key=value的形式    field_split_pattern => "</span><span class="token operator">:</span>+"      # 以一个或者多个<span class="token operator">:</span>作为分隔符  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json">pin=<span class="token number">12345</span>~<span class="token number">0</span>&amp;d=<span class="token number">123</span>&amp;e=foo@bar.com&amp;oq=bo?oi=bo&amp;ss=<span class="token number">12345</span><span class="token operator">:</span>    # 数据源<span class="token punctuation">{</span>             <span class="token string">"d"</span> => <span class="token string">"123"</span><span class="token punctuation">,</span>           <span class="token string">"pin"</span> => <span class="token string">"12345~0"</span><span class="token punctuation">,</span>            <span class="token string">"ss"</span> => <span class="token string">"12345:"</span><span class="token punctuation">,</span>            <span class="token string">"oq"</span> => <span class="token string">"bo"</span><span class="token punctuation">,</span>            <span class="token string">"oi"</span> => <span class="token string">"bo"</span><span class="token punctuation">,</span>             <span class="token string">"e"</span> => <span class="token string">"foo@bar.com"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T09<span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">41</span>.881Z<span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"pin=12345~0&amp;d=123&amp;e=foo@bar.com&amp;oq=bo?oi=bo&amp;ss=12345:"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出插件-ES-示例"><a href="#输出插件-ES-示例" class="headerlink" title="输出插件 ES 示例"></a>输出插件 ES 示例</h1><p>logstash 将日志输出到 ES 节点，存储到 missf 这个 index 并且以时间去命名</p><pre class="line-numbers language-json"><code class="language-json">output <span class="token punctuation">{</span>  elasticsearch <span class="token punctuation">{</span>    hosts => <span class="token string">"localhost:9200"</span>    index => <span class="token string">"missf-%{+YYYY.MM.dd}"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Logstash-概述&quot;&gt;&lt;a href=&quot;#Logstash-概述&quot; class=&quot;headerlink&quot; title=&quot;Logstash 概述&quot;&gt;&lt;/a&gt;Logstash 概述&lt;/h1&gt;&lt;p&gt;logstash 是 elasticsearch 的数据管道，负责对
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Elasticsearch</title>
    <link href="https://www.missf.top/post/1abc58c4.html"/>
    <id>https://www.missf.top/post/1abc58c4.html</id>
    <published>2020-08-05T10:26:09.000Z</published>
    <updated>2021-01-20T10:12:53.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch-简介"><a href="#Elasticsearch-简介" class="headerlink" title="Elasticsearch 简介"></a>Elasticsearch 简介</h1><p>Elasticsearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 语言开发，并作为 Apache 许可条款下的开放源代码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索、稳定、可靠、快速、使用方便</p><p>我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用 JSON 通过 HTTP 来索引数据，我们希望搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多用户，我们希望建立一个云的解决方案。因此我们利用 Elasticsearch 来解决所有这些问题及可能出现的更多其它问题</p><h1 id="Elasticsearch-集群部署"><a href="#Elasticsearch-集群部署" class="headerlink" title="Elasticsearch 集群部署"></a>Elasticsearch 集群部署</h1><p>Elasticsearch 的发展是非常快速的，所以在 ES5.0 之前，ELK 的各个版本都不统一，出现了版本号混乱的状态，所以从 5.0 开始，所有 Elastic Stack 中的项目全部统一版本号。目前最新版本是 7.8.1</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 环境准备</span>ES1 10.10.110.191ES2 10.10.110.192ES3 10.10.110.193<span class="token comment" spellcheck="true"># 下载 elasticsearch 和校验文件</span><span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.1-x86_64.rpm<span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.1-x86_64.rpm.sha512<span class="token comment" spellcheck="true"># 安装 elasticsearch</span>shasum -a 512 -c elasticsearch-7.8.1-x86_64.rpm.sha512yum <span class="token function">install</span> -y elasticsearch-7.8.1-x86_64.rpm<span class="token comment" spellcheck="true"># 修改 jvm 启动参数,根据自己机器决定</span>vim /etc/elasticsearch/jvm.options-Xms512m    <span class="token comment" spellcheck="true"># 确保 Xmx 和 Xms 的大小是相同的，其目的是为了能够在 java 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源</span>-Xmx512m<span class="token comment" spellcheck="true"># 修改进程在 VMAs(虚拟内存区域)创建内存映射最大数量</span><span class="token keyword">echo</span> <span class="token string">"vm.max_map_count=655360"</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&amp;&amp;</span> sysctl -p<span class="token comment" spellcheck="true"># 修改 elasticsearch 配置文件</span><span class="token function">grep</span> -v <span class="token string">'^#'</span> /etc/elasticsearch/elasticsearch.ymlcluster.name: elk-cluster    <span class="token comment" spellcheck="true"># 集群名称,所有节点一样</span>node.name: node-1    <span class="token comment" spellcheck="true"># 不同节点,分别用 node-1/node-2/node-3...</span>path.data: /var/lib/elasticsearch    <span class="token comment" spellcheck="true"># 数据目录,如果加入集群失败可以清空数据目录再重启服务</span>path.logs: /var/log/elasticsearch    <span class="token comment" spellcheck="true"># 日志目录</span>network.host: 10.10.110.191        <span class="token comment" spellcheck="true"># 不同节点,分别用10.10.110......</span>http.port: 9200        <span class="token comment" spellcheck="true"># 监听端口</span>discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">"10.10.110.191"</span>, <span class="token string">"10.10.110.192"</span>, <span class="token string">"10.10.110.193"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 集群发现,可以写成 10.10.110.191:9200</span>cluster.initial_master_nodes: <span class="token punctuation">[</span><span class="token string">"node-1"</span>, <span class="token string">"node-2"</span>, <span class="token string">"node-3"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 指定可以成为 master 的节点,此参数只有在初始化集群时生效</span><span class="token comment" spellcheck="true"># 启动 elasticsearch 服务</span>systemctl start elasticsearch.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Elasticsearch-集群常用查询"><a href="#Elasticsearch-集群常用查询" class="headerlink" title="Elasticsearch 集群常用查询"></a>Elasticsearch 集群常用查询</h1><p>查看集群状态</p><pre class="line-numbers language-json"><code class="language-json">curl -X GET http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/_cluster/health?pretty# 响应<span class="token punctuation">{</span>  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"elk-cluster"</span><span class="token punctuation">,</span>  <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span>    # 集群状态红绿灯<span class="token punctuation">,</span>绿<span class="token operator">:</span>健康<span class="token punctuation">,</span>黄<span class="token operator">:</span>亚健康<span class="token punctuation">,</span>红<span class="token operator">:</span>病态  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"number_of_nodes"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token property">"number_of_data_nodes"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token property">"active_primary_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"active_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"relocating_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"initializing_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"unassigned_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"delayed_unassigned_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"number_of_pending_tasks"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"number_of_in_flight_fetch"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"task_max_waiting_in_queue_millis"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"active_shards_percent_as_number"</span> <span class="token operator">:</span> <span class="token number">100.0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看节点状态</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">'http://10.10.110.191:9200/_cat/nodes?v'</span>ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name10.10.110.191           62          93   0    0.00    0.01     0.05 dilmrt    -      node-110.10.110.193           62          74   0    0.00    0.01     0.05 dilmrt    *      node-3    <span class="token comment" spellcheck="true"># *代表当前节点是master</span>10.10.110.192           70          75   0    0.00    0.01     0.05 dilmrt    -      node-2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询节点所有索引</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">'http://10.10.110.191:9200/_cat/indices?v'</span>health status index uuid                   pri rep docs.count docs.deleted store.size pri.store.sizegreen  <span class="token function">open</span>   data  njHuT0XvSOa2NHPJM3Aj-g   1   1          3            0     19.5kb          9.7kb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询一个索引所有数据</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">'http://10.10.110.191:9200/data/_search/?pretty'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Elasticsearch-head-安装"><a href="#Elasticsearch-head-安装" class="headerlink" title="Elasticsearch-head 安装"></a>Elasticsearch-head 安装</h1><p>由于 ES 官方并没有为 ES 提供界面管理工具，仅仅是提供了后台的服务。elasticsearch-head 是一个为 ES 开发的一个页面客户端工具，其源码托管于 GitHub，地址为：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a></p><p>elasticsearch-head 提供了四种安装方式：</p><ul><li>源码安装通过npm run start启动(不推荐)</li><li>通过docker安装(推荐)</li><li>通过chrome插件安装(推荐)</li><li>通过ES的plugin方式安装(不推荐)</li></ul><p>通过 Docker 安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 拉取镜像</span>docker pull mobz/elasticsearch-head:5<span class="token comment" spellcheck="true"># 启动容器</span>docker run -itd --name <span class="token string">"elasticsearch-head"</span> -p 9100:9100 -v elasticsearch_head:/usr/src/app --restart always mobz/elasticsearch-head:5<span class="token comment" spellcheck="true"># 由于前后端分离开发,所以会存在跨域问题,需要在服务端做 CORS 的配置</span>vim /etc/elasticsearch/elasticsearch.ymlhttp.cors.enabled: <span class="token boolean">true</span>http.cors.allow-origin: <span class="token string">"*"</span><span class="token comment" spellcheck="true"># Web 访问</span>http://10.10.110.191:9100/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Elasticsearch Head 数据浏览不显示数据，使用浏览器按 F12 查看发现 406 Not Acceptable 错误，出现这个错误是因为后台返回的数据是 json 格式前台无法解析，解决方法如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 找到 docker 数据卷在宿主机上的目录</span>docker volume inspect elasticsearch_head<span class="token comment" spellcheck="true"># 修改数据卷目录下 _site/vendor.js 文件</span>contentType: <span class="token string">"application/x-www-form-urlencoded"</span> 修改为 contentType: <span class="token string">"application/json;charset=UTF-8"</span>var inspectData <span class="token operator">=</span> s.contentType <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"application/x-www-form-urlencoded"</span> <span class="token operator">&amp;&amp;</span> 修改为 var inspectData <span class="token operator">=</span> s.contentType <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"application/json;charset=UTF-8"</span> <span class="token operator">&amp;&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Elasticsearch-基本概念"><a href="#Elasticsearch-基本概念" class="headerlink" title="Elasticsearch 基本概念"></a>Elasticsearch 基本概念</h1><p>索引(index)是 Elasticsearch 存放数据的地方，可以理解为关系型数据库的数据库。我们的数据被存储和索引在分片(shards)中，索引只是一个把一个或多个分片分组在一起的逻辑空间。索引的结构是为快速有效的全文索引准备的，索引名称必须是小写，并且不能用下划线开头</p><p>类型(type)用于区分同一个索引下不同的数据类型，相当于关系型数据库中的表。在 Elasticsearch 中，我们使用相同类型的文档表示相同的 “事物”，因为他们的数据结构也是相同的。每个类型都有自己的映射(mapping)或者结构定义，就像传统数据库表中的列一样。所有类型下的文档被存储在同一个索引下，但是类型的映射会告诉 Elasticsearch 不同的文档如何被索引(ES6.0之后一个索引只能存在一种类型)</p><p>文档(document)是 ElasticSearch 中存储的实体数据，一个文档相当于数据库表中的一行记录。在 Elasticsearch 中，文档这个术语有着特殊含义。它特指最顶层结构或者根对象(root object)序列化成的 JSON 数据(以唯一ID标识并存储于Elasticsearch中)</p><p>关系型数据库与 Elasticsearch 的概念类比如下</p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">Relational DB</td><td align="center">Databases</td><td align="center">Tables</td><td align="center">Rows</td><td align="center">Columns</td></tr><tr><td align="center">Elasticsearch</td><td align="center">Indices</td><td align="center">Types</td><td align="center">Documents</td><td align="center">Fields</td></tr></tbody></table><h1 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h1><p>在 Elasticsearch 中，提供了功能丰富的 RESTful API 的操作，包括基本的 CRUD、创建索引、删除索引等操作。RESTful 是统一规范的 http 接口，任何语言都可以使用。我们可以直接使用 web 客户端(postman)来测试，甚至还可以使用 Linux 上的 curl 工具测试，不需要自己写程序来调用 Elasticsearch 服务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Elasticsearch RESTful 操作数据的风格</span>curl -X <span class="token operator">&lt;</span>verb<span class="token operator">></span> <span class="token string">'&lt;protocol>://&lt;host>:&lt;port>/&lt;path>?&lt;query_string> -d &lt;body>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>verb：HTTP 方法，如 GET、POST、PUT、HEAD、DELETE</p></blockquote><blockquote><p>host：ES 集群中的任意节点主机名</p></blockquote><blockquote><p>port：ES HTTP 服务端口默认 9200</p></blockquote><blockquote><p>path：索引路径</p></blockquote><blockquote><p>query_string：可选的查询请求参数，例如 ?pretty 参数将格式化输出 JSON 数据</p></blockquote><blockquote><p>-d：一个 GET 的 JSON 格式请求主体</p></blockquote><blockquote><p>body：自己写的 JSON 格式的请求主体</p></blockquote><h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><p>在 Lucene 中创建索引是需要定义字段名称以及字段的类型，在 Elasticsearch 中提供了非结构化的索引，就是不需要创建索引结构，即可写入数据到索引中，实际上在 Elasticsearch 底层会进行结构化操作，此操作对用户是透明的</p><pre class="line-numbers language-apl"><code class="language-apl"><span class="token comment" spellcheck="true"># 创建一个 data 的空索引</span>curl <span class="token function">-</span>X PUT <span class="token string">'10.10.110.191:9200/data'</span><span class="token comment" spellcheck="true"># 删除索引</span>curl <span class="token function">-</span>X DELETE <span class="token string">'10.10.110.191:9200/data'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>URL 规则：POST /索引/类型/id</p><pre class="line-numbers language-json"><code class="language-json"># 往data这个索引下的user类型中插入一条ID为<span class="token number">1</span>的数据<span class="token punctuation">,</span>?pretty是以json格式返回数据curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/<span class="token number">1</span>?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"mowenjie"</span><span class="token punctuation">,</span><span class="token property">"job"</span><span class="token operator">:</span> <span class="token string">"DevOps"</span><span class="token punctuation">,</span><span class="token property">"base"</span><span class="token operator">:</span> <span class="token string">"sz"</span><span class="token punctuation">}</span>'# 响应<span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span># 不指定ID插入数据会自动生成IDcurl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"missf"</span><span class="token punctuation">,</span><span class="token property">"job"</span><span class="token operator">:</span> <span class="token string">"linux"</span><span class="token punctuation">,</span><span class="token property">"base"</span><span class="token operator">:</span> <span class="token string">"sz"</span><span class="token punctuation">}</span>'# 响应<span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"-J1PMXQBkHjO2vDovLJx"</span><span class="token punctuation">,</span>      <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h1><p>在 Elasticsearch 中可以通过覆盖的方式对数据进行更新</p><pre class="line-numbers language-json"><code class="language-json"># 对ID为<span class="token number">1</span>的这条数据进行更新curl -X PUT '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/<span class="token number">1</span>?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"fan"</span><span class="token punctuation">,</span><span class="token property">"job"</span><span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span><span class="token property">"base"</span><span class="token operator">:</span> <span class="token string">"bj"</span><span class="token punctuation">}</span>'# 查询更新结果curl -X GET '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/<span class="token number">1</span>?pretty'<span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    # 更新之后的数据版本进行了+<span class="token number">1</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"found"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"fan"</span><span class="token punctuation">,</span>    <span class="token property">"job"</span> <span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span>    <span class="token property">"base"</span> <span class="token operator">:</span> <span class="token string">"bj"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 上面是更新整条数据<span class="token punctuation">,</span>下面是局部更新一条数据的某些字段<span class="token punctuation">,</span>需要使用_update标识curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/<span class="token number">1</span>/_update?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span><span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"aaa"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h1><p>在 Elasticsearch 中，删除文档数据只需要发起 DELETE 请求即可</p><pre class="line-numbers language-json"><code class="language-json"># 删除ID为<span class="token number">1</span>的这条数据curl -X DELETE 'http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/<span class="token number">1</span>?pretty'# 响应<span class="token punctuation">,</span>看到返回<span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"deleted"</span>就表示删除成功<span class="token punctuation">,</span>如果删除一条不存在的数据会返回<span class="token number">404</span><span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"deleted"</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除一个文档也不会立即从磁盘上移除，它只是被标记成已删除。Elasticsearch 将会在你之后添加更多索引的时候才在后台进行删除内容的清理</p><h1 id="搜索数据"><a href="#搜索数据" class="headerlink" title="搜索数据"></a>搜索数据</h1><p>根据 id 搜索数据</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">'10.10.110.191:9200/data/user/003?pretty'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索全部数据</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">'10.10.110.191:9200/data/user/_search?pretty'</span>    <span class="token comment" spellcheck="true"># 响应默认只返回10条数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关键字搜素数据</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查询 base 等于 sz 的用户数据</span>curl -X GET <span class="token string">'10.10.110.191:9200/data/user/_search?q=base:sz'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="DSL-搜索"><a href="#DSL-搜索" class="headerlink" title="DSL 搜索"></a>DSL 搜索</h1><p>Elasticsearch 提供基于 JSON 的完整查询语言 DSL(Query DSL) 来定义查询，它允许你构建更加复杂、强大的查询</p><pre class="line-numbers language-json"><code class="language-json"># 查询base等于sz的用户curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>    # 请求体  <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"base"</span> <span class="token operator">:</span> <span class="token string">"sz"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'# 查询age大于<span class="token number">16</span>且job等于Linux的用户curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>             <span class="token property">"gt"</span><span class="token operator">:</span> <span class="token number">16</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"job"</span><span class="token operator">:</span> <span class="token string">"Linux"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'# 全文搜索curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"miss lisi"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h1><p>查询得到需要高亮的数据，再使用 highlight 将需要高亮的字段写在 fields 里面</p><pre class="line-numbers language-json"><code class="language-json">curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"miss lisi"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>在 Elasticsearch 中支持聚合操作，类似 SQL 中的 group by 操作</p><pre class="line-numbers language-json"><code class="language-json"># 根据字段值分组聚合curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"age_terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'# 响应<span class="token punctuation">,</span>age字段值为<span class="token number">16</span>的有<span class="token number">1</span>条数据<span class="token punctuation">,</span>age字段值为<span class="token number">25</span>的有<span class="token number">2</span>条数据<span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"age_terms"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"doc_count_error_upper_bound"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"sum_other_doc_count"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"buckets"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>        <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">2</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>        <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>一个文档不只有数据，它还包含了元数据(metadata)——关于文档的信息。三个必须的元数据节点是</p><table><thead><tr><th>节点</th><th>说明</th></tr></thead><tbody><tr><td>_index</td><td>文档存储的地方</td></tr><tr><td>_type</td><td>文档代表的对象的类</td></tr><tr><td>_id</td><td>文档的唯一标识</td></tr></tbody></table><p>索引(index)类似于关系型数据库里的 “数据库” ——它是我们存储和索引关联数据的地方</p><p>_type(类型)，在关系型数据库中，我们经常将相同类的对象存储在一个表里，因为它们有着相同的结构。同理，在 Elasticsearch 中我们使用相同类型(type)的文档表示相同的 “事物”，因为他们的数据结构也是相同的</p><p>id 仅仅是一个字符串，它与 _index 和 _type 组合时，就可以在 Elasticsearch 中唯一标识一个文档。当创建一个文档时你可以自定义 _id ，也可以让 Elasticsearch 帮你自动生成</p><h1 id="响应查询"><a href="#响应查询" class="headerlink" title="响应查询"></a>响应查询</h1><p>指定响应字段</p><pre class="line-numbers language-apl"><code class="language-apl"><span class="token comment" spellcheck="true"># 只响应 _source 下的 name,job 字段</span>curl <span class="token function">-</span>X GET <span class="token string">'10.10.110.191:9200/data/user/001/?_source=name,job'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不返回元数据，仅仅返回原始数据</p><pre class="line-numbers language-apl"><code class="language-apl">curl <span class="token function">-</span>X GET <span class="token string">'10.10.110.191:9200/data/user/001/_source'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="判断文档存在"><a href="#判断文档存在" class="headerlink" title="判断文档存在"></a>判断文档存在</h1><p>如果我们只需要判断文档是否存在，而不查询文档内容</p><pre class="line-numbers language-apl"><code class="language-apl"><span class="token comment" spellcheck="true"># 如果文档存在,Elasticsearch 将返回 HTTP/1.1 200 OK,如果不存在就返回 HTTP/1.1 404 Not Found</span>curl <span class="token function">-</span>i <span class="token function">-</span>X HEAD <span class="token string">'http://10.10.110.191:9200/data/user/001'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然，这只表示你在查询的那一刻文档不存在，但并不表示几毫秒后依旧不存在，另一个进程在这期间可能创建新文档</p><h1 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h1><p>有些情况下可以通过批量操作以减少网络请求，如：批量查询、批量插入数据</p><pre class="line-numbers language-json"><code class="language-json"># 批量查询curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_mget?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"ids"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"002"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>'# 响应<span class="token punctuation">{</span>  <span class="token property">"docs"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>      <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>      <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"001"</span><span class="token punctuation">,</span>      <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"found"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span>        <span class="token property">"job"</span> <span class="token operator">:</span> <span class="token string">"Python"</span><span class="token punctuation">,</span>        <span class="token property">"base"</span> <span class="token operator">:</span> <span class="token string">"sh"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">16</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>      <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>      <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"002"</span><span class="token punctuation">,</span>      <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"found"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"mowenjie"</span><span class="token punctuation">,</span>        <span class="token property">"job"</span> <span class="token operator">:</span> <span class="token string">"Linux"</span><span class="token punctuation">,</span>        <span class="token property">"base"</span> <span class="token operator">:</span> <span class="token string">"sz"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">36</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p>和 SQL 使用 LIMIT 关键字返回只有一页的结果一样，Elasticsearch 接受 from 和 size 参数</p><pre class="line-numbers language-bash"><code class="language-bash">size: 结果数,默认10 from: 从第n条数据之后开始,默认0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询一个区间的数据</p><pre class="line-numbers language-json"><code class="language-json"># 导入官方测试数据curl -H <span class="token string">"Content-Type: application/x-ndjson"</span> -XPOST <span class="token string">"10.10.110.191:9200/bank/account/_bulk?pretty"</span> --data-binary @accounts.json# 将数据的account_number字段进行排序之后再取数据curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span><span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    # 从第<span class="token number">10</span>条数据之后开始<span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">30</span>    # 一共返回<span class="token number">30</span>条数据<span class="token punctuation">,</span>就是account_number为<span class="token number">10</span>-<span class="token number">39</span>的数据<span class="token punctuation">}</span>'# 取<span class="token number">1000</span>到<span class="token number">2000</span>这个区间的随机数据curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d'<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>            <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">2000</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><p>前面我们创建的索引以及插入数据，都是由 Elasticsearch 进行自动判断类型，有些时候我们是需要进行明确字段类型的，否则自动判断的类型和实际需求是不相符的。每个字段都有一个数据类型，可以是一个简单的类型：text、keyword、date、long、double、boolean、ip，或者一个支持 JSON 层次结构的类型：例如 object、nested，或者是一种特殊的类型：geo_point、geo_shape、completion</p><p>创建明确类型的索引</p><pre class="line-numbers language-json"><code class="language-json">curl -X PUT '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>      <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"0"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"mail"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"hobby"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看索引映射</p><pre class="line-numbers language-apl"><code class="language-apl">curl <span class="token function">-</span>X GET <span class="token string">'10.10.110.191:9200/itcast/_mapping'</span><span class="token comment" spellcheck="true"># 响应</span><span class="token dfn builtin">{</span>  "itcast" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>    "mappings" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>      "properties" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>        "age" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>          "type" <span class="token dfn builtin">:</span> "integer"        <span class="token dfn builtin">}</span><span class="token function">,</span>        "hobby" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>          "type" <span class="token dfn builtin">:</span> "text"        <span class="token dfn builtin">}</span><span class="token function">,</span>        "mail" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>          "type" <span class="token dfn builtin">:</span> "keyword"        <span class="token dfn builtin">}</span><span class="token function">,</span>        "name" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>          "type" <span class="token dfn builtin">:</span> "text"        <span class="token dfn builtin">}</span>      <span class="token dfn builtin">}</span>    <span class="token dfn builtin">}</span>  <span class="token dfn builtin">}</span><span class="token dfn builtin">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>批量插入数据</p><pre class="line-numbers language-json"><code class="language-json"># 如果插入的数据类型与我们字段定义的类型不同<span class="token punctuation">,</span>那么就无法插入curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast/_bulk' -H <span class="token string">"Content-Type:application/json"</span> --data-binary @itcast.json<span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"111@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"羽毛球、乒乓球、足球"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"222@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"羽毛球、乒乓球、足球、篮球"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"333@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"羽毛球、篮球、游泳、听音乐"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"4"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"444@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"跑步、游泳"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"5"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"孙七"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"555@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"听音乐、看电影"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询插入的数据</p><pre class="line-numbers language-apl"><code class="language-apl">curl <span class="token function">-</span>X POST <span class="token string">'10.10.110.191:9200/itcast/_doc/_search?pretty'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="结构化查询"><a href="#结构化查询" class="headerlink" title="结构化查询"></a>结构化查询</h1><p>term 主要用于精确匹配某些值，比如数字、日期、布尔值或 not_analyzed 的字符串(未经分析的文本数据类型)</p><pre class="line-numbers language-json"><code class="language-json">curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast/_doc/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"term"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">20</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>range 过滤允许我们按照指定范围查询一批数据</p><pre class="line-numbers language-json"><code class="language-json"># 查询age大于等于<span class="token number">20</span>小于等于<span class="token number">22</span>范围的数据(gt<span class="token operator">:</span>大于<span class="token punctuation">,</span>gte<span class="token operator">:</span>大于等于<span class="token punctuation">,</span>lt<span class="token operator">:</span>小于<span class="token punctuation">,</span>lte<span class="token operator">:</span>小于等于<span class="token punctuation">)</span>curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/bank/account/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">22</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exists 查询可以用于查找文档中是否包含指定字段或没有某个字段，类似于 SQL 语句中的 IS_NULL 条件</p><pre class="line-numbers language-json"><code class="language-json"># 查询原始数据中含有address字段的文档curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/bank/account/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"exists"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"address"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>match 是一个模糊查询，需要指定字段名，但是会进行分词(中英文分词不一样)</p><pre class="line-numbers language-json"><code class="language-json"># 查询hobby字段是乒乓球的记录<span class="token punctuation">,</span>在查询之前会进行分词(只要记录包含<span class="token punctuation">[</span>乒/乓/球<span class="token punctuation">]</span>都会被匹配成功<span class="token punctuation">)</span>curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast/_doc/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"hobby"</span><span class="token operator">:</span> <span class="token string">"乒乓球"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bool 查询可以用来合并多个条件查询结果的布尔逻辑，它包含以下操作符：</p><blockquote><p>must: 多个查询条件的完全匹配，相当于and</p></blockquote><blockquote><p>must_not: 多个查询条件的相反匹配，相当于not</p></blockquote><blockquote><p>should: 至少有一个查询条件匹配，相当于or</p></blockquote><blockquote><p>filter: 必须匹配，但它不会对匹配的数据进行评分</p></blockquote><pre class="line-numbers language-json"><code class="language-json"># 只要包含<span class="token string">"乒乓 游泳"</span>的数据都会被匹配curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast/_doc/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"hobby"</span><span class="token operator">:</span> <span class="token string">"乒乓 游泳"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'# hobby包含乒乓但是age不等于<span class="token number">21</span>的数据curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast/_doc/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"hobby"</span><span class="token operator">:</span> <span class="token string">"乒乓"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"21"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h1><p>中文分词的难点在于在汉语中没有明显的词汇分界点，如在英语中空格可以作为分隔符，如果分隔不正确就会造成歧义。常用中文分词器有 IK、jieba、THULAC 等，推荐使用 IK 分词器</p><blockquote><p>IK Analyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。从2006年12月推出1.0版开始，IKAnalyzer已经推出了3个大版本。最初，它是以开源项目Luence为应用主体的，结合词典分词和文法分析算法的中文分词组件。新版本的IK Analyzer 3.0则发展为面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。采用了特有的”正向迭代最细粒度切分算法”，具有80万字/秒的高速处理能力 采用了多子处理器分析模式，支持：英文字母（IP地址、Email、URL）、数字（日期，常用中文数量词，罗马数字，科学计数法），中文词汇（姓名、地名处理）等分词处理。 优化的词典存储，更小的内存占用</p></blockquote><p>安装 ik 中文分词器</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载对应 es 版本的 ik 分词器</span>https://github.com/medcl/elasticsearch-analysis-ik<span class="token comment" spellcheck="true"># 创建目录</span><span class="token function">cd</span> your-es-root/plugins/ <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> ik<span class="token comment" spellcheck="true"># 解压</span>unzip plugin to folder your-es-root/plugins/ik<span class="token comment" spellcheck="true"># 重启 es(集群环境每一台都要配置)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分词测试</p><pre class="line-numbers language-json"><code class="language-json">curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/_analyze?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"我是中国人"</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"tokens"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"我"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"是"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"中国人"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"国人"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Elasticsearch-简介&quot;&gt;&lt;a href=&quot;#Elasticsearch-简介&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 简介&quot;&gt;&lt;/a&gt;Elasticsearch 简介&lt;/h1&gt;&lt;p&gt;Elasticsearch 
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Stack</title>
    <link href="https://www.missf.top/post/cb83e724.html"/>
    <id>https://www.missf.top/post/cb83e724.html</id>
    <published>2020-08-05T06:19:27.000Z</published>
    <updated>2020-09-28T03:50:06.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elastic-Stack-简介"><a href="#Elastic-Stack-简介" class="headerlink" title="Elastic Stack 简介"></a>Elastic Stack 简介</h1><p>ELK 日志收集分析平台相信所有的运维工程师都听说过，实际上 ELK 不是一门技术，而是三个软件的简称。它们分别是由 Elasticsearch、Logstash、Kibana 组成，在ELK发展的过程中，又有新成员 Beats 的加入，所以就形成了 Elastic Stack</p><p>Elastic Stack 的组成</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f46336d160a154a677a6088.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p>Elasticsearch 基于 java 语言开发，是个开源分布式搜索引擎，它的特点有:分布式、零配置、自动发现、索引自动分片、索引副本机制、RESTful 风格接口、多数据源、自动搜索负载等</p><h1 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h1><p>Logstash 基于 java 语言开发，是一个开源的用于收集，分析和存储日志的工具</p><h1 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h1><p>Kibana 基于 nodejs，也是一个开源和免费的工具，Kibana 可以为 Logstash 和 ElasticSearch 提供的日志分析的友好 Web 界面，可以汇总、分析和搜索重要数据日志</p><h1 id="Beats"><a href="#Beats" class="headerlink" title="Beats"></a>Beats</h1><p>Beats 是 elastic 公司开源的一款采集系统监控数据的代理 agent，是在被监控服务器上以客户端形式运行的数据收集器的统称，可以直接把数据发送给 Elasticsearch 或者通过 Logstash 发送给 Elasticsearch，然后进行后续的数据分析活动</p><p>Beats由如下组成：</p><ul><li>Packetbeat：一个网络数据包分析器，用于监控、收集网络流量信息，Packetbeat 嗅探服务器之间的流量，解析应用层协议，并关联到消息的处理，其支持ICMP(v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、Redis、MongoDB、Memcache 等协议</li><li>Filebeat：用于监控、收集服务器日志文件，其已取代 logstash forwarder</li><li>Metricbeat：可定期获取外部系统的监控指标信息，其可以监控、收集 Apache、HAProxy、MongoDB、MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper 等服务</li><li>Winlogbeat：用于监控、收集 Windows 系统的日志信息</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Elastic-Stack-简介&quot;&gt;&lt;a href=&quot;#Elastic-Stack-简介&quot; class=&quot;headerlink&quot; title=&quot;Elastic Stack 简介&quot;&gt;&lt;/a&gt;Elastic Stack 简介&lt;/h1&gt;&lt;p&gt;ELK 日志收集分析平台相信
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus pushgateway工具</title>
    <link href="https://www.missf.top/post/5cf39589.html"/>
    <id>https://www.missf.top/post/5cf39589.html</id>
    <published>2020-08-04T10:05:33.000Z</published>
    <updated>2020-10-10T08:29:26.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PushGateway-部署"><a href="#PushGateway-部署" class="headerlink" title="PushGateway 部署"></a>PushGateway 部署</h1><p>prometheus 基于 http 的 pull 方式去采集时间序列数据，但是由于业务需求，prometheus 和 exporter 可能不在一个子网或者防火墙原因，导致 prometheus 无法直接拉取各个 target 数据，或者需要将不同的数据进行汇总，这时候就可以使用 prometheus 的自带组件 pushgateway 进行数据的汇总，将默认的 pull 方式改为 push 方式进行数据的采集</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载pushgateway</span><span class="token function">wget</span> https://github.com/prometheus/pushgateway/releases/download/v1.2.0/pushgateway-1.2.0.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf pushgateway-1.2.0.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> pushgateway-1.2.0.linux-amd64 /usr/local/pushgateway<span class="token comment" spellcheck="true"># 创建pushgateway启动文件</span>vim /usr/lib/systemd/system/pushgateway.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Documentation<span class="token operator">=</span>pushgateway exporterAfter<span class="token operator">=</span>local-fs.target network-online.target network.targetWants<span class="token operator">=</span>local-fs.target network-online.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/pushgateway/pushgateway    <span class="token comment" spellcheck="true"># 需要修改监听端口可以自行添加参数</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 启动pushgateway</span>systemctl start pushgateway.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Prometheus-添加-PushGateway"><a href="#Prometheus-添加-PushGateway" class="headerlink" title="Prometheus 添加 PushGateway"></a>Prometheus 添加 PushGateway</h1><p>在我们的 prometheus 配置文件添加 pushgateway 的地址</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/prometheus.yml<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'pushgateway'</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'49.233.200.185:9091'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 这个是安装了pushgateway的服务器地址</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">instance</span><span class="token punctuation">:</span> pushgateway<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启 prometheus 服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pushgateway 其实是一个中转站，我们可以使用任何高级语言发送 post 请求到 pushgateway，然后对数据进行增加删除等操作，pushgateway 再把数据实时推送到 prometheus</p><h1 id="推送数据到-PushGateway"><a href="#推送数据到-PushGateway" class="headerlink" title="推送数据到 PushGateway"></a>推送数据到 PushGateway</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"missf 123456"</span> <span class="token operator">|</span> curl --data-binary @- http://49.233.200.185:9091/metrics/job/prometheus<span class="token comment" spellcheck="true"># 数据:missf,值:123456</span><span class="token comment" spellcheck="true"># --data-binary 表示发送二进制数据(post方式)</span><span class="token comment" spellcheck="true"># http://49.233.200.185:9091 pushgateway的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看 pushgateway 推送到 prometheus上的数据，这可以看到有 exported_job=”prometheus” 和 job=”prometheus” 两个指标，我们推送数据时指定的 job 是 prometheus，为什么这里的 job 会显示 pushgateway 呢？这里需要修改一个 honor_labels 的参数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f2a200a14195aa594b740f9.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>修改 prometheus 的配置文件，开启 honor_labels 参数(默认为false)</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'pushgateway'</span>    <span class="token key atrule">honor_labels</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'49.233.200.185:9091'</span><span class="token punctuation">]</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">instance</span><span class="token punctuation">:</span> pushgateway<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启 prometheus</p><p>再次推送数据到 pushgateway，然后查看 prometheus 上的数据</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"mwj 123456"</span> <span class="token operator">|</span> curl --data-binary @- http://49.233.200.185:9091/metrics/job/prometheus/instance/missf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic.imgdb.cn/item/5f2a245714195aa594b8dbe0.jpg" alt=""></p><p>这里说明一下 honor_labels 的作用：因为 prometheus 配置 pushgateway 的时候，也会指定 job 和 instance，但是它只表示 pushgateway 实例本身，不能真正表达收集数据的含义。所以配置 pushgateway 需要添加 honor_labels：true 参数，避免收集到的数据本身的 job 和 instance 被覆盖。具体参考官网</p><h1 id="在-PushGateway-删除数据"><a href="#在-PushGateway-删除数据" class="headerlink" title="在 PushGateway 删除数据"></a>在 PushGateway 删除数据</h1><pre class="line-numbers language-bash"><code class="language-bash">curl -X DELETE http://49.233.200.185:9091/metrics/job/prometheus/instance/missf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PushGateway-部署&quot;&gt;&lt;a href=&quot;#PushGateway-部署&quot; class=&quot;headerlink&quot; title=&quot;PushGateway 部署&quot;&gt;&lt;/a&gt;PushGateway 部署&lt;/h1&gt;&lt;p&gt;prometheus 基于 http 的 p
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus 业务监控</title>
    <link href="https://www.missf.top/post/f261c617.html"/>
    <id>https://www.missf.top/post/f261c617.html</id>
    <published>2020-08-03T02:26:26.000Z</published>
    <updated>2020-09-28T03:57:18.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blackbox-exporter-部署"><a href="#Blackbox-exporter-部署" class="headerlink" title="Blackbox_exporter 部署"></a>Blackbox_exporter 部署</h1><p>Blackbox_exporter 是 prometheus 官方提供的 exporter 之一，可以提供 http、dns、tcp、icmp 的监控数据采集</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载</span><span class="token function">wget</span> https://github.com/prometheus/blackbox_exporter/releases/download/v0.17.0/blackbox_exporter-0.17.0.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf blackbox_exporter-0.17.0.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> blackbox_exporter-0.17.0.linux-amd64 /usr/local/blackbox<span class="token comment" spellcheck="true"># 创建blackbox启动文件</span>vim /usr/lib/systemd/system/blackbox.service <span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Documentation<span class="token operator">=</span>Blackbox exporterAfter<span class="token operator">=</span>local-fs.target network-online.target network.targetWants<span class="token operator">=</span>local-fs.target network-online.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/blackbox/blackbox_exporter --config.file<span class="token operator">=</span>/usr/local/blackbox/blackbox.yml<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 启动blackbox</span>systemctl daemon-reloadsystemctl restart blackbox.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置-TCP-端口检测及告警"><a href="#配置-TCP-端口检测及告警" class="headerlink" title="配置 TCP 端口检测及告警"></a>配置 TCP 端口检测及告警</h1><p>传统的端口检测方式，调用命令的方式去实现</p><pre class="line-numbers language-bash"><code class="language-bash">ncat -vz 47.100.107.121 80    <span class="token comment" spellcheck="true"># 返回seconds而不是timeout那么端口就是通的</span>telnet <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>zabbix监控端口可以通过模板或者自定义key写脚本实现<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改 prometheus 配置文件，配置 TCP 端口检测</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/prometheus.yml<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'nginx_port_check'</span>    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe    <span class="token key atrule">params</span><span class="token punctuation">:</span>      <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>tcp_connect<span class="token punctuation">]</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> check/port/nginx.json    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance      <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__        <span class="token key atrule">replacement</span><span class="token punctuation">:</span> 47.100.107.121<span class="token punctuation">:</span><span class="token number">9115    </span><span class="token comment" spellcheck="true"># 这个是blackbox所在主机以及端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写监控 TCP 端口的告警规则</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/rules/nginx_port_check.yml<span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx port check   <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> nginx_port_check failed     <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s     <span class="token key atrule">expr</span><span class="token punctuation">:</span> probe_success<span class="token punctuation">{</span>job="nginx_port_check"<span class="token punctuation">}</span> == 0     <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">serverity</span><span class="token punctuation">:</span> critical     <span class="token key atrule">annotations</span><span class="token punctuation">:</span>       <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} port connection fail,{{ $labels.group }} value is:{{ $value }}"</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} port connection failed"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 prometheus 配置文件需要重启 prometheus 服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭 Nginx 测试当 80 端口无法访问之后的告警结果</p><p><img src="https://pic.imgdb.cn/item/5f27e91d14195aa594ee2d22.jpg" alt=""></p><h1 id="业务接口检测及告警"><a href="#业务接口检测及告警" class="headerlink" title="业务接口检测及告警"></a>业务接口检测及告警</h1><p>基于现在 Java + Vue 前后端分离的开发模式下，我们很多时候需要去检测 Java 的接口是否正常。传统的手动检测可以使用 postman，或者写 shell 脚本也可以实现，但是prometheus 可以通过 blackbox 去更好的检测业务接口</p><p>修改 prometheus 配置文件，添加监控业务接口的 job</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'get_mysite'</span>    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe    <span class="token key atrule">params</span><span class="token punctuation">:</span>      <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>http_2xx<span class="token punctuation">]</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> check/url/*.json    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance      <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__        <span class="token key atrule">replacement</span><span class="token punctuation">:</span> 47.100.107.121<span class="token punctuation">:</span><span class="token number">9115</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写监控 url 链接的告警规则文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/rules/get_mysite.yml<span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> get mysite check  <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> get_mysite_check failed     <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s     <span class="token key atrule">expr</span><span class="token punctuation">:</span> probe_success<span class="token punctuation">{</span>group="get_mysite"<span class="token punctuation">,</span>instance="https<span class="token punctuation">:</span>//www.missf.top"<span class="token punctuation">,</span>job="get_mysite"<span class="token punctuation">}</span> == 0    <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">serverity</span><span class="token punctuation">:</span> critical     <span class="token key atrule">annotations</span><span class="token punctuation">:</span>       <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} failed, {{ $labels.group }} value is:{{ $value }}"</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} website not accessible"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 prometheus 配置文件之后记得重启 prometheus 服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 <a href="https://www.missf.top">https://www.missf.top</a> 这个链接的 http 请求不是返回 2xx 的状态码就会告警</p><p><img src="https://pic.imgdb.cn/item/5f28fbe914195aa5944ce74b.jpg" alt=""></p><p>我们在监控业务接口时，只监控到接口的返回状态(2xx状态码)，假如我们想要监控业务接口的返回内容该如何实现呢？那就需要修改 blackbox 的配置文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">modules</span><span class="token punctuation">:</span>  <span class="token key atrule">http_2xx</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http<span class="token comment" spellcheck="true"># 下面这段是需要添加的内容 </span>    <span class="token key atrule">http</span><span class="token punctuation">:</span>          <span class="token key atrule">method</span><span class="token punctuation">:</span> GET      <span class="token key atrule">headers</span><span class="token punctuation">:</span>        <span class="token key atrule">Host</span><span class="token punctuation">:</span> www.missf.top        <span class="token key atrule">Accept-Language</span><span class="token punctuation">:</span> en<span class="token punctuation">-</span>US        <span class="token key atrule">Origin</span><span class="token punctuation">:</span> missf.top      <span class="token key atrule">fail_if_body_matches_regexp</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果我get的url地址返回的正文中有"apache",那么就会失败,则probe_success值为0</span>        <span class="token punctuation">-</span> <span class="token string">"apache"</span>      <span class="token key atrule">fail_if_body_not_matches_regexp</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"nginx"</span>    <span class="token comment" spellcheck="true"># 如果我get的url地址返回的正文中没有"nginx",那么就会失败,则probe_success值为0</span>  <span class="token key atrule">http_post_2xx</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">method</span><span class="token punctuation">:</span> POST  <span class="token key atrule">tcp_connect</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp  <span class="token key atrule">pop3s_banner</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp    <span class="token key atrule">tcp</span><span class="token punctuation">:</span>      <span class="token key atrule">query_response</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"^+OK"</span>      <span class="token key atrule">tls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">tls_config</span><span class="token punctuation">:</span>        <span class="token key atrule">insecure_skip_verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">ssh_banner</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp    <span class="token key atrule">tcp</span><span class="token punctuation">:</span>      <span class="token key atrule">query_response</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"^SSH-2.0-"</span>  <span class="token key atrule">irc_banner</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp    <span class="token key atrule">tcp</span><span class="token punctuation">:</span>      <span class="token key atrule">query_response</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">send</span><span class="token punctuation">:</span> <span class="token string">"NICK prober"</span>      <span class="token punctuation">-</span> <span class="token key atrule">send</span><span class="token punctuation">:</span> <span class="token string">"USER prober prober prober :prober"</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"PING :([^ ]+)"</span>        <span class="token key atrule">send</span><span class="token punctuation">:</span> <span class="token string">"PONG ${1}"</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"^:[^ ]+ 001"</span>  <span class="token key atrule">icmp</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> icmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改了 blackbox 配置文件需要重启 blackbox 服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart blackbox.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面所配置的匹配返回内容是在http_2xx这个模块下添加的，我们需要修改prometheus配置文件对应的http_2xx模块的规则文件，配置我们监控业务接口的返回内容的url地址</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/check/url/get_mysite.json <span class="token punctuation">[</span><span class="token punctuation">{</span>        <span class="token key atrule">"targets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"47.100.107.121"</span>    <span class="token comment" spellcheck="true"># 这个url返回的是默认的Nginx页面,对应我上面的匹配规则(nginx/apache)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token key atrule">"labels"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token key atrule">"group"</span><span class="token punctuation">:</span> <span class="token string">"get_mysite"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看 blackbox 的采集数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f292cb314195aa594682880.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>probe_success 的值是根据我们在 blackbox 配置文件的正则去决定的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f292d4d14195aa59468abde.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时候我们 get_mysite.json 这个规则文件的 job 的 probe_success 值就是通过 get 获取一个 url 的返回值去确定的，我们这样就可以去监控接口的返回内容了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f292f3014195aa5946a6ddd.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="配置网络监控"><a href="#配置网络监控" class="headerlink" title="配置网络监控"></a>配置网络监控</h1><p>我们可以让服务器使用 icmp 协议去请求 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 或者是一个公网 IP，测试服务器的网络是否正常</p><p>修改 prometheus 配置文件，添加网络监控的 job</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'icmp_check_network'</span>     <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s     <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe     <span class="token key atrule">params</span><span class="token punctuation">:</span>       <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>icmp<span class="token punctuation">]</span>     <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> check/icmp/*.json     <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>         <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target       <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>         <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance       <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__         <span class="token key atrule">replacement</span><span class="token punctuation">:</span> 47.100.107.121<span class="token punctuation">:</span><span class="token number">9115</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写网络监控的规则文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/rules/check_network.yml<span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> icmp check network  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> icmp check network failed    <span class="token key atrule">for</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">expr</span><span class="token punctuation">:</span> probe_success<span class="token punctuation">{</span>group="icmp_check_network"<span class="token punctuation">,</span>instance="www.baidu.com"<span class="token punctuation">,</span>job="icmp_check_network"<span class="token punctuation">}</span> == 0    <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">serverity</span><span class="token punctuation">:</span> critical    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} icmp connection failed, {{ $labels.group }} value is: {{ $value }}"</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> "<span class="token punctuation">{</span><span class="token punctuation">{</span> $labels.group <span class="token punctuation">}</span><span class="token punctuation">}</span> connection failed<span class="token punctuation">,</span> <span class="token key atrule">instance</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $labels.instance <span class="token punctuation">}</span><span class="token punctuation">}</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 prometheus 配置文件之后记得重启 prometheus 服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Blackbox-exporter-部署&quot;&gt;&lt;a href=&quot;#Blackbox-exporter-部署&quot; class=&quot;headerlink&quot; title=&quot;Blackbox_exporter 部署&quot;&gt;&lt;/a&gt;Blackbox_exporter 部署&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus 告警</title>
    <link href="https://www.missf.top/post/615f0093.html"/>
    <id>https://www.missf.top/post/615f0093.html</id>
    <published>2020-07-23T03:53:03.000Z</published>
    <updated>2020-09-28T04:00:18.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Alertmanager-概述"><a href="#Alertmanager-概述" class="headerlink" title="Alertmanager 概述"></a>Alertmanager 概述</h1><p>prometheus 发出告警时分为两部分，首先 prometheus 按告警规则(rule_files配置)向 alertmanager 发送告警，即告警规则是在 prometheus 上定义的，然后由 alertmanager 去管理这些告警，包括去重(deduplicating)、分组(grouping)、静音(silencing)、抑制(inhibition)、聚合(aggregation)，最终通过丰富的告警通知渠道(电话、微信、短信、邮件)将告警通知路由给对应的联系人。prometheus 的大部分组件都是 go 语言开发的，zabbix 到4.4之后的客户端才是 go 编写</p><h1 id="Alertmanager-二进制安装"><a href="#Alertmanager-二进制安装" class="headerlink" title="Alertmanager 二进制安装"></a>Alertmanager 二进制安装</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载</span><span class="token function">wget</span> https://github.com/prometheus/alertmanager/releases/download/v0.21.0/alertmanager-0.21.0.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf alertmanager-0.21.0.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> alertmanager-0.21.0.linux-amd64 /usr/local/alertmanager<span class="token comment" spellcheck="true"># 创建alertmanager启动文件</span>vim /usr/lib/systemd/system/alertmanager.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Documentation<span class="token operator">=</span>alertmanager<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/alertmanager/alertmanager --config.file<span class="token operator">=</span>/usr/local/alertmanager/alertmanager.yml --storage.path<span class="token operator">=</span>/usr/local/alertmanager/data<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 启动</span>systemctl daemon-reloadsystemctl start alertmanager.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Alertmanager-配置文件详解"><a href="#Alertmanager-配置文件详解" class="headerlink" title="Alertmanager 配置文件详解"></a>Alertmanager 配置文件详解</h1><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/alertmanager/alertmanager.yml<span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">resolve_timeout</span><span class="token punctuation">:</span> 5m    <span class="token comment" spellcheck="true"># 恢复的超时时间,这个跟告警恢复通知有关,此参数并不是说在这个时间没有收到告警就会恢复</span><span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 默认以告警名进行分组,就是rule文件的alert值进行分组</span>  <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token comment" spellcheck="true"># 发送警报前，至少等待多少秒才会发送(为了收集同组更多的警报信息一起发送)</span>  <span class="token key atrule">group_interval</span><span class="token punctuation">:</span> 10s    <span class="token comment" spellcheck="true"># 如果警报1已经发送,这时又出现同组的警报2,由于组状态发生变化,警报会在group_interval这个时间内发送,不会被repeat_interval这个时间收敛</span>  <span class="token key atrule">repeat_interval</span><span class="token punctuation">:</span> 20m    <span class="token comment" spellcheck="true"># 报警信息已发送，但事件并没有恢复,则等待多久时间再重新发送(生产环境一般设成20min或者30min)</span>  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'web.hook'</span>    <span class="token comment" spellcheck="true"># 发送警报的接收者名称,如果一个报警没有被一个route匹配,则发送给默认的接收器</span><span class="token key atrule">receivers</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 发送告警信息给那个接收者</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'web.hook'</span>    <span class="token comment" spellcheck="true"># 这个需要和上面定义的接收者名称一致</span>  <span class="token key atrule">webhook_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:5001/'</span><span class="token key atrule">inhibit_rules</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 抑制规则,防止告警风暴</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'critical'</span>    <span class="token key atrule">target_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'warning'</span>    <span class="token key atrule">equal</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">,</span> <span class="token string">'instance'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="检查-Alertmanager-配置文件"><a href="#检查-Alertmanager-配置文件" class="headerlink" title="检查 Alertmanager 配置文件"></a>检查 Alertmanager 配置文件</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 提示SUCCESS,则配置文件没有问题</span>./amtool check-config alertmanager.yml<span class="token comment" spellcheck="true"># 修改配置文件之后重启alertmanager</span>systemctl restart alertmanager.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置邮件告警"><a href="#配置邮件告警" class="headerlink" title="配置邮件告警"></a>配置邮件告警</h1><p>修改 alertmanager 配置文件，填写邮箱的验证信息，定义路由的收件人，配置发送告警邮件到那个邮箱</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat /usr/local/alertmanager/alertmanager.yml <span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">resolve_timeout</span><span class="token punctuation">:</span> 3m  <span class="token key atrule">smtp_smarthost</span><span class="token punctuation">:</span> <span class="token string">'smtp.qq.com:465'</span>  <span class="token key atrule">smtp_from</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_username</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_password</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true"># 授权码</span>  <span class="token key atrule">smtp_require_tls</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">]</span>  <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">group_interval</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">repeat_interval</span><span class="token punctuation">:</span> 20m  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mail'</span><span class="token key atrule">receivers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'devops.mail'</span>  <span class="token key atrule">email_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> <span class="token string">'mf_2013@163.com'</span>    <span class="token key atrule">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">Subject</span><span class="token punctuation">:</span> <span class="token string">"[WARN] Prometheus 报警邮件"</span> <span class="token punctuation">}</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true"># 发送告警恢复通知</span><span class="token comment" spellcheck="true">#inhibit_rules:</span><span class="token comment" spellcheck="true">#  - source_match:</span><span class="token comment" spellcheck="true">#      severity: 'critical'</span><span class="token comment" spellcheck="true">#    target_match:</span><span class="token comment" spellcheck="true">#      severity: 'warning'</span><span class="token comment" spellcheck="true">#    equal: ['alertname', 'dev', 'instance']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 prometheus 与 alertmanager 通信，设置规则文件的路径和正则匹配</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 修改prometheus配置文件</span>vim /usr/local/prometheus/prometheus.yml<span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">9093    </span><span class="token comment" spellcheck="true"># 这里由于alertmanager是和prometheus部署在同一台机器上,所以写本机地址</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"rules/*.yml"</span>    <span class="token comment" spellcheck="true"># rules这个目录是在prometheus上的,指当前配置文件的同级目录,这个目录需要自己创建</span><span class="token comment" spellcheck="true"># 检查prometheus配置文件</span>./promtool check config prometheus.ymlsystemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写 rules 文件，根据 rules 文件中的表达式去告警，这个规则文件的路径是 prometheus 配置文件中定义的</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 监控节点的状态</span>cat /usr/local/prometheus/rules/node.yml <span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> node_alert  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> Node_InstanceDown            <span class="token key atrule">expr</span><span class="token punctuation">:</span> up == 0    <span class="token comment" spellcheck="true"># 表达式</span>    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 prometheus 的 web 控制台查看配置的规则</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f20e09814195aa594f3290e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>关闭 node_exporter.service 节点，查看告警邮件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f20e13414195aa594f3b901.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="配置微信告警"><a href="#配置微信告警" class="headerlink" title="配置微信告警"></a>配置微信告警</h1><p>修改 alertmanager 配置文件，定义路由规则</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat /usr/local/alertmanager/alertmanager.yml <span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">resolve_timeout</span><span class="token punctuation">:</span> 3m  <span class="token key atrule">smtp_smarthost</span><span class="token punctuation">:</span> <span class="token string">'smtp.qq.com:465'</span>  <span class="token key atrule">smtp_from</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_username</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_password</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true"># 授权码</span>  <span class="token key atrule">smtp_require_tls</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">templates</span><span class="token punctuation">:</span><span class="token punctuation">-</span> /usr/local/alertmanager/template/wechat.temp<span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">]</span>  <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">group_interval</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">repeat_interval</span><span class="token punctuation">:</span> 20m  <span class="token comment" spellcheck="true">#receiver: 'devops.mail'</span>  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>  <span class="token key atrule">routes</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 为node_exporter、docker、mysqld_exporter定义匹配路由,每个路由有自己的分组在微信告警时信息就会单独发送</span>  <span class="token punctuation">-</span> <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token comment" spellcheck="true"># 每个服务可以定义自己的接收者,这样在发送时就可以发送给不同的人,不同的服务对应不同的处理人员</span>    <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'node_exporter'</span><span class="token punctuation">]</span>    <span class="token key atrule">match_re</span><span class="token punctuation">:</span>      <span class="token key atrule">job</span><span class="token punctuation">:</span> node_exporter  <span class="token punctuation">-</span> <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'docker'</span><span class="token punctuation">]</span>    <span class="token key atrule">match_re</span><span class="token punctuation">:</span>      <span class="token key atrule">job</span><span class="token punctuation">:</span> docker  <span class="token punctuation">-</span> <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'mysqld_exporter'</span><span class="token punctuation">]</span>    <span class="token key atrule">match_re</span><span class="token punctuation">:</span>      <span class="token key atrule">job</span><span class="token punctuation">:</span> mysqld_exporter<span class="token key atrule">receivers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token comment" spellcheck="true"># 将这个告警同时发送到邮件和微信</span>  <span class="token key atrule">email_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> <span class="token string">'mf_2013@163.com'</span>    <span class="token key atrule">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">Subject</span><span class="token punctuation">:</span> <span class="token string">"[WARN] Prometheus 报警邮件"</span> <span class="token punctuation">}</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">wechat_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">api_secret</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">agent_id</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">corp_id</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">to_party</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment" spellcheck="true">#inhibit_rules:</span><span class="token comment" spellcheck="true">#  - source_match:</span><span class="token comment" spellcheck="true">#      severity: 'critical'</span><span class="token comment" spellcheck="true">#    target_match:</span><span class="token comment" spellcheck="true">#      severity: 'warning'</span><span class="token comment" spellcheck="true">#    equal: ['alertname', 'dev', 'instance']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写 rules 文件，为了每个服务单独报警，这里将 node_exporter、docker、mysqld_exporter 分开去写匹配规则</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat /usr/local/prometheus/rules/node.yml <span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> node_exporter  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_exporter_Down    <span class="token key atrule">expr</span><span class="token punctuation">:</span> up<span class="token punctuation">{</span>job="node_exporter"<span class="token punctuation">}</span> == 0    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqld_exporter  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> mysqld_exporter_Down    <span class="token key atrule">expr</span><span class="token punctuation">:</span> up<span class="token punctuation">{</span>job="mysqld_exporter"<span class="token punctuation">}</span> == 0    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> docker  <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> docker_Down    <span class="token key atrule">expr</span><span class="token punctuation">:</span> up<span class="token punctuation">{</span>job="docker"<span class="token punctuation">}</span> == 0    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成之后重启 alertmanager</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart alertmanager.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭 node_exporter 和 docker_cadvisor 服务，这时候会每个服务单独发送告警信息，由于将全部服务 group_by 在一个组里面，在发送恢复信息时会出现服务混乱的情况，所以我将每个服务做了路由，每一个服务都有自己的 group_by，这样在发送信息时才会单独去发送</p><p><img src="https://pic.imgdb.cn/item/5f2140bc14195aa5945ae70c.jpg" alt=""></p><h1 id="配置钉钉告警"><a href="#配置钉钉告警" class="headerlink" title="配置钉钉告警"></a>配置钉钉告警</h1><p>先去创建一个钉钉机器人，具体过程这里就不详细说明了</p><p>prometheus 配置钉钉告警需要使用到 prometheus-webhook-dingtalk 插件，我们先使用二进制安装钉钉插件，dingtalk 服务默认启动的端口是 8060</p><p><a href="https://github.com/timonwong/prometheus-webhook-dingtalk" target="_blank" rel="noopener">prometheus-webhook-dingtalk插件下载地址</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载prometheus-webhook-dingtalk</span><span class="token function">wget</span> https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v1.4.0/prometheus-webhook-dingtalk-1.4.0.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压prometheus-webhook-dingtalk</span><span class="token function">tar</span> xf prometheus-webhook-dingtalk-1.4.0.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> prometheus-webhook-dingtalk-1.4.0.linux-amd64 /usr/local/dingtalk<span class="token comment" spellcheck="true"># 编写dingtalk启动文件</span>vim /usr/lib/systemd/system/dingtalk.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>prometheus-webhook-dingtalkAfter<span class="token operator">=</span>network-online.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/dingtalk/prometheus-webhook-dingtalk \--ding.profile<span class="token operator">=</span>Prometheus告警<span class="token operator">=</span>https://oapi.dingtalk.com/robot/send?access_token<span class="token operator">=</span>xxxxxx<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 启动dingtalk.service</span>systemctl daemon-reloadsystemctl restart dingtalk.service<span class="token comment" spellcheck="true"># 查看dingtalk的webhook地址</span>journalctl -fu dingtalk.serviceJul 29 18:38:01 iZuf6fpaicz5jt7kep555qZ prometheus-webhook-dingtalk<span class="token punctuation">[</span>5504<span class="token punctuation">]</span>: ts<span class="token operator">=</span>2020-07-29T10:38:01.655Z caller<span class="token operator">=</span>main.go:133 component<span class="token operator">=</span>configuration msg<span class="token operator">=</span><span class="token string">"Webhook urls for prometheus alertmanager"</span> urls<span class="token operator">=</span>http://localhost:8060/dingtalk/Prometheus告警/send<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 prometheus 的 alertmanager 配置，更改告警的路由和接收者</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops_dingtalk'</span>    <span class="token comment" spellcheck="true"># 接收者必须和下面的一致</span><span class="token key atrule">receivers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'devops_dingtalk'</span>  <span class="token key atrule">webhook_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://localhost:8060/dingtalk/Prometheus告警/send'</span>    <span class="token comment" spellcheck="true"># 这个URL是dingtalk的webhook地址</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭 docker 收集器查看告警效果</p><p><img src="https://pic.imgdb.cn/item/5f22831a14195aa594112818.jpg" alt=""></p><h1 id="告警状态"><a href="#告警状态" class="headerlink" title="告警状态"></a>告警状态</h1><p>prometheus 的告警状态有三种，我们可以在 prometheus 的控制台页面上查看告警的状态</p><p>inactive</p><blockquote><p>没有触发任何阈值，这个是根据 scrape_interval 参数(采集数据周期)和 evaluation_interval 参数(对比规则周期)去决定的</p></blockquote><p>pending</p><blockquote><p>已触发阈值但未满足告警持续时间，告警进入 pending 状态之后，需要等待规则配置的 for 时间，如果在这个时间内触发阈值的表达式一直成立，才会进入 firing 状 态</p></blockquote><p>firing</p><blockquote><p>已触发阈值且满足告警持续时间，将告警从 prometheus 发送给 alertmanager，在 alertmanager 收到告警之后并不会立刻发送，还需要等待一个 group_wait 时间，直到某个计算周期表达式为假，告警状态变更为 inactive，发送一个 resolve 给 altermanger，说明此告警已解决</p></blockquote><h1 id="告警收敛"><a href="#告警收敛" class="headerlink" title="告警收敛"></a>告警收敛</h1><p>alertmanager 在收到 prometheus 发送的告警之后，并不是把收到的信息简单的直接发送出去，而是通过一系列的收敛机制(分组、抑制、静默)去筛选出需要发送的信息，如果 alertmanager 收到信息就直接发送出去，会导致告警信息过多，运维人员会被告警信息淹没，错过重要的告警信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f23803214195aa5946d5b86.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>分组</p><blockquote><p>将类似性质的告警分类为单个通知，减少告警消息数量</p></blockquote><blockquote><p>将类似性质的告警进行聚合发送，帮助运维更好的排查问题</p></blockquote><p>抑制</p><blockquote><p>当告警发出后，停止重复发送由此告警而引起的其他告警，帮助运维第一时间掌握最核心的告警信息</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">inhibit_rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'critical'</span>    <span class="token comment" spellcheck="true"># 当发生critical级别的告警时,就会抑制下面warning级别的告警</span>    <span class="token key atrule">target_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'warning'</span>    <span class="token key atrule">equal</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">,</span> <span class="token string">'instance'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 已发送的告警与新产生的告警中equal定义的标签完全相同,则启动抑制机制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静默</p><blockquote><p>是一种简单的特定时间静音的提醒机制，在发布新版本时我们需要停掉某些进程，这时候告警肯定会触发的，由于这是我们已经预知的现象，我们可以打开 prometheus 主机的 9093 端口暂时将告警设置成静音</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f23c66b14195aa5948a1e2d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Prometheus一条告警是怎么触发的"><a href="#Prometheus一条告警是怎么触发的" class="headerlink" title="Prometheus一条告警是怎么触发的"></a>Prometheus一条告警是怎么触发的</h1><p>1.采集数据 scrape_interval: 15s</p><p>2.比对采集到的数据是否触发阈值 evaluation_interval: 15s</p><p>3.判断是否超出持续时间(在这个时间内一直处于触发阈值状态)for: 5s</p><p>4.告警到达alertmanager然后进行分组、抑制、静默</p><p>5.通过分组、抑制、静默一系列机制的信息将会被发送，但是会延迟发送group_wait: 10s</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f23ceb714195aa5948dbd05.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="编写告警规则案例"><a href="#编写告警规则案例" class="headerlink" title="编写告警规则案例"></a>编写告警规则案例</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> general.rules  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_FileSystemUsage    <span class="token comment" spellcheck="true"># 监控磁盘使用率</span>    <span class="token key atrule">expr</span><span class="token punctuation">:</span> 100 <span class="token punctuation">-</span> node_filesystem_free_bytes<span class="token punctuation">{</span>mountpoint="/"<span class="token punctuation">,</span>fstype=~"ext4<span class="token punctuation">|</span>xfs"<span class="token punctuation">}</span> / node_filesystem_size_bytes<span class="token punctuation">{</span>mountpoint="/"<span class="token punctuation">,</span>fstype=~"ext4<span class="token punctuation">|</span>xfs"<span class="token punctuation">}</span> * 100 <span class="token punctuation">></span> 80    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> warning    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} : {{ $labels.mountpoint }} Partition utilization is too high"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} : {{ $labels.mountpoint }} Partition utilization is greater than 80% (Currently: {{ $value }})"</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_MemoryUsage    <span class="token comment" spellcheck="true"># 监控内存使用率</span>    <span class="token key atrule">expr</span><span class="token punctuation">:</span> 100 <span class="token punctuation">-</span> (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) / node_memory_MemTotal_bytes * 100 <span class="token punctuation">></span> 80    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> warning    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} High memory usage"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }}  Memory usage greater than 80% (Currently: {{ $value }})"</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_cpuUsage    <span class="token comment" spellcheck="true"># 监控CPU使用率</span>    <span class="token key atrule">expr</span><span class="token punctuation">:</span> 100 <span class="token punctuation">-</span> irate(node_cpu_seconds_total<span class="token punctuation">{</span>mode="idle"<span class="token punctuation">,</span>job="node_exporter"<span class="token punctuation">,</span>instance="47.100.107.121<span class="token punctuation">:</span>9100"<span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span>) * 100 <span class="token punctuation">></span> 80    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> warning    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} High cpu usage"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} Memory usage greater than 60% (Currently: {{ $value }})"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Alertmanager-概述&quot;&gt;&lt;a href=&quot;#Alertmanager-概述&quot; class=&quot;headerlink&quot; title=&quot;Alertmanager 概述&quot;&gt;&lt;/a&gt;Alertmanager 概述&lt;/h1&gt;&lt;p&gt;prometheus 发出告警时分为
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus 监控案例</title>
    <link href="https://www.missf.top/post/ba827699.html"/>
    <id>https://www.missf.top/post/ba827699.html</id>
    <published>2020-07-16T07:43:16.000Z</published>
    <updated>2020-09-28T04:03:32.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监控-Linux-服务器"><a href="#监控-Linux-服务器" class="headerlink" title="监控 Linux 服务器"></a>监控 Linux 服务器</h1><p>部署 node_exporter</p><p>prometheus 官方提供 Node_exporter 来让我们收集机器的系统数据，除 node_exporter 外，官方还提供 consul、memcached、haproxy、mysqld 等 exporter。exporter类似于 zabbix 写好的监控模板，但是这些 exporter 都是需要在被监控节点安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载node_exporter</span><span class="token function">wget</span> https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf node_exporter-1.0.1.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> node_exporter-1.0.1.linux-amd64 /usr/local/node_exporter<span class="token comment" spellcheck="true"># 编写启动文件</span>vim /usr/lib/systemd/system/node_exporter.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>prometheus<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/node_exporter/node_exporter<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 启动node_exporter</span>systemctl daemon-reloadsystemctl start node_exporter.service<span class="token comment" spellcheck="true"># 访问node_exporter的数据接口</span>http://10.10.110.23:9100/metrics    <span class="token comment" spellcheck="true"># 默认端口是9100,默认接口是metrics</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置监控</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改prometheus配置文件</span>vim /usr/local/prometheus/prometheus.yml  - job_name: <span class="token string">'node_exporter'</span>    file_sd_configs:      - files: <span class="token punctuation">[</span><span class="token string">'/usr/local/prometheus/sd_config/node/*.yaml'</span><span class="token punctuation">]</span>        refresh_interval: 5s<span class="token comment" spellcheck="true"># 创建服务发现的文件</span>vim /usr/local/prometheus/sd_config/node/*.yaml- targets:  - <span class="token string">'10.10.110.23:9100'</span>        <span class="token comment" spellcheck="true"># 这个地址是被监控节点的IP地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="promSQL监控CPU、内存、硬盘"><a href="#promSQL监控CPU、内存、硬盘" class="headerlink" title="promSQL监控CPU、内存、硬盘"></a>promSQL监控CPU、内存、硬盘</h1><p>CPU监控</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 计算CPU五分钟内平均的使用率表达式</span>100 - irate<span class="token punctuation">(</span>node_cpu_seconds_total<span class="token punctuation">{</span>mode<span class="token operator">=</span><span class="token string">"idle"</span>,instance<span class="token operator">=</span><span class="token string">"10.10.110.23:9100"</span>,job<span class="token operator">=</span><span class="token string">"node_exporter"</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">)</span> * 100<span class="token comment" spellcheck="true"># node_cpu_seconds_total{mode="idle",instance="10.10.110.23:9100",job="node_exporter"}[5m]:取CPU五分钟之内的空闲值</span><span class="token comment" spellcheck="true"># irate函数:将会用于计算某个指标在一定时间间隔内的变化速率</span><span class="token comment" spellcheck="true"># 将得到的空闲值乘以100再得到CPU百分比的空闲值,再以100减去CPU百分比的空闲值,就得到CPU五分钟内平均的使用率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内存监控</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 计算内存使用率表达式</span>100 - <span class="token punctuation">(</span>node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes<span class="token punctuation">)</span> / node_memory_MemTotal_bytes * 100<span class="token comment" spellcheck="true"># (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)是内存剩余的总量</span>    在系统层面来考虑:buff和cache是已经被使用的内存    在程序层面来考虑:buff和cache是剩余的内存<span class="token comment" spellcheck="true"># 内存剩余的总量除以内存总量得到内存剩余率,再以100减去内存剩余率得到内存使用率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>硬盘监控</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 计算硬盘使用率表达式</span>100 - node_filesystem_free_bytes<span class="token punctuation">{</span>mountpoint<span class="token operator">=</span><span class="token string">"/"</span>,fstype<span class="token operator">=</span>~<span class="token string">"ext4|xfs"</span><span class="token punctuation">}</span> / node_filesystem_size_bytes<span class="token punctuation">{</span>mountpoint<span class="token operator">=</span><span class="token string">"/"</span>,fstype<span class="token operator">=</span>~<span class="token string">"ext4|xfs"</span><span class="token punctuation">}</span> * 100<span class="token comment" spellcheck="true"># node_filesystem_free_bytes{mountpoint="/",fstype=~"ext4|xfs"}是根分区硬盘剩余容量,只计算ext4|xfs类型的文件系统</span><span class="token comment" spellcheck="true"># node_filesystem_size_bytes{mountpoint="/",fstype=~"ext4|xfs"}是根分区的硬盘总量</span><span class="token comment" spellcheck="true"># 根分区硬盘剩余容量除以根分区的硬盘总量得到根分区硬盘的剩余率,再以100减去硬盘的剩余率得到硬盘使用率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="监控系统服务状态"><a href="#监控系统服务状态" class="headerlink" title="监控系统服务状态"></a>监控系统服务状态</h1><p>修改 node_exporter 的启动参数</p><pre class="line-numbers language-bash"><code class="language-bash">vim /usr/lib/systemd/system/node_exporter.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>prometheus<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/node_exporter/node_exporter --collector.systemd --collector.systemd.unit-whitelist<span class="token operator">=</span><span class="token punctuation">(</span>docker<span class="token operator">|</span>sshd<span class="token punctuation">)</span>.service<span class="token comment" spellcheck="true"># 利用正则匹配监控systemd的docker|sshd这三个服务</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启 node_exporter</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl daemon-reloadsystemctl restart node_exporter.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看监控服务的数据指标</p><pre class="line-numbers language-bash"><code class="language-bash">node_systemd_unit_state<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">"docker.service"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 activating、active、deactivating、failed、inactive 五个状态中 value 为 1 的状态，就是服务当前的状态</p><p><img src="https://pic.imgdb.cn/item/5f1fa26414195aa5947438c7.jpg" alt=""></p><h1 id="使用-Grafana-图表展示监控数据"><a href="#使用-Grafana-图表展示监控数据" class="headerlink" title="使用 Grafana 图表展示监控数据"></a>使用 Grafana 图表展示监控数据</h1><p>安装 Grafana</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载软件包</span><span class="token function">wget</span> https://dl.grafana.com/oss/release/grafana-7.1.0-1.x86_64.rpm<span class="token comment" spellcheck="true"># 安装</span>yum <span class="token function">install</span> grafana-7.1.0-1.x86_64.rpm -y<span class="token comment" spellcheck="true"># 启动</span>systemctl <span class="token function">enable</span> grafana-server.servicesystemctl start grafana-server.service<span class="token comment" spellcheck="true"># Grafana默认端口为3000,账号密码都为admin,初次登录会提示需要修改密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Grafana 配置数据源</p><p>填写 prometheus 主机的地址，在配置数据源时我们还可以配置验证、定义 HTTP 头部、以及其他的一些信息</p><p><img src="https://pic.imgdb.cn/item/5f14fccb14195aa59415fa14.jpg" alt=""></p><h2 id="Grafana-导入仪表盘"><a href="#Grafana-导入仪表盘" class="headerlink" title="Grafana 导入仪表盘"></a>Grafana 导入仪表盘</h2><p>我们可以自己编写仪表盘，也可以使用官方网站上别人已经写好的仪表盘模板直接导入使用，这里我们没有必要自己去编写(重复造轮子而且还没有人家专业…)。我们先去<a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">Grafana Labs</a>上找到监控 Linux 主机的仪表盘，然后将仪表盘的 ID 号导入到 Grafana</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f1515d514195aa5941cc06f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="查看仪表盘"><a href="#查看仪表盘" class="headerlink" title="查看仪表盘"></a>查看仪表盘</h2><p>Grafana 监控 Linux 主机的仪表盘数据是从 prometheus 的数据源获取的，就是被监控主机上的 node_exporter 获取到的数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f1518a914195aa5941d6c7f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="监控-Docker-服务器"><a href="#监控-Docker-服务器" class="headerlink" title="监控 Docker 服务器"></a>监控 Docker 服务器</h1><p>部署 cadvisor</p><p>想要监控 Docker 容器，需要在被监控主机安装 cadvisor 插件，暴露一个 HTTP 端口，为 prometheus 提供容器的监控数据</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 由于国内无法连接到gcr.io,这里使用张馆长仓库的镜像地址</span>docker run \--volume<span class="token operator">=</span>/:/rootfs:ro \--volume<span class="token operator">=</span>/var/run:/var/run:ro \--volume<span class="token operator">=</span>/sys:/sys:ro \--volume<span class="token operator">=</span>/var/lib/docker/:/var/lib/docker:ro \--volume<span class="token operator">=</span>/dev/disk/:/dev/disk:ro \--publish<span class="token operator">=</span>8080:8080 \--detach<span class="token operator">=</span>true \--name<span class="token operator">=</span>cadvisor \--privileged \--device<span class="token operator">=</span>/dev/kmsg \registry.aliyuncs.com/k8sxio/cadvisor:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 Prometheus 监控 cadvisor</p><p>cadvisor 可以搜集一台机器上所有运行的容器信息，还提供基础查询界面和 http 接口，供其他组件如 prometheus 拉取数据</p><pre class="line-numbers language-bash"><code class="language-bash">vim /usr/local/prometheus/prometheus.yml    <span class="token comment" spellcheck="true"># 在prometheus配置文件加入监控主机的cadvisor端口(拉取容器数据)</span>  - job_name: <span class="token string">'docker'</span>    static_configs:    - targets: <span class="token punctuation">[</span><span class="token string">'10.10.110.23:8080'</span><span class="token punctuation">]</span>systemctl daemon-reloadsystemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Grafana 导入仪表盘</p><p>我们去 <a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">Grafana Labs</a> 网站寻找一个监控 Docker 主机的仪表盘，在 Grafana 进行导入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f23b7c914195aa5948360c4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>查看Docker主机仪表盘</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f17260614195aa59400404d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="监控-MySQL-服务器"><a href="#监控-MySQL-服务器" class="headerlink" title="监控 MySQL 服务器"></a>监控 MySQL 服务器</h1><p>监控 MySQL 主机和监控 Linux 主机一样，都是需要导出器去获取数据，这里我们去 prometheus 官网下载 mysqld_exporter，然后在 mysql 主机上安装(监控那台 mysql 主机就在那台主机安装mysqld_exporter)</p><p>MySQL 主机安装 mysqld_exporter</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载</span><span class="token function">wget</span> https://github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf mysqld_exporter-0.12.1.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> mysqld_exporter-0.12.1.linux-amd64 /usr/local/mysqld_exporter<span class="token comment" spellcheck="true"># 创建启动文件</span>vim /usr/lib/systemd/system/mysqld_exporter.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Documentation<span class="token operator">=</span>https://prometheus.io/<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureEnvironment<span class="token operator">=</span>DATA_SOURCE_NAME<span class="token operator">=</span>exporter:Missf.top123@<span class="token punctuation">(</span>localhost:3306<span class="token punctuation">)</span>/    <span class="token comment" spellcheck="true"># 连接数据库的账号密码,也可以指定.my.cnf文件</span>ExecStart<span class="token operator">=</span>/usr/local/mysqld_exporter/mysqld_exporter<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 被监控数据库添加mysql用户及监控权限</span>CREATE USER <span class="token string">'exporter'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'Missf.top123'</span> WITH MAX_USER_CONNECTIONS 3<span class="token punctuation">;</span>GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO <span class="token string">'exporter'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 启动mysqld_exporter</span>systemctl start mysqld_exporter<span class="token comment" spellcheck="true"># 获取监控数据</span>curl <span class="token punctuation">[</span>IP<span class="token punctuation">]</span>:9104/metrics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置Prometheus监控mysqld_exporter</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改配置文件</span>vim /usr/local/prometheus/prometheus.yml  - job_name: <span class="token string">'mysqld_exporter'</span>        <span class="token comment" spellcheck="true"># 添加监控mysqld_exporter</span>    static_configs:    - targets: <span class="token punctuation">[</span><span class="token string">'47.100.107.121:9104'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重启</span>systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入 MySQL 仪表盘</p><p>导入 ID 为 7362 的 MySQL 仪表盘，查看 MySQL 的监控数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f18f80f14195aa594e798e0.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;监控-Linux-服务器&quot;&gt;&lt;a href=&quot;#监控-Linux-服务器&quot; class=&quot;headerlink&quot; title=&quot;监控 Linux 服务器&quot;&gt;&lt;/a&gt;监控 Linux 服务器&lt;/h1&gt;&lt;p&gt;部署 node_exporter&lt;/p&gt;
&lt;p&gt;promet
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus 配置文件与核心功能</title>
    <link href="https://www.missf.top/post/521f1005.html"/>
    <id>https://www.missf.top/post/521f1005.html</id>
    <published>2020-07-15T11:06:15.000Z</published>
    <updated>2020-09-28T04:04:16.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局配置文件介绍"><a href="#全局配置文件介绍" class="headerlink" title="全局配置文件介绍"></a>全局配置文件介绍</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 全局默认的数据拉取间隔,默认每隔1m拉取一次监控数据</span>  <span class="token punctuation">[</span> <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = 1m <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 全局默认的单次数据拉取超时</span>  <span class="token punctuation">[</span> <span class="token key atrule">scrape_timeout</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = 10s <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 对告警规则做定期计算的间隔时间,每隔1m对比一次我采集到的数据跟我设置的告警规则,符合告警规则的事件就会被发送到alertmanager,由alertmanager做路由匹配然后进行告警处理</span>  <span class="token punctuation">[</span> <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = 1m <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 监控告警的规则设置</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;filepath_glob<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 配置被监控指标</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;scrape_config<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 指定告警和告警管理器相关的设置</span><span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alert_relabel_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;relabel_config<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>    <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;alertmanager_config<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="scrape-configs"><a href="#scrape-configs" class="headerlink" title="scrape_configs"></a>scrape_configs</h1><p>配置数据源，拉取数据的对象称为 Targets，每个 Targets 用 job_name 命名，添加数据源又分为静态配置和服务发现</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 定义job名称,是一个拉取单元,每个job_name都会自动引入默认配置如:</span>    <span class="token comment" spellcheck="true"># scrape_interval 依赖全局配置</span>    <span class="token comment" spellcheck="true"># scrape_timeout 依赖全局配置</span>    <span class="token comment" spellcheck="true"># metrics_path 默认为'/metrics'</span>    <span class="token comment" spellcheck="true"># scheme 默认为'http'</span><span class="token key atrule">job_name</span><span class="token punctuation">:</span> &lt;job_name<span class="token punctuation">></span><span class="token comment" spellcheck="true"># 数据拉取间隔</span><span class="token punctuation">[</span> <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = &lt;global_config.scrape_interval<span class="token punctuation">></span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 数据拉取超时时间</span><span class="token punctuation">[</span> <span class="token key atrule">scrape_timeout</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = &lt;global_config.scrape_timeout<span class="token punctuation">></span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 拉取数据指标的地址</span><span class="token punctuation">[</span> <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> &lt;path<span class="token punctuation">></span> <span class="token punctuation">|</span> default = /metrics <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基于文件的服务发现"><a href="#基于文件的服务发现" class="headerlink" title="基于文件的服务发现"></a>基于文件的服务发现</h1><p>基于文件的服务发现不需要依赖其他平台与第三方服务，用户只需将要更新的 target 信息以 yaml 或 json 文件格式添加到 target 文件中，prometheus 会定期的从指定文件中读取 target 信息并更新。给我们带来的好处就是不需要一个个 target 去添加，只需要一个 yaml 或者 json 文件，便于管理</p><p>编写配置文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim prometheus.yml<span class="token comment" spellcheck="true"># my global config 全局配置文件</span><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span>     5s <span class="token comment" spellcheck="true"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s <span class="token comment" spellcheck="true"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>  <span class="token comment" spellcheck="true"># scrape_timeout is set to the global default (10s).</span><span class="token comment" spellcheck="true"># Alertmanager configuration 告警管理</span><span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># - alertmanager:9093</span><span class="token comment" spellcheck="true"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># - "first_rules.yml"</span>  <span class="token comment" spellcheck="true"># - "second_rules.yml"</span><span class="token comment" spellcheck="true"># A scrape configuration containing exactly one endpoint to scrape:</span><span class="token comment" spellcheck="true"># Here it's Prometheus itself.</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'prometheus'</span>    <span class="token comment" spellcheck="true"># metrics_path defaults to '/metrics'</span>    <span class="token comment" spellcheck="true"># scheme defaults to 'http'.</span><span class="token comment" spellcheck="true">#    scrape_interval: 5s</span><span class="token comment" spellcheck="true">#    static_configs:</span><span class="token comment" spellcheck="true">#    - targets: ['localhost:9090']</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 文件服务发现</span>      <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'/usr/local/prometheus/sd_config/*.yaml'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 指定服务发现的文件路径</span>        <span class="token key atrule">refresh_interval</span><span class="token punctuation">:</span> 5s    <span class="token comment" spellcheck="true"># 每过5秒动态发现服务配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建目录及文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/sd_config/test.yaml    <span class="token comment" spellcheck="true"># 需要监控那一台主机就在那一台主机上创建</span><span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">'10.10.110.150:9090'</span>    <span class="token comment" spellcheck="true"># 这个是填写prometheus主机的地址,如果prometheus启动时监听的是8080端口,那么这里就需要和prometheus端口一致,不然获取不到数据</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">group</span><span class="token punctuation">:</span> prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重载配置文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> prometheusroot       1774      1  0 Jul15 ?        00:02:21 /usr/local/prometheus/prometheus --config.file<span class="token operator">=</span>/usr/local/prometheus/prometheus.ymlroot       2741   1702  0 14:13 pts/1    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto prometheus<span class="token function">kill</span> -hup 1774<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;全局配置文件介绍&quot;&gt;&lt;a href=&quot;#全局配置文件介绍&quot; class=&quot;headerlink&quot; title=&quot;全局配置文件介绍&quot;&gt;&lt;/a&gt;全局配置文件介绍&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-yaml&quot;&gt;&lt;code cla
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
</feed>
