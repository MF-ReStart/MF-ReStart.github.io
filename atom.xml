<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒原饮露</title>
  
  <subtitle>青春不是隔岸观火啊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.missf.top/"/>
  <updated>2020-06-22T06:27:37.223Z</updated>
  <id>https://www.missf.top/</id>
  
  <author>
    <name>荒原饮露</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ansible的jinja2模板(16)</title>
    <link href="https://www.missf.top/post/62ac8f71.html"/>
    <id>https://www.missf.top/post/62ac8f71.html</id>
    <published>2020-06-22T01:52:52.000Z</published>
    <updated>2020-06-22T06:27:37.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ansible的jinja2模板"><a href="#ansible的jinja2模板" class="headerlink" title="ansible的jinja2模板"></a>ansible的jinja2模板</h1><p>我们在多个管理节点部署服务时，很多服务的配置文件都是需要监听服务所在主机的IP地址，这时候就需要使用到ansible的jinja2模板去分发动态的配置文件。我们先创建一份模板文件，将IP配置部分使用ansible变量进行替换，然后使用template模块对模版文件进行渲染，将根据我们定义的变量而生成不同的配置文件发送到对应的管理节点。</p><p>下面我们以安装redis为示例，为不同的管理节点分发动态配置文件</p><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/redis/conf/redis.confbind {{ ansible_host }}     # 将默认的127.0.0.1改为管理节点本机的IP，这样就能生成各自的管理节点的配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>准备模板配置文件之后，下面就来编写一个playbook，完成模板配置文件的渲染和分发</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">template</span><span class="token punctuation">:</span>      <span class="token key atrule">src</span><span class="token punctuation">:</span> /root/playbook/redis.conf    <span class="token comment" spellcheck="true"># 控制节点上的模板文件,定义好变量,通过template模块进行渲染</span>      <span class="token key atrule">dest</span><span class="token punctuation">:</span> /etc/redis.conf        <span class="token comment" spellcheck="true"># 管理节点上这个文件将被控制节点上的模板文件所替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ansible的jinja2模板&quot;&gt;&lt;a href=&quot;#ansible的jinja2模板&quot; class=&quot;headerlink&quot; title=&quot;ansible的jinja2模板&quot;&gt;&lt;/a&gt;ansible的jinja2模板&lt;/h1&gt;&lt;p&gt;我们在多个管理节点部署服务时
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的include(15)</title>
    <link href="https://www.missf.top/post/fa9ef74f.html"/>
    <id>https://www.missf.top/post/fa9ef74f.html</id>
    <published>2020-06-20T07:23:27.000Z</published>
    <updated>2020-06-22T05:39:49.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ansible的include"><a href="#ansible的include" class="headerlink" title="ansible的include"></a>ansible的include</h1><p>在所有的编程语言中，在处理重复代码的时候，都会将重复的代码提取出来作为一个逻辑单元，这个逻辑单元通常被称为函数或者方法，这样可以让我们更加方便的、重复的调用这段代码。而且如果需要修改这段代码，只需要修改这段代码本身，那么在调用这段代码的地方的逻辑就会随之改变。同时，使用函数的方式编写代码，能让我们的逻辑更清晰，通过函数的名称，大概能推算出程序的主体作用和逻辑。</p><p>在ansible中，其实也有类似的功能，这种功能被称之为include。通过include，我们可以在playbook中包含另一个文件，以便实现我们刚才所说的函数效果。</p><p>在配置环境的时候，我们经常会有一些需要重复使用的playbook，就像下面的LAMP环境和LNMP环境</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat lamp.yaml <span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install lamp      <span class="token key atrule">yum</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> mysql          <span class="token punctuation">-</span> php<span class="token punctuation">-</span>fpm          <span class="token punctuation">-</span> httpd        <span class="token key atrule">state</span><span class="token punctuation">:</span> presentcat lnmp.yaml <span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install lnmp      <span class="token key atrule">yum</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> mysql          <span class="token punctuation">-</span> php<span class="token punctuation">-</span>fpm          <span class="token punctuation">-</span> nginx        <span class="token key atrule">state</span><span class="token punctuation">:</span> present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以把上面的两个playbook改写层下面这样，便于我们直接调用</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat lamp.yaml<span class="token punctuation">-</span> <span class="token key atrule">yum</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql      <span class="token punctuation">-</span> php<span class="token punctuation">-</span>fpm      <span class="token punctuation">-</span> httpd    <span class="token key atrule">state</span><span class="token punctuation">:</span> presentcat lnmp.yaml <span class="token punctuation">-</span> <span class="token key atrule">yum</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql      <span class="token punctuation">-</span> php<span class="token punctuation">-</span>fpm      <span class="token punctuation">-</span> nginx    <span class="token key atrule">state</span><span class="token punctuation">:</span> present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们需要执行这两个playbook时，直接使用include调用，playbook中的任务就会在被调用处执行</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat lamp_lnmp.yaml<span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> webserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install lamp      <span class="token key atrule">include_tasks</span><span class="token punctuation">:</span> lamp.yaml    <span class="token comment" spellcheck="true"># 这里执行的是lamp.yaml的内容</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install lnmp      <span class="token key atrule">include_tasks</span><span class="token punctuation">:</span> lnmp.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="给include文件传参"><a href="#给include文件传参" class="headerlink" title="给include文件传参"></a>给include文件传参</h1><pre class="line-numbers language-yaml"><code class="language-yaml">cat baidu.yaml <span class="token punctuation">-</span> <span class="token key atrule">shell</span><span class="token punctuation">:</span> ping <span class="token punctuation">-</span>c 3 "<span class="token punctuation">{</span><span class="token punctuation">{</span> baidu <span class="token punctuation">}</span><span class="token punctuation">}</span>"    <span class="token comment" spellcheck="true"># 在include文件使用变量</span>cat include_baidu.yaml <span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">baidu</span><span class="token punctuation">:</span> <span class="token string">"www.baidu.com"</span>    <span class="token comment" spellcheck="true"># 定义include文件所需要的变量</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ping baidu      <span class="token key atrule">include_tasks</span><span class="token punctuation">:</span> baidu.yaml        <span class="token comment" spellcheck="true"># 调用执行include文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="import-playbook"><a href="#import-playbook" class="headerlink" title="import_playbook"></a>import_playbook</h1><p>我们使用include关键字可以调用任务列表，但如果想要调用整个playbook，则需要import_playbook模块代替include模块</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat import_test.yaml<span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"test task cat import_test.yaml"</span><span class="token punctuation">-</span> <span class="token key atrule">import_playbook</span><span class="token punctuation">:</span> intest7.yaml        <span class="token comment" spellcheck="true"># 调用intest7.yaml整个yaml</span>cat intest7.yaml<span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> webserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"test task cat intest7.yaml"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ansible的include&quot;&gt;&lt;a href=&quot;#ansible的include&quot; class=&quot;headerlink&quot; title=&quot;ansible的include&quot;&gt;&lt;/a&gt;ansible的include&lt;/h1&gt;&lt;p&gt;在所有的编程语言中，在处理重复代码的
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的lookups插件(14)</title>
    <link href="https://www.missf.top/post/de181bd8.html"/>
    <id>https://www.missf.top/post/de181bd8.html</id>
    <published>2020-06-19T07:19:51.000Z</published>
    <updated>2020-06-22T05:39:49.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ansible的lookups插件"><a href="#ansible的lookups插件" class="headerlink" title="ansible的lookups插件"></a>ansible的lookups插件</h1><p>过滤器其实是ansible中的一种插件，除了过滤器之外，ansible中还有很多其他种类的插件。而且我们一直都在使用这些插件，比如我们在配置ansible的主机清单时，就用到了Inventory种类的插件。lookups其实也是插件的一种，lookups的所有操作都是在控制节点上进行的，与管理节点无关。ansible官网为我们总结了各个插件的作用，并且按照这些插件功能进行了分类。<a href="https://docs.ansible.com/ansible/latest/plugins/plugins.html" target="_blank" rel="noopener">官网插件地址</a></p><h2 id="lookups-file"><a href="#lookups-file" class="headerlink" title="lookups file"></a>lookups file</h2><p>file插件可以读取文件，插件的源码是使用Python读取文件然后把结果返回给变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">contents</span><span class="token punctuation">:</span> <span class="token string">"{{ lookup('file','/etc/hostname') }}"</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug lookup file      <span class="token key atrule">debug</span><span class="token punctuation">:</span>        <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"the contents is {{ contents }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不想将所有文件的内容变成一整个字符串，而是获取一个字符串列表，可以使用wantlist参数</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">contents</span><span class="token punctuation">:</span> <span class="token string">"{{ lookup('file','/etc/hostname',wantlist=true) }}"</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug lookup file      <span class="token key atrule">debug</span><span class="token punctuation">:</span>        <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"the contents is {{ contents }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lookups-password"><a href="#lookups-password" class="headerlink" title="lookups password"></a>lookups password</h2><p>passwd插件会对传入的内容进行加密处理</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">contents</span><span class="token punctuation">:</span> <span class="token string">"{{ lookup('password','ansible') }}"</span>        <span class="token comment" spellcheck="true"># 将ansible这个字符串进行加密处理</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug lookups      <span class="token key atrule">debug</span><span class="token punctuation">:</span>        <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"the contents is {{ contents }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lookups-pipe"><a href="#lookups-pipe" class="headerlink" title="lookups pipe"></a>lookups pipe</h2><p>pipe插件运行命令并返回结果，pipe这个插件底层是使用Python的subprocess库实现的</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">contents</span><span class="token punctuation">:</span> <span class="token string">"{{ lookup('pipe','hostname') }}"</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug lookup pipe      <span class="token key atrule">debug</span><span class="token punctuation">:</span>        <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"the contents is {{ contents }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lookups-redis-kv"><a href="#lookups-redis-kv" class="headerlink" title="lookups redis_kv"></a>lookups redis_kv</h2><p>redis_kv插件是用来从本地redis中读取数据的</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">contents</span><span class="token punctuation">:</span> <span class="token string">"{{ lookup('redis_kv', 'redis://127.0.0.1:6379,ansible') }}"</span>     <span class="token comment" spellcheck="true"># 获取本地redis数据库ansible这个键的值</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug lookup redis_kv      <span class="token key atrule">debug</span><span class="token punctuation">:</span>        <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"the contents is {{ contents }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lookups-dict"><a href="#lookups-dict" class="headerlink" title="lookups dict"></a>lookups dict</h2><p>dict插件是用来获取变量的键值对</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">users</span><span class="token punctuation">:</span>      <span class="token key atrule">alice</span><span class="token punctuation">:</span> female      <span class="token key atrule">bob</span><span class="token punctuation">:</span> male  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ item.key }} = {{ item.value }}"</span>    <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">"{{ lookup('dict',users) }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lookups-env"><a href="#lookups-env" class="headerlink" title="lookups env"></a>lookups env</h2><p>env插件可以获取ansible主机中指定变量的值</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ lookup('env','PATH') }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lookups-first-found"><a href="#lookups-first-found" class="headerlink" title="lookups first_found"></a>lookups first_found</h2><p>first_found插件可以获取列表中第一个找到的文件，如果列表中的所有文件都没有找到，可以添加errors=ignore忽略报错</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> master  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug lookup first found    <span class="token key atrule">debug</span><span class="token punctuation">:</span>       <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ lookup('first_found',looklist,errors='ignore') }}"</span>    <span class="token key atrule">vars</span><span class="token punctuation">:</span>      <span class="token key atrule">looklist</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"/abc.txt"</span>        <span class="token punctuation">-</span> <span class="token string">"/tmp/str.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lookups-dig"><a href="#lookups-dig" class="headerlink" title="lookups dig"></a>lookups dig</h2><p>dig插件可以获取指定域名的IP地址，需要Python安装dnspython库</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> master  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ lookup('dig','www.baidu.com',wantlist=true) }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ansible的lookups插件&quot;&gt;&lt;a href=&quot;#ansible的lookups插件&quot; class=&quot;headerlink&quot; title=&quot;ansible的lookups插件&quot;&gt;&lt;/a&gt;ansible的lookups插件&lt;/h1&gt;&lt;p&gt;过滤器其实是ansi
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器数据持久化(4)</title>
    <link href="https://www.missf.top/post/a7b8d397.html"/>
    <id>https://www.missf.top/post/a7b8d397.html</id>
    <published>2020-06-19T02:14:10.000Z</published>
    <updated>2020-06-19T06:22:11.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器数据持久化的三种方式"><a href="#容器数据持久化的三种方式" class="headerlink" title="容器数据持久化的三种方式"></a>容器数据持久化的三种方式</h1><p>由于容器的镜像分层机制，我们在容器里面创建文件或者修改文件，结果都会保存在容器的可读写层中，一旦容器被销毁，那么这个读写层也会随着容器销毁而消失。而且当一个容器需要和其他容器的读写层进行数据交互时，也会显得非常困难。于是在将容器数据持久化到宿主机方面，docker为我们提供了三种持久化的方式。</p><h2 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h2><p>volumes由docker负责创建、管理。用户可以显式的调用命令docker volume create创建volume，也可以通过container、service的启动隐式创建。</p><p>docker创建的volumes本质上还是宿主机文件系统中的一个目录，一个volumes可以供多个容器使用，即使没有容器使用此volumes，它也不会自动删除，除非用户明确删除它</p><p>如果用户显式创建volumes则需要给它一个名称，如果是隐式创建volumes则docker会为它分配一个在宿主机范围内唯一的名字</p><p>通过使用第三方提供的volume driver，用户可以将数据持久到远程主机或者云存储中，也就是说存储空间可以不由宿主机提供。</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建volumesdocker volume create nginx_volumes# 查看volumesdocker volume ls# 查看卷详细信息docker volume inspect nginx_volumes [    {        "CreatedAt": "2020-06-19T18:47:49+08:00",        "Driver": "local",        "Labels": {},        "Mountpoint": "/var/lib/docker/volumes/nginx_volumes/_data",    # 这是volumes在宿主机上的真实路径        "Name": "nginx_volumes",        "Options": {},        "Scope": "local"    }]# 清理volumesdocker volume rm nginx_volumes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将nginx容器的html目录映射到宿主机的nginx_volumes目录</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建数据持久化的容器,如果卷不存在则自动创建docker container run -itd --name "nginx1" -p 80:80 -v nginx_volumes:/usr/share/nginx/html nginx:1.17    # -v方式docker container run -itd --name "nginx1" -p 80:80 --mount src=nginx_volumes,dst=/usr/share/nginx/html nginx:1.17 # --mount方式# 查看nginx_volumes在宿主机的真实目录ll /var/lib/docker/volumes/nginx_volumes/_datatotal 8-rw-r--r-- 1 root root 494 Apr 14 22:19 50x.html    # 这时候nginx容器内部的文件已经被映射到宿主机上了-rw-r--r-- 1 root root 612 Apr 14 22:19 index.html# 修改宿主机上的index.html文件echo "<title>nginx_volumes test </title>" > /var/lib/docker/volumes/nginx_volumes/_data/index.html# 访问宿主机的80端口(前面启动容器时将容器的80端口绑定到宿主机的80端了)curl 10.10.110.150<title>nginx_volumes test </title>    # nginx容器内的文件确实被修改成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bind-mounts"><a href="#bind-mounts" class="headerlink" title="bind mounts"></a>bind mounts</h2><p>bind mounts本质上是容器共享宿主机文件系统，比如docker将宿主机的/etc/resov.conf文件bind mount到容器里，两者会使用相同的dns服务器。</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建容器,将宿主机的/nginx/app绑定到容器的/usr/share/nginx/html目录 docker container run -itd --name "nginx1" --mount type=bind,src=/nginx/app,dst=/usr/share/nginx/html nginx:1.17docker container run -itd --name "nginx1" -v /nginx/app:/usr/share/nginx/html nginx:1.17# 查看宿主机和容器的目录ls /nginx/appdocker exec -it nginx1 ls /usr/share/nginx/html        # 两个目录都为空,这是因为bind mounts是将宿主机的目录绑定到容器的目录,容器目录已有的内容会被隐藏(bind mounts以宿主机目录为主)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意: 如果源文件或源目录不存在，则不会自动创建。如果容器目录为非空目录，则容器目录现有内容会被宿主机目录内容所隐藏。</code></p><h2 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h2><p>出于安全原因，或者容器性能优化的原因有时候不需要容器的数据长久保存时可以使用这种方式。将容器数据挂载存储在宿主机的内存中，避免写入容器可写层，提高容器性能。</p><h1 id="volumes和bind-mounts的使用场景和区别"><a href="#volumes和bind-mounts的使用场景和区别" class="headerlink" title="volumes和bind mounts的使用场景和区别"></a>volumes和bind mounts的使用场景和区别</h1><p>volumes适合多个容器需要共享数据、将数据保存到远程主机或云上等场景。bind mounts适合将宿主机的系统配置文件共享给容器。volumes是将容器内部的数据映射到宿主机对应的volumes目录，如果容器内部是一个非空目录，volumes目录也是一个非空目录，那么两个目录的文件会合并。而bind mounts是将宿主机上任意位置的目录或文件挂载到容器中，如果宿主机的目录非空，那么容器目录的数据将会被宿主机目录的数据隐藏，容器内的数据要卸除挂载后才会恢复。</p><p>Bind mounts和volumes都可以通过使用标志-v或–volume来挂载到容器中，只是格式有些许不同。然而，在Docker17.06及其以上版本中，我们推荐使用–mount来对容器或服务进行这三种方式的挂载，因为这种格式更加清晰。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;容器数据持久化的三种方式&quot;&gt;&lt;a href=&quot;#容器数据持久化的三种方式&quot; class=&quot;headerlink&quot; title=&quot;容器数据持久化的三种方式&quot;&gt;&lt;/a&gt;容器数据持久化的三种方式&lt;/h1&gt;&lt;p&gt;由于容器的镜像分层机制，我们在容器里面创建文件或者修改文件，
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器管理(3)</title>
    <link href="https://www.missf.top/post/39a5b294.html"/>
    <id>https://www.missf.top/post/39a5b294.html</id>
    <published>2020-06-17T08:23:38.000Z</published>
    <updated>2020-06-19T06:05:05.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建容器常用选项"><a href="#创建容器常用选项" class="headerlink" title="创建容器常用选项"></a>创建容器常用选项</h1><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-i, –interactive</td><td>交互式</td></tr><tr><td>-t, –tty</td><td>分配一个伪终端</td></tr><tr><td>-d, –detach</td><td>运行容器到后台</td></tr><tr><td>-e, –env</td><td>设置环境变量</td></tr><tr><td>-p, –publish list</td><td>发布容器端口到主机</td></tr><tr><td>-P, –publish-all</td><td>发布容器所有EXPOSE的端口到宿主机随机端口</td></tr><tr><td>–name string</td><td>指定容器名称</td></tr><tr><td>-h, –hostname</td><td>设置容器主机名</td></tr><tr><td>–ip string</td><td>指定容器IP,只能用于自定义网络</td></tr><tr><td>–network</td><td>连接容器到一个网络</td></tr><tr><td>–mount mount</td><td>将文件系统附加到容器</td></tr><tr><td>-v, –volume list</td><td>绑定挂载一个卷</td></tr><tr><td>–restart string</td><td>容器退出时重启策略,默认no,可选值:[always<strong>|</strong>on-failure]</td></tr></tbody></table><h2 id="创建容器示例"><a href="#创建容器示例" class="headerlink" title="创建容器示例"></a>创建容器示例</h2><pre class="line-numbers language-shell"><code class="language-shell"># 启动一个nginx容器,指定名字、映射端口、设置重启# 如果不加-it分配一个交互式的伪终端,容器就会直接退出了,容器内的第一个程序必须一直处于前台运行(必须hang住)docker container run -itd --name "nginx" -p 80:80 --restart always nginx:1.17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="容器资源限制"><a href="#容器资源限制" class="headerlink" title="容器资源限制"></a>容器资源限制</h1><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-m，–memory</td><td>容器可以使用的最大内存量</td></tr><tr><td>–memory-swap</td><td>允许交换到磁盘的内存量</td></tr><tr><td>–memory-swappiness=&lt;0-100&gt;</td><td>容器使用SWAP分区交换的百分比(0-100，默认为-1)</td></tr><tr><td>–oom-kill-disable</td><td>禁用OOM Killer</td></tr><tr><td>–cpus</td><td>可以使用的CPU数量</td></tr><tr><td>–cpuset-cpus</td><td>限制容器使用特定的CPU核心，如(0-3, 0,1)</td></tr><tr><td>–cpu-shares</td><td>CPU共享(相对权重)</td></tr></tbody></table><h2 id="内存限额示例"><a href="#内存限额示例" class="headerlink" title="内存限额示例"></a>内存限额示例</h2><pre class="line-numbers language-shell"><code class="language-shell"># 允许容器最多使用500M内存和600M的swap,并禁用OOM Killerdocker container run -d --name "nginx1" --memory="500M" --memory-swap="600M" --oom-kill-disable nginx:1.17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="CPU限额示例"><a href="#CPU限额示例" class="headerlink" title="CPU限额示例"></a>CPU限额示例</h2><pre class="line-numbers language-shell"><code class="language-shell"># 允许容器最多使用两个的CPUdocker container run -d --name "nginx2" --cpus="2" nginx:1.17# 允许容器最多使用50%的CPUdocker container run -d --name "nginx3" --cpus=".5" nginx:1.17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="容器资源配额扩容"><a href="#容器资源配额扩容" class="headerlink" title="容器资源配额扩容"></a>容器资源配额扩容</h1><pre class="line-numbers language-shell"><code class="language-shell"># 容器资源可更新选项docker update --helpUsage:    docker update [OPTIONS] CONTAINER [CONTAINER...]Update configuration of one or more containersOptions:      --blkio-weight uint16        Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)      --cpu-period int             Limit CPU CFS (Completely Fair Scheduler) period      --cpu-quota int              Limit CPU CFS (Completely Fair Scheduler) quota      --cpu-rt-period int          Limit the CPU real-time period in microseconds      --cpu-rt-runtime int         Limit the CPU real-time runtime in microseconds  -c, --cpu-shares int             CPU shares (relative weight)      --cpus decimal               Number of CPUs      --cpuset-cpus string         CPUs in which to allow execution (0-3, 0,1)      --cpuset-mems string         MEMs in which to allow execution (0-3, 0,1)      --kernel-memory bytes        Kernel memory limit  -m, --memory bytes               Memory limit      --memory-reservation bytes   Memory soft limit      --memory-swap bytes          Swap limit equal to memory plus swap: '-1' to enable unlimited swap      --pids-limit int             Tune container pids limit (set -1 for unlimited)      --restart string             Restart policy to apply when a container exits# 更新正在运行中的容器内存限额docker update --memory="400M" --memory-swap="500M" --restart="on-failure" 4e860294d239<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="管理容器常用命令"><a href="#管理容器常用命令" class="headerlink" title="管理容器常用命令"></a>管理容器常用命令</h1><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>ls</td><td>列出容器</td></tr><tr><td>inspect</td><td>查看一个或多个容器详细信息</td></tr><tr><td>exec</td><td>在运行容器中执行命令</td></tr><tr><td>commit</td><td>创建一个新镜像来自一个容器</td></tr><tr><td>cp</td><td>拷贝文件/文件夹到一个容器</td></tr><tr><td>logs</td><td>获取一个容器日志</td></tr><tr><td>port</td><td>列出或指定容器端口映射</td></tr><tr><td>top</td><td>显示一个容器运行的进程</td></tr><tr><td>stats</td><td>显示容器资源使用统计</td></tr><tr><td>stop/start/restart</td><td>停止/启动一个或多个容器</td></tr><tr><td>rm</td><td>删除一个或多个容器</td></tr><tr><td>prune</td><td>移除已停止的容器</td></tr></tbody></table><h2 id="管理容器示例"><a href="#管理容器示例" class="headerlink" title="管理容器示例"></a>管理容器示例</h2><pre class="line-numbers language-shell"><code class="language-shell"># 列出真正运行的所有容器docker container ls -a# 获取一个容器日志docker container logs --tail="5" nginx        # 仅列出最新N条容器log信息docker container logs -f nginx        # 跟踪log信息输出docker logs --since="2020-06-18" --tail="10" nginx      # 显示某个时间之后的最新十条log信息# 进入正在运行的容器中执行命令docker container exec -it nginx /bin/bash# 显示一个容器运行的进程docker container top nginx# 删除一个或删除全部容器docker container rm -f nginxdocker container rm -f $(docker container ls -q)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="容器实现核心技术-Namespace"><a href="#容器实现核心技术-Namespace" class="headerlink" title="容器实现核心技术:Namespace"></a>容器实现核心技术:Namespace</h1><p>在容器化中，一台物理计算机可以运行多个不同操作系统(一个容器就类似于一个系统)，那就需要解决”隔离性”，让彼此感知不到对方的存在，出现问题也互不影响。</p><p>Linux内核从2.4.19版本开始引入了namespace概念，其目的是将特定的全局系统资源通过抽象方法使得namespace中的进程看起来拥有自己隔离的资源。Docker就是借助这个机制实现了容器资源隔离。</p><p>Linux的namespace机制提供了6种不同的命名空间</p><ul><li>IPC: 隔离进程间通信</li><li>MOUNT: 隔离文件系统挂载点</li><li>NET: 隔离网络协议栈</li><li>PID: 隔离进程号，容器命名空间对父进程空间可见</li><li>USER: 隔离用户</li><li>UTS: 隔离主机名和域名</li></ul><h1 id="容器实现核心技术-CGroups"><a href="#容器实现核心技术-CGroups" class="headerlink" title="容器实现核心技术:CGroups"></a>容器实现核心技术:CGroups</h1><p>Docker利用namespace实现了容器之间资源隔离，但是namespace不能对容器资源限制，比如CPU、内存。如果某一个容器属于CPU密集型任务，那么会影响其他容器使用CPU，导致多个容器相互影响并且抢占资源。如何对多个容器的资源使用进行限制就成了容器化的主要问题。所以容器引入了Control Groups(简称CGroups)，限制容器资源。</p><p>CGroups 以某种标准讲一组进程为目标进行资源分配和控制，例如CPU、内存、带宽等，并且可以动态配置</p><ul><li>限制进程组使用的资源数量(Resource limitation ):可以为进程组设定资源使用上限，例如内存</li><li>进程组优先级控制( Prioritization):可以为进程组分配特定CPU、磁盘IO吞吐量</li><li>记录进程组使用的资源数量(Accounting ):例如使用记录某个进程组使用的CPU时间</li><li>进程组控制(Control ):可以将进程组挂起和恢复</li></ul><h2 id="查看cgroups可控制的资源"><a href="#查看cgroups可控制的资源" class="headerlink" title="查看cgroups可控制的资源"></a>查看cgroups可控制的资源</h2><table><thead><tr><th>资源</th><th>描述</th></tr></thead><tbody><tr><td>blkio</td><td>对块设备的IO进行限制</td></tr><tr><td>cpu</td><td>限制CPU时间片的分配，与cpuacct挂载同一目录</td></tr><tr><td>cpuacct</td><td>生成cgroup中的任务占用CPU资源的报告，与cpu挂载同一目录</td></tr><tr><td>cpuset</td><td>给cgroup中的任务分配独立的CPU(多核处理器)和内存节点</td></tr><tr><td>devices</td><td>允许或者拒绝 cgroup 中的任务访问设备</td></tr><tr><td>freezer</td><td>暂停/恢复 cgroup 中的任务</td></tr><tr><td>hugetlb</td><td>限制使用的内存页数量</td></tr><tr><td>memory</td><td>对cgroup中任务的可用内存进行限制，并自动生成资源占用报告</td></tr><tr><td>net_cls</td><td>使用等级识别符(classid)标记网络数据包，这让 Linux 流量控制程序(tc)可以识别来自特定从cgroup任务的数据包，并进行网络限制</td></tr><tr><td>net_prio</td><td>允许基于cgroup设置网络流量的优先级</td></tr><tr><td>perf_event</td><td>允许使用perf工具来监控cgroup</td></tr><tr><td>pids</td><td>限制任务的数量</td></tr></tbody></table><h2 id="资源控制在容器中的实际位置"><a href="#资源控制在容器中的实际位置" class="headerlink" title="资源控制在容器中的实际位置"></a>资源控制在容器中的实际位置</h2><pre class="line-numbers language-shell"><code class="language-shell">ll /sys/fs/cgroup/"资源名"/docker/"容器ID"/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Docker核心组件之间关系"><a href="#Docker核心组件之间关系" class="headerlink" title="Docker核心组件之间关系"></a>Docker核心组件之间关系</h1><p>我们使用docker client运行一个容器，其实容器运行时底层是需要依赖一系列的组件的。主要有docker client、docker daemon、containerd、container-shim、runC。</p><h2 id="docker-client"><a href="#docker-client" class="headerlink" title="docker client"></a>docker client</h2><p>docker客户端程序，负责发送用户的请求给docker daemon。</p><h2 id="docker-daemon"><a href="#docker-daemon" class="headerlink" title="docker daemon"></a>docker daemon</h2><p>docker daemon守护进程，也称docker engine，负责处理docker client的请求，并返回处理结果。</p><h2 id="containerd"><a href="#containerd" class="headerlink" title="containerd"></a>containerd</h2><p>containerd是一个工业级标准的容器运行时，它强调简单性、健壮性和可移植性。Containerd可以在宿主机中管理完整的容器生命周期:容器镜像的传输和存储、容器的执行和管理、存储和网络等。为docker daemon提供接口去管理容器，docker对容器的管理和操作基本都是通过containerd完成的。但是要注意的是:containerd被设计成嵌入到一个更大的系统中，而不是直接由开发人员或终端用户使用。</p><h2 id="container-shim"><a href="#container-shim" class="headerlink" title="container-shim"></a>container-shim</h2><p>container-shim是containerd的组件，是容器的运行时载体，我们在docker宿主机上看到的shim也正是代表着一个个通过调用containerd启动的docker容器。</p><pre class="line-numbers language-shell"><code class="language-shell">ps axf | grep docker -A 110191 ?        Sl     0:01  \_ containerd-shim -namespace moby -workdir /var/lib/containerd/io.containerd.runtime.v1.linux/moby/4dffa5d5861899400770d6470618e4e051c5f1bf0c53034999b13821fc3fe93f -address /run/containerd/containerd.sock -containerd-binary /usr/bin/containerd -runtime-root /var/run/docker/runtime-runc 10208 ?        Ss     0:00      \_ nginx: master process nginx -g daemon off;--4215 ?        Ssl    2:06 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="runC"><a href="#runC" class="headerlink" title="runC"></a>runC</h2><p>RunC 是一个轻量级的工具，它是用来运行容器的。我们可以认为它就是个命令行小工具，可以不用通过 docker 引擎，直接运行容器。事实上runC 是标准化的产物，它根据 OCI 标准来创建和运行容器。而 <a href="https://www.opencontainers.org/" target="_blank" rel="noopener">OCI(Open Container Initiative)</a>组织，旨在围绕容器格式和运行时制定一个开放的工业化标准。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建容器常用选项&quot;&gt;&lt;a href=&quot;#创建容器常用选项&quot; class=&quot;headerlink&quot; title=&quot;创建容器常用选项&quot;&gt;&lt;/a&gt;创建容器常用选项&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像管理(2)</title>
    <link href="https://www.missf.top/post/ce2c2968.html"/>
    <id>https://www.missf.top/post/ce2c2968.html</id>
    <published>2020-06-16T07:00:10.000Z</published>
    <updated>2020-06-19T06:05:13.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是镜像"><a href="#什么是镜像" class="headerlink" title="什么是镜像"></a>什么是镜像</h1><p>镜像是一个分层存储的文件</p><p>镜像就是一个软件的运行环境</p><p>一个镜像可以重复使用，创建无数个容器</p><p>一个不包含Linux内核而又精简的Linux操作系统</p><p>镜像是一种标准化的交付，镜像内包含代码以及软件的运行环境</p><h1 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h1><p>阿里云为每一个开通容器镜像服务的用户免费提供一个镜像加速地址</p><pre class="line-numbers language-shell"><code class="language-shell"># 配置镜像加速tee /etc/docker/daemon.json << EOF{    "registry-mirrors": ["https://265wemgl.mirror.aliyuncs.com"]}EOFsystemctl daemon-reloadsystemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><p>我们拉取镜像一般是默认从Docker Hub拉取的，但是国内访问Docker Hub速度很慢，所以我们在前面配置了阿里云的镜像加速。在拉取镜像时，直接从阿里云的docker镜像仓库拉取。我们假如要拉取一个镜像，但是不知道仓库中是否有这个镜像时，我们可以先搜索这个镜像名字，看是否有对应的镜像。</p><pre class="line-numbers language-shell"><code class="language-shell"># 搜索镜像docker search nginx# 拉取镜像,如果不指定版本号,默认拉取最新(latest)docker pull nginx:1.17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>镜像拉取到宿主机本地之后，会以分层的文件形式存储，下面是镜像的存放目录</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# ll /var/lib/docker/overlay2/total 0drwx------ 4 root root     55 Jun 17 19:04 5f4badc01c88554e78d4aaec269a84fb5e2028d42278d5f131dda81c4209622cdrwx------ 3 root root     47 Jun 17 19:04 658e3b564ce9017b0bd507f1853702f6cdda4642fdc6fbf4b4d06e34cf9a8c25drwx------ 3 root root     30 Jun 17 19:09 6d57028d1a60a66afc6959b02e0005ea424182908fadf6aa5ac90f3868c014f7brw------- 1 root root 253, 0 Jun 17 18:31 backingFsBlockDevdrwx------ 4 root root     72 Jun 17 19:04 d56648ebd71c9bdb68226b4021ec008db3ed537072b3c4f9e77afc51f8108c07drwx------ 2 root root    142 Jun 17 19:09 l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="镜像与容器的联系"><a href="#镜像与容器的联系" class="headerlink" title="镜像与容器的联系"></a>镜像与容器的联系</h1><p>当启动一个新容器时，docker只加载只读镜像，并在这个只读镜像上面添加一个读写层，即容器层。但我们需要修改容器里面的文件时，会先从镜像层把这个文件拷贝到读写层，然后再执行修改操作。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ee9acc8a240b370e3c19f7e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="镜像存储核心技术-联合文件系统-UnionFS"><a href="#镜像存储核心技术-联合文件系统-UnionFS" class="headerlink" title="镜像存储核心技术:联合文件系统(UnionFS)"></a>镜像存储核心技术:联合文件系统(UnionFS)</h1><p>联合文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(uniteseveral directories into a single virtual filesystem)。联合文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。另外，不同 Docker 容器就可以共享一些基础的文件系统层，同时再加上自己独有的改动层，大大提高了存储的效率。</p><p>Docker 中使用的 AUFS（AnotherUnionFS）就是一种联合文件系统。 AUFS 支持为每一个成员目录（类似 Git 的分支）设定只读（readonly）、读写（readwrite）和写出（whiteout-able）权限, 同时 AUFS 里有一个类似分层的概念, 对只读权限的分支可以逻辑上进行增量地修改(不影响只读部分的)。</p><p>Docker 目前支持的联合文件系统包括 OverlayFS , AUFS , Btrfs , VFS , ZFS 和 DeviceMapper 。</p><h1 id="镜像存储核心技术-写时复制-COW"><a href="#镜像存储核心技术-写时复制-COW" class="headerlink" title="镜像存储核心技术:写时复制(COW)"></a>镜像存储核心技术:写时复制(COW)</h1><p>docker镜像由多个只读层叠加而成，启动容器时，docker会加载只读镜像层并在镜像层顶部添加一个读写层。如果运行中的容器修改了一个已存在的文件，那么该文件将会从只读层复制到读写层，该文件的只读版本任然存在，只是已经被读写层中该文件的副本所隐藏，这就是写时复制机制。</p><h1 id="镜像常用管理命令"><a href="#镜像常用管理命令" class="headerlink" title="镜像常用管理命令"></a>镜像常用管理命令</h1><pre class="line-numbers language-shell"><code class="language-shell"># 列出镜像,-a显示所有镜像docker image ls# 在当前目录通过Dockerfile构建镜像docker build -t "nginx_tomcat" .# 查看镜像历史docker image history nginx:1.17# 显示镜像的详细信息docker inspect nginx:1.17# 从镜像仓库拉取镜像docker pull nginx:1.17# 推送镜像到镜像仓库docker pull centos:7.6.1810# 移除一个或多个镜像docker image rm centos    docker image rm $(docker image ls -q)    # 删除全部镜像# 删除没有被标记或没有被任何容器引用的镜像docker image prune -af# 创建一个引用源镜像标记目标镜像docker tag centos:latest coentos:v1        # 为centos:latest这个镜像打一个标签为coentos:v1# 导出容器文件系统为tar归档文件docker export -o centos-export.tar [CONTAINER ID]# 导入容器文件系统tar归档文件来创建镜像docker import centos-export.tar# 保存一个或多个镜像到一个tar归档文件docker save -o database.tar redis mysql# 加载镜像来自tar归档或标准输入docker load -i database.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相信许多的初学者看到这里肯定有疑问，这里说明一下export &amp; import和save &amp; load的区别在哪里</p><h2 id="export-amp-import"><a href="#export-amp-import" class="headerlink" title="export &amp; import"></a>export &amp; import</h2><p>export的应用场景主要用来制作基础镜像，比如你从一个centos镜像启动一个容器，然后安装一些软件和进行一些设置后，使用docker export保存为一个基础镜像。然后把这个镜像分发给其他人使用，比如作为基础的开发环境。</p><pre class="line-numbers language-shell"><code class="language-shell">export:将容器导出为tar归档文件,生成的是该容器的快照，复刻了容器当前的Linux系统环境import:将tar归档文件导入为镜像整个过程即:容器-->tar归档文件-->镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="save-amp-load"><a href="#save-amp-load" class="headerlink" title="save &amp; load"></a>save &amp; load</h2><p>如果你的应用是使用docker-compose.yml编排的多个镜像组合，但你要部署的客户服务器并不能连外网。这时，你可以使用docker save将用到的镜像打个包，然后拷贝到客户服务器上使用docker load载入。</p><pre class="line-numbers language-shell"><code class="language-shell">save:将镜像导出为tar归档文件,该命令也可以作用于容器,但导出的是容器背后的imagesload:将tar归档文件导入为镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>注意: save命令生成的tar包比export命令生成的tar包大很多，两组命令不可交叉互用</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是镜像&quot;&gt;&lt;a href=&quot;#什么是镜像&quot; class=&quot;headerlink&quot; title=&quot;什么是镜像&quot;&gt;&lt;/a&gt;什么是镜像&lt;/h1&gt;&lt;p&gt;镜像是一个分层存储的文件&lt;/p&gt;
&lt;p&gt;镜像就是一个软件的运行环境&lt;/p&gt;
&lt;p&gt;一个镜像可以重复使用，创建无数个容
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Docker核心概念与安装(1)</title>
    <link href="https://www.missf.top/post/f7aff4ce.html"/>
    <id>https://www.missf.top/post/f7aff4ce.html</id>
    <published>2020-06-15T02:56:03.000Z</published>
    <updated>2020-06-19T06:05:19.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么使用容器"><a href="#为什么使用容器" class="headerlink" title="为什么使用容器"></a>为什么使用容器</h1><p>提供简单轻量的建模方式，非常容易上手，运行速度非常快</p><p>使开发和运维的职责分离，开发只需要关心容器中的程序，运维只需要管理容器</p><p>快速高效的开发生命周期，开发环境和生产环境一致，避免了额外的调试有效缩短上线时间</p><p>鼓励使用面向服务的架构，docker推荐单个容器只运行一个应用程序，使分布式扩展和调试变得简单</p><h1 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h1><h2 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h2><p>想要了解docker，首先要知道什么是容器。最早的容器技术来自于BSD的jail技术(jail一词是监狱的意思，这个技术的隔离思想来源于监狱的启发)，目的就是为了实现进程隔离，使得一个进程被攻陷后不会影响到其他进程，这是出于安全的目的。</p><h2 id="使用最为广泛的开源容器引擎"><a href="#使用最为广泛的开源容器引擎" class="headerlink" title="使用最为广泛的开源容器引擎"></a>使用最为广泛的开源容器引擎</h2><p>在近几年来，docker是一个非常火的名词。事实上docker只是众多容器引擎其中一款优秀的容器引擎，但是它却几乎成为了容器的代名词。许多业外人士觉得docker就是容器，这里大家要明白，docker只是属于容器技术的一种。</p><h2 id="容器是一种操作系统级别的虚拟化技术"><a href="#容器是一种操作系统级别的虚拟化技术" class="headerlink" title="容器是一种操作系统级别的虚拟化技术"></a>容器是一种操作系统级别的虚拟化技术</h2><p>使用docker创建的容器，以特殊进程的方式在宿主机上运行，运行一个容器就像运行一个进程一样，宿主机上可以运行多个容器，容器间的资源是互相隔离的。</p><h2 id="依赖于Linux内核特性-Namespace-amp-Cgroups"><a href="#依赖于Linux内核特性-Namespace-amp-Cgroups" class="headerlink" title="依赖于Linux内核特性 Namespace &amp; Cgroups"></a>依赖于Linux内核特性 Namespace &amp; Cgroups</h2><p>容器之间运行的是一个隔离的环境，也可以理解类似于一个沙盒，使用Namespace进行资源的隔离，使用Cgroups进行资源的控制。</p><h1 id="Docker基本组成"><a href="#Docker基本组成" class="headerlink" title="Docker基本组成"></a>Docker基本组成</h1><h2 id="Docker-Client-客户端"><a href="#Docker-Client-客户端" class="headerlink" title="Docker Client 客户端"></a>Docker Client 客户端</h2><p>docker采用C/S架构</p><p>docker客户端和docker服务器之间的通信访问可以是本地方式也可以是远程方式</p><p>docker客户端向守护进程发送请求，守护进程的执行结果会传回给客户端</p><h2 id="Docker-Daemon-守护进程"><a href="#Docker-Daemon-守护进程" class="headerlink" title="Docker Daemon 守护进程"></a>Docker Daemon 守护进程</h2><p>docker采用C/S架构</p><p>docker客户端和docker服务器之间的通信访问可以是本地方式也可以是远程方式</p><p>docker客户端向守护进程发送请求，守护进程的执行结果会传回给客户端</p><h2 id="Docker-Image-镜像"><a href="#Docker-Image-镜像" class="headerlink" title="Docker Image 镜像"></a>Docker Image 镜像</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ee713d4c2a9a83be5ea9ce7.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>镜像是容器的基石，镜像包含了容器启动的一切条件，容器基于镜像去启动。镜像是层叠的只读文件系统，底层是bootfs引导文件系统，rootfs文件系统永远是只读状态，使用同一个镜像无论启动多少个容器，或者容器被如何修改，镜像都不会被改变。一个镜像可以放到一个镜像的顶部，最下面的镜像称为基础镜像，就是图中的centos/Ubuntu层。这里使用了写时复制技术(copy on write)，即通过一个镜像启动一个容器实例，这个镜像是以只读形式挂载的，即不允许任何修改操作，当在容器实例中修改一个文件时，会首先从镜像里把这个文件拷贝到可写层，然后执行更新操作。</p><h2 id="Docker-Container-容器"><a href="#Docker-Container-容器" class="headerlink" title="Docker Container 容器"></a>Docker Container 容器</h2><p>容器通过镜像启动</p><p>docker守护进程执行命令就是在容器实例中执行</p><p>应用部署在容器中</p><p>在启动容器时会在镜像的最上层创建一个读写层，读写层加上下面的多个只读层从而构成一个容器</p><h2 id="Docker-Registry-仓库"><a href="#Docker-Registry-仓库" class="headerlink" title="Docker Registry 仓库"></a>Docker Registry 仓库</h2><p>随着我们项目的增加，我们构建的镜像也会越来越多。而镜像也是像代码一样的，需要一个镜像仓库来进行管理的，镜像仓库里面保存着我们构建的镜像。镜像仓库还分为公有仓库和私有仓库。公有仓库一般指<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，Docker Hub 是一个由 Docker 公司运行和管理的基于云的存储库，它是一个在线存储库，Docker 镜像可以由其他用户发布和使用。而私有仓库一般是我们公司的组织内部拥有的一个私有仓库，仅允许公司内部用户使用。</p><h2 id="容器的关系图"><a href="#容器的关系图" class="headerlink" title="容器的关系图"></a>容器的关系图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ee6faeec2a9a83be5c7194e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="容器-VS-虚拟机"><a href="#容器-VS-虚拟机" class="headerlink" title="容器 VS 虚拟机"></a>容器 VS 虚拟机</h1><p>虚拟机是系统级别的虚拟化，而容器是进程级别的虚拟化，这是虚拟机和容器最核心的区别。虚拟机提供了物理机硬件级别的操作系统隔离，使用虚拟机部署应用，除了应用和应用依赖的库文件，还需要虚拟完整的操作系统，每个虚拟机拥有自己独立的内核，这会大量占用系统的硬件资源。而容器是进程级别的虚拟化，当我们运行docker容器时，此时容器本身只是操作系统中的一个进程，利用了Linux系统的内核特性(Namespace &amp; Cgroups)实现了进程之间网络、空间、权限等隔离，使多个容器进程互相不知道彼此的存在。在这个追求速度的互联网时代，容器在许多方面要比虚拟机优秀。但是不意味着传统的虚拟机技术就过时了，虚拟机的操作系统级别隔离是容器无法替代的，容器的意义在于运行单个应用，如果在容器里面添加越来越多的功能，那不如一开始就直接使用虚拟机。</p><h2 id="虚拟技术的核心区别"><a href="#虚拟技术的核心区别" class="headerlink" title="虚拟技术的核心区别"></a>虚拟技术的核心区别</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ee8394d2cb53f50fe53b66c.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="容器-VS-虚拟机详细对比"><a href="#容器-VS-虚拟机详细对比" class="headerlink" title="容器 VS 虚拟机详细对比"></a>容器 VS 虚拟机详细对比</h2><table><thead><tr><th></th><th><strong>Container</strong></th><th><strong>VM</strong></th></tr></thead><tbody><tr><td><strong>启动速度</strong></td><td>秒级</td><td>分钟级</td></tr><tr><td><strong>运行性能</strong></td><td>接近原生</td><td>5%左右损失</td></tr><tr><td><strong>磁盘占用</strong></td><td>MB</td><td>GB</td></tr><tr><td><strong>数量</strong></td><td>成百上千</td><td>一般几十台</td></tr><tr><td><strong>隔离性</strong></td><td>进程级</td><td>系统级(更彻底)</td></tr><tr><td><strong>操作系统</strong></td><td>主要支持Linux</td><td>几乎所有</td></tr><tr><td><strong>封装程度</strong></td><td>只打包项目代码和依赖关系，共享宿主机内核</td><td>完整的操作系统</td></tr></tbody></table><h1 id="Docker应用场景"><a href="#Docker应用场景" class="headerlink" title="Docker应用场景"></a>Docker应用场景</h1><p>应用程序打包和发布</p><p>应用程序环境隔离</p><p>持续集成</p><p>部署微服务</p><p>快速搭建测试环境</p><p>提供Pass产品(平台即服务)</p><h1 id="Linux安装Docker"><a href="#Linux安装Docker" class="headerlink" title="Linux安装Docker"></a>Linux安装Docker</h1><pre class="line-numbers language-shell"><code class="language-shell"># 安装依赖包yum install -y yum-utils device-mapper-persistent-data lvm2# 添加Docker软件源yum-config-manager \--add-repo \https://download.docker.com/linux/centos/docker-ce.repo# 安装Docker CEyum install -y docker-ce# 启动Docker服务并设置开机启动systemctl start dockersystemctl enable docker# 查看docker版本docker --versionDocker version 19.03.11, build 42e35e61f3# 查看更详细的信息docker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么使用容器&quot;&gt;&lt;a href=&quot;#为什么使用容器&quot; class=&quot;headerlink&quot; title=&quot;为什么使用容器&quot;&gt;&lt;/a&gt;为什么使用容器&lt;/h1&gt;&lt;p&gt;提供简单轻量的建模方式，非常容易上手，运行速度非常快&lt;/p&gt;
&lt;p&gt;使开发和运维的职责分离，开发只需
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>ansible的过滤器(13)</title>
    <link href="https://www.missf.top/post/40656090.html"/>
    <id>https://www.missf.top/post/40656090.html</id>
    <published>2020-06-09T11:46:58.000Z</published>
    <updated>2020-06-22T05:39:49.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的过滤器"><a href="#ansible的过滤器" class="headerlink" title="ansible的过滤器"></a>ansible的过滤器</h1><p>过滤器可以帮助我们对数据进行处理，例如将获取到的变量值中的所有字母都变成大写，过滤器能帮我们实现这样的需求。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">testvar</span><span class="token punctuation">:</span> fesf1dEcd  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | upper }}"</span><span class="token comment" spellcheck="true"># 执行playbook</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"FESF1DECD"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤器是一种能够帮助我们处理数据的工具，ansible中的过滤器功能来自于jinja2模板引擎，我们可以借助jinja2的过滤器功能在ansible中对数据进行各种处理，而上例中的upper就是一种过滤器，这个过滤器的作用就是将小写字母变成大写。当然还有很多其他的过滤器，这些过滤器有些是jinja2内置的，有些是ansible特有的，如果这些过滤器都不能满足你的需求，jinja2也支持自定义过滤器。</p><h1 id="字符串操作相关的过滤器"><a href="#字符串操作相关的过滤器" class="headerlink" title="字符串操作相关的过滤器"></a>字符串操作相关的过滤器</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">testvar</span><span class="token punctuation">:</span> fesf1dEcd  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | upper }}"</span>    <span class="token comment" spellcheck="true"># 将全部字母转换成大写</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | lower }}"</span>    <span class="token comment" spellcheck="true"># 将全部字母转换成小写</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | capitalize }}"</span>        <span class="token comment" spellcheck="true"># 首字母大写,其他小写</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | reverse }}"</span>    <span class="token comment" spellcheck="true"># 将字符串反转</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | first }}"</span>    <span class="token comment" spellcheck="true"># 返回字符串的第一个字符</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | last }}"</span>    <span class="token comment" spellcheck="true"># 返回字符串的最后一个字符</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | trim }}"</span>    <span class="token comment" spellcheck="true"># 将字符串开头和结尾的空格去除</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | center(width=30) }}"</span>    <span class="token comment" spellcheck="true"># 将字符串居中并设置字符串的长度为30,字符串两边用空格填充</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | length }}"</span>        <span class="token comment" spellcheck="true"># 返回字符串长度,length与count等效,可以写为count</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | list }}"</span>    <span class="token comment" spellcheck="true"># 将字符串转换成列表,每个字符作为一个元素</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar | shuffle }}"</span>     <span class="token comment" spellcheck="true"># 将字符串转换成列表,每个字符作为一个元素,并且随机打乱顺序(洗牌)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数字操作相关的过滤器"><a href="#数字操作相关的过滤器" class="headerlink" title="数字操作相关的过滤器"></a>数字操作相关的过滤器</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">tes</span><span class="token punctuation">:</span> <span class="token number">-8</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ 5 + ('8' | int) }}"</span>    <span class="token comment" spellcheck="true"># 把字符串类型的'8'转换为整形后再作计算</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ '9' | int(default=6) }}"</span>    <span class="token comment" spellcheck="true"># 把字符串类型的'a'转换为整形,如果无法转换则返回6</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ '8' | float }}"</span>    <span class="token comment" spellcheck="true"># 将对应的值转换为浮点型,如果无法转换则默认返回'0.0'</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ 'a' | float(8.88) }}"</span>    <span class="token comment" spellcheck="true"># 当对应的值无法返回时则返回指定的'8.88'</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ tes | abs }}"</span>    <span class="token comment" spellcheck="true"># 获取这个变量的绝对值</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ 15.2 | round }}"</span>    <span class="token comment" spellcheck="true"># 四舍五入</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ 3.14159 | round(2) }}"</span>    <span class="token comment" spellcheck="true"># 保留小数点后两位</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ 100 | random }}"</span>    <span class="token comment" spellcheck="true"># 从0到100中返回一个随机数</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ 10 | random(start=5) }}"</span>    <span class="token comment" spellcheck="true"># 从5到10中返回一个随机数</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ 15 | random(start=5,step=2) }}"</span>    <span class="token comment" spellcheck="true"># 从5到15中返回一个随机数,步长为2</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ 15 | random(step=5) }}"</span>    <span class="token comment" spellcheck="true"># 从0到10中返回一个随机数,这个数是5的倍数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="列表操作相关的过滤器"><a href="#列表操作相关的过滤器" class="headerlink" title="列表操作相关的过滤器"></a>列表操作相关的过滤器</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">var1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">]</span>    <span class="token key atrule">var2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span>    <span class="token key atrule">var3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">]</span>    <span class="token key atrule">var4</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'po'</span><span class="token punctuation">,</span><span class="token string">'qE'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'tT'</span><span class="token punctuation">,</span><span class="token string">'IO'</span><span class="token punctuation">]</span>    <span class="token key atrule">var5</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'bc'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>    <span class="token key atrule">var6</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'bc'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">]</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var1 | length }}"</span>    <span class="token comment" spellcheck="true"># 返回列表长度,length与count等效</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var1 | first }}"</span>    <span class="token comment" spellcheck="true"># 返回列表中的第一个值</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var1 | last }}"</span>    <span class="token comment" spellcheck="true"># 返回列表中的最后一个值</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var1 | min }}"</span>    <span class="token comment" spellcheck="true"># 返回列表中最小的值</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var1 | max }}"</span>    <span class="token comment" spellcheck="true"># 返回列表中最大的值</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var1 | sort }}"</span>    <span class="token comment" spellcheck="true"># 将列表升序排序输出</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var1 | sort(reverse=true) }}"</span>    <span class="token comment" spellcheck="true"># 将列表降序排序输出</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>       <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> var1 <span class="token punctuation">|</span> sum <span class="token punctuation">}</span><span class="token punctuation">}</span>"    <span class="token comment" spellcheck="true"># 返回纯数字非嵌套列表中所有数字的和</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var2| flatten }}"</span>    <span class="token comment" spellcheck="true"># 如果列表中包含列表,就把列表拉平为一个列表</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var2 | flatten(levels=1) }}"</span>  <span class="token comment" spellcheck="true"># 如果列表中嵌套了多层列表,就把第一层列表拉平</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var2 | flatten | max }}"</span>  <span class="token comment" spellcheck="true"># 将嵌套列表拉平之后取列表中的最大值</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var3 | join }}"</span>    <span class="token comment" spellcheck="true"># 将列表中的元素连接成一个字符串</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var3 | join(',') }}"</span>    <span class="token comment" spellcheck="true"># 将列表中的元素以','分割连接成一个字符串</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var3 | random }}"</span>    <span class="token comment" spellcheck="true"># 从列表中返回一个随机值</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var3 | shuffle }}"</span>    <span class="token comment" spellcheck="true"># 随机打乱列表元素的顺序</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var4 | upper }}"</span>    <span class="token comment" spellcheck="true"># 将列表中的每个元素变成纯大写</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var4 | lower }}"</span>    <span class="token comment" spellcheck="true"># 将列表中的每个元素变成纯小写</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var5 | unique }}"</span>  <span class="token comment" spellcheck="true"># 去掉列表中重复的元素,重复的元素只留一个</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var5 | union(var6) }}"</span>    <span class="token comment" spellcheck="true"># 合并列表,重复元素只留一个(并集)</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var5 | intersect(var6) }}"</span>    <span class="token comment" spellcheck="true"># 取出两个列表的交集元素,重复的元素只留一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="变量未定义相关的过滤器"><a href="#变量未定义相关的过滤器" class="headerlink" title="变量未定义相关的过滤器"></a>变量未定义相关的过滤器</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">var1</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var0 | default('missf.top') }}"</span>    <span class="token comment" spellcheck="true"># 如果变量没有定义则返回一个默认值,如果定义了变量即使变量值为空还是会输出变量值</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ var1 | default('coding',boolean=true) }}"</span>    <span class="token comment" spellcheck="true"># 如果变量未定义或者变量值为空,则返回默认值</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token string">"{{ var0 | mandatory }}"</span>        <span class="token comment" spellcheck="true"># 如果变量未定义,则报出"Mandatory variable 'var0' not defined"错误而不是默认错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常用过滤器"><a href="#常用过滤器" class="headerlink" title="常用过滤器"></a>常用过滤器</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">users</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mj      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">15</span>      <span class="token key atrule">hobby</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> egm      <span class="token punctuation">-</span> book    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mk      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">17</span>      <span class="token key atrule">hobby</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> pq      <span class="token punctuation">-</span> jk  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ users | map(attribute='name') | list }}"</span>        <span class="token comment" spellcheck="true"># 从users列表中获取到每个元素所共有的某个属性的值,并将这些值组成一个列表</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ (name == 'missf') | ternary('Mr','Ms') }}"</span>    <span class="token comment" spellcheck="true"># 如果name变量的值是missf,那么对应的值则为Mr,否则则为Ms</span>    <span class="token key atrule">vars</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'missf'</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ tg | basename }}"</span>    <span class="token comment" spellcheck="true"># 可以获取到一个路径字符串中的文件名</span>    <span class="token key atrule">vars</span><span class="token punctuation">:</span>      <span class="token key atrule">tg</span><span class="token punctuation">:</span> <span class="token string">"/etc/hosts"</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ win | win_basename }}"</span>    <span class="token comment" spellcheck="true"># 可以获取到windows路径字符串中的文件名</span>    <span class="token key atrule">vars</span><span class="token punctuation">:</span>      <span class="token key atrule">win</span><span class="token punctuation">:</span> <span class="token string">"C:\studio\missf"</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ path | realpath }}"</span>    <span class="token comment" spellcheck="true"># 可以获取软链接文件所指向的真正文件</span>    <span class="token key atrule">vars</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/tmp/linkfile"</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ path | splitext }}"</span>    <span class="token comment" spellcheck="true"># 可以将文件名后缀带有'.'的部分分开</span>    <span class="token key atrule">vars</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/etc/yum.conf"</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ path | splitext | last }}"</span>    <span class="token comment" spellcheck="true"># 将字符串以'.'分开后取最后一个</span>    <span class="token key atrule">vars</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/etc/yum.conf"</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ vt | to_uuid }}"</span>    <span class="token comment" spellcheck="true"># 为字符串生成uuid</span>    <span class="token key atrule">vars</span><span class="token punctuation">:</span>      <span class="token key atrule">vt</span><span class="token punctuation">:</span> <span class="token string">"this is test"</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ sk | bool }}"</span>    <span class="token comment" spellcheck="true"># 字符串内容为'yes','1','True','true'则返回true,内容为其他则返回false</span>    <span class="token key atrule">vars</span><span class="token punctuation">:</span>      <span class="token key atrule">sk</span><span class="token punctuation">:</span> <span class="token string">"yes"</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ ('2016-08-16 12:00:49' | to_datetime) - ('2012-03-25 19:03:15' | to_datetime) }}"</span>          <span class="token comment" spellcheck="true"># 使用to_datetime关键字计算时间差,默认转换的字符串的格式必须是'%Y-%m-%d %H:%M:%S'</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ ('20160814'| to_datetime('%Y%m%d')) - ('2012-12-25 19:00:00' | to_datetime) }}"</span>          <span class="token comment" spellcheck="true"># 如果对应的字符串不是这种格式,则需要在to_datetime中指定与字符串相同的时间格式,才能正确的转换为时间类型</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ '123456' | hash('sha1') }}"</span>    <span class="token comment" spellcheck="true"># 使用sha1算法对字符串进行哈希</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ '123456' | password_hash('md5','ffsfsfsfsfscs') }}"</span>    <span class="token comment" spellcheck="true"># 使用md5算法加密，指定字符串作为盐值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="密码验证示例"><a href="#密码验证示例" class="headerlink" title="密码验证示例"></a>密码验证示例</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars_prompt</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> username      <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"input username"</span>    <span class="token comment" spellcheck="true"># 用户输入用户名</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> password      <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"input password"</span>    <span class="token comment" spellcheck="true"># 用户输入密码</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>       <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ username | hash('md5') }}"</span>    <span class="token comment" spellcheck="true"># 将用户名hash</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> username_md5  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>       <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ password | hash('md5') }}"</span>    <span class="token comment" spellcheck="true"># 将密码hash</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> password_md5  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"username yes"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> username_md5.msg == 'fac2db1a64bc2a16887e9bdf17e15f8e'    <span class="token comment" spellcheck="true"># 通过比对(用户输入的用户名)和(剧本写死的MD5值)确认密码</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"password yes"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> password_md5.msg == 'e10adc3949ba59abbe56e057f20f883e'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的条件判断(12)</title>
    <link href="https://www.missf.top/post/3d533130.html"/>
    <id>https://www.missf.top/post/3d533130.html</id>
    <published>2020-06-08T10:27:28.000Z</published>
    <updated>2020-06-19T09:02:27.283Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的条件判断"><a href="#ansible的条件判断" class="headerlink" title="ansible的条件判断"></a>ansible的条件判断</h1><p>绝大数语言中，都使用if作为条件判断的方法，而在ansible中，条件判断使用关键字when。</p><h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><p>使用when关键字指明条件是: ansible_distribution == “CentOS”，这里的ansible_distribution是facts信息中的一个key，我们在调用ansible_distribution变量时并没有为它添加<code>{{}}</code>，这是在when关键字中引用变量时，不需要加<code>{{}}</code>。如果ansible_distribution == &quot;CentOS&quot;这个条件成立，那么就调用debug模块，打印msg的内容，如果不成立则不执行debug模块。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 简单示例</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'system release is centos'</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution == "CentOS"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配合循环进行判断"><a href="#配合循环进行判断" class="headerlink" title="配合循环进行判断"></a>配合循环进行判断</h1><p>定义条件为item &gt; 1，只有条件成立时item才会被打印，而with_items会循环列表中的值，item变量的值不断变化</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token number">1</span>    <span class="token punctuation">-</span> <span class="token number">2</span>    <span class="token punctuation">-</span> <span class="token number">3</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> item <span class="token punctuation">></span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="条件判断通配符"><a href="#条件判断通配符" class="headerlink" title="条件判断通配符"></a>条件判断通配符</h1><table><thead><tr><th>运算符</th><th>条件</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>两个值是否相等</td><td>相等则为真</td></tr><tr><td>!=</td><td>两个值是否不相等</td><td>不等则为真</td></tr><tr><td>&gt;</td><td>左边的值大于右边的值</td><td>则为真</td></tr><tr><td>&lt;</td><td>左边的值小于右边的值</td><td>则为真</td></tr><tr><td>&gt;=</td><td>左边的值大于或等于右边的值</td><td>则为真</td></tr><tr><td>&lt;=</td><td>左边的值小于或等于右边的值</td><td>则为真</td></tr></tbody></table><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><table><thead><tr><th>运算符</th><th>条件</th><th>结果</th></tr></thead><tbody><tr><td>and</td><td>当左边与右边同时为真</td><td>则返回真</td></tr><tr><td>or</td><td>当左边与右边有任意一个为真</td><td>则返回真</td></tr><tr><td>not</td><td>对一个操作取反</td><td></td></tr><tr><td>()</td><td>将一组操作包装在一起</td><td></td></tr></tbody></table><h1 id="逻辑运算和分组示例"><a href="#逻辑运算和分组示例" class="headerlink" title="逻辑运算和分组示例"></a>逻辑运算和分组示例</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'System release is centos6 or centos7'</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution == "CentOS" and (ansible_distribution_major_version == "6" or ansible_distribution_major_version == "7")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="判断模块执行返回的信息"><a href="#判断模块执行返回的信息" class="headerlink" title="判断模块执行返回的信息"></a>判断模块执行返回的信息</h1><p>我们在执行shell命令时，通常需要获取命令的返回信息，这样才能够根据返回的信息，判断之后的操作如何进行下去。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> touch file1    <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"touch /file1"</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> returnmsg  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug file1    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"Command execution successful"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> returnmsg.rc == 0        <span class="token comment" spellcheck="true"># 命令执行成功的返回值中rc的值为0</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug file2    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"Command execution failed"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> returnmsg.rc <span class="token tag">!=</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="跳过执行遇到的错误"><a href="#跳过执行遇到的错误" class="headerlink" title="跳过执行遇到的错误"></a>跳过执行遇到的错误</h1><p>有些时候我们的tasks执行到一半时，遇到错误之后就不再继续往下执行了，我们可以使用ignore_errors关键字去跳过这个错误，让剧本继续往下执行</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> touch file1    <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"ls /file123"</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> returnmsg    <span class="token key atrule">ignore_errors</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug file1    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"Command execution successful"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> returnmsg.rc == 0  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug file2    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"Command execution failed"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> returnmsg.rc <span class="token tag">!=</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="条件判断与tests"><a href="#条件判断与tests" class="headerlink" title="条件判断与tests"></a>条件判断与tests</h1><p>Linux系统中可以使用一些常用的判断操作，例如使用test命令判断文件或者目录是否存在</p><pre class="line-numbers language-yaml"><code class="language-yaml">test /etc/echo $<span class="token punctuation">?</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ansible中也有类似用于判断文件和目录的方法，注意这个是判断控制节点上的文件和目录，”<strong>is exists</strong>“ | “<strong>is not exists</strong>“</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">testpath</span><span class="token punctuation">:</span> /etc  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"file exist"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> testpath is exists    <span class="token comment" spellcheck="true"># 判断testpath变量这个路径是否存在，存在则为真，打印msg内容</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"file exist"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断变量的tests"><a href="#判断变量的tests" class="headerlink" title="判断变量的tests"></a>判断变量的tests</h2><ul><li><strong>defined:</strong>判断变量是否已经定义，已经定义则返回真</li><li><strong>undefind:</strong> 判断变量是否已经定义，未定义则返回真</li><li><strong>none:</strong> 判断变量值是否为空，如果变量已经定义，但是变量值为空，则返回真</li></ul><p>定义变量f1赋值为test，定义h2但不赋值，debug模块根据对应的条件是否为真打印具体msg内容</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">f1</span><span class="token punctuation">:</span> <span class="token string">'test'</span>    <span class="token key atrule">h2</span><span class="token punctuation">:</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>        <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'varf1 is undefined'</span>      <span class="token key atrule">when</span><span class="token punctuation">:</span> f1 is undefined    <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>        <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'The variable is defined, but there is no value'</span>      <span class="token key atrule">when</span><span class="token punctuation">:</span> h2 is none<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断执行结果的tests"><a href="#判断执行结果的tests" class="headerlink" title="判断执行结果的tests"></a>判断执行结果的tests</h2><ul><li>*<em>success 或 succeeded: *</em>通过任务的返回信息判断任务的执行状态，任务执行成功则返回真</li><li><strong>failure 或 failed:</strong> 通过任务的返回信息判断任务的执行状态，任务执行失败则返回真</li><li><strong>change 或 changed:</strong> 通过任务的返回信息判断任务的执行状态，任务执行状态为changed则返回真</li><li><strong>skip 或 skipped:</strong> 通过任务的返回信息判断任务的执行状态，当任务没有满足条件而被跳过执行时，则返回真</li></ul><p>使用shell模块执行一条命令，并且使用register将返回值存进returnmsg变量，如果命令执行报错就跳过继续往下执行，下面再判断这个变量的执行结果</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"ls /etc/hosts"</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> returnmsg    <span class="token key atrule">ignore_errors</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"success"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> returnmsg is success  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"failed"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> returnmsg is failure  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"changed"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> returnmsg is changed  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"skip"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> <span class="token string">"returnmsg is skip"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断路径的tests"><a href="#判断路径的tests" class="headerlink" title="判断路径的tests"></a>判断路径的tests</h2><ul><li><strong>file:</strong> 判断路径是否是一个文件，如果是则返回真</li><li><strong>directory:</strong> 判断路径是否是一个目录，如果是则返回真</li><li><strong>link:</strong> 判断路径是否是一个软链接，如果是则返回真</li><li><strong>mount:</strong> 判断路径是否是一个挂载点，如果是则返回真</li><li><strong>exists:</strong> 判断路径是否存在，如果存在则返回真</li></ul><h2 id="判断字符串的tests"><a href="#判断字符串的tests" class="headerlink" title="判断字符串的tests"></a>判断字符串的tests</h2><ul><li><strong>lower:</strong> 判断包含字母的字符串中的字母是否是纯小写，如果是则返回真</li><li><strong>upper:</strong> 判断包含字母的字符串中的字母是否是纯大写，如果是则返回真</li></ul><h2 id="判断整除的tests"><a href="#判断整除的tests" class="headerlink" title="判断整除的tests"></a>判断整除的tests</h2><ul><li><strong>even:</strong> 判断数值是否是偶数，如果是则返回真</li><li><strong>odd:</strong> 判断数值是否是奇数，如果是则返回真</li><li><strong>divisibleby(num):</strong> 判断是否可以整除指定的数值，如果可以整除则返回真</li></ul><h1 id="条件判断与block"><a href="#条件判断与block" class="headerlink" title="条件判断与block"></a>条件判断与block</h1><p>想要在条件成立时，执行多个任务，我们不需要在每个任务中都加入判断条件，我们可以使用block关键字将多个任务整合成一个块</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"ls /loo"</span>    <span class="token key atrule">ignore_errors</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token punctuation">-</span> <span class="token key atrule">block</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这个block块有两个任务</span>      <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>           <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"run command failed"</span>      <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/oo"</span>          <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">when</span><span class="token punctuation">:</span> 2 <span class="token punctuation">></span> 1        <span class="token comment" spellcheck="true"># 条件成立就执行block块的任务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="block与rescue的错误处理"><a href="#block与rescue的错误处理" class="headerlink" title="block与rescue的错误处理"></a>block与rescue的错误处理</h2><p>我们在处理某些复杂的任务时，需要使用到错误处理的判断，使我们的playbook更加灵活。例如我需要执行多个任务，这多个任务中只要有一个执行失败，就会触发错误处理，执行我们提前定义好的救援任务进行补救</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">block</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"ls /123"</span>      <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"tcodmf"</span>      <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/loo"</span>          <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">rescue</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"error"</span>    <span class="token comment" spellcheck="true"># 只要block块里面的三个任务有一个执行失败就会执行rescue定义好的任务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="block和always的错误处理"><a href="#block和always的错误处理" class="headerlink" title="block和always的错误处理"></a>block和always的错误处理</h2><p>如果block中的任务执行出错，那么就会执行rescue中的任务，如果block中的任务执行没有出错，那么rescue中的任务就不会执行，但是always中的任务是无论如何都会执行的，不管block中的内容是否出错</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">block</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"echo 123"</span>      <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> cat /etc/hosts <span class="token punctuation">|</span> wc <span class="token punctuation">-</span>l        <span class="token comment" spellcheck="true"># command模块不能执行带特殊字符的命令，第一次出错</span>      <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"echo 456"</span>    <span class="token key atrule">rescue</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"echo error1"</span>      <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span> cat /etc/hosts <span class="token punctuation">|</span> wc <span class="token punctuation">-</span>l        <span class="token comment" spellcheck="true"># command模块不能执行带特殊字符的命令，第二次出错</span>    <span class="token key atrule">always</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"echo error2"</span>    <span class="token comment" spellcheck="true"># 最后执行always</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="条件判断与错误处理"><a href="#条件判断与错误处理" class="headerlink" title="条件判断与错误处理"></a>条件判断与错误处理</h1><p>我们有时候需要在判断条件成立时，执行退出的指令，使playbook中断执行，这里我们需要使用到fail模块。我们知道，在执行playbook时，如果playbook中的任意一个任务执行失败，playbook都会终止执行，而fail模块就是天生用来执行失败的模块。只要playbook中执行fail模块，playbook就会认为有任务执行失败了。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"123"</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"456"</span>  <span class="token punctuation">-</span> <span class="token key atrule">fail</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 执行fail模块中断playbook执行,后面的任务不再执行</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用fail模块终止playbook，默认打印”Failed as requested from task”的错误提示，这个我们可以自定义fail模块的错误提示</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"123"</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"456"</span>  <span class="token punctuation">-</span> <span class="token key atrule">fail</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"stop operation playbook"</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="利用条件判断去控制fail模块的执行"><a href="#利用条件判断去控制fail模块的执行" class="headerlink" title="利用条件判断去控制fail模块的执行"></a>利用条件判断去控制fail模块的执行</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"echo 'This is a string for testing--error'"</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> return_value    <span class="token comment" spellcheck="true"># 取到shell模块执行的返回值</span>  <span class="token punctuation">-</span> <span class="token key atrule">fail</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"stop operation playbook"</span>    <span class="token key atrule">when</span><span class="token punctuation">:</span> <span class="token string">"'error' in return_value.stdout"</span>    <span class="token comment" spellcheck="true"># 判断字符串是否存在于return_value.stdout这个输出信息</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"playbook has stopped"</span>    <span class="token comment" spellcheck="true"># 由于fail模块执行而中断playbook,这个将不会执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="failed-when关键字"><a href="#failed-when关键字" class="headerlink" title="failed_when关键字"></a>failed_when关键字</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"123456"</span>  <span class="token punctuation">-</span> <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"echo 'This is a string for testing--error'"</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> return_value    <span class="token key atrule">failed_when</span><span class="token punctuation">:</span> <span class="token string">'"error" in return_value.stdout'</span>    <span class="token comment" spellcheck="true"># 如果条件成立,那么failed_when就会提示所对应的shell模块执行失败</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"654321"</span>        <span class="token comment" spellcheck="true"># 不会被打印</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="failed-changed关键字"><a href="#failed-changed关键字" class="headerlink" title="failed_changed关键字"></a>failed_changed关键字</h2><p>正常情况下，debug模块正常执行的情况下只能是”ok”状态，我们可以使用failed_changed关键字改变执行后的状态定义为changed</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"test message"</span>    <span class="token key atrule">changed_when</span><span class="token punctuation">:</span> 2 <span class="token punctuation">></span> 1<span class="token key atrule">changed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"test message"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的循环(11)</title>
    <link href="https://www.missf.top/post/167e62f3.html"/>
    <id>https://www.missf.top/post/167e62f3.html</id>
    <published>2020-06-01T02:47:20.000Z</published>
    <updated>2020-06-20T06:42:47.646Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的循环"><a href="#ansible的循环" class="headerlink" title="ansible的循环"></a>ansible的循环</h1><p>我们在编写playbook的时候，不可避免的要执行一些重复性操作，比如指定安装软件包，批量创建用户，操作某个目录下的所有文件等。ansible一门简单的自动化语言，所以流程控制、循环语句这些编程语言的基本元素它同样都具备。 Ansible提供了两个用于创建循环的关键字: loop和with_&lt;lookup&gt;，ansible 2.5中添加了loop，但它还不是with_&lt;lookup&gt;的完全替代品。在官方推荐使用loop，但我们现在还可以在大多数用例中使用with_&lt;lookup&gt;，但是随着loop语法的不断改进，with_&lt;lookup&gt;以后可能会失效。</p><h1 id="标准循环"><a href="#标准循环" class="headerlink" title="标准循环"></a>标准循环</h1><p>使用with_items关键字创建一个循环的列表，with_items会把列表的每一条信息，单独放到item变量里面，然后循环打印每次item变量的值</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 方式1</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ item }}"</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token number">1</span>    <span class="token punctuation">-</span> <span class="token number">2</span>    <span class="token punctuation">-</span> <span class="token number">3</span><span class="token comment" spellcheck="true"># 方式2</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span> msg=<span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 方式3</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">list</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> a    <span class="token punctuation">-</span> b    <span class="token punctuation">-</span> c  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span> msg=<span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span> <span class="token string">'{{ list }}'</span><span class="token comment" spellcheck="true"># 方式4</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">list</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span> msg=<span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span> <span class="token string">'{{ list }}'</span><span class="token comment" spellcheck="true"># 添加多个用户</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> add server users  <span class="token key atrule">user</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"{{ item }}"</span>    <span class="token key atrule">state</span><span class="token punctuation">:</span> present    <span class="token key atrule">groups</span><span class="token punctuation">:</span> server  <span class="token key atrule">with_items</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> server1    <span class="token punctuation">-</span> server2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="定义稍微复杂的列表"><a href="#定义稍微复杂的列表" class="headerlink" title="定义稍微复杂的列表"></a>定义稍微复杂的列表</h1><p>自定义列表中的每一个键值对都是一个对象，我们可以通过对象的属性对应的”键”，获取到对应的”值”，执行下面的playbook之后，mm和nn都会被输出</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ item.name }}"</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">{</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mm<span class="token punctuation">,</span> <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span>    <span class="token punctuation">-</span> <span class="token punctuation">{</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nn<span class="token punctuation">,</span> <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">}</span>ansible<span class="token punctuation">-</span>playbook item.yaml    <span class="token comment" spellcheck="true"># 执行playbook</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">{</span><span class="token key atrule">u'age'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token key atrule">u'name'</span><span class="token punctuation">:</span> u'mm'<span class="token punctuation">}</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"mm"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">{</span><span class="token key atrule">u'age'</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token key atrule">u'name'</span><span class="token punctuation">:</span> u'nn'<span class="token punctuation">}</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"nn"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="利用循环创建多个文件"><a href="#利用循环创建多个文件" class="headerlink" title="利用循环创建多个文件"></a>利用循环创建多个文件</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 没学习循环之前可能这样创建多个文件</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">gather_facts</span><span class="token punctuation">:</span> no  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">'/opt/a'</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">'/opt/b'</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">'/opt/c'</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">'/opt/d'</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch<span class="token comment" spellcheck="true"># 使用循环的方式</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">gather_facts</span><span class="token punctuation">:</span> no  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">dirs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'/opt/a'</span>    <span class="token punctuation">-</span> <span class="token string">'/opt/b'</span>    <span class="token punctuation">-</span> <span class="token string">'/opt/c'</span>    <span class="token punctuation">-</span> <span class="token string">'/opt/d'</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">with_items</span><span class="token punctuation">:</span> <span class="token string">'{{ dirs }}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="利用循环多次调用模块"><a href="#利用循环多次调用模块" class="headerlink" title="利用循环多次调用模块"></a>利用循环多次调用模块</h1><p>不使用循环的情况下调用模块，返回的信息是这样的</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">'ls /etc'</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> returnvalue  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">var</span><span class="token punctuation">:</span> returnvalueansible<span class="token punctuation">-</span>playbook item.yaml<span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"returnvalue"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token key atrule">"changed"</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>         <span class="token key atrule">"cmd"</span><span class="token punctuation">:</span> <span class="token string">"ls /etc"</span><span class="token punctuation">,</span>         <span class="token key atrule">"delta"</span><span class="token punctuation">:</span> <span class="token string">"0:00:00.025062"</span><span class="token punctuation">,</span>         <span class="token key atrule">"end"</span><span class="token punctuation">:</span> <span class="token string">"2020-06-02 01:06:34.741709"</span><span class="token punctuation">,</span>         <span class="token key atrule">"failed"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>         <span class="token key atrule">"rc"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>         <span class="token key atrule">"start"</span><span class="token punctuation">:</span> <span class="token string">"2020-06-02 01:06:34.716647"</span><span class="token punctuation">,</span>         <span class="token key atrule">"stderr"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token key atrule">"stderr_lines"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>这里省略<span class="token punctuation">...</span><span class="token punctuation">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用循环重复调用了shell模块两次，分别执行了两条命令，然后将shell模块的返回值存放到了returnvalue变量中，最后使用debug模块输出了returnvalue变量的值。当使用了循环之后，每次shell模块执行后的返回值都会放入一个名为results的序列中，其实，results也是一个返回值，当模块中使用了循环时，模块每次执行的返回值都会追加存放到results这个返回值中，所以，我们可以通过results关键字获取到每次模块执行后的返回值</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'ls /etc'</span>    <span class="token punctuation">-</span> <span class="token string">'ls /var'</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> returnvalue  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">var</span><span class="token punctuation">:</span> returnvalueansible<span class="token punctuation">-</span>playbook item.yaml<span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"returnvalue"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token key atrule">"changed"</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>         <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"All items completed"</span><span class="token punctuation">,</span>         <span class="token key atrule">"results"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                <span class="token key atrule">"ansible_loop_var"</span><span class="token punctuation">:</span> <span class="token string">"item"</span><span class="token punctuation">,</span>                 <span class="token key atrule">"changed"</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>                 <span class="token key atrule">"cmd"</span><span class="token punctuation">:</span> <span class="token string">"ls /etc"</span><span class="token punctuation">,</span>                 <span class="token key atrule">"delta"</span><span class="token punctuation">:</span> <span class="token string">"0:00:00.026532"</span><span class="token punctuation">,</span>                 <span class="token key atrule">"end"</span><span class="token punctuation">:</span> <span class="token string">"2020-06-02 01:08:22.264277"</span><span class="token punctuation">,</span>                 <span class="token key atrule">"failed"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>                 <span class="token key atrule">"invocation"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> 这里省略<span class="token punctuation">...</span><span class="token punctuation">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先使用循环重复的调用了shell模块，然后将shell模块每次执行后的返回值注册到了变量returnvalue中，之后，在使用debug模块时，通过返回值results获取到了之前每次执行shell模块的返回值(shell每次执行后的返回值已经被放入到item变量中)，最后又通过返回值stdout获取到了每次shell模块执行后的标准输出</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'ls /etc'</span>    <span class="token punctuation">-</span> <span class="token string">'ls /var'</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> returnvalue  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'{{ item.stdout }}'</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span> <span class="token string">'{{ returnvalue.results}}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="打印序列中的序列"><a href="#打印序列中的序列" class="headerlink" title="打印序列中的序列"></a>打印序列中的序列</h1><p>with_items块序列下面有一个自定义列表[1,2,3]，执行playbook会循环打印[1,2,3]列表里的每一个值</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ item }}"</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=1) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=2) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=3) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>with_items块序列下面有两个自定义列表，执行playbook还是会循环打印两个列表里的每一个值</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ item }}"</span>    <span class="token key atrule">with_items</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=1) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=2) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=3) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=4) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=5) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=6) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当with_items块序列下面有两个自定义的列表时，我们如何让debug模块将每个小列表作为一个小整体输出，而不应该输出小列表中的每个元素呢？我们可以使用with_list关键字，替换上例playbook中的with_items关键字。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ item }}"</span>    <span class="token key atrule">with_list</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># with_list块序列只会循环最外层的每一项,而with_items则是循环处理每一个元素</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token number">2</span><span class="token punctuation">,</span>         <span class="token number">3</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token number">4</span><span class="token punctuation">,</span>         <span class="token number">5</span><span class="token punctuation">,</span>         <span class="token number">6</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="元素对齐合并"><a href="#元素对齐合并" class="headerlink" title="元素对齐合并"></a>元素对齐合并</h1><p>with_together可以将两个列表中的元素对齐合并，如果两个列表元素不一致，缺少的元素值为null</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>    <span class="token key atrule">with_together</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token punctuation">-</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> u'a'<span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token string">"a"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> u'b'<span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token number">2</span><span class="token punctuation">,</span>         <span class="token string">"b"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> u'c'<span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token number">3</span><span class="token punctuation">,</span>         <span class="token string">"c"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="元素两两组合"><a href="#元素两两组合" class="headerlink" title="元素两两组合"></a>元素两两组合</h1><p><strong>需求:</strong> 我们需要创建三个目录，这三个目录下面都有相同的子目录，我们使用ansible-playbook的方式去循环创建，需要用到with_cartesian这个关键字</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 需要创建的目录结构如下:</span>dir1/sofm    dir1/bindir2/sofm    dir2/bindir3/sofm    dir3/bin<span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">'/{{ item[0] }}/{{ item[1] }}'</span>    <span class="token key atrule">with_cartesian</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">[</span>dir1<span class="token punctuation">,</span>dir2<span class="token punctuation">,</span>dir3<span class="token punctuation">]</span>    <span class="token punctuation">-</span> <span class="token punctuation">[</span>sofm<span class="token punctuation">,</span>bin<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行playbook会将两个列表的元素两两组合，使用item[0]和item[1]来获取每一次循环的值</p><pre class="line-numbers language-shell"><code class="language-shell">PLAY [dbserver] ******************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]TASK [file] **********************************************************************************************************************changed: [dbserver] => (item=[u'dir1', u'sofm'])changed: [dbserver] => (item=[u'dir1', u'bin'])changed: [dbserver] => (item=[u'dir2', u'sofm'])changed: [dbserver] => (item=[u'dir2', u'bin'])changed: [dbserver] => (item=[u'dir3', u'sofm'])changed: [dbserver] => (item=[u'dir3', u'bin'])PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="列表元素添加索引编号"><a href="#列表元素添加索引编号" class="headerlink" title="列表元素添加索引编号"></a>列表元素添加索引编号</h1><p>使用with_indexed_items关键字可以为列表的每一个元素添加索引编号，索引编号从0开始，我们可以在出来列表每一项元素的时候获取到索引编号</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'index is {{ item[0] }},value is {{ item[1] }}'</span>    <span class="token key atrule">with_indexed_items</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> index1    <span class="token punctuation">-</span> index2    <span class="token punctuation">-</span> index3<span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> u'index1'<span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"index is 0,value is index1"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> u'index2'<span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"index is 1,value is index2"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> u'index3'<span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"index is 2,value is index3"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="生成数字序列"><a href="#生成数字序列" class="headerlink" title="生成数字序列"></a>生成数字序列</h1><p>假如需要在管理节点创建dir2,dir4,dir6这样的目录，我们该如何使用循环去创建呢，这里就需要使用到with_sequence这个关键字去生成数字序列。debug模块被调用了4次，从2开始，到8结束，每一次增加2(步长)，看到这是不是有了Python的感觉呢？</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>    <span class="token key atrule">with_sequence</span><span class="token punctuation">:</span>      start=2      end=8      stride=2<span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=2) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=4) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=6) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"6"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=8) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"8"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建dir2,dir4,dir6这样不连续的目录</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /dir<span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">with_sequence</span><span class="token punctuation">:</span>      start=2      end=6      stride=2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出更简单的连续序列"><a href="#输出更简单的连续序列" class="headerlink" title="输出更简单的连续序列"></a>输出更简单的连续序列</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>    <span class="token key atrule">with_sequence</span><span class="token punctuation">:</span>      count=5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> 当我们不指定start的值时，start的值默认为1，但是当end的值小于start时则必须指定stride，而且stride的值必须是负数</p><h1 id="返回一个随机值"><a href="#返回一个随机值" class="headerlink" title="返回一个随机值"></a>返回一个随机值</h1><p>使用with_random_choice这个关键字可以让我们从一个列表的多个值中随机返回一个值</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>    <span class="token key atrule">with_random_choice</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> qwe    <span class="token punctuation">-</span> rtd    <span class="token punctuation">-</span> fdv    <span class="token punctuation">-</span> oki<span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=oki) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"oki"</span>    <span class="token comment" spellcheck="true"># 随机返回列表中的一个值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="使用循环去操作字典"><a href="#使用循环去操作字典" class="headerlink" title="使用循环去操作字典"></a>使用循环去操作字典</h1><p>这里我们学习一个叫with_dict的字典关键字，下面来看看字典的使用场景。</p><p>定义一个users变量，users有两个用户，我们使用with_dict关键字处理这个字典格式的变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">users</span><span class="token punctuation">:</span>          <span class="token key atrule">alix</span><span class="token punctuation">:</span> feom      <span class="token key atrule">boo</span><span class="token punctuation">:</span> mair  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>    <span class="token key atrule">with_dict</span><span class="token punctuation">:</span> <span class="token string">'{{ users }}'</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">{</span><span class="token key atrule">'value'</span><span class="token punctuation">:</span> u'feom'<span class="token punctuation">,</span> <span class="token key atrule">'key'</span><span class="token punctuation">:</span> u'alix'<span class="token punctuation">}</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token key atrule">"key"</span><span class="token punctuation">:</span> <span class="token string">"alix"</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># users变量经过with_dict处理之后，键值对分别被放入key和value关键字中</span>        <span class="token key atrule">"value"</span><span class="token punctuation">:</span> <span class="token string">"feom"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">{</span><span class="token key atrule">'value'</span><span class="token punctuation">:</span> u'mair'<span class="token punctuation">,</span> <span class="token key atrule">'key'</span><span class="token punctuation">:</span> u'boo'<span class="token punctuation">}</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token key atrule">"key"</span><span class="token punctuation">:</span> <span class="token string">"boo"</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 我们可以通过key关键字和value关键字分别获取到字典中键值对的键和值</span>        <span class="token key atrule">"value"</span><span class="token punctuation">:</span> <span class="token string">"mair"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字典定义和取值"><a href="#字典定义和取值" class="headerlink" title="字典定义和取值"></a>字典定义和取值</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">users</span><span class="token punctuation">:</span>      <span class="token key atrule">alix</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> feom        <span class="token key atrule">gender</span><span class="token punctuation">:</span> female        <span class="token key atrule">phone</span><span class="token punctuation">:</span> <span class="token number">155464615</span>      <span class="token key atrule">boo</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> mair        <span class="token key atrule">gender</span><span class="token punctuation">:</span> male        <span class="token key atrule">phone</span><span class="token punctuation">:</span> <span class="token number">179444684</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'{{ item }} alix phone is {{ item.value.phone }}'</span>    <span class="token comment" spellcheck="true"># 使用item.value.phone的方法取某一项的值</span>    <span class="token key atrule">with_dict</span><span class="token punctuation">:</span> <span class="token string">'{{ users }}'</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">{</span><span class="token key atrule">'value'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">u'gender'</span><span class="token punctuation">:</span> u'female'<span class="token punctuation">,</span> <span class="token key atrule">u'name'</span><span class="token punctuation">:</span> u'feom'<span class="token punctuation">,</span> <span class="token key atrule">u'phone'</span><span class="token punctuation">:</span> <span class="token number">155464615</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token key atrule">'key'</span><span class="token punctuation">:</span> u'alix'<span class="token punctuation">}</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> "<span class="token punctuation">{</span><span class="token key atrule">'key'</span><span class="token punctuation">:</span> u'alix'<span class="token punctuation">,</span> <span class="token key atrule">'value'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">u'gender'</span><span class="token punctuation">:</span> u'female'<span class="token punctuation">,</span> <span class="token key atrule">u'name'</span><span class="token punctuation">:</span> u'feom'<span class="token punctuation">,</span> <span class="token key atrule">u'phone'</span><span class="token punctuation">:</span> <span class="token number">155464615</span><span class="token punctuation">}</span><span class="token punctuation">}</span> alix phone \\n is 155464615"<span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">{</span><span class="token key atrule">'value'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">u'gender'</span><span class="token punctuation">:</span> u'male'<span class="token punctuation">,</span> <span class="token key atrule">u'name'</span><span class="token punctuation">:</span> u'mair'<span class="token punctuation">,</span> <span class="token key atrule">u'phone'</span><span class="token punctuation">:</span> <span class="token number">179444684</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token key atrule">'key'</span><span class="token punctuation">:</span> u'boo'<span class="token punctuation">}</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> "<span class="token punctuation">{</span><span class="token key atrule">'key'</span><span class="token punctuation">:</span> u'boo'<span class="token punctuation">,</span> <span class="token key atrule">'value'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">u'gender'</span><span class="token punctuation">:</span> u'male'<span class="token punctuation">,</span> <span class="token key atrule">u'name'</span><span class="token punctuation">:</span> u'mair'<span class="token punctuation">,</span> <span class="token key atrule">u'phone'</span><span class="token punctuation">:</span> <span class="token number">179444684</span><span class="token punctuation">}</span><span class="token punctuation">}</span> alix phone \\n is 179444684"<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="遍历每一项子元素"><a href="#遍历每一项子元素" class="headerlink" title="遍历每一项子元素"></a>遍历每一项子元素</h1><p>users变量列表中有两个块序列，这两个块序列分别代表两个用户，bob和alice，变量users经过with_subelements处理时还指定一个hobby属性，hobby属性正是users变量中每个用户的子属性</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">users</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> bob      <span class="token key atrule">gender</span><span class="token punctuation">:</span> male      <span class="token key atrule">hobby</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> skateboard        <span class="token punctuation">-</span> videogame    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> alice      <span class="token key atrule">gender</span><span class="token punctuation">:</span> female      <span class="token key atrule">hobby</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> music    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> qwe      <span class="token key atrule">hobby</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> da  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ item }}"</span>    <span class="token key atrule">with_subelements</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"{{ users }}"</span>    <span class="token punctuation">-</span> hobby<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的playbook执行后得到如下结果，我们在使用with_subelements处理变量users时指定了hobby属性，hobby属性中的每一个子元素都被当做一个整体，而其他的子元素作为另一个整体，组成了键值对</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token key atrule">u'gender'</span><span class="token punctuation">:</span> u'male'<span class="token punctuation">,</span> <span class="token key atrule">u'name'</span><span class="token punctuation">:</span> u'bob'<span class="token punctuation">}</span><span class="token punctuation">,</span> u'skateboard'<span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token key atrule">"gender"</span><span class="token punctuation">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>             <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"bob"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token string">"skateboard"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token key atrule">u'gender'</span><span class="token punctuation">:</span> u'male'<span class="token punctuation">,</span> <span class="token key atrule">u'name'</span><span class="token punctuation">:</span> u'bob'<span class="token punctuation">}</span><span class="token punctuation">,</span> u'videogame'<span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token key atrule">"gender"</span><span class="token punctuation">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>             <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"bob"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token string">"videogame"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token key atrule">u'gender'</span><span class="token punctuation">:</span> u'female'<span class="token punctuation">,</span> <span class="token key atrule">u'name'</span><span class="token punctuation">:</span> u'alice'<span class="token punctuation">}</span><span class="token punctuation">,</span> u'music'<span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token key atrule">"gender"</span><span class="token punctuation">:</span> <span class="token string">"female"</span><span class="token punctuation">,</span>             <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"alice"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token string">"music"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token key atrule">u'name'</span><span class="token punctuation">:</span> u'qwe'<span class="token punctuation">}</span><span class="token punctuation">,</span> u'da'<span class="token punctuation">]</span>) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"qwe"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token string">"da"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="获取控制节点的文件内容"><a href="#获取控制节点的文件内容" class="headerlink" title="获取控制节点的文件内容"></a>获取控制节点的文件内容</h1><p>我想要获取控制节点上的几个文件的内容，那么可以使用with_file关键字，循环获取到文件的内容，这里hosts指定的是dbserver这个管理节点，但是无论管理节点写的是什么都不影响，因为我们读取的是管理节点的文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>    <span class="token key atrule">with_file</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /etc/passwd    <span class="token punctuation">-</span> /etc/hosts<span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=root<span class="token punctuation">:</span>x<span class="token punctuation">:</span>0<span class="token punctuation">:</span>0<span class="token punctuation">:</span>root<span class="token punctuation">:</span>/root<span class="token punctuation">:</span>/bin/bashbin<span class="token punctuation">:</span>x<span class="token punctuation">:</span>1<span class="token punctuation">:</span>1<span class="token punctuation">:</span>bin<span class="token punctuation">:</span>/bin<span class="token punctuation">:</span>/sbin/nologindaemon<span class="token punctuation">:</span>x<span class="token punctuation">:</span>2<span class="token punctuation">:</span>2<span class="token punctuation">:</span>daemon<span class="token punctuation">:</span>/sbin<span class="token punctuation">:</span>/sbin/nologinadm<span class="token punctuation">:</span>x<span class="token punctuation">:</span>3<span class="token punctuation">:</span>4<span class="token punctuation">:</span>adm<span class="token punctuation">:</span>/var/adm<span class="token punctuation">:</span>/sbin/nologinlp<span class="token punctuation">:</span>x<span class="token punctuation">:</span>4<span class="token punctuation">:</span>7<span class="token punctuation">:</span>lp<span class="token punctuation">:</span>/var/spool/lpd<span class="token punctuation">:</span>/sbin/nologinsync<span class="token punctuation">:</span>x<span class="token punctuation">:</span>5<span class="token punctuation">:</span>0<span class="token punctuation">:</span>sync<span class="token punctuation">:</span>/sbin<span class="token punctuation">:</span>/bin/syncshutdown<span class="token punctuation">:</span>x<span class="token punctuation">:</span>6<span class="token punctuation">:</span>0<span class="token punctuation">:</span>shutdown<span class="token punctuation">:</span>/sbin<span class="token punctuation">:</span>/sbin/shutdownhalt<span class="token punctuation">:</span>x<span class="token punctuation">:</span>7<span class="token punctuation">:</span>0<span class="token punctuation">:</span>halt<span class="token punctuation">:</span>/sbin<span class="token punctuation">:</span>/sbin/haltmail<span class="token punctuation">:</span>x<span class="token punctuation">:</span>8<span class="token punctuation">:</span>12<span class="token punctuation">:</span>mail<span class="token punctuation">:</span>/var/spool/mail<span class="token punctuation">:</span>/sbin/nologinoperator<span class="token punctuation">:</span>x<span class="token punctuation">:</span>11<span class="token punctuation">:</span>0<span class="token punctuation">:</span>operator<span class="token punctuation">:</span>/root<span class="token punctuation">:</span>/sbin/nologingames<span class="token punctuation">:</span>x<span class="token punctuation">:</span>12<span class="token punctuation">:</span>100<span class="token punctuation">:</span>games<span class="token punctuation">:</span>/usr/games<span class="token punctuation">:</span>/sbin/nologinftp<span class="token punctuation">:</span>x<span class="token punctuation">:</span>14<span class="token punctuation">:</span>50<span class="token punctuation">:</span>FTP User<span class="token punctuation">:</span>/var/ftp<span class="token punctuation">:</span>/sbin/nologinnobody<span class="token punctuation">:</span>x<span class="token punctuation">:</span>99<span class="token punctuation">:</span>99<span class="token punctuation">:</span>Nobody<span class="token punctuation">:</span>/<span class="token punctuation">:</span>/sbin/nologinsystemd<span class="token punctuation">-</span>network<span class="token punctuation">:</span>x<span class="token punctuation">:</span>192<span class="token punctuation">:</span>192<span class="token punctuation">:</span>systemd Network Management<span class="token punctuation">:</span>/<span class="token punctuation">:</span>/sbin/nologindbus<span class="token punctuation">:</span>x<span class="token punctuation">:</span>81<span class="token punctuation">:</span>81<span class="token punctuation">:</span>System message bus<span class="token punctuation">:</span>/<span class="token punctuation">:</span>/sbin/nologinpolkitd<span class="token punctuation">:</span>x<span class="token punctuation">:</span>999<span class="token punctuation">:</span>998<span class="token punctuation">:</span>User for polkitd<span class="token punctuation">:</span>/<span class="token punctuation">:</span>/sbin/nologinsshd<span class="token punctuation">:</span>x<span class="token punctuation">:</span>74<span class="token punctuation">:</span>74<span class="token punctuation">:</span>Privilege<span class="token punctuation">-</span>separated SSH<span class="token punctuation">:</span>/var/empty/sshd<span class="token punctuation">:</span>/sbin/nologinpostfix<span class="token punctuation">:</span>x<span class="token punctuation">:</span>89<span class="token punctuation">:</span>89<span class="token punctuation">:</span><span class="token punctuation">:</span>/var/spool/postfix<span class="token punctuation">:</span>/sbin/nologinntp<span class="token punctuation">:</span>x<span class="token punctuation">:</span>38<span class="token punctuation">:</span>38<span class="token punctuation">:</span><span class="token punctuation">:</span>/etc/ntp<span class="token punctuation">:</span>/sbin/nologin) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"root:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\nsync:x:5:0:sync:/sbin:/bin/sync\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\nhalt:x:7:0:halt:/sbin:/sbin/halt\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\noperator:x:11:0:operator:/root:/sbin/nologin\ngames:x:12:100:games:/usr/games:/sbin/nologin\nftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\nnobody:x:99:99:Nobody:/:/sbin/nologin\nsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologin\ndbus:x:81:81:System message bus:/:/sbin/nologin\npolkitd:x:999:998:User for polkitd:/:/sbin/nologin\nsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\nntp:x:38:38::/etc/ntp:/sbin/nologin"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4<span class="token punctuation">:</span><span class="token punctuation">:</span>1         localhost localhost.localdomain localhost6 localhost6.localdomain6) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="匹配控制节点的文件"><a href="#匹配控制节点的文件" class="headerlink" title="匹配控制节点的文件"></a>匹配控制节点的文件</h1><p>我们可以通过通配符去匹配控制节点上的文件，这里需要使用到with_fileglob这个关键字。注意with_fileglob只能是匹配到文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">'{{ item }}'</span>    <span class="token key atrule">with_fileglob</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /etc/*    <span class="token punctuation">-</span> /tmp/*        <span class="token comment" spellcheck="true"># 这里写成/dir/的话是匹配不到文件的，需要使用*通配符</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=/etc/fstab) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"/etc/fstab"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=/etc/crypttab) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"/etc/crypttab"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=/etc/mtab) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"/etc/mtab"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=/etc/resolv.conf) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"/etc/resolv.conf"</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=/etc/magic) =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"/etc/magic"</span><span class="token punctuation">}</span><span class="token punctuation">...</span><span class="token punctuation">...</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ansible的loop循环"><a href="#ansible的loop循环" class="headerlink" title="ansible的loop循环"></a>ansible的loop循环</h1><p>在2.5版本之前的ansible中，大多数人习惯使用”with_X”风格的关键字操作循环，从2.6版本开始，官方开始推荐使用”loop”关键字代替”with_X”风格的关键字。现在就来聊聊这种新的方式，以便能够更好的从老版本的使用习惯过渡过来。</p><h2 id="loop标准循环"><a href="#loop标准循环" class="headerlink" title="loop标准循环"></a>loop标准循环</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ item }}"</span>    <span class="token key atrule">loop</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> abc      <span class="token punctuation">-</span> cde<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="loop循环安装软件"><a href="#loop循环安装软件" class="headerlink" title="loop循环安装软件"></a>loop循环安装软件</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install packages      <span class="token key atrule">yum</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"{{ item }}"</span>        <span class="token key atrule">state</span><span class="token punctuation">:</span> latest      <span class="token key atrule">loop</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> rsync        <span class="token punctuation">-</span> sl        <span class="token punctuation">-</span> psmisc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="loop批量创建用户"><a href="#loop批量创建用户" class="headerlink" title="loop批量创建用户"></a>loop批量创建用户</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"add user"</span>      <span class="token key atrule">user</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"{{ item.name }}"</span>        <span class="token key atrule">state</span><span class="token punctuation">:</span> present        <span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token string">"{{ item.groups }}"</span>      <span class="token key atrule">loop</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token string">"root"</span><span class="token punctuation">}</span>        <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"cde"</span><span class="token punctuation">,</span><span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token string">"root"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的变量(10)</title>
    <link href="https://www.missf.top/post/4736d6b2.html"/>
    <id>https://www.missf.top/post/4736d6b2.html</id>
    <published>2020-05-28T02:13:41.000Z</published>
    <updated>2020-06-11T07:51:00.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的变量"><a href="#ansible的变量" class="headerlink" title="ansible的变量"></a>ansible的变量</h1><p>在ansible中使用变量，能让我们的工作变得更加灵活。</p><h2 id="变量定义规则"><a href="#变量定义规则" class="headerlink" title="变量定义规则"></a>变量定义规则</h2><ul><li><strong>变量名应该由字母、数字、下划线组成</strong></li><li><strong>变量名需要以字母开头</strong></li><li><strong>ansible内置的关键字不能作为变量名</strong></li></ul><h1 id="在playbook中使用变量"><a href="#在playbook中使用变量" class="headerlink" title="在playbook中使用变量"></a>在playbook中使用变量</h1><p>使用vars关键字定义名为package1值为nginx的变量，在task中使用进行调用</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">package1</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">yum</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"{{ package1 }}"</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> installed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用块序列化语法定义变量"><a href="#使用块序列化语法定义变量" class="headerlink" title="使用块序列化语法定义变量"></a>使用块序列化语法定义变量</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">vars</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">testvar1</span><span class="token punctuation">:</span> a1  <span class="token punctuation">-</span> <span class="token key atrule">testvar2</span><span class="token punctuation">:</span> b2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用属性的方式定义变量"><a href="#使用属性的方式定义变量" class="headerlink" title="使用属性的方式定义变量"></a>使用属性的方式定义变量</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义两个变量</span>      <span class="token key atrule">conf80</span><span class="token punctuation">:</span> /etc/nginx/conf.d/80.conf          <span class="token key atrule">conf8080</span><span class="token punctuation">:</span> /etc/nginx/conf.d/8080.conf  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"{{ nginx.conf80 }}"</span>    <span class="token comment" spellcheck="true"># 第一种调用方法</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"{{ nginx['conf8080']}}"</span>    <span class="token comment" spellcheck="true"># 第二种调用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> 如果引用变量时，变量处于开头的位置，那么变量必须要用双引号引起来，否则语法会报错</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"{{ nginx['conf8080']}}"</span>    <span class="token comment" spellcheck="true"># 引用这种变量处于开头位置的必须使用引号引起来</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /root/<span class="token punctuation">{</span><span class="token punctuation">{</span> nginx<span class="token punctuation">[</span><span class="token string">'conf8080'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 这样的不用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引入文件内的变量"><a href="#引入文件内的变量" class="headerlink" title="引入文件内的变量"></a>引入文件内的变量</h2><p>创建nginx_vars.yaml文件，直接在文件中以自己喜欢的方式定义变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">testvar1</span><span class="token punctuation">:</span> zxc<span class="token key atrule">testvar2</span><span class="token punctuation">:</span> qwe<span class="token punctuation">-</span> <span class="token key atrule">testvar3</span><span class="token punctuation">:</span> rty<span class="token punctuation">-</span> <span class="token key atrule">testvar4</span><span class="token punctuation">:</span> poi<span class="token key atrule">nginx</span><span class="token punctuation">:</span>  <span class="token key atrule">conf1</span><span class="token punctuation">:</span> /usr/local/nginx/conf/nginx1.conf  <span class="token key atrule">conf2</span><span class="token punctuation">:</span> /usr/local/nginx/conf/nginx2.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在playbook中以vars_files关键字引入文件中的变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># vars关键字和vars_files关键字可以同时使用</span>  <span class="token punctuation">-</span> /root/vars.yaml  <span class="token key atrule">vars_files</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> /playbook/nginx_vars.yaml  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"{{ nginx.conf80 }}"</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"{{ nginx['conf8080']}}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="变量与setup模块"><a href="#变量与setup模块" class="headerlink" title="变量与setup模块"></a>变量与setup模块</h1><p>前面我们说过在执行playbook的时候，默认都会运行一个名为<strong>Gathering Facts</strong>的任务，这个任务会收集管理节点的相关信息(例如管理节点的IP地址，主机名，系统版本，硬件配置等信息)，这些被收集到的信息都会保存在对应的变量中，我们想要使用这些信息时，可以获取对应的变量，从而使用这些信息。关于setup模块具体查看前面ansible模块学习。</p><h2 id="查看从管理节点收集到的所有相关信息"><a href="#查看从管理节点收集到的所有相关信息" class="headerlink" title="查看从管理节点收集到的所有相关信息"></a>查看从管理节点收集到的所有相关信息</h2><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m setup# 由于返回信息的比较多，这里不作示例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看管理节点的内存使用情况"><a href="#查看管理节点的内存使用情况" class="headerlink" title="查看管理节点的内存使用情况"></a>查看管理节点的内存使用情况</h2><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m setup -a 'filter=ansible_memory_mb'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="在管理节点创建自定义变量"><a href="#在管理节点创建自定义变量" class="headerlink" title="在管理节点创建自定义变量"></a>在管理节点创建自定义变量</h2><p>除了ansible默认收集的信息以外，我们还能够在管理节点写入一些自定义变量，这些自定义变量也是可以被setup模块收集到。</p><p>首先在管理节点创建自定义变量的文件hello.fact，此类文件必须以*.fact命名</p><pre class="line-numbers language-shell"><code class="language-shell"># 管理节点mkdir -p /etc/ansible/facts.dvim /etc/ansible/facts.d/hello.fact[info]name: mwjage: 24# 控制节点ansible dbserver -m setup -a "filter=ansible_local"        # 使用ansible_local关键字过滤信息得到管理节点的自定义变量10.10.110.122 | SUCCESS => {    "ansible_facts": {        "ansible_local": {            "hello": {                "info": {                    "age": "24",                     "name": "mwj"                }            }        },         "discovered_interpreter_python": "/usr/bin/python"    },     "changed": false}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> 管理节点上的hello.fact文件必须不是可执行文件，不然这个文件不会被成功读取，具体可查看ansible官方文档有详细说明。</p><p>在管理节点的/etc/ansible/facts.d/这个目录是使用ansible_local关键字过滤时的默认路径，如果想要自定义路径可以使用fact_path关键字定义</p><pre class="line-numbers language-shell"><code class="language-shell">ansible dbserver -m setup -a "fact_path=/tmp/facts.d/"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="变量与debug模块"><a href="#变量与debug模块" class="headerlink" title="变量与debug模块"></a>变量与debug模块</h1><p>debug模块是帮我们进行调试的，可以把对我们有用的信息输出到控制台上，以便能够定位问题。</p><h2 id="playbook中使用debug模块"><a href="#playbook中使用debug模块" class="headerlink" title="playbook中使用debug模块"></a>playbook中使用debug模块</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> touch file    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/debug.txt      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug demo    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> this is debug info<span class="token punctuation">,</span>File created successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行playbook模块查看信息"><a href="#运行playbook模块查看信息" class="headerlink" title="运行playbook模块查看信息"></a>运行playbook模块查看信息</h2><p>如下图所示，在touch文件之后会输出我们定义好的debug信息</p><pre class="line-numbers language-shell"><code class="language-shell">PLAY [all] ***********************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]ok: [webserver]TASK [touch file] ****************************************************************************************************************changed: [webserver]changed: [dbserver]TASK [debug demo] ****************************************************************************************************************ok: [webserver] => {    "msg": "this is debug info,File created successfully"}ok: [dbserver] => {    "msg": "this is debug info,File created successfully"}PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   webserver                  : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用debug模块输出变量信息"><a href="#使用debug模块输出变量信息" class="headerlink" title="使用debug模块输出变量信息"></a>使用debug模块输出变量信息</h2><p>debug模块除了能够使用msg参数输出自定义的信息，还能够使用var参数直接输出变量中的信息</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>     <span class="token key atrule">testvar</span><span class="token punctuation">:</span> this is a debug variable  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug demo    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">var</span><span class="token punctuation">:</span> testvar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用debug模块的msg参数一样可以打印变量信息</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug demo    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"Remote host memory information: {{ ansible_memory_mb }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-shell"><code class="language-shell">PLAY [all] ***********************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]ok: [webserver]TASK [debug demo] ****************************************************************************************************************ok: [webserver] => {    "msg": "Remote host memory information: {u'real': {u'total': 216, u'used': 213, u'free': 3}, u'swap': {u'cached': 0, u'total': 1023, u'free': 1022, u'used': 1}, u'nocache': {u'used': 163, u'free': 53}}"}ok: [dbserver] => {    "msg": "Remote host memory information: {u'real': {u'total': 216, u'used': 212, u'free': 4}, u'swap': {u'cached': 0, u'total': 1023, u'free': 1013, u'used': 10}, u'nocache': {u'used': 170, u'free': 46}}"}PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   webserver                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ansible_memory_mb其中其实包含了 “nocache”、”real”、 “swap”三个部分的信息，我们只想获得”real”部分的信息，在playbook中引用变量时可以使用如下示例:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"Remote host memory information: {{ ansible_memory_mb.real }}"</span><span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"Remote host memory information: {{ ansible_memory_mb['real'] }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="注册变量"><a href="#注册变量" class="headerlink" title="注册变量"></a>注册变量</h1><p>ansible的模块运行之后都会返回一些<strong>返回值</strong>，只是默认情况下，这些<strong>返回值</strong>并不会显示而已，我们可以把这些返回值写入到某个变量中，这样我们就能够通过引用对应的变量从而获取到这些返回值了，这种将模块的返回值写入到变量中的方法被称为<strong>注册变量</strong>。</p><p>下面这个playbook有两个任务，第一个任务使用shell模块执行了一条命令，然后在这个任务下使用register注册了一个testvar的变量，第二个任务是使用debug模块的var参数打印这个变量，最后输出shell模块的返回值。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test shell    <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"echo test > /tmp/test"</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> testvar  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> shell module return values    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">var</span><span class="token punctuation">:</span> testvar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>playbook执行的结果如下图，返回的是一个json格式的数据，我们还可以使用<strong>&lt;!–￼11–&gt;</strong>或者<strong>&lt;!–￼12–&gt;</strong>指定key来获取某一项特定的值</p><pre class="line-numbers language-shell"><code class="language-shell">PLAY [dbserver] ******************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]TASK [test shell] ****************************************************************************************************************changed: [dbserver]TASK [shell module return values] ************************************************************************************************ok: [dbserver] => {    "testvar": {        "changed": true,         "cmd": "echo test > /tmp/test",         "delta": "0:00:00.025987",         "end": "2020-06-02 22:34:36.185101",         "failed": false,         "rc": 0,         "start": "2020-06-02 22:34:36.159114",         "stderr": "",         "stderr_lines": [],         "stdout": "",         "stdout_lines": []    }}PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想要查看模块对应的返回值，可以先查找官方手册，但并不是所有模块的官方手册中都对模块的返回值进行了描述，你可以自己去官网查看模块的返回值，这些返回值不仅仅能够用于输出，通常我们会利用到这些返回值，比如通过模块的返回值决定之后的一些动作，所以注册变量在playbook中还是会被经常用到的，在之后的文章中我们会给出示例。</p><h1 id="变量与用户交互信息"><a href="#变量与用户交互信息" class="headerlink" title="变量与用户交互信息"></a>变量与用户交互信息</h1><p>在运行shell脚本时，有些时候需要用户输入信息，脚本再根据用户输入的信息决定下一步的动作，这种交互是必须的。我们也可以在playbook中实现这种交互，首先提示用户输入信息，然后将用户输入的信息存放到指定的变量中，当我们需要使用这些信息时，只要引用对应的变量即可。</p><p>下面我们使用vars_prompt关键字定义了两个变量，变量名为别为your_name和your_age，变量下面是提示用户输入时的信息</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars_prompt</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"your_name"</span>      <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"what is your name"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span> <span class="token punctuation">:</span> <span class="token string">"your_age"</span>      <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"how old are you"</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> output  vars    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> your name is <span class="token punctuation">{</span><span class="token punctuation">{</span>your_name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>you are <span class="token punctuation">{</span><span class="token punctuation">{</span>your_age<span class="token punctuation">}</span><span class="token punctuation">}</span> years old.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>playbook执行如下图，提示用户输入信息时默认是不显示信息的，这和输入密码的场景类似</p><pre class="line-numbers language-shell"><code class="language-shell">what is your name: how old are you: PLAY [dbserver] ******************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]TASK [output  vars] **************************************************************************************************************ok: [dbserver] => {    "msg": "your name is mwj,you are 24 years old."}PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要用户输入信息时显示信息内容，可以将private参数设置为no</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars_prompt</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"your_name"</span>      <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"what is your name"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span> <span class="token punctuation">:</span> <span class="token string">"your_age"</span>      <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"how old are you"</span>      <span class="token key atrule">private</span><span class="token punctuation">:</span> no    <span class="token comment" spellcheck="true"># 显示用户输入的内容</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> output  vars    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> your name is <span class="token punctuation">{</span><span class="token punctuation">{</span>your_name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>you are <span class="token punctuation">{</span><span class="token punctuation">{</span>your_age<span class="token punctuation">}</span><span class="token punctuation">}</span> years old.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以为提示信息设置默认值，如果用户不输入任何信息就将默认值赋予变量，如果用户输入信息，就把输入的信息赋值给变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars_prompt</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"your_name"</span>    <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"what is your name\n"</span>    <span class="token key atrule">private</span><span class="token punctuation">:</span> no    <span class="token key atrule">default</span><span class="token punctuation">:</span> mike  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> output  vars    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> your name is <span class="token punctuation">{</span><span class="token punctuation">{</span>your_name<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面playbook的执行过程如下，中括号内的内容是我们设置的默认值，如果用户直接回车那就将中括号内的内容直接赋值给变量</p><pre class="line-numbers language-shell"><code class="language-shell">what is your name [mike]: mwjPLAY [dbserver] ******************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]TASK [output  vars] **************************************************************************************************************ok: [dbserver] => {    "msg": "your name is mwj"}PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="通过命令行传入变量"><a href="#通过命令行传入变量" class="headerlink" title="通过命令行传入变量"></a>通过命令行传入变量</h1><p>我们可以在执行playbook时直接传入需要使用到的变量。编写一个playbook，打印一个passwd的变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"passing in variables from the command line"</span>    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ passwd }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="执行playbook时传入变量"><a href="#执行playbook时传入变量" class="headerlink" title="执行playbook时传入变量"></a>执行playbook时传入变量</h2><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --extra-vars "passwd=mdf123456" passwd.yaml# --extra-vars参数可以简写成-e，还可以一次性传入多个变量，用空格隔开ansible-playbook -e "passwd=mdf123456 username=ewe" passwd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> 如果playbook中并没有定义passwd变量，在执行playbook时也没有传入passwd变量，则会报错。如果在playbook中事先定义好了passwd变量，在执行时再次传入名字相同的变量，最终还是以传入的变量值为准，命令行传入的变量的优先级要高于playbook中的变量。</p><p>不仅ansible-playbook可以使用-e传递变量，ansible命令行一样可以，在执行ad-hoc命令时可以使用下面的方法传入变量</p><pre class="line-numbers language-shell"><code class="language-shell">ansible dbserver -e "name=mwj" -m shell -a "echo my name in {{ name }}"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="json格式传入变量"><a href="#json格式传入变量" class="headerlink" title="json格式传入变量"></a>json格式传入变量</h2><p>除了以键值对的方式传入变量，我们还可以传入json格式的变量</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook passwd.yaml -e '{"username":"mwj","passwd":"123456"}'ansible-playbook passwd.yaml -e '{"countlist":["one","two","three","four"]}'    # {{countlist[0]}}或{{countlist.0}}引用变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="执行playbook时传入变量文件"><a href="#执行playbook时传入变量文件" class="headerlink" title="执行playbook时传入变量文件"></a>执行playbook时传入变量文件</h2><p>编写变量文件，可以是json格式或者yaml格式的文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">namevar</span><span class="token punctuation">:</span> mwj<span class="token key atrule">countlist</span><span class="token punctuation">:</span><span class="token punctuation">-</span> one<span class="token punctuation">-</span> two<span class="token punctuation">-</span> three<span class="token punctuation">-</span> four<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>playbook内容调用变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbderver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"name"</span>    <span class="token key atrule">debug</span><span class="token punctuation">:</span>    <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ namevar }} {{ countlist[0] }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行传入对应的文件，使用<strong>@</strong>符号加上变量文件的路径，变量文件中的所有变量都可以在playbook中引用</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook test.yaml -e '@/ansible/var1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="在主机清单中配置变量"><a href="#在主机清单中配置变量" class="headerlink" title="在主机清单中配置变量"></a>在主机清单中配置变量</h1><p>在主机清单中，可以配置我们的管理节点，也可以将部分管理节点分为一组，其实，在配置清单时还可以为主机或主机组设置变量</p><h2 id="主机变量"><a href="#主机变量" class="headerlink" title="主机变量"></a>主机变量</h2><p>在主机清单中配置变量时，可以同时为管理节点配置对应的变量，当操作这个主机时，即可直接使用对应的变量，而其他主机不能引用到这个变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># ini风格</span>dbserver ansible_host=10.1.1.70 name<span class="token punctuation">:</span> mwj age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token comment" spellcheck="true"># yaml风格</span><span class="token key atrule">all</span><span class="token punctuation">:</span>  <span class="token key atrule">children</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span>      <span class="token key atrule">hosts</span><span class="token punctuation">:</span>        <span class="token key atrule">dbserver</span><span class="token punctuation">:</span>          <span class="token key atrule">ansible_host</span><span class="token punctuation">:</span> 10.10.110.122          <span class="token key atrule">ansible_port</span><span class="token punctuation">:</span> <span class="token number">22</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> mwj          <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">24</span>        <span class="token key atrule">webserver</span><span class="token punctuation">:</span>          <span class="token key atrule">ansible_host</span><span class="token punctuation">:</span> 10.10.110.123          <span class="token key atrule">ansible_port</span><span class="token punctuation">:</span> <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在命令行引用主机变量，也可以在playbook中引用主机变量</p><pre class="line-numbers language-shell"><code class="language-shell">ansible dbserver -m shell -a 'echo {{name}}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用层级关系定义更复杂的主机变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">all</span><span class="token punctuation">:</span>  <span class="token key atrule">children</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span>      <span class="token key atrule">hosts</span><span class="token punctuation">:</span>        <span class="token key atrule">dbserver</span><span class="token punctuation">:</span>          <span class="token key atrule">ansible_host</span><span class="token punctuation">:</span> 10.10.110.122          <span class="token key atrule">ansible_port</span><span class="token punctuation">:</span> <span class="token number">22</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span>             <span class="token key atrule">n1</span><span class="token punctuation">:</span> mike            <span class="token key atrule">n2</span><span class="token punctuation">:</span> masha            <span class="token key atrule">n3</span><span class="token punctuation">:</span> laki<span class="token comment" spellcheck="true"># 引用时使用{{ name.n1 }}或{{ name['n1'] }}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主机组变量"><a href="#主机组变量" class="headerlink" title="主机组变量"></a>主机组变量</h2><p> 在主机清单中，我们可以将多个主机分为一组，这样方便我们同时去操作同一组的管理节点，我们可以为这个主机组定义变量，组内的所有主机都可以使用</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># ini风格</span><span class="token punctuation">[</span>webserver<span class="token punctuation">]</span>web01 ansible_host<span class="token punctuation">:</span> 10.10.110.121web02 ansible_host<span class="token punctuation">:</span> 10.10.110.122web03 ansible_host<span class="token punctuation">:</span> 10.10.110.123<span class="token punctuation">[</span>webserver<span class="token punctuation">:</span>vars<span class="token punctuation">]</span>path="/usr/local/nginx/html/"user="root"<span class="token comment" spellcheck="true"># yaml格式</span><span class="token key atrule">all</span><span class="token punctuation">:</span>  <span class="token key atrule">children</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span>      <span class="token key atrule">hosts</span><span class="token punctuation">:</span>        <span class="token key atrule">dbserver</span><span class="token punctuation">:</span>          <span class="token key atrule">ansible_host</span><span class="token punctuation">:</span> 10.10.110.122          <span class="token key atrule">ansible_port</span><span class="token punctuation">:</span> <span class="token number">22</span>        <span class="token key atrule">webserver</span><span class="token punctuation">:</span>          <span class="token key atrule">ansible_host</span><span class="token punctuation">:</span> 10.10.110.123          <span class="token key atrule">ansible_port</span><span class="token punctuation">:</span> <span class="token number">22</span>      <span class="token key atrule">vars</span><span class="token punctuation">:</span>        <span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token string">"root"</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/usr/local/nginx/html/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="set-fact定义变量"><a href="#set-fact定义变量" class="headerlink" title="set_fact定义变量"></a>set_fact定义变量</h1><p>set_fact是一个模块，我们可以通过set_fact模块在tasks中定义变量testvar1，然后打印这个变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">set_fact</span><span class="token punctuation">:</span>      <span class="token key atrule">testvar1</span><span class="token punctuation">:</span> mid  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar1 }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="set-fact定义变量的特殊性"><a href="#set-fact定义变量的特殊性" class="headerlink" title="set_fact定义变量的特殊性"></a>set_fact定义变量的特殊性</h2><p>通过set_fact模块创建的变量还有一个特殊性，过set_fact创建的变量就像主机上的facts信息一样，可以在之后的play中被引用。而我们使用vars关键字创建的变量则不能被其他playbook所引用到。</p><p>下面这个playbook有两个play，第一个play中有两个变量分别是ts1和ts2，它们分别用vars和set_fact定义，只有使用set_fact定义的ts2变量，才能被下面这个play所引用，而使用vars定义的ts1变量则不能被下面的play所引用。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">ts1</span><span class="token punctuation">:</span> team1  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">set_fact</span><span class="token punctuation">:</span>      <span class="token key atrule">ts2</span><span class="token punctuation">:</span> team2  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ ts1 }}---{{ ts2 }}"</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> webserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> get ts1    <span class="token comment" spellcheck="true"># 这里引用会报错</span>    <span class="token key atrule">debug</span><span class="token punctuation">:</span>       <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ ts1 }}"</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> get ts2    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ ts2 }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> set_fact变量类似于管理节点的全局变量，可以跨play获取变量，注册变量也能被之后的play所引用。</p><h1 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h1><p>除了我们各种各样的定义变量之外，ansible还有一些内置的变量供我们使用，这些内置变量的变量名是被ansible所保留的，我们定义变量时不能使用这些变量名。</p><h2 id="内置变量ansible-version"><a href="#内置变量ansible-version" class="headerlink" title="内置变量ansible_version"></a>内置变量ansible_version</h2><p>查看ansible的版本</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m debug -a 'msg={{ansible_version}}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="内置变量hostvars"><a href="#内置变量hostvars" class="headerlink" title="内置变量hostvars"></a>内置变量hostvars</h2><p>hostvars可以帮助我们在操作当前管理节点时获取到其他管理节点中的信息。下面playbook有两个play，第一个没有任何task，只是将webserver主机的信息收集起来，供后面的play调用。第二个play则是使用了debug模块打印了webserver的内置变量hostvars，输出了webserver的IP地址，这就是在操作dbserver管理节点时获取了webserver管理节点的信息。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"gather facts of webserver"</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> webserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"get facts webserver"</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ hostvars['webserver'].ansible_ens32.ipv4 }}"</span><span class="token comment" spellcheck="true"># 如果没有第一个play，在执行时调用[Gathering Facts]任务，将webserver的信息收集起来，后面dbserver调用这个变量就会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置变量inventory-hostname"><a href="#内置变量inventory-hostname" class="headerlink" title="内置变量inventory_hostname"></a>内置变量inventory_hostname</h2><p>通过inventory_hostname变量可以获取到管理节点的当前主机名称，注意这个不是指Linux系统的主机名，而是对应管理节点在控制节点的主机清单中的配置名称。</p><pre class="line-numbers language-shell"><code class="language-shell"># 主机清单[abc]10.10.110.122dbserver ansible_host: 10.10.110.123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用内置变量inventory_hostname获取各个主机的对应的主机名</p><pre class="line-numbers language-shell"><code class="language-shell">ansible abc -m debug -a 'msg={{inventory_hostname}}'10.10.110.122 | SUCCESS => {    "msg": "10.10.110.122"    }dbserver | SUCCESS => {    "msg": "dbserver"}# 定义是IP则返回IP，定义是别名则返回别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置变量inventory-hostname-short"><a href="#内置变量inventory-hostname-short" class="headerlink" title="内置变量inventory_hostname_short"></a>内置变量inventory_hostname_short</h2><p>与内置变量inventory_hostname类似，通过inventory_hostname_short也可以获取当前play操作的管理节点在清单中对应的名称，但是这个名称更加简短，</p><pre class="line-numbers language-shell"><code class="language-shell">[abc]10.10.110.122dbserver.com ansible_host=10.10.110.123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按上面主机清单的配置，我们可以使用inventory_hostname_short获取到管理节点的简短名称</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m debug -a 'msg={{inventory_hostname_short}}'10.10.110.122 | SUCCESS => {    "msg": "10"}dbserver.com | SUCCESS => {    "msg": "dbserver"}# 可以看到无论是IP还是主机名，inventory_hostname_short都会取得主机名中第一个"."之前的字符作为主机的简短名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置变量play-hosts"><a href="#内置变量play-hosts" class="headerlink" title="内置变量play_hosts"></a>内置变量play_hosts</h2><p>通过内置变量play_hosts可以获取到当前play所操作的所有管理节点的主机名列表</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> 10.10.110.122<span class="token punctuation">,</span>dbserver.com  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ play_hosts }}"</span><span class="token comment" spellcheck="true"># 返回的是所操作的所有管理节点的主机名列表</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.10.110.122<span class="token punctuation">]</span> =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"10.10.110.122"</span><span class="token punctuation">,</span>         <span class="token string">"dbserver.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver.com<span class="token punctuation">]</span> =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"10.10.110.122"</span><span class="token punctuation">,</span>         <span class="token string">"dbserver.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置变量inventory-dir"><a href="#内置变量inventory-dir" class="headerlink" title="内置变量inventory_dir"></a>内置变量inventory_dir</h2><p>我们可以通过inventory_dir变量获取到ansible主机中清单文件的存放路径</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m debug -a 'msg={{inventory_dir}}'10.10.110.122 | SUCCESS => {    "msg": "/etc/ansible"}dbserver.com | SUCCESS => {    "msg": "/etc/ansible"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="重新加载变量文件"><a href="#重新加载变量文件" class="headerlink" title="重新加载变量文件"></a>重新加载变量文件</h1><p>我们先来看一个小示例。假如playbook中有三个任务，第一个任务调用了控制节点的一个变量文件，第二个任务在变量文件中新增了一个变量，第三个任务在变量文件中引用新增的那个变量，看看结果会如何。</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat /root/playbook/var_file.yaml    <span class="token comment" spellcheck="true"># 变量文件已有v1变量</span><span class="token key atrule">v1</span><span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> master  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token key atrule">vars_files</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> /root/playbook/var_file.yaml  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ v1 }}"</span>  <span class="token punctuation">-</span> <span class="token key atrule">lineinfile</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/root/playbook/var_file.yaml"</span>      <span class="token key atrule">line</span><span class="token punctuation">:</span> <span class="token key atrule">"v2</span><span class="token punctuation">:</span> 222"    <span class="token comment" spellcheck="true"># 往变量文件新增v2变量</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>          <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ v1 }},{{ v2 }}"</span>    <span class="token comment" spellcheck="true"># 输出v1和v2变量,这里输出v2变量会出错</span><span class="token key atrule">fatal</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span><span class="token punctuation">:</span> FAILED! =<span class="token punctuation">></span> <span class="token punctuation">{</span><span class="token key atrule">"msg"</span><span class="token punctuation">:</span> "The task includes an option with an undefined variable. The error was<span class="token punctuation">:</span> 'v2' is undefined\n\nThe error appears to be in '/root/playbook/include.yaml'<span class="token punctuation">:</span> line 13<span class="token punctuation">,</span> column 5<span class="token punctuation">,</span> but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be<span class="token punctuation">:</span>\n\n      line<span class="token punctuation">:</span> <span class="token key atrule">\"v2</span><span class="token punctuation">:</span> 222\"\n  <span class="token punctuation">-</span> debug<span class="token punctuation">:</span>\n    ^ here\n"<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的示例中，其实v2变量已经成功添加到变量文件中了，但是由于我们是先读取了变量文件，再写入v2变量到文件，这时候我们没有重新读取变量文件，那么就会报错v2变量未定义了，我们可以使用include_vars关键字从新加载变量文件。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> master  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token key atrule">vars_files</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> /root/playbook/var_file.yaml  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ v1 }}"</span>  <span class="token punctuation">-</span> <span class="token key atrule">lineinfile</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/root/playbook/var_file.yaml"</span>      <span class="token key atrule">line</span><span class="token punctuation">:</span> <span class="token key atrule">"v2</span><span class="token punctuation">:</span> 222"  <span class="token punctuation">-</span> <span class="token key atrule">include_vars</span><span class="token punctuation">:</span> <span class="token string">"/root/playbook/var_file.yaml"</span>    <span class="token comment" spellcheck="true"># 重新加载变量文件</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ v1 }},{{ v2 }}"</span>    <span class="token comment" spellcheck="true"># 这时候输出v2变量就不会出错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的tags(9)</title>
    <link href="https://www.missf.top/post/dd3a7968.html"/>
    <id>https://www.missf.top/post/dd3a7968.html</id>
    <published>2020-05-27T02:38:40.000Z</published>
    <updated>2020-06-02T07:51:22.023Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的tags用法"><a href="#ansible的tags用法" class="headerlink" title="ansible的tags用法"></a>ansible的tags用法</h1><p>我们学习ansible，以后都是要编写各种各样的playbook的。假如我们有一天，写了一个很长很长的playbook，其中包含了非常多的任务，这其实没有什么问题，但是我有时候可能只是需要执行这个playbook的一部分任务而已，而非每一次都执行playbook的全部任务，这个时候我们可以借助tags实现这个需求。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task1      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> t1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> t2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面定义了两个task任务，每个任务有自己的tags，我们可以在执行playbook时借助标签指定只执行那些任务，而忽略其他任务。</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --tags=t2 testtags.yaml    # 只执行t2标签的task任务ansible-playbook --skip-tags=t1 testtags.yaml    # 跳过t1标签任务，其他的任务都会执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="tags的三种语法"><a href="#tags的三种语法" class="headerlink" title="tags的三种语法"></a>tags的三种语法</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">语法一</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> t1 <span class="token punctuation">-</span> t2<span class="token key atrule">语法二</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> t1<span class="token punctuation">,</span>t2<span class="token key atrule">语法三</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'t1'</span><span class="token punctuation">,</span><span class="token string">'t2'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以为一个任务添加多个标签,下面两个task任务都有一个共同的tag1标签，当执行时指定tag1标签，下面两个任务都会执行</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task1      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> t1<span class="token punctuation">,</span>tag1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'t2'</span><span class="token punctuation">,</span><span class="token string">'tag1'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具有共同标签的任务，可以将共同标签从task中提取出来写在play中，下面的两个task任务分别有自己的t1和t2标签，同时又具有共同的t3标签，tags写在tasks上面时，tasks会继承当前play中的tags。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tags</span><span class="token punctuation">:</span> t3  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task1      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> t1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> t2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用标签时，可以一次性指定多个标签，调用多个标签需要用逗号隔开</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --tags=t1,t2 testtags.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们还可以在调用标签时先概览一下playbook中的标签</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --list-tags testtags.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="tags的五个内置标签"><a href="#tags的五个内置标签" class="headerlink" title="tags的五个内置标签"></a>tags的五个内置标签</h2><ul><li><strong>always:</strong> 当把任务的tags的值指定为always时，那么这个任务就总是会被执行，除非你使用’–skip-tags’选项明确指定跳过这个任务</li><li><strong>never:</strong> 当把任务的tags的值指定为never时，那么这个任务就总是不会被执行，2.5版本中新加入的特殊tag</li><li><strong>tagged:</strong> 调用标签时使用的，只执行有标签的任务，没有任何标签的任务不会被执行</li><li><strong>untagged:</strong> 只执行没有标签的任务，但是如果某些任务包含always标签，那么这些任务也会被执行</li><li><strong>all:</strong> 执行所有标签</li></ul><p>只执行有标签的任务，没有任何标签的任务不会被执行</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --tags tagged testtag.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跳过包含标签的任务，即使对应的任务包含always标签，也会被跳过</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --skip-tags tagged testtag.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只执行没有标签的任务，但是如果某些任务包含always标签，那么这些任务也会被执行</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --tags untagged testtag.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的handlers(8)</title>
    <link href="https://www.missf.top/post/b93ea0db.html"/>
    <id>https://www.missf.top/post/b93ea0db.html</id>
    <published>2020-05-26T07:13:48.000Z</published>
    <updated>2020-06-02T07:51:22.020Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的handlers用法"><a href="#ansible的handlers用法" class="headerlink" title="ansible的handlers用法"></a>ansible的handlers用法</h1><p>许多的Linux服务在修改配置文件后都是需要重启服务的，以便能够重新读取配置文件，使新的配置能够生效。那怎么用playbook实现这个简单的功能呢？下面我们来编写一个修改nginx端口的playbook，并且在修改完之后重启nginx。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> modify config    <span class="token key atrule">replace</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/nginx/nginx.conf      <span class="token key atrule">regexp</span><span class="token punctuation">:</span> <span class="token string">"listen(.*)80;"</span>    <span class="token comment" spellcheck="true"># 替换nginx端口为8080</span>      <span class="token key atrule">replace</span><span class="token punctuation">:</span> <span class="token string">"listen 8080;"</span>      <span class="token key atrule">backup</span><span class="token punctuation">:</span> yes  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart nginx        <span class="token comment" spellcheck="true"># 重启nginx服务</span>    <span class="token key atrule">service</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">state</span><span class="token punctuation">:</span> restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意思考:</strong> 这个playbook虽然可以帮助我们成功修改nginx端口并重启nginx服务，但是大家请注意如果我再次执行这个playbook的话，nginx端口已经是8080了，由于ansible幂等性的缘故，所以modify config这个task没有发生状态的改变，所以这一步返回了绿色的信息，但是nginx的服务还是被重启了，其实我们并没有真正去改变nginx的配置文件，但是却还是重启了nginx服务，这是因为重启服务这个任务是写死了的。这种多余的重启是不需要的。那么在playbook中就是使用handlers来解决这种问题的，下面我们就继续以nginx服务这个小例子来学习playbook的handlers用法。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> modify config    <span class="token key atrule">replace</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/nginx/nginx.conf      <span class="token key atrule">regexp</span><span class="token punctuation">:</span> <span class="token string">"listen(.*)80;"</span>      <span class="token key atrule">replace</span><span class="token punctuation">:</span> <span class="token string">"listen 8080;"</span>      <span class="token key atrule">backup</span><span class="token punctuation">:</span> yes    <span class="token key atrule">notify</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在modify config这个任务调用handlers任务列表的restart nginx任务(认真理解这句话)</span>      restart nginx  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 定义一个handlers任务列表</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart nginx    <span class="token key atrule">service</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">state</span><span class="token punctuation">:</span> restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面示例我们使用handlers用法，如果modify config这个task的状态被真正修改过了，notify就会调用handlers任务列表的restart nginx任务，就会执行重启nginx服务，这样就能达到只有nginx配置文件被真正修改了，才会去重启nginx服务。</p><h1 id="handlers是一种任务列表"><a href="#handlers是一种任务列表" class="headerlink" title="handlers是一种任务列表"></a>handlers是一种任务列表</h1><p>在playbook中handlers和tasks是同级别的，这是因为handlers也是任务列表的一种。只不过handlers中的任务是被用于tasks任务列表的notify调用罢了。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> make testfile1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile1      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">notify</span><span class="token punctuation">:</span> ht2  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> make testfile2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile2      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">notify</span><span class="token punctuation">:</span> ht1  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/ht1      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面playbook的执行过程如下:</p><pre class="line-numbers language-shell"><code class="language-shell">PLAY [all] ***********************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [webserver]ok: [dbserver]TASK [make testfile1] ************************************************************************************************************changed: [webserver]changed: [dbserver]TASK [make testfile2] ************************************************************************************************************changed: [webserver]changed: [dbserver]RUNNING HANDLER [ht1] ************************************************************************************************************changed: [webserver]changed: [dbserver]RUNNING HANDLER [ht2] ************************************************************************************************************changed: [dbserver]changed: [webserver]PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=5    changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   webserver                  : ok=5    changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，所有task执行完毕后，才会执行各个handler，而且handler的执行顺序与handler在playbook中的定义顺序是相同的，与handler被notify调用的顺序无关，这一点大家要注意。如果你想要在执行完某些task以后立即执行对应的handler，则需要使用meta模块。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> make testfile1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile1      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">notify</span><span class="token punctuation">:</span> ht2  <span class="token punctuation">-</span> <span class="token key atrule">meta</span><span class="token punctuation">:</span> flush_handlers    <span class="token comment" spellcheck="true"># 定义一个meta任务，表示立即执行之前task任务对应的handlers</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> make testfile3    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile3      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">notify</span><span class="token punctuation">:</span> ht1  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile4      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家可以看到下图的执行顺序，是执行了make testfile1这个task之后，立即执行它所对应的ht2这个handlers</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ecdcfa1c2a9a83be515c4bf.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="handlers分组"><a href="#handlers分组" class="headerlink" title="handlers分组"></a>handlers分组</h1><p>我们可以将handlers任务列表分组，将多个handlers任务组成一个组，然后在task任务列表notify一个handlers组，这时候task任务执行完之后就会一次性执行多个handlers任务</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> make testfile1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile1      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">notify</span><span class="token punctuation">:</span> handlers group1  <span class="token punctuation">-</span> <span class="token key atrule">meta</span><span class="token punctuation">:</span> flush_handlers  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht1    <span class="token key atrule">listen</span><span class="token punctuation">:</span> handlers group1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile4      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht2    <span class="token key atrule">listen</span><span class="token punctuation">:</span> handlers group1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将ht1和ht2这两个handlers任务都监听handlers group1这一个组，这时候在task任务列表notify “handlers group1”这个组名时，就执行这个组的所有handlers任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的playbook(7)</title>
    <link href="https://www.missf.top/post/1b138d79.html"/>
    <id>https://www.missf.top/post/1b138d79.html</id>
    <published>2020-05-24T06:24:36.000Z</published>
    <updated>2020-06-02T07:51:22.021Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Ansible-playbook初识"><a href="#Ansible-playbook初识" class="headerlink" title="Ansible playbook初识"></a>Ansible playbook初识</h1><p>前一章我们学习了ansible的模块，在控制节点上使用了很多ansible的命令对管理节点进行配置和管理，但是在我们真正的工作场景中，如果需要配置一个nginx服务，其实并不是在控制节点执行ansible命令去实现的，你可以想象一下，如果我们需要对管理节点做大量的操作，是不是就是要在控制节点执行非常多的命令呢，而且直接执行命令的方式对管理不同的管理节点时，命令又是需要修改的，这并不是我们想要的。其实ansible是可以写成”脚本”的，注意这里所说的脚本，并不是说将大量的ansible命令放到shell脚本里面去，ansible在部署较为复杂的任务时，有自己的一套执行流程，称为”剧本”，剧本翻译过来就是我们所说的playbook。编写playbook需要遵循yaml语法，那什么又是yaml语法呢，它是为了方便人类读写而设计出来的一种通用的数据串行化格式。</p><h1 id="编写第一个playbook"><a href="#编写第一个playbook" class="headerlink" title="编写第一个playbook"></a>编写第一个playbook</h1><p>playbook文件都以”yaml”或”yml”作为文件后缀，这里我们创建一个名为first.yaml的playbook文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 将下面的ansible命令转化为playbook</span>ansible all <span class="token punctuation">-</span>m pingansible all <span class="token punctuation">-</span>m file <span class="token punctuation">-</span>a 'path=/etc/nodes state=directory'<span class="token comment" spellcheck="true"># playbook的写法:</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ping nodes    <span class="token key atrule">ping</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mkdir directory    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/nodes      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第一行:</strong> 使用三个横杠作为开始，在YAML语法中，”—“表示文档开始</p><p><strong>第二行:</strong> 使用”-“作为开头表示一个块序列的节点，后面使用hosts关键字指定了要操作的主机</p><p><strong>第三行:</strong> 使用remote_user关键字可以指定在管理节点进行操作时使用哪个用户进行操作</p><p><strong>第四行:</strong> 使用tasks关键字指明要进行操作的任务列表，之后的行都属于tasks键值对中的值</p><p>tasks之后的行都属于任务列表的任务，可以看出任务列表一共有两个任务，每个任务以”-“开头，每个任务都有自己的名字，任务名字使用name关键字进行指定，第一个任务使用ping模块，ping模块在使用时不需要指定任何参数。第二个任务使用file模块，使用file模块时，指定了path参数和state参数的值。</p><h1 id="运行playbook"><a href="#运行playbook" class="headerlink" title="运行playbook"></a>运行playbook</h1><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~/playbook]# ansible-playbook first.yaml PLAY [all] *********************************************************************************************************************************************************TASK [Gathering Facts] *********************************************************************************************************************************************ok: [10.10.110.123]ok: [10.10.110.122]TASK [ping nodes] **************************************************************************************************************************************************ok: [10.10.110.123]ok: [10.10.110.122]TASK [mkdir directory] *********************************************************************************************************************************************ok: [10.10.110.122]ok: [10.10.110.123]PLAY RECAP *********************************************************************************************************************************************************10.10.110.122              : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   10.10.110.123              : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上所示，playbook执行后返回了一些信息，这些信息是这次剧本运行的概况。<strong>PLAY [all]</strong>表示这次运行的playbook有一个’play’是针对所有主机运行的，一个playbook可以是由一个或者多个play组成的。这个play包含了三个任务，这三个任务分别是<strong>TASK [Gathering Facts]</strong>，<strong>TASK [ping nodes]</strong>，<strong>TASK [mkdir directory]</strong>。我们只创建了两个任务，为什么却执行了三个任务呢？其实每个paly在执行前都会执行一个默认任务，这个默认任务就是<strong>TASK [Gathering Facts]</strong>，它会收集当前play对应的目标主机的相关信息，收集完这些基础信息后，才会执行我们指定的任务，这里它是收集我们这个play的所有主机的信息，然后返回主机的IP地址。第二个任务是用ping模块去测试管理节点的状态，给我们返回的是绿色的信息，表示管理节点的状态没有发生改变。第三个任务是创建目录，这里如果管理节点没有/etc/nodes目录，则会返回黄色的信息，表示在管理节点上创建了目录，管理节点的状态发生了改变。这是再次执行playbook，发现创建目录任务的返回信息变成了绿色的，是因为已经创建过目录了，由于幂等性的原因，管理节点的状态没有发生改变。返回信息的最后一个<strong>PLAY RECAP</strong>中可以对所有主机的执行情况进行回顾。</p><h1 id="检查playbook语法"><a href="#检查playbook语法" class="headerlink" title="检查playbook语法"></a>检查playbook语法</h1><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --syntax-check first.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果执行语法检查命令之后，只返回了playbook的名称，就表示没有语法错误。</p><h1 id="模拟执行playbook"><a href="#模拟执行playbook" class="headerlink" title="模拟执行playbook"></a>模拟执行playbook</h1><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --check first.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>除了对playbook进行语法测试，我们还能够模拟执行playbook，模拟执行并不是真正的执行，只是假装执行一下，playbook中的任务并不会真正在目标主机中运行，所以你可以放心大胆的进行模拟，模拟运行功能可以帮助我们’预估’playbook是否能够正常执行。</p><p><strong>注意:</strong> 使用上述命令进行模拟时，一些任务可能会报错，这可能是因为报错的任务在执行时需要依赖之前的其他任务的完成结果，但是因为是模拟执行，所以之前的任务并不会真正的执行，既然之前的任务没有真正的执行，自然不会产生对应的结果，所以后面的任务就报错了。也就是说，我们并不能完全以模拟的反馈结果作为playbook是否能够正常运行的判断依据，只能通过模拟大概的预估一下而已。</p><h1 id="使用playbook安装nginx"><a href="#使用playbook安装nginx" class="headerlink" title="使用playbook安装nginx"></a>使用playbook安装nginx</h1><h2 id="目录文件规划"><a href="#目录文件规划" class="headerlink" title="目录文件规划"></a>目录文件规划</h2><pre class="line-numbers language-shell"><code class="language-shell">tree /root/playbook//root/playbook/├── index.html.j2├── nginx.conf└── nginx.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写playbook"><a href="#编写playbook" class="headerlink" title="编写playbook"></a>编写playbook</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义变量，可以在nginx.conf文件中调用</span>    <span class="token key atrule">http_port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">max_clients</span><span class="token punctuation">:</span> <span class="token number">65535    </span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ensure nginx is at the latest version    <span class="token key atrule">yum</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">state</span><span class="token punctuation">:</span> installed  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> write the nginx config file    <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 模板模块，将当前目录下的nginx.conf文件(文件里面定义的变量会自动赋值再拷贝)拷贝到管理节点</span>      <span class="token key atrule">src</span><span class="token punctuation">:</span> nginx.conf      <span class="token key atrule">dest</span><span class="token punctuation">:</span> /etc/nginx/nginx.conf  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> write the site file    <span class="token key atrule">template</span><span class="token punctuation">:</span>      <span class="token key atrule">src</span><span class="token punctuation">:</span> index.html.j2      <span class="token key atrule">dest</span><span class="token punctuation">:</span> /usr/share/nginx/html/index.html    <span class="token key atrule">notify</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> restart nginx  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ensure nginx is running    <span class="token key atrule">service</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">state</span><span class="token punctuation">:</span> started  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart nginx      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=nginx state=restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写nginx配置文件"><a href="#编写nginx配置文件" class="headerlink" title="编写nginx配置文件"></a>编写nginx配置文件</h2><pre class="line-numbers language-shell"><code class="language-shell">#user  nobody;worker_processes  auto;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  {{ max_clients }};    # 调用nginx.yaml中定义的变量}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    server {        listen       {{ http_port }};        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {            root   /usr/share/nginx/html/;            index  index.html index.htm;        }        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }        # deny access to .htaccess files, if Apache's document root        # concurs with nginx's one        #        #location ~ /\.ht {        #    deny  all;        #}    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写index-html-j2文件"><a href="#编写index-html-j2文件" class="headerlink" title="编写index.html.j2文件"></a>编写index.html.j2文件</h2><pre class="line-numbers language-shell"><code class="language-shell">Hello Ansible!This is {{ansible_all_ipv4_addresses}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="在ansible控制节点上查看"><a href="#在ansible控制节点上查看" class="headerlink" title="在ansible控制节点上查看"></a>在ansible控制节点上查看</h2><pre class="line-numbers language-shell"><code class="language-shell">curl 10.10.110.122Hello Ansible!This is [u'10.10.110.122']    # 这个是可变变量curl 10.10.110.123Hello Ansible!This is [u'10.10.110.123']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的yaml基本语法(6)</title>
    <link href="https://www.missf.top/post/b39d16c2.html"/>
    <id>https://www.missf.top/post/b39d16c2.html</id>
    <published>2020-05-23T08:37:52.000Z</published>
    <updated>2020-06-06T07:55:10.856Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的yaml基本语法"><a href="#ansible的yaml基本语法" class="headerlink" title="ansible的yaml基本语法"></a>ansible的yaml基本语法</h1><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li>yaml文件以”—“作为文档的开始，”…”作为文档的结束</li><li># 表示注释，从这个字符一直到行尾，都会被解析器忽略</li><li>相同缩进级别的行以”-“(破折号和空格)开头的组成一个列表</li></ul><h1 id="yaml支持的三种数据结构"><a href="#yaml支持的三种数据结构" class="headerlink" title="yaml支持的三种数据结构"></a>yaml支持的三种数据结构</h1><ul><li><strong>数组:</strong> 一组按次序排列的值，又称为序列（sequence） / 列表（list）</li><li><strong>对象:</strong> 键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li><li><strong>纯量:</strong> 单个的、不可再分的值</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>相同缩进级别的行以“- ”（破折号和空格）开头组成一个列表就是数组</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">fruits</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Apple  <span class="token punctuation">-</span> Banana  <span class="token punctuation">-</span> orange  <span class="token punctuation">-</span> melon<span class="token comment" spellcheck="true"># 行内表示法</span><span class="token key atrule">fruits</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'melon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>对象的一组键值对，使用冒号结构表示(冒号后面要有个空格)</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">sb</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> Alex  <span class="token key atrule">job</span><span class="token punctuation">:</span> python  <span class="token key atrule">skill</span><span class="token punctuation">:</span> brag<span class="token comment" spellcheck="true"># 行内表示法</span><span class="token key atrule">sb</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Alex<span class="token punctuation">,</span> <span class="token key atrule">job</span><span class="token punctuation">:</span> python<span class="token punctuation">,</span> <span class="token key atrule">skill</span><span class="token punctuation">:</span> brag<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h1><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token key atrule">float</span><span class="token punctuation">:</span> <span class="token number">15.20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><pre class="line-numbers language-yaml"><code class="language-yaml">表示true的值true<span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">TRUE</span><span class="token punctuation">,</span> yes<span class="token punctuation">,</span> Yes<span class="token punctuation">,</span> YES<span class="token punctuation">,</span> on<span class="token punctuation">,</span> On<span class="token punctuation">,</span> ON<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Y表示false的值false<span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">FALSE</span><span class="token punctuation">,</span> no<span class="token punctuation">,</span> No<span class="token punctuation">,</span> NO<span class="token punctuation">,</span> off<span class="token punctuation">,</span> Off<span class="token punctuation">,</span> OFF<span class="token punctuation">,</span> n<span class="token punctuation">,</span> N<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>yaml 允许使用两个感叹号，强制转换数据类型</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">a</span><span class="token punctuation">:</span> <span class="token tag">!!str</span> <span class="token number">123</span><span class="token key atrule">d</span><span class="token punctuation">:</span> <span class="token tag">!!str</span> <span class="token boolean important">true    </span><span class="token comment" spellcheck="true"># 这个true的数据类型不再是布尔值，而是str类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串默认不使用引号表示</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">str</span><span class="token punctuation">:</span> 这是字符串<span class="token key atrule">s1</span><span class="token punctuation">:</span> <span class="token string">'内容\n字符串'</span>    <span class="token comment" spellcheck="true"># 如果字符之中包含空格和特殊字符，需要放在引号之中，单引号和双引号都可以使用，双引号不会对特殊字符转义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p><strong>null:</strong> 用<strong>~</strong>表示</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">parent</span><span class="token punctuation">:</span> <span class="token null important">~ </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><strong>&amp;</strong>用来建立锚点(defaults)，<strong>&lt;&lt;</strong>表示合并到当前数据，*****用来引用锚点</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">defaults</span><span class="token punctuation">:</span> <span class="token important">&amp;defaults</span>  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> postgres  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost<span class="token key atrule">development</span><span class="token punctuation">:</span>   <span class="token key atrule">database</span><span class="token punctuation">:</span> myapp_development  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*defaults</span><span class="token key atrule">test</span><span class="token punctuation">:</span>  <span class="token key atrule">database</span><span class="token punctuation">:</span> myapp_test  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*defaults</span><span class="token comment" spellcheck="true"># 上面的写法等同于下面的代码:</span><span class="token key atrule">defaults</span><span class="token punctuation">:</span>  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> postgres  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost<span class="token key atrule">development</span><span class="token punctuation">:</span>  <span class="token key atrule">database</span><span class="token punctuation">:</span> myapp_development  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> postgres  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost<span class="token key atrule">test</span><span class="token punctuation">:</span>  <span class="token key atrule">database</span><span class="token punctuation">:</span> myapp_test  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> postgres  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>palybooks更多的yaml语法请参考: <a href="http://docs.ansible.com/YAMLSyntax.html" target="_blank" rel="noopener">http://docs.ansible.com/YAMLSyntax.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>使用coding持续集成Java项目</title>
    <link href="https://www.missf.top/post/1b979c3e.html"/>
    <id>https://www.missf.top/post/1b979c3e.html</id>
    <published>2020-05-18T07:42:59.000Z</published>
    <updated>2020-06-06T08:54:05.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="coding介绍"><a href="#coding介绍" class="headerlink" title="coding介绍"></a>coding介绍</h1><p>在说到持续集成这方面，相信所有做运维的小伙伴都知道Jenkins，就是那个拿着托盘的老头子。但是说到coding，可能很多人都没听说过。什么是coding呢？<strong>coding涵盖了软件开发从构想到交付的一切所需，使研发团队在云端高效协同，实践敏捷开发与 DevOps，提升软件交付质量与速度。</strong>这是来自官网的介绍，下面就让我们一起学习coding吧！</p><h1 id="第一次接触coding"><a href="#第一次接触coding" class="headerlink" title="第一次接触coding"></a>第一次接触coding</h1><p>在去年的七月份，我有幸参加了腾讯的<strong>724</strong>运维分享日，就在那时候接触到了coding。</p><p>这是腾讯滨海大厦四楼，现在看着还历历在目，但是当年的<strong>sz number one</strong>却散落在天涯！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec233ecc2a9a83be541ae66.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>一群运维小伙伴看着这个墙哈哈大笑…</p><p>和一群志同道合的人在一起时，即使不认识也会有莫名的亲切感啊。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2342ec2a9a83be541f551.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第一次看到coding的介绍时都不知道说的啥，现在回头看时才觉得自己成长了。</p><p>(就如Alex吹牛逼说的: 如果你不觉得一年前的自己是傻逼，那就说明你这一年都没有成长)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2346dc2a9a83be542325e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>下图是coding创始人张海龙先生</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2351cc2a9a83be542dc4e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>额…扯远了，下面就让我们来学习coding吧！</p><h1 id="注册coding"><a href="#注册coding" class="headerlink" title="注册coding"></a>注册coding</h1><p>coding所有的东西都是在这个云平台上实现的，所谓的使研发团队在云端高效协同说的就是这个吧！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2389bc2a9a83be546aef6.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="选择DevOps项目模板"><a href="#选择DevOps项目模板" class="headerlink" title="选择DevOps项目模板"></a>选择DevOps项目模板</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2396dc2a9a83be547a27d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="填写项目基本信息"><a href="#填写项目基本信息" class="headerlink" title="填写项目基本信息"></a>填写项目基本信息</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec23a32c2a9a83be548918f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="下载若依的源码"><a href="#下载若依的源码" class="headerlink" title="下载若依的源码"></a>下载若依的源码</h2><p><a href="https://gitee.com/y_project/RuoYi" target="_blank" rel="noopener">若依源码gitee地址</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec23f18c2a9a83be54dda29.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="配置若依数据库"><a href="#配置若依数据库" class="headerlink" title="配置若依数据库"></a>配置若依数据库</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec25331c2a9a83be5701a8a.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>将若依自带的两个SQL文件导入到ry数据库</p><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><pre class="line-numbers language-shell"><code class="language-shell">git initgit add .git commit -m "第一次提交"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="配置coding-SSH秘钥"><a href="#配置coding-SSH秘钥" class="headerlink" title="配置coding SSH秘钥"></a>配置coding SSH秘钥</h2><p>在Windows电脑生成ssh密钥对，然后将id_rsa.pub公钥添加到coding SSH公钥</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2422ec2a9a83be550f8a4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="推送本地仓库到coding"><a href="#推送本地仓库到coding" class="headerlink" title="推送本地仓库到coding"></a>推送本地仓库到coding</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec23aa7c2a9a83be549074e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong><code>注意:</code></strong> 如果已经在coding配置了ssh秘钥，git添加远程仓库的时候不要使用https的地址，不然还是会提示需要输入coding的账号密码</p><pre class="line-numbers language-shell"><code class="language-shell">git remote add origin git@e.coding.net:missf/RuoYi.git    # 配置了SSH秘钥的，一定要填写项目的git地址git push -u origin master    # 这样推送时就不需要输入账号密码啦<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24554c2a9a83be557070c.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h1><h2 id="创建持续集成任务"><a href="#创建持续集成任务" class="headerlink" title="创建持续集成任务"></a>创建持续集成任务</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec245a3c2a9a83be5575d81.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="新建构建计划"><a href="#新建构建计划" class="headerlink" title="新建构建计划"></a>新建构建计划</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24603c2a9a83be557c74d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="录入项目凭据"><a href="#录入项目凭据" class="headerlink" title="录入项目凭据"></a>录入项目凭据</h2><p>在服务器生成SSH秘钥对，将私钥录入到coding的凭据管理，coding就能持续集成部署代码到服务器</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24a4fc2a9a83be55de761.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="编写静态配置的-Jenkinsfile"><a href="#编写静态配置的-Jenkinsfile" class="headerlink" title="编写静态配置的 Jenkinsfile"></a>编写静态配置的 Jenkinsfile</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec246cac2a9a83be558be50.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>配置环境变量</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24d43c2a9a83be561df7f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里附上完整Jenkinsfile</p><pre class="line-numbers language-shell"><code class="language-shell">pipeline {  agent any  stages {    stage('检出') {      steps {        checkout([$class: 'GitSCM', branches: [[name: env.GIT_BUILD_REF]],        userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])      }    }    stage('构建') {      steps {        echo '构建中...'        sh 'java -version'        sh 'mvn package'        echo '构建完成.'      }    }    stage('压缩jar包') {      steps {        echo '压缩中...'        sh 'cd /root/workspace/ruoyi-admin/target/ && tar -zcf /tmp/ruoyi-admin.tar.gz ruoyi-admin.jar'        echo '压缩完成.'      }    }    stage('部署') {      steps {        echo '部署中...'        script {          def remote = [:]          remote.name = 'java-server'          remote.allowAnyHosts = true          remote.host = "${env.REMOTE_HOST}"          remote.port = 50312          remote.user = "${env.REMOTE_USER_NAME}"          // 把「CODING 凭据管理」中的「凭据 ID」填入 credentialsId，而 id_rsa 无需修改           withCredentials([sshUserPrivateKey(credentialsId: "${env.REMOTE_CRED}", keyFileVariable: 'id_rsa')]) {            remote.identityFile = id_rsa            // SSH 上传文件到服务器            sshPut remote: remote, from: '/tmp/ruoyi-admin.tar.gz', into: '/tmp/'            // 解压缩            sshCommand remote: remote,  sudo: false, command: "tar -zxf /tmp/ruoyi-admin.tar.gz -C /home/ruoyi/"            // 执行Java应用启停脚本            sshCommand remote: remote,  sudo: true, command: "sh /home/ruoyi/start.sh stop && sh /home/ruoyi/start.sh start"          }        }        echo '部署完成'      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="触发规则"><a href="#触发规则" class="headerlink" title="触发规则"></a>触发规则</h2><p>本地仓库推送代码到master分支时就会自动触发持续集成任务</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24750c2a9a83be559800d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="开启缓存目录"><a href="#开启缓存目录" class="headerlink" title="开启缓存目录"></a>开启缓存目录</h2><p>开启缓存目录后可以大大提升构建的速度</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24803c2a9a83be55a9565.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="立即构建"><a href="#立即构建" class="headerlink" title="立即构建"></a>立即构建</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec250bbc2a9a83be5668e32.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="查看构建过程"><a href="#查看构建过程" class="headerlink" title="查看构建过程"></a>查看构建过程</h2><p>构建失败可以查看完整日志分析失败原因</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2510dc2a9a83be56769bd.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="服务器的启停脚本"><a href="#服务器的启停脚本" class="headerlink" title="服务器的启停脚本"></a>服务器的启停脚本</h2><pre class="line-numbers language-shell"><code class="language-shell">[root@java-server ~]# cd /home/ruoyi/[root@java-server ruoyi]# lltotal 65080drwxr-xr-x 2 root root     4096 May 18 10:18 logs-rw-r--r-- 1 root root       67 May 18 17:04 nohup.out-rw-r--r-- 1 root root 66627886 May 18 17:04 ruoyi-admin.jar-rwxr-xr-x 1 root root      760 May 18 14:29 start.sh[root@java-server ruoyi]# cat start.sh #!/bin/bashWORKSPACE=/home/ruoyiif [ -d "${WORKSPACE}" ]; then    cd ${WORKSPACE}else    echo "${WORKSPACE} directory does not exist"    exit 1fiAPP_NAME='ruoyi-admin.jar'USE_JAVA_HOME='/usr/local/jdk1.8.0_211'JVM_OPTS='-Xms512m -Xmx512m'CONFIG_OPTS=''if [ $1 == 'start' ]; then    echo 'start service '$APP_NAME    nohup java -jar ${JVM_OPTS} ${APP_NAME} > ${WORKSPACE}/nohup.out 2>&1 &elif [ $1 == 'stop' ]; then    echo 'stop service '$APP_NAME    PID=$(ps -ef | grep -v grep | grep ${APP_NAME} | awk '{print $2}')    if [ -z ${PID} ]; then        echo ${APP_NAME} ' had stopped'    else        kill ${PID}        sleep 2        if [ $? -ne 0 ]; then        echo ${APP_NAME} ' stop failed'        exit 1        fi    fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查看持续集成的效果"><a href="#查看持续集成的效果" class="headerlink" title="查看持续集成的效果"></a>查看持续集成的效果</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec26162c2a9a83be5ac20ab.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;coding介绍&quot;&gt;&lt;a href=&quot;#coding介绍&quot; class=&quot;headerlink&quot; title=&quot;coding介绍&quot;&gt;&lt;/a&gt;coding介绍&lt;/h1&gt;&lt;p&gt;在说到持续集成这方面，相信所有做运维的小伙伴都知道Jenkins，就是那个拿着托盘的老头子。
      
    
    </summary>
    
    
      <category term="coding" scheme="https://www.missf.top/categories/coding/"/>
    
    
      <category term="coding" scheme="https://www.missf.top/tags/coding/"/>
    
      <category term="持续集成" scheme="https://www.missf.top/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>ansible模块学习(5)</title>
    <link href="https://www.missf.top/post/cd036e92.html"/>
    <id>https://www.missf.top/post/cd036e92.html</id>
    <published>2020-05-12T03:12:59.000Z</published>
    <updated>2020-06-22T06:27:51.171Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="setup模块"><a href="#setup模块" class="headerlink" title="setup模块"></a>setup模块</h1><p>setup模块主要用于获取主机信息，每个管理节点在接收控制节点命令之前，会将主机的信息告知控制节点</p><ul><li><strong>filter:</strong> 用于进行条件过滤，如果设置，仅返回匹配过滤条件的信息</li></ul><table><thead><tr><th>关键字</th><th>说明</th><th>返回值例子</th></tr></thead><tbody><tr><td>ansible_nodename</td><td>节点名</td><td>“6-dns-1.hunk.tech”</td></tr><tr><td>ansible_fqdn</td><td>FQDN名</td><td>“6-dns-1.hunk.tech”</td></tr><tr><td>ansible_hostname</td><td>主机短名称</td><td>“6-dns-1”</td></tr><tr><td>ansible_domain</td><td>主机域名后缀</td><td>“hunk.teh”</td></tr><tr><td>ansible_memtotal_mb</td><td>总物理内存</td><td>“ansible_memtotal_mb”: 222</td></tr><tr><td>ansible_swaptotal_mb</td><td>SWAP总大小</td><td>“1023”</td></tr><tr><td>ansible_processor</td><td>CPU信息</td><td>Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz</td></tr><tr><td>ansible_processor_cores</td><td>CPU核心数量</td><td>4</td></tr><tr><td>ansible_processor_vcpus</td><td>CPU逻辑核心数量</td><td>2</td></tr><tr><td>ansible_all_ipv4_addresses</td><td>有所IPV4地址</td><td>192.168.0.200</td></tr><tr><td>ansible_all_ipv6_addresses</td><td>所有IPV6地址</td><td></td></tr><tr><td>ansible_default_ipv4</td><td>默认网关的网卡配置信息</td><td></td></tr><tr><td>ansible_eth2</td><td>具体某张网卡信息</td><td>不同系统名称需要变化</td></tr><tr><td>ansible_dns</td><td>DNS设置信</td><td></td></tr><tr><td>ansible_architecture</td><td>系统架构</td><td>x86_64</td></tr><tr><td>ansible_machine</td><td>主机类型</td><td>x86_64</td></tr><tr><td>ansible_kernel</td><td>内核版本</td><td>“2.6.32-696.el6.x86_64”</td></tr><tr><td>ansible_distribution</td><td>发行版本</td><td>“CentOS”</td></tr><tr><td>ansible_distribution_major_version</td><td>操作系统主版本号</td><td>“6”</td></tr><tr><td>ansible_distribution_release</td><td>发行版名称</td><td>“Final”</td></tr><tr><td>ansible_distribution_version</td><td>完整版本号</td><td>“7.4.1708”</td></tr><tr><td>ansible_pkg_mgr</td><td>软件包管理方式</td><td>“yum”</td></tr><tr><td>ansible_service_mgr</td><td>进行服务方式</td><td>“systemd”</td></tr><tr><td>ansible_os_family</td><td>家族系列</td><td>“RedHat”</td></tr><tr><td>ansible_cmdline</td><td>内核启动参数</td><td></td></tr><tr><td>ansible_selinux</td><td>SElinux状态</td><td>“disabled”</td></tr><tr><td>ansible_env</td><td>当前环境变量参数</td><td></td></tr><tr><td>ansible_date_time</td><td>时间相关</td><td></td></tr><tr><td>ansible_python_version</td><td>python版本</td><td>“2.6.6”</td></tr><tr><td>ansible_lvm</td><td>LVM卷相关信息</td><td></td></tr><tr><td>ansible_mounts</td><td>所有挂载点</td><td></td></tr><tr><td>ansible_device_links</td><td>所有挂载的设备的UUID和卷标名</td><td></td></tr><tr><td>ansible_devices</td><td>所有/dev/下的正在使用的设备的信息</td><td></td></tr><tr><td>ansible_user_dir</td><td>执行用户的家目录</td><td>“/root”</td></tr><tr><td>ansible_user_gecos</td><td>执行用户的描述信息</td><td>“The root “</td></tr><tr><td>ansible_user_gid</td><td>执行用户的的GID</td><td>0</td></tr><tr><td>ansible_user_id</td><td>执行用户的的用户名</td><td>“root”</td></tr><tr><td>ansible_user_shell</td><td>执行用户的shell类型</td><td>“/bin/bash”</td></tr><tr><td>ansible_user_uid</td><td>执行用户的UID</td><td>0</td></tr></tbody></table><p>查看管理节点的python版本信息</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m setup -a 'filter=ansible_python_version'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看管理节点的发行版本</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m setup -a 'filter=ansible_distribution'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h1><p>ansible的默认模块，可以不用-m指定，-a是command的参数</p><ul><li><strong>free_form:</strong> 其实没有名为“free form”的实际参数，command模块接受自由格式的命令运行</li><li><strong>chdir:</strong> 在执行对应的命令之前，会先进入到chdir参数指定的目录中</li><li><strong>creates:</strong> 如果指定的文件存在时，就不执行对应命令</li><li><strong>removes:</strong> 当指定的文件不存在时，就不执行对应命令</li></ul><p>查看管理节点/etc/目录下的hosts文件内容</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -a "chdir=/etc cat hosts"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看管理节点/etc/目录下的hosts文件内容，如果存在/etc/passwd文件则不执行</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -a "chdir=/etc creates=/etc/passwd cat hosts"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>command模块不支持调用<code>$HOME</code>这样的变量，还有像<code>&lt;</code>, <code>&gt;</code>, <code>|</code>, <code>;</code>, <code>&amp;</code>这些正则和通配符都将不可用，但是command 模块更安全，因为他不受用户环境的影响。 也很大的避免了潜在的shell注入风险。</p><h1 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a>shell模块</h1><p>shell 模块可以帮助我们在远程主机上执行命令。与command模块不同的是，shell模块在远程主机中执行命令时，会经过远程主机上的 <code>/bin/sh</code> 程序处理，能够使用<code>&lt;</code>, <code>&gt;</code>, <code>|</code>, <code>;</code>, <code>&amp;</code>这些符号和环境变量。</p><ul><li><strong>free_form:</strong> 其实没有名为“free form”的实际参数，command模块接受自由格式的命令运行</li><li><strong>chdir:</strong> 在执行对应的命令之前，会先进入到chdir参数指定的目录中</li><li><strong>creates:</strong> 如果指定的文件存在时，就不执行对应命令</li><li><strong>removes:</strong> 当指定的文件不存在时，就不执行对应命令</li><li><strong>executable:</strong> 默认shell模块会调用远程主机中的/bin/sh去执行对应的命令，也可以指定shell，需要使用绝对路径</li></ul><p>shell模块在管理节点上执行命令时，支持管道和重定向等符号</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m shell -a 'chdir=/etc executable=/bin/bash cat hosts >/tmp/hosts.bak'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="script模块"><a href="#script模块" class="headerlink" title="script模块"></a>script模块</h1><p>script模块可以帮助我们在管理节点上执行控制节点上的脚本，也就是说在管理节点上执行脚本不需要把脚本拷贝过去</p><ul><li><strong>free_form:</strong> 指定需要执行的脚本，其实没有名为“free form”的实际参数</li><li><strong>chdir:</strong> 在执行对应的脚本之前，会先进入到chdir参数指定的目录中</li><li><strong>creates:</strong> 如果指定的文件存在时，就不执行脚本</li><li><strong>removes:</strong> 当指定的文件不存在时，就不执行脚本</li></ul><p>在管理节点上执行控制节点的/root/test.sh脚本，执行之前切换到/opt目录</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m script -a 'chdir=/opt /root/test.sh'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h1><p>copy模块的作用就是将Control node的文件拷贝到Managed nodes</p><ul><li><strong>scr:</strong> 用于指定控制节点上被copy的文件或目录</li><li><strong>dest:</strong> 用于指定文件将被拷贝到管理节点的路径，dest为必须参数</li><li><strong>content:</strong> 当不使用src指定拷贝的文件时，可以使用content直接指定文件内容，src与content两个参数必有其一</li><li><strong>force:</strong> 当管理节点的目标路径存在同名文件，并且两个文件内容不同，是否强制覆盖，可选值有yes和no，默认值为yes</li><li><strong>backup:</strong> 当管理节点的目标路径存在同名文件，并且两个文件内容不同，是否对管理节点的文件进行备份，可选值有yes和no</li><li><strong>owner:</strong> 指定文件拷贝到管理节点后的属主，但是管理节点上必须有对应的用户</li><li><strong>group:</strong> 指定文件拷贝到管理节点后的属组，但是管理节点上必须有对应的组</li><li><strong>mode:</strong> 指定文件拷贝到管理节点后的权限，可以使用mode=0644表示，也使用mode=u+x表示</li></ul><p>将控制节点的/etc/hosts文件复制到管理节点的/root目录下，如果管理节点的/root目录已经存在文件，则会默认覆盖</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m copy -a "src=/etc/hosts dest=/root/"# 如无意外这里你看到的字体颜色是黄色的，这是成功执行并且状态发生了改变的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制文件，指定文件的属主和属组，需要注意的是管理节点必须存在对应的用户和组</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m copy -a "src=/etc/hosts dest=/tmp/ owner=mwj group=mwj"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制文件，如果管理节点的目标路径已存在同名文件且内容不相同，则对管理节点的文件先进行备份，再把控制节点的文件复制到管理节点</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m copy -a "src=/etc/hosts dest=/tmp/ backup=yes"# 在返回的结果列表能看到: "backup_file": "/tmp/hosts.15575.2020-05-12@22:28:50~"# ansibel是用哈希值去校验两个文件的内容是否一致的 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a>file模块</h1><p>file模块可以完成对文件增删查改的基本操作</p><ul><li><strong>path:</strong> 用于指定要操作的文件或目录，必须参数</li><li><strong>state:</strong> ansible无法从<code>path=/test/a/b</code>得知我们想要创建目录还是文件，所以需要使用state参数配和path来声明操作的类型<ul><li><strong>state=directory</strong> 创建的是目录</li><li><strong>state=touch</strong> 创建的是文件</li><li><strong>state=link</strong> 创建的是软连接文件</li><li><strong>state=hard</strong> 创建的是硬链接文件</li><li><strong>state=absent</strong> 删除文件或者目录，absent意为”缺席”</li></ul></li><li><strong>src:</strong> 当state设置为link或者hard时，我们必须指明软硬链链接到哪个文件，通过src参数即可指定链接源</li><li><strong>force:</strong> 当state=link的时候，可配合force=yes参数强制创建链接文件，但是强制创建会有两种情况<ul><li><strong>情况一:</strong> 当要创建的链接文件所指向的源文件并不存在时，使用此参数可以先强制创建出链接文件</li><li><strong>情况二:</strong> 当要创建链接文件的路径中已经存在与链接文件同名的文件时，将force设置为yes，会将同名文件覆盖为链接文件</li></ul></li><li><strong>owner:</strong> 用于指定被操作文件或目录的属主</li><li><strong>group:</strong> 用于指定被操作文件或目录的属组</li><li><strong>mdoe:</strong> 用于指定被操作文件或目录的权限，使用mode=755，设置特殊权限则可以使用mode=4700</li><li><strong>recurse:</strong> 当要操作的对象为目录，将recurse设置为yes，可以递归的修改目录中文件的属性</li></ul><p>在管理节点上创建一个名为testdir的目录，如果目录已存在则不进行任何操作</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m file -a "path=/testdir/ state=directory"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上创建一个名为testfile的文件，如果文件已存在则会更新文件的时间戳</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m file -a "path=/testdir/testfile state=touch"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点创建一个名为/testdir/linkfile的链接文件，链接的源文件/testdir/testfile已存在</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m file -a "path=/testdir/linkfile state=link src=/testdir/testfile"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上删除指定的文件或目录</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m file -a "path=/testdir/testfile state=absent"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="fetch模块"><a href="#fetch模块" class="headerlink" title="fetch模块"></a>fetch模块</h1><p>从管理节点拉取文件到控制节点</p><ul><li><strong>dest:</strong> 用来存放从管理节点拉取到的文件</li><li><strong>src:</strong> 管理节点被拉取的文件，必须是文件不能是目录</li><li><strong>flat:</strong> 默认为no，会将拉取到控制节点的文件以hostname/file的命名存放在dest目录，如果为yes，则直接按文件名存放</li><li><strong>Validate_checksum:</strong> 拉取文件之后进行MD5检查</li></ul><p>拉取管理节点的/etc/hosts文件到控制节点的/data/目录</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m fetch -a "src=/etc/hosts dest=/data/"# 这里flat默认为no，所以拉取之后存放的方式是这样的tree /data//data/├── 10.10.110.122│   └── etc│       └── hosts└── 10.10.110.123    └── etc        └── hostsansible all -m fetch -a "src=/etc/hosts dest=/data/ flat=yes"    # flat=yes是直接按文件名存放tree /data//data/└── hosts    # 只有一个hosts文件是因为第一个hosts被覆盖掉了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="blockinfile模块"><a href="#blockinfile模块" class="headerlink" title="blockinfile模块"></a>blockinfile模块</h1><p>blockinfile模块可以帮助我们在指定的文件中插入”一段文本”，这段文本是被标记过的，我们在这段文本上做了记号，以便在以后的操作中可以通过”标记”找到这段文本，然后修改或者删除它</p><ul><li><strong>path:</strong> 指定要操作的文件</li><li><strong>block:</strong> 此参数用于指定我们想要插入的那”一段文本”，此参数有一个别名叫”content”，使用content或block的作用是相同的</li><li><strong>marker:</strong> 自定义开始和结束的标记，marker=#{mark}test:开始为# BEGIN test，结束为# END test</li><li><strong>insertafter:</strong> 在插入一段文本时，默认会在文件的末尾插入文本，如果你想要将文本插入在某一行的后面，可以使用此参数指定对应的行</li><li><strong>insertbefore:</strong> 在插入一段文本时，默认会在文件的末尾插入文本，如果你想要将文本插入在某一行的前面，可以使用此参数指定对应的行</li><li><strong>backup:</strong> 是否在修改文件之前对文件进行备份</li><li><strong>create:</strong> 当要操作的文件并不存在时，是否创建对应的文件</li></ul><p>在管理节点的/testdir/rc.local文件末尾插入一行systemctl start mariadb</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m blockinfile -a 'path=/testdir/rc.local block="systemctl start mariadb"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自定义插入的开始和结束的标记</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m blockinfile -a 'path=/testdir/rc.local block="systemctl restart mysqld\nnginx -s reload" marker="#{mark} serivce to start"'# 查看被插入的文本#BEGIN serivce to startsystemctl restart mysqldnginx -s reload#END serivce to start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用create参数，如果指定的文件不存在则创建它</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m blockinfile -a 'path=/testdir/date block="今天是5月12号\n汶川地震12周年" marker="#{mark} 日期记录" create=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用backup参数，可以在操作修改文件之前对文件进行备份</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m blockinfile -a 'path=/testdir/date block="今天是5月12号\n汶川地震12周年" marker="#{mark} 日期记录" backup=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="lineinfile模块"><a href="#lineinfile模块" class="headerlink" title="lineinfile模块"></a>lineinfile模块</h1><p>我们可以借助lineinfile模块，确保”某一行文本”存在于指定的文件中，还可以根据正则表达式替换”某一行文本”</p><ul><li><strong>path:</strong> 指定要操作的文件</li><li><strong>line:</strong> 使用此参数指定文本内容</li><li><strong>regexp:</strong> 使用正则表达式匹配对应的行</li><li><strong>state:</strong> 当想要删除对应的文本时，需要将state参数的值设置为absent</li><li><strong>backrefs:</strong> 开启后向引用，line参数中就能对regexp参数中的分组进行后向引用了</li><li><strong>insertafter:</strong> 借助insertafter参数可以将文本插入到“指定的行”之后</li><li><strong>insertbefore:</strong> 借助insertbefore参数可以将文本插入到“指定的行”之前</li><li><strong>backup:</strong> 是否在修改文件之前对文件进行备份</li><li><strong>create:</strong> 当要操作的文件并不存在时，是否创建对应的文件</li></ul><p>确保”test lineinfile”这行文本存在于/testdir/date文件中，如果存在则不做任何操作，如果不存在则在末尾插入</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m lineinfile -a 'path=/testdir/date line="test lineinfile"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据正则表达式替换”某一行”，如果多行能够匹配正则，只有最后匹配的行才会被替换，如果没有匹配到则会在末尾插入line的内容</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m lineinfile -a 'path=/testdir/date regexp="^test" line="被替换后的内容"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据正则匹配删除对应的行，如果文件多行都与正则匹配，则删除多行</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m lineinfile -a 'path=/testdir/date regexp="^#.*-$" state=absent'    # 删除#开头-结尾中间有任意个字符的行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/testdir/date文件的”#Hello saltstack,Hiiii”这一行之后插入123</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m lineinfile -a 'path=/testdir/date line="123" insertafter="#Hello saltstack,Hiiii"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="find模块"><a href="#find模块" class="headerlink" title="find模块"></a>find模块</h1><p>find模块可以帮助我们在管理节点中查找符合条件的文件，就像find命令一样</p><ul><li><strong>paths:</strong> 必须参数，指定在哪个目录中查找文件，可以指定多个路径，路径间用逗号隔开</li><li><strong>recurse:</strong> 默认只会在指定的目录中查找文件，当recurse参数设置为yes时，表示会递归的查找文件</li><li><strong>hidden:</strong> 默认不会去查找隐藏文件，只有当hidden参数的值设置为yes时才会查找隐藏文件</li><li><strong>file_type:</strong> 默认只会根据条件查找”文件”，可以通过file_type指定文件类型，any | directory | file | link</li><li><strong>patterns:</strong> 使用此参数指定需要查找的文件名称，支持使用shell(比如通配符)或者正则表达式去匹配文件名称</li><li><strong>use_regex:</strong> 当use_regex设置为yes时，表示使用python正则解析patterns参数中的表达式</li><li><strong>contains:</strong> 使用此参数可以根据文章内容查找文件，此参数的值为一个正则表达式</li><li><strong>age:</strong> 用此参数可以根据时间范围查找文件，默认以文件的mtime为标准与指定的时间进行对比</li><li><strong>age_stamp:</strong> 文件的时间属性中有三个时间种类:atime、ctime、mtime，当我们根据时间范围查找文件时，可以指定以哪个时间种类为准</li><li><strong>size:</strong> 使用此参数可以根据文件大小查找文件</li><li><strong>get_checksum:</strong> 当有符合查找条件的文件被找到时，会同时返回对应文件的sha1校验码</li></ul><p>在管理节点的/etc目录中查找包含www字符串的文件，不进行递归并忽略隐藏文件</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc contains=".*www.*"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录查找以.sh结尾的文件，包括隐藏文件并进行递归查找</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc patterns="*.sh" hidden=yes recurse=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录查找链接文件，包括隐藏文件并进行递归查找</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc file_type=link hidden=yes recurse=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录查找以.sh结尾的文件，只不过patterns对应的表达式为正则表达式，包括所有文件类型</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc patterns="\*.sh" file_type=any use_regex=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录递归查找mtime在4天以内的文件</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc age=-4d recurse=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录递归查找大于2G的文件</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc size=2g recurse=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录递归查找.conf结尾的文件，并且返回符合条件的文件的sha1校验码</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc patterns="*.conf" recurse=yes get_checksum=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="replace模块"><a href="#replace模块" class="headerlink" title="replace模块"></a>replace模块</h1><p>replace模块可以根据我们指定的正则表达式替换文件中的字符串，文件中所有被正则匹配到的字符串都会被替换</p><ul><li><strong>path:</strong> 必须参数，指定要操作的文件，别名:dest | destfile | name</li><li><strong>regexp:</strong> 必须参数，指定一个python正则表达式，文件中与正则匹配的字符串将会被替换</li><li><strong>replace:</strong> 指定最终要替换成的字符串</li><li><strong>backup:</strong> 是否在修改文件之前对文件进行备份，最好设置为yes</li></ul><p>将管理主机的/testdir/date文件中所有的ansible替换为saltstack，操作前进行文件备份</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m replace -a 'path=/testdir/date regexp="ansible" replace=saltstack backup=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h1><p>cron模块可以帮助我们配置管理节点的计划任务，功能相当于crontab命令</p><ul><li><strong>minute:</strong> 用于设置分钟值，格式为minute=5，如不指定此参数，则分钟值默认为 *</li><li><strong>hour:</strong> 用于设置小时值，格式为hour=5，如不指定此参数，则小时值默认为 *</li><li><strong>day:</strong> 用于设置日值，如不指定此参数，则日值默认为 *</li><li><strong>month:</strong> 用于设置月值，如不指定此参数，则月值默认为 *</li><li><strong>weekday:</strong> 用于设置周值，如不指定此参数，则月值默认为 *</li><li><strong>special_time:</strong> 时间设定格式为@reboot或者@hourly，这种@开头的时间设定格式则需要使用special_time参数进行设置</li></ul><p><strong>注意:</strong> 如果以上参数都不设置，则默认使用 <strong>* * * * *</strong> ，表示每分钟都执行一次。我们应该谨慎设置时间参数</p><ul><li><strong>user:</strong> 设置当前计划任务属于哪个用户，不指定则默认为管理员用户</li><li><strong>job:</strong> 执行计划任务中需要实际执行的命令或脚本</li><li><strong>name:</strong> 设置计划任务的名称，方便我们以后根据名称修改或者删除计划任务</li><li><strong>state:</strong> 可以根据已有名称的计划任务进行修改和删除，当删除时需要将state的值设置为absent</li><li><strong>disabled:</strong> 可以将已有名称的计划任务注释，但使用此参数除了指定任务名称还需要指定job以及时间的设定，否则注释任务时，任务的时间会被修改</li><li><strong>backup:</strong> 当此参数设置为yes，那么修改和删除计划任务时，会在管理节点的tmp目录下创建备份文件</li></ul><p>在管理节点创建名为test cron计划任务，每天的12点5分，任务内容为将test重定向到/tmp/test</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m cron -a 'name="test cron" minute=5 hour=12 job="echo test > /tmp/test"'# 管理节点的计划任务构建如下:#Ansible: test cron5 12 * * * echo test > /tmp/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在管理节点创建名为day cron计划任务，每三天执行一次。与执行当天的14点5分开始执行，任务内容为输出test</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m cron -a 'name="day cron" minute=5 hour=14 day=*/3 job="echo test"'# 管理节点的计划任务构建如下:#Ansible: day cron5 14 */3 * * echo test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在管理节点创建名为day cron计划任务，任务在重启时执行，任务内容为输出test</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m cron -a 'name="day cron" special_time=reboot job="echo test"'# 由于已存在day cron任务，ansible就会认为我们是需要修改这个任务，计划任务被修改为:#Ansible: day cron@reboot echo test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在管理节点注释掉我们之前创建的test cron任务，注释时进行备份</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m cron -a 'name="test cron" minute=5 hour=12 job="echo test > /tmp/test" disabled=yes backup=yes'# 符合注释条件的计划任务就会被注释掉:#Ansible: test cron#5 12 * * * echo test > /tmp/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果你注释计划任务时，设置了错误的时间和job，那么注释对应任务时(以name去对应)，时间和job的设定也会发生改变</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m cron -a 'name="test cron" hour=23 job="echo test > /tmp/test" disabled=yes backup=yes'#Ansible: test cron#* 23 * * * echo test > /tmp/test    # 注释的同时，时间设定也会改变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h1><p>service模块可以对管理节点上的服务进行管理，例如启动或停止管理节点的nginx服务。但前提是这个服务必须被BSD init | OpenRC | SysV | Solaris SMF | systemd | upstart中的任意一种所管理，意思就是这个服务在centos6管理节点能以service nginx start启动，在centos7管理节点能以systemctl start nginx启动。如果管理节点上的服务无法通过这样的方式启动，那么service模块也无法对它进行管理。</p><ul><li><strong>name:</strong> 用于指定操作的服务名称，例如name=nginx</li><li><strong>state:</strong> 用户指定服务的状态，可用值有started | stopped | restarted | reloaded</li><li><strong>enabled:</strong> 用于指定是否将服务设置为开机启动项，设置为yes则表示开机启动，设置为no表示不会开机启动</li></ul><p>在管理节点上启动nginx服务</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m service -a 'name=nginx state=started'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上启动mysql服务并设置为开机启动</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m service -a 'name=mysql state=started enabled=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h1><p>user模块可用帮助我们在管理节点上创建用户、修改用户、删除用户、为用户创建密钥对等操作</p><ul><li><p><strong>name:</strong> 必须参数，用于指定要操作的用户名称</p></li><li><p><strong>group:</strong> 用于指定用户所在的基本组</p></li><li><p><strong>shell:</strong> 用于指定用户的默认shell</p></li><li><p><strong>uid:</strong> 用于指定用户的uid号</p></li><li><p><strong>expires:</strong> 用于指定用户的过期时间</p></li><li><p><strong>comment:</strong> 用于指定用户的注释信息</p></li><li><p><strong>state:</strong> 用于指定用户是否存在于远程主机中，默认值为present，表示用户需要存在，当设置为absent时表示删除用户</p></li><li><p><strong>remove:</strong> 默认值为no，表示删除用户时不会删除家目录，设置为yes则表示删除用户时删除用户家目录</p></li><li><p><strong>password:</strong> 用于指定用户的密码，但是这个密码不能是明文的密码</p></li><li><p><strong>generate_ssh_key:</strong> 默认值为no，如果设置为yes则表示为用户在家目录的.ssh下创建密钥对，如果对应的路径已有同名密钥对则不进行任何操作</p></li><li><p>*<em>ssh_key_file: *</em>默认值为yes，使用此参数自定义生成ssh私钥的路径和名称</p></li><li><p><strong>ssh_key_passph rase:</strong> 当generate_ssh_key参数的值为yes时，在创建证书时使用此参数设置私钥的密码</p></li><li><p><strong>ssh_key_type:</strong> 当generate_ssh_key参数的值为yes时，在创建证书时使用此参数设置密钥对的类型</p><p>在管理节点上创建mis用户，并把用户添加到root组，如果用户已存在则不做任何操作</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m user -a 'name=mis group=root'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上删除mis用户，同时把用户家目录也删除</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m user -a 'name=mis state=absent remove=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上创建mis用户，指定用户的注释信息，设置用户过期时间是2020-06-15</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m user -a 'name=mis comment="missf.top" expires=1592150400'# 先使用"date -d 2020-06-15 +%s"命令得到Unix时间戳<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在管理节点上为mis用户设置密码，加密字符串可以使用python得到</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m user -a 'name=mis password="$6$d62UFoKtSRA9Yaq4$qtvyr5atLdoXgvXOhktU.baVqbtlcaWc9dizmM41Bc9XOaTZW/Pqaxb8pofS5Wo4n5Nu/CEk8GEsKnC2zTfEl1"'可以使用 import crypt; crypt.crypt("123456") 得到123456加密之后的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在管理节店上为mis用户生成密钥对，同时指定私钥密码为123456，密钥对的类型为dsa，如不指定密钥对类型默认为rsa</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m user -a 'name=mis generate_ssh_key=yes ssh_key_passphrase="123456" ssh_key_type=dsa'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="group模块"><a href="#group模块" class="headerlink" title="group模块"></a>group模块</h1><p>group模块可以帮助我们在管理节点上管理用户组</p><ul><li><p><strong>name:</strong> 用于指定操作的服务名称，例如name=nginx</p></li><li><p><strong>state:</strong> 用户指定服务的状态，可用值有started | stopped | restarted | reloaded</p></li><li><p><strong>enabled:</strong> 用于指定是否将服务设置为开机启动项，设置为yes则表示开机启动，设置为no表示不会开机启动</p><p>确保管理节点上存在mkd组，如果没有则创建，如果已存在则不做任何操作</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m group -a 'name=mkd'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上删除mkd组，前提是不能有用户把被删除的组当成主组，不然不能成功删除</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m group -a 'name=mkd state=absent'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="yum-repository模块"><a href="#yum-repository模块" class="headerlink" title="yum_repository模块"></a>yum_repository模块</h1><p>yum_repository模块可以帮助我们在管理节点上管理yum仓库</p><ul><li><strong>name:</strong> 必须参数，指定要操作的唯一仓库ID，repo配置文件中括号的仓库ID</li><li><strong>baseurl:</strong> 用于设置yum仓库的baseurl</li><li><strong>description:</strong> 用于设置仓库的注释信息，repo配置文件中name字段对应的内容</li><li><strong>file:</strong> 用户设置仓库的配置文件名称，就是repo配置文件的前缀，如不指定则默认以仓库ID命名</li><li><strong>enabled:</strong> 用于设置是否激活对应的yum源</li><li><strong>gpgcheck:</strong> 用于设置是否开启rpm包验证功能，默认值为no表示不开启包验证，设置为yes表示开启</li><li><strong>gpgcakey:</strong> 当开启包验证功能时，使用此参数指定验证包所需的公钥</li><li><strong>state:</strong> 默认值为present，设置为absent表示删除对应的yum源</li></ul><p>在管理节点上创建前缀为aliepel的repo文件，设置注释信息和不验证包功能</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m yum_repository -a 'name=aliepel description="alibaba_epel" baseurl=https://mirrors.aliyun.com/epel/$releasever\Server/$basearch/  gpgcheck=no'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点创建指定名称为ali的repo文件，但是不启用它</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m yum_repository -a 'name=aliepel description="alibaba_epel" file=ali baseurl=https://mirrors.aliyun.com/epel/$releasever\Server/$basearch/ gpgcheck=no enabled=no'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a>yum模块</h1><p>yum模块可以帮助我们在管理节点上管理软件包</p><ul><li><strong>name:</strong> 必须参数，用于指定需要管理的软件包名字</li><li><strong>state:</strong> 用户指定软件包的状态，默认是present，表示确认已安装软件包，installed与present等效，absent和removed等效，表示删除对应的软件包</li><li><strong>disable_gpg_check:</strong> 用于禁用对rpm包的公钥gpg验证，默认值为no表示不禁用验证，设置为yes表示禁用验证，如果yum源没有开启验证需要将此参数设置为yes</li><li><strong>enablerepo:</strong> 用于安装软件包时临时启用yum源，想要从A源安装软件，但是A源没有启用时，这个参数设置为yes表示临时启用</li><li><strong>disablerepo:</strong> 用于安装软件包时临时禁用yum源，当多个源中同时存在软件包时，可以临时禁用某个源</li></ul><p>确保管理节点上安装了nginx，禁用rpm包验证</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m yum -a 'name=nginx state=installed disable_gpg_check=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确保管理节点上安装了Telnet，并禁用rpm包验证和临时禁用local源</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m yum -a 'name=telnet disable_gpg_check=yes disablerepo=local'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="template模块"><a href="#template模块" class="headerlink" title="template模块"></a>template模块</h1><ul><li><strong>src:</strong> 控制节点上的模板文件</li><li><strong>dest</strong>: 管理节点上将被控制节点上的模板文件所替换的文件</li><li><strong>owner:</strong> 指定控制节点拷贝到管理节点的文件属主</li><li><strong>group:</strong> 指定控制节点拷贝到管理节点的文件属组</li><li><strong>mode:</strong> 指定控制节点拷贝到管理节点的文件权限</li><li><strong>force:</strong> 如果管理节点已存在同名文件并且内容不同时，是否强制覆盖，默认值为yes表示覆盖</li><li><strong>backup:</strong> 如果管理节点已存在同名文件并且内容不同时，是否对管理节点源文件进行备份</li></ul><p>将控制节点配置好的模板文件分发到管理节点的/etc/redis.conf，设置不强制覆盖</p><pre class="line-numbers language-yaml"><code class="language-yaml">ansible all <span class="token punctuation">-</span>m template <span class="token punctuation">-</span>a 'src=/root/redis.conf dest=/etc/redis.conf force=no'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible主机清单(4)</title>
    <link href="https://www.missf.top/post/334c7279.html"/>
    <id>https://www.missf.top/post/334c7279.html</id>
    <published>2020-05-10T02:12:59.000Z</published>
    <updated>2020-06-02T07:51:22.024Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="认识主机清单"><a href="#认识主机清单" class="headerlink" title="认识主机清单"></a>认识主机清单</h1><p>Ansible可同时操作属于一个组的多台主机， 组和主机之间的关系通过 <code>inventory</code> 文件配置. 默认的文件路径为 <code>/etc/ansible/hosts</code>，执行命令的时候使用 <code>-i</code> 参数即可指定主机清单。</p><h1 id="主机清单示例"><a href="#主机清单示例" class="headerlink" title="主机清单示例"></a>主机清单示例</h1><p>主机清单文件主要有 <strong>ini</strong> 和 <strong>yaml</strong> 格式两种语法格式</p><pre class="line-numbers language-shell"><code class="language-shell">mail.example.com       # 定义主机fqdn地址, 需要已经与控制节点ssh互信localhost ansible_connection=local  # ansible_connection可以定义连接类型, local是在本地执行,默认是smarthost4 ansible_host=10.10.110.123 ansible_port=50312 ansible_user=root ansible_password=12345 # 指定别名，定义主机ssh连接信息www[1:50].example.com # 定义 1-50范围内的主机www-[a:d].example.com # 定义 a-d 范围内的主机[dbservers]three.example.com  ansible_python_interpreter=/usr/local/bin/python3  # 定义python执行ansible，这个是指定被控节点的python192.168.77.123  ansible_ruby_interpreter=/usr/bin/ruby.1.9.3  # 定义ruby执行文件webservers:vars] # 定义webservers组的变量ntp_server=ntp.example.comproxy=proxy.example.com[server:children] # 定义server组的子成员，执行server组时，webservers和dbservers组内的管理节点也会执行webserversdbservers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ini和yaml格式对比"><a href="#ini和yaml格式对比" class="headerlink" title="ini和yaml格式对比"></a>ini和yaml格式对比</h1><pre class="line-numbers language-shell"><code class="language-shell"># 先写出ini风格[dbserver]db1 ansible_host=10.10.110.122 ansible_port=22 ansible_user=root ansible_password=0[webserver]web1 ansible_host=10.10.110.123 ansible_port=22 ansible_user=root ansible_password=0[server:children]dbserverwebserver# 定义子组成员时，需要children关键字# 和上面一样的配置，这是yaml风格的写法all:  children:    server:      children:        dbserver:          hosts:            10.10.110.122        webserver:          hosts:            10.10.110.123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yaml格式配置的还是挺复杂的，可读性也差，建议使用<code>ini</code>方式来设置主机清单。</p></blockquote><h1 id="默认组"><a href="#默认组" class="headerlink" title="默认组"></a>默认组</h1><p>在主机清单中，ansible会自动的生成两个组。</p><ul><li><strong>all</strong> 所有的主机</li><li><strong>ungrouped</strong> 包含没有组的主机</li></ul><p>尽管这两个组是永远存在的，但也有可能是隐藏的，不会出现group_names之类的组列表中。</p><h1 id="主机变量和组变量"><a href="#主机变量和组变量" class="headerlink" title="主机变量和组变量"></a>主机变量和组变量</h1><p>如果你不想在主机清单中定义主机的变量或者组的变量，ansible还支持在特定的目录中定义变量，变量文件必须以yaml语法定义。</p><p>默认在<strong>/etc/ansible/host_vars/</strong> 目录中定义主机变量，文件名称以主机名称命名，结束可以用”.yml”,”.yaml”,”.json”三种格式。</p><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/ansible/host_vars/db1ntp_server: acme.example.orgdatabase_server: storage.example.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认在 <code>/etc/ansible/group_vars/</code> 目录中定义组变量，文件名称以组名称命名，结束可以用”.yml”,”.yaml”,”.json”三种格式。</p><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/ansible/group_vars/dbserverntp_server: acme.example.orgdatabase_server: storage.example.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>变量优先级问题，如果在各个环节都设置了变量，到底哪个变量生效呢？优先顺序，all最低，host最高:</p><ul><li>all group</li><li>parent group</li><li>child group</li><li>host</li></ul><h1 id="使用多个主机清单"><a href="#使用多个主机清单" class="headerlink" title="使用多个主机清单"></a>使用多个主机清单</h1><p>在命令参数中，使用多个 <code>-i</code> 就可以指定多个主机清单</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -i staging -i production -m pingansible all -i /tmp/staging -i /tmp/production -m ping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="使用-ssh-秘钥连接主机"><a href="#使用-ssh-秘钥连接主机" class="headerlink" title="使用 ssh 秘钥连接主机"></a>使用 ssh 秘钥连接主机</h1><pre class="line-numbers language-shell"><code class="language-shell"># 生成秘钥ssh-keygen -t rsa# 发送公钥文件到管理节点ssh-copy-id -i /root/.ssh/id_rsa.pub -p 22 root@10.10.110.122# 现在主机清单里不用再填写账号密码了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible快速开始(3)</title>
    <link href="https://www.missf.top/post/bf783834.html"/>
    <id>https://www.missf.top/post/bf783834.html</id>
    <published>2020-05-09T01:12:59.000Z</published>
    <updated>2020-06-02T07:51:22.033Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Ansible快速开始"><a href="#Ansible快速开始" class="headerlink" title="Ansible快速开始"></a>Ansible快速开始</h1><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><p>control os: <code>centos 7.7 x64</code></p><p>ansible version: <code>2.9.7</code></p><p>python version:<code>2.7.5</code></p><h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><p><strong>在Control node上去连接Managed nodes</strong></p><h1 id="定义主机清单"><a href="#定义主机清单" class="headerlink" title="定义主机清单"></a>定义主机清单</h1><blockquote><p>定义一个简单的通过ssh认证的主机清单</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/ansible/hosts10.10.110.122 ansible_user=root ansible_pass=0 ansible_port=22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主机清单的配置含义:</p><ul><li><code>ansible_host</code> 定义管理节点ip地址</li><li><code>ansible_user</code> 连接管理节点的用户</li><li><code>ansible_pass</code> 连接管理节点的用户密码</li><li><code>ansible_port</code> 连接端口号默认是22</li></ul><h1 id="执行ansible命令"><a href="#执行ansible命令" class="headerlink" title="执行ansible命令"></a>执行ansible命令</h1><blockquote><p>测试Control node和Managed nodes的连接状态</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">ansible 10.10.110.122 -m ping# 命令中的含义 -192.168.77.135 用于匹配主机清单中的主机名称 -m ping 指定 ping 模块，用于测试与管理节点的连接状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果提示如下错误:</p><p>10.10.110.122 | FAILED! =&gt; {<br>    “msg”: “Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host’s fingerprint to your known_hosts file to manage this host.”<br>}</p><p>这是因为Control node和Managed nodes第一次连接需要先添加指纹信息，可以先使用ssh连接一次，如果机器太多的话，可以在ansible配置文件开启host_key_checking = False</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/ansible/ansible.cfghost_key_checking = False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>再次测试连接状态</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">ansible 10.10.110.122 -m ping10.10.110.122 | SUCCESS => {    "ansible_facts": {        "discovered_interpreter_python": "/usr/bin/python"    },     "changed": false,     "ping": "pong"}# 看到"ping": "pong"表示连接成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible安装(2)</title>
    <link href="https://www.missf.top/post/3ebd0a7f.html"/>
    <id>https://www.missf.top/post/3ebd0a7f.html</id>
    <published>2020-05-08T03:12:59.000Z</published>
    <updated>2020-06-02T07:51:22.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="安装-Ansible"><a href="#安装-Ansible" class="headerlink" title="安装 Ansible"></a>安装 Ansible</h1><blockquote><p><strong>对管理主机的要求</strong></p><p>目前,只要机器上安装了 Python 2（版本2.6或2.7）或Python 3（版本3.5及更高版本）都可以运行Ansible (windows系统不可以做管理主机) 管理主机的系统可以是 Red Hat, Debian, CentOS, macOS, BSD的各种版本。</p></blockquote><blockquote><p><strong>对节点主机的要求</strong></p><p>通常我们使用 ssh 与节点通信，默认使用 sftp. 如果 sftp 不可用，可在 ansible.cfg 配置文件中配置成 scp 的方式. 在节点上也需要安装Python 2（2.6或更高版本）或Python 3（3.5或更高版本）</p><p>如果节点启用了<code>selinux</code>, 在使用<code>copy</code>/<code>file</code>/<code>template</code>时需要安装 <code>libselinux-python</code> 包。</p></blockquote><h1 id="在管理节点上安装Ansible"><a href="#在管理节点上安装Ansible" class="headerlink" title="在管理节点上安装Ansible"></a>在管理节点上安装Ansible</h1><pre class="line-numbers language-shell"><code class="language-shell"># Centos/RHELwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repowget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repoyum install -y ansible# Ubuntusudo apt updatesudo apt install software-properties-commonsudo apt-add-repository --yes --update ppa:ansible/ansiblesudo apt install ansible<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="bash命令行自动补全"><a href="#bash命令行自动补全" class="headerlink" title="bash命令行自动补全"></a>bash命令行自动补全</h1><blockquote><p>在Ansible 2.9之后，就支持了命令行参数补齐功能</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell"># Centos/RHELyum install -y epel-releaseyum install -y python-argcomplete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="将补全加入环境变量"><a href="#将补全加入环境变量" class="headerlink" title="将补全加入环境变量"></a>将补全加入环境变量</h1><pre class="line-numbers language-shell"><code class="language-shell">activate-global-python-argcompletesource /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
