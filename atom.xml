<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒原饮露</title>
  
  <subtitle>青春不是隔岸观火啊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.missf.top/"/>
  <updated>2020-05-13T02:09:20.672Z</updated>
  <id>https://www.missf.top/</id>
  
  <author>
    <name>荒原饮露</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ansible主机清单</title>
    <link href="https://www.missf.top/2020/05/10/ansible%E4%B8%BB%E6%9C%BA%E6%B8%85%E5%8D%95/"/>
    <id>https://www.missf.top/2020/05/10/ansible%E4%B8%BB%E6%9C%BA%E6%B8%85%E5%8D%95/</id>
    <published>2020-05-10T02:12:59.000Z</published>
    <updated>2020-05-13T02:09:20.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="认识主机清单"><a href="#认识主机清单" class="headerlink" title="认识主机清单"></a>认识主机清单</h1><p>Ansible可同时操作属于一个组的多台主机， 组和主机之间的关系通过 <code>inventory</code> 文件配置. 默认的文件路径为 <code>/etc/ansible/hosts</code>，执行命令的时候使用 <code>-i</code> 参数即可指定主机清单。</p><h1 id="主机清单示例"><a href="#主机清单示例" class="headerlink" title="主机清单示例"></a>主机清单示例</h1><p>主机清单文件主要有 <code>ini</code> 和 <code>yaml</code> 格式两种语法格式</p><pre><code>mail.example.com       # 定义主机fqdn地址, 需要已经与控制节点ssh互信localhost ansible_connection=local  # ansible_connection可以定义连接类型, local是在本地执行,默认是smarthost4 ansible_host=10.10.110.123 ansible_port=50312 ansible_user=root ansible_password=12345 # 指定别名，定义主机ssh连接信息www[1:50].example.com # 定义 1-50范围内的主机www-[a:d].example.com # 定义 a-d 范围内的主机[dbservers]three.example.com  ansible_python_interpreter=/usr/local/bin/python3  # 定义python执行ansible，这个是指定被控节点的python192.168.77.123  ansible_ruby_interpreter=/usr/bin/ruby.1.9.3  # 定义ruby执行文件webservers:vars] # 定义webservers组的变量ntp_server=ntp.example.comproxy=proxy.example.com[server:children] # 定义server组的子成员，执行server组时，webservers和dbservers组内的管理节点也会执行webserversdbservers</code></pre><h1 id="ini和yaml格式对比"><a href="#ini和yaml格式对比" class="headerlink" title="ini和yaml格式对比"></a>ini和yaml格式对比</h1><pre><code># 先写出ini风格[dbserver]db1 ansible_host=10.10.110.122 ansible_port=22 ansible_user=root ansible_password=0[webserver]web1 ansible_host=10.10.110.123 ansible_port=22 ansible_user=root ansible_password=0[server:children]dbserverwebserver# 定义子组成员时，需要children关键字# 和上面一样的配置，这是yaml风格的写法all:  children:    server:      children:        dbserver:          hosts:            10.10.110.122        webserver:          hosts:            10.10.110.123</code></pre><blockquote><p>yaml格式配置的还是挺复杂的，可读性也差，建议使用<code>ini</code>方式来设置主机清单。</p></blockquote><h1 id="默认组"><a href="#默认组" class="headerlink" title="默认组"></a>默认组</h1><p>在主机清单中，ansible会自动的生成两个组。</p><ul><li><code>all</code> 所有的主机</li><li><code>ungrouped</code> 包含没有组的主机</li></ul><p>尽管这两个组是永远存在的，但也有可能是隐藏的，不会出现group_names之类的组列表中。</p><h1 id="主机变量和组变量"><a href="#主机变量和组变量" class="headerlink" title="主机变量和组变量"></a>主机变量和组变量</h1><p>如果你不想在主机清单中定义主机的变量或者组的变量，ansible还支持在特定的目录中定义变量，变量文件必须以yaml语法定义。</p><p>默认在<code>/etc/ansible/host_vars/</code> 目录中定义主机变量，文件名称以主机名称命名，结束可以用”.yml”,”.yaml”,”.json”三种格式。</p><pre><code>cat /etc/ansible/host_vars/db1ntp_server: acme.example.orgdatabase_server: storage.example.org</code></pre><p>默认在 <code>/etc/ansible/group_vars/</code> 目录中定义组变量，文件名称以组名称命名，结束可以用”.yml”,”.yaml”,”.json”三种格式。</p><pre><code>cat /etc/ansible/group_vars/dbserverntp_server: acme.example.orgdatabase_server: storage.example.org</code></pre><p>变量优先级问题，如果在各个环节都设置了变量，到底哪个变量生效呢？优先顺序，all最低，host最高:</p><ul><li>all group</li><li>parent group</li><li>child group</li><li>host</li></ul><h1 id="使用多个主机清单"><a href="#使用多个主机清单" class="headerlink" title="使用多个主机清单"></a>使用多个主机清单</h1><p>在命令参数中，使用多个 <code>-i</code> 就可以指定多个主机清单</p><pre><code>ansible all -i staging -i production -m pingansible all -i /tmp/staging -i /tmp/production -m ping</code></pre><h1 id="使用-ssh-秘钥连接主机"><a href="#使用-ssh-秘钥连接主机" class="headerlink" title="使用 ssh 秘钥连接主机"></a>使用 ssh 秘钥连接主机</h1><pre><code># 生成秘钥ssh-keygen -t rsa# 发送公钥文件到管理节点ssh-copy-id -i /root/.ssh/id_rsa.pub -p 22 root@10.10.110.122# 现在主机清单里不用再填写账号密码了</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible快速开始</title>
    <link href="https://www.missf.top/2020/05/09/ansible%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>https://www.missf.top/2020/05/09/ansible%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</id>
    <published>2020-05-09T01:12:59.000Z</published>
    <updated>2020-05-13T02:09:03.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Ansible快速开始"><a href="#Ansible快速开始" class="headerlink" title="Ansible快速开始"></a>Ansible快速开始</h1><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><p>control os: <code>centos 7.7 x64</code></p><p>ansible version: <code>2.9.7</code></p><p>python version:<code>2.7.5</code></p><h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><p><strong>在Control node上去连接Managed nodes</strong></p><h1 id="定义主机清单"><a href="#定义主机清单" class="headerlink" title="定义主机清单"></a>定义主机清单</h1><blockquote><p>定义一个简单的通过ssh认证的主机清单</p></blockquote><pre><code>cat /etc/ansible/hosts10.10.110.122 ansible_user=root ansible_pass=0 ansible_port=22</code></pre><p>主机清单的配置含义:</p><ul><li><code>ansible_host</code> 定义管理节点ip地址</li><li><code>ansible_user</code> 连接管理节点的用户</li><li><code>ansible_pass</code> 连接管理节点的用户密码</li><li><code>ansible_port</code> 连接端口号默认是22</li></ul><h1 id="执行ansible命令"><a href="#执行ansible命令" class="headerlink" title="执行ansible命令"></a>执行ansible命令</h1><blockquote><p>测试Control node和Managed nodes的连接状态</p></blockquote><pre><code>ansible 10.10.110.122 -m ping# 命令中的含义 -192.168.77.135 用于匹配主机清单中的主机名称 -m ping 指定 ping 模块，用于测试与管理节点的连接状态</code></pre><blockquote><p>如果提示如下错误:</p><p>10.10.110.122 | FAILED! =&gt; {<br>    “msg”: “Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host’s fingerprint to your known_hosts file to manage this host.”<br>}</p><p>这是因为Control node和Managed nodes第一次连接需要先添加指纹信息，可以先使用ssh连接一次，如果机器太多的话，可以在ansible配置文件开启host_key_checking = False</p></blockquote><pre><code>cat /etc/ansible/ansible.cfghost_key_checking = False</code></pre><blockquote><p>再次测试连接状态</p></blockquote><pre><code>ansible 10.10.110.122 -m ping10.10.110.122 | SUCCESS =&gt; {    &quot;ansible_facts&quot;: {        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;    },     &quot;changed&quot;: false,     &quot;ping&quot;: &quot;pong&quot;}# 看到&quot;ping&quot;: &quot;pong&quot;表示连接成功</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible安装</title>
    <link href="https://www.missf.top/2020/05/08/ansible%E5%AE%89%E8%A3%85/"/>
    <id>https://www.missf.top/2020/05/08/ansible%E5%AE%89%E8%A3%85/</id>
    <published>2020-05-08T03:12:59.000Z</published>
    <updated>2020-05-13T02:09:11.673Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="安装-Ansible"><a href="#安装-Ansible" class="headerlink" title="安装 Ansible"></a>安装 Ansible</h1><blockquote><p><strong>对管理主机的要求</strong></p><p>目前,只要机器上安装了 Python 2（版本2.6或2.7）或Python 3（版本3.5及更高版本）都可以运行Ansible (windows系统不可以做管理主机) 管理主机的系统可以是 Red Hat, Debian, CentOS, macOS, BSD的各种版本。</p></blockquote><blockquote><p><strong>对节点主机的要求</strong></p><p>通常我们使用 ssh 与节点通信，默认使用 sftp. 如果 sftp 不可用，可在 ansible.cfg 配置文件中配置成 scp 的方式. 在节点上也需要安装Python 2（2.6或更高版本）或Python 3（3.5或更高版本）</p><p>如果节点启用了<code>selinux</code>, 在使用<code>copy</code>/<code>file</code>/<code>template</code>时需要安装 <code>libselinux-python</code> 包。</p></blockquote><h1 id="在管理节点上安装Ansible"><a href="#在管理节点上安装Ansible" class="headerlink" title="在管理节点上安装Ansible"></a>在管理节点上安装Ansible</h1><pre><code># Centos/RHELwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repowget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repoyum install -y ansible# Ubuntusudo apt updatesudo apt install software-properties-commonsudo apt-add-repository --yes --update ppa:ansible/ansiblesudo apt install ansible</code></pre><h1 id="bash命令行自动补全"><a href="#bash命令行自动补全" class="headerlink" title="bash命令行自动补全"></a>bash命令行自动补全</h1><blockquote><p>在Ansible 2.9之后，就支持了命令行参数补齐功能</p></blockquote><pre><code># Centos/RHELyum install -y epel-releaseyum install -y python-argcomplete</code></pre><h1 id="将补全加入环境变量"><a href="#将补全加入环境变量" class="headerlink" title="将补全加入环境变量"></a>将补全加入环境变量</h1><pre><code>activate-global-python-argcompletesource /etc/profile</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible介绍</title>
    <link href="https://www.missf.top/2020/05/07/ansible%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.missf.top/2020/05/07/ansible%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-05-07T08:12:59.000Z</published>
    <updated>2020-05-13T02:09:07.984Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Ansible介绍"><a href="#Ansible介绍" class="headerlink" title="Ansible介绍"></a>Ansible介绍</h1><p>Ansible 是2012年推出的一种通用自动化工具，ansible也是我接触的第一个自动化运维工具，ansible可以帮助我们完成一些批量任务，或者完成一些经常性的重复工作，在服务器集群场景下，ansible是我们运维的利器，Ansible 在2015年时被Redhat公司收购。Ansible是用Python编写的，它使用SSH在不同的机器上执行命令。Ansible是无代理的，这使得入手更容易。您只需要在相关机器上安装SSH和Python。Ansible使用声明式YAML语言”playbook”将一组主机(“hosts”)映射到定义明确的角色。</p><p>也许你会说，我写个shell脚本不也一样能实现批量服务器的管理吗？这里我想说的是，ansible支持一些优秀的特性:</p><ul><li>支持幂等性</li><li>No Agent</li><li>支持palybook实现复杂的任务</li><li>使用yaml语言</li></ul><p>先来说说什么是<strong>幂等性</strong>，假如我要在目标主机安装Nginx，但是我不确定这个主机是否已经安装了Nginx，当使用ansible完成这个任务时，问题就会变得简单，如果目标主机已经安装Nginx，则ansible不会进行任何操作，如果目标主机未安装Nginx，ansible才会开始工作，ansible是<strong>以导向为结果</strong>的，我们指定一个状态，ansible就会自动判断，把服务器的状态调整为我们指定的状态，我多次执行，结果都是一样的，这就是幂等性。</p><p>使用zabbix监控一百台服务器，这一百台服务器都需要安装zabbix  agent，但是ansible是不需要在管理节点上安装客户端代理程序的，因为它基于ssh工作，只要Control node能通过ssh连接到Managed nodes就能通过ansible管理对应的管理节点了，还有就是ansible的控制节点不用单独启动服务，能直接运行命令。</p><h1 id="Ansible的目标"><a href="#Ansible的目标" class="headerlink" title="Ansible的目标"></a>Ansible的目标</h1><p><strong>实现一切自动化</strong></p><h1 id="Ansible的应用场景"><a href="#Ansible的应用场景" class="headerlink" title="Ansible的应用场景"></a>Ansible的应用场景</h1><ul><li>自动化部署应用</li><li>自动化管理配置</li><li>自动化的持续交付</li><li>自动化的云服务管理</li><li>自动化网络设备管理</li></ul><h1 id="Ansible的工作原理"><a href="#Ansible的工作原理" class="headerlink" title="Ansible的工作原理"></a>Ansible的工作原理</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5eb61cb0c2a9a83be555278f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>安装ansible到管理节点，定义好主机清单，编写好palybook，就能运行ansible批量管理管理节点。步骤如下:</p><ol><li>在控制节点上安装ansible</li><li>配置主机清单: 将被控节点的连接信息配置到主机清单中</li><li>定义playbook: 指定运行主机和执行任务</li></ol><h1 id="对节点主机的要求"><a href="#对节点主机的要求" class="headerlink" title="对节点主机的要求"></a>对节点主机的要求</h1><p>通常我们使用 ssh 与节点通信，默认使用 sftp. 如果 sftp 不可用，可在 ansible.cfg 配置文件中配置成 scp 的方式. 在节点上也需要安装Python 2（2.6或更高版本）或Python 3（3.5或更高版本）</p><h1 id="Ansible的概念"><a href="#Ansible的概念" class="headerlink" title="Ansible的概念"></a>Ansible的概念</h1><h2 id="控制节点-Control-node"><a href="#控制节点-Control-node" class="headerlink" title="控制节点(Control node)"></a>控制节点(Control node)</h2><p>任何装有Ansible的机器可称为 <strong>控制节点</strong> 。 您可以从任何控制节点运行命令和剧本，并调用<code>/usr/bin/ansible</code>或<code>/usr/bin/ansible-playbook</code>命令，您可以将任何安装了Python的计算机用作控制节点,笔记本电脑,共享桌面和服务器都可以运行Ansible。 但是不能将Windows计算机用作控制节点。您也可以有多个控制节点。</p><h2 id="管理节点-Managed-nodes"><a href="#管理节点-Managed-nodes" class="headerlink" title="管理节点(Managed nodes)"></a>管理节点(Managed nodes)</h2><p>使用Ansible管理的网络设备或服务器可称为 <strong>管理节点</strong>。 受管节点有时也称为 <strong>主机</strong> 。 受管节点上是不需要安装Ansible的。</p><h2 id="主机清单-Inventory"><a href="#主机清单-Inventory" class="headerlink" title="主机清单(Inventory)"></a>主机清单(Inventory)</h2><p>托管节点的列表。库存文件有时也称为主机文件。您的目录可以为每个托管节点指定诸如IP地址之类的信息。库存还可以组织托管节点，创建和嵌套组，以便于扩展。</p><h2 id="模块-Modules"><a href="#模块-Modules" class="headerlink" title="模块(Modules)"></a>模块(Modules)</h2><p>Ansible执行的具体代码。每个模块都有特定的用途，从管理特定类型数据库的用户到管理特定类型网络设备上的VLAN接口。您可以使用任务调用单个模块，也可以调用剧本中的几个不同模块。</p><h2 id="任务-Tasks"><a href="#任务-Tasks" class="headerlink" title="任务(Tasks)"></a>任务(Tasks)</h2><p>Ansible的行动单位。tasks包含一组由module组成的任务列表, 您可以使用特别的命令一次性执行单个任务。</p><h2 id="剧本-Playbooks"><a href="#剧本-Playbooks" class="headerlink" title="剧本(Playbooks)"></a>剧本(Playbooks)</h2><p>保存了已排序的任务列表，因此可以按此顺序重复运行这些任务。剧本可以包括变量和任务。剧本是用 <strong>YAML</strong> 编写的，易于阅读、编写、共享和理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day07</title>
    <link href="https://www.missf.top/2020/04/28/Python%E5%9F%BA%E7%A1%80day07/"/>
    <id>https://www.missf.top/2020/04/28/Python%E5%9F%BA%E7%A1%80day07/</id>
    <published>2020-04-28T11:42:45.000Z</published>
    <updated>2020-05-13T02:11:06.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>一般情况下，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 闭包</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">6</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b <span class="token operator">=</span> <span class="token number">8</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token punctuation">)</span>    res<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h1><p>我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for…in…中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。那么，在这个迭代过程中就应该有一个“记录员”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“记录员”称为迭代器(Iterator)。可迭代对象的本质就是可以向我们提供一个这样的“记录员”即迭代器帮助我们对其进行迭代遍历使用</p><h2 id="转化成迭代器"><a href="#转化成迭代器" class="headerlink" title="转化成迭代器"></a>转化成迭代器</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 内部含有"__iter__"并且含有"__next__"方法的就是迭代器，遵循迭代器协议</span>s2 <span class="token operator">=</span> <span class="token string">"cdfv"</span>ol <span class="token operator">=</span> s2<span class="token punctuation">.</span>__iter__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 可迭代对象通过__iter__或者iter()方法转化成迭代器</span><span class="token comment" spellcheck="true"># print(ol)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一个next对应一个值，一一对应</span><span class="token keyword">print</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cdfv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断对象是否为迭代器"><a href="#判断对象是否为迭代器" class="headerlink" title="判断对象是否为迭代器"></a>判断对象是否为迭代器</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断一个对象是否是可迭代对象，方法一</span>s1 <span class="token operator">=</span> <span class="token string">'asdf'</span>jo <span class="token operator">=</span> iter<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将可迭代对象转化成迭代器</span><span class="token keyword">print</span><span class="token punctuation">(</span>jo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__iter__"</span> <span class="token keyword">in</span> dir<span class="token punctuation">(</span>jo<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">"__next__"</span> <span class="token keyword">in</span> dir<span class="token punctuation">(</span>jo<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断是否同时含有这两个方法</span><span class="token operator">&lt;</span>str_iterator object at <span class="token number">0x000000FE3E7E0898</span><span class="token operator">></span><span class="token boolean">True</span><span class="token comment" spellcheck="true"># 判断一个对象是否是可迭代对象，方法二</span><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable<span class="token punctuation">,</span>Iterator   <span class="token comment" spellcheck="true"># 导入Iterable,Iterator方法</span>so <span class="token operator">=</span> <span class="token string">'asdf'</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>so<span class="token punctuation">,</span>Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 判断对象是否是可迭代</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>so<span class="token punctuation">,</span>Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 判断对象是否是迭代器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>生成器本质上是迭代器，生成器是自己用Python代码写的迭代器，平时我们用iter将一个迭代对象转化成迭代器，是调用iter方法底层的C代码实现的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将一个函数变成生成器函数</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">789</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> fun<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将函数赋值使用next打印，不能使用fun()调用函数进行打印</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一个next去取一个yield的值，之所以打印三个值是函数内部打印的，next(s)只打印了789</span><span class="token number">123</span><span class="token number">456</span><span class="token number">789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成器的send方法"><a href="#生成器的send方法" class="headerlink" title="生成器的send方法"></a>生成器的send方法</h2><p>一个send对应一个yield，但是如果send中有传值，就会将这个值发送给上一个yield</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 1.定义函数</span>    a <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">123</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token string">'有志青年'</span>    <span class="token keyword">yield</span> <span class="token string">'好好学习'</span>    <span class="token keyword">yield</span> <span class="token string">'天天向上'</span>genor <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2.函数赋值</span><span class="token keyword">print</span><span class="token punctuation">(</span>genor<span class="token punctuation">.</span>send<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 3.取一个yield，打印123</span><span class="token keyword">print</span><span class="token punctuation">(</span>genor<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Alex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 4.取下一个yield，并将Alex赋值给上一个yield，先执行的a = Alex;print(a),再打印有志青年</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成器的yield-from"><a href="#生成器的yield-from" class="headerlink" title="生成器的yield from"></a>生成器的yield from</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'努力'</span><span class="token punctuation">,</span><span class="token string">'奋斗'</span><span class="token punctuation">,</span><span class="token string">'向上'</span><span class="token punctuation">,</span><span class="token string">'乐观'</span><span class="token punctuation">]</span>    <span class="token keyword">yield</span> lst   <span class="token comment" spellcheck="true"># 将列表当成一个整体</span>genor <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>genor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'努力'</span><span class="token punctuation">,</span> <span class="token string">'奋斗'</span><span class="token punctuation">,</span> <span class="token string">'向上'</span><span class="token punctuation">,</span> <span class="token string">'乐观'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'努力'</span><span class="token punctuation">,</span><span class="token string">'奋斗'</span><span class="token punctuation">,</span><span class="token string">'向上'</span><span class="token punctuation">,</span><span class="token string">'乐观'</span><span class="token punctuation">]</span>    <span class="token keyword">yield</span> <span class="token keyword">from</span> lst  <span class="token comment" spellcheck="true"># 将列表中的每个元素逐个输出</span>genor <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(next(genor))</span><span class="token keyword">for</span> i <span class="token keyword">in</span> genor<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>努力奋斗向上乐观<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="列表所有值-1"><a href="#列表所有值-1" class="headerlink" title="列表所有值+1"></a>列表所有值+1</h1><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>i <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#  info[0] = 0 + 1</span>    info<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="列表推导式和生成器表达式"><a href="#列表推导式和生成器表达式" class="headerlink" title="列表推导式和生成器表达式"></a>列表推导式和生成器表达式</h1><h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>列表推导式就是用一行代码构建一个简单或者复杂的列表，减少代码量的同时又可以装逼</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 构建一个1 - 25的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'python%s期'</span> <span class="token operator">%</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 构建一个稍微复杂的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 构建一个30以内所有能被3整除的数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 所有能被3整除的数的平方</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'青年%s号'</span> <span class="token operator">%</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'*'</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 如果i能被3整除就为*，否则从range里面取值</span><span class="token comment" spellcheck="true"># 将列表中至少含有两个e的字符串放到一个列表中</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Tefe'</span><span class="token punctuation">,</span><span class="token string">'oIred'</span><span class="token punctuation">,</span><span class="token string">'Edvl'</span><span class="token punctuation">,</span><span class="token string">'fgte'</span><span class="token punctuation">,</span><span class="token string">'vfeke'</span><span class="token punctuation">,</span><span class="token string">'vfd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'dcvr'</span><span class="token punctuation">,</span><span class="token string">'vfer'</span><span class="token punctuation">,</span><span class="token string">'vfree'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>ll <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> names<span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> i<span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>            ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name <span class="token keyword">for</span> i <span class="token keyword">in</span> names <span class="token keyword">for</span> name <span class="token keyword">in</span> i <span class="token keyword">if</span> name<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 列表推导式能一行代码完成</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h2><p>生成器表达式与列表推导式几乎一模一样，就是[]换成了(),但是生成器在内存方面更占优势，列表推导式是一次性将数据加载到内存，而生成器则是取一点生成一点，更加节省内存</p><pre class="line-numbers language-python"><code class="language-python">genor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'python%s期'</span> <span class="token operator">%</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>genor<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> genor<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">:</span>None <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 值为None，key从range(1,11)取</span>am <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'s'</span><span class="token punctuation">:</span><span class="token string">'cd'</span><span class="token punctuation">,</span><span class="token string">'wf'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'r5'</span><span class="token punctuation">:</span><span class="token string">'km'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span>key <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> am<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将字典的键值对换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h1><pre class="line-numbers language-python"><code class="language-python">lp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lp<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 匿名函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 针对这种自有返回值的函数，可以写成简化的匿名函数</span>func <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x <span class="token operator">*</span> y        <span class="token comment" spellcheck="true"># 只能写成一行</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">)</span>suf <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">:</span>x <span class="token operator">*</span> y <span class="token operator">*</span> z<span class="token keyword">print</span><span class="token punctuation">(</span>suf<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day06</title>
    <link href="https://www.missf.top/2020/04/27/Python%E5%9F%BA%E7%A1%80day06/"/>
    <id>https://www.missf.top/2020/04/27/Python%E5%9F%BA%E7%A1%80day06/</id>
    <published>2020-04-27T05:45:29.000Z</published>
    <updated>2020-05-13T02:10:53.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><p>​                                                                                                                                                                                </p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><code>思考:不能使用len方法去统计一个字符串的长度</code></p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'cdvfdcmkcd'</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">]</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">:</span>    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以实现，但如果我在多处使用就会有重复性的代码。初学者一定要培养一种对代码完美的偏执，其实这也是面向过程编程的缺点:代码重复性较多，代码的可读性差。</p><h1 id="函数初识"><a href="#函数初识" class="headerlink" title="函数初识"></a>函数初识</h1><p>一个函数就是封装一个功能</p><pre class="line-numbers language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">my_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义函数名my_len</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">:</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>my_len<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用函数，不调用不会执行代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h1><p>函数中遇到return直接结束，给函数的调用者返回一个值，不写默认为None</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫荒原饮露'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在学习Python'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在让自己变得更加优秀'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>    <span class="token comment" spellcheck="true"># 直接结束函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我以后要...'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># return后面的不会输出</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'加油'</span><span class="token punctuation">)</span>我叫荒原饮露我在学习Python我在让自己变得更加优秀加油<span class="token comment" spellcheck="true"># 如果不写返回值，默认返回一个None</span>df <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>我叫荒原饮露我在学习Python我在让自己变得更加优秀None<span class="token comment" spellcheck="true"># 返回多个值</span><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'faker'</span><span class="token punctuation">,</span><span class="token string">'doinb'</span><span class="token punctuation">,</span><span class="token string">'jacklove'</span>skt<span class="token punctuation">,</span>fpx<span class="token punctuation">,</span>ig <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>skt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fpx<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ig<span class="token punctuation">)</span>fakerdoinbjacklove<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 函数的定义:形式参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'faker'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token number">2</span>y <span class="token operator">=</span> <span class="token number">3</span>date<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 函数的执行者:实际参数,将实参x,y传递给形参a,b</span>faker<span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span>positon<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 实参和形参的位置必须要对应</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s附近的%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>positon<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span>date<span class="token punctuation">(</span><span class="token string">'深圳'</span><span class="token punctuation">,</span><span class="token string">'女性'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 调用函数时，传入两个参数</span>深圳附近的女性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="键值对参数"><a href="#键值对参数" class="headerlink" title="键值对参数"></a>键值对参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span>tq<span class="token punctuation">,</span>name<span class="token punctuation">,</span>dc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 形式参数与实际参数的键对应，位置不需对应</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫%s,我喜欢的季节是%s,我学习%s已经一个月了'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>tq<span class="token punctuation">,</span>dc<span class="token punctuation">)</span><span class="token punctuation">)</span>date<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"小马哥"</span><span class="token punctuation">,</span>tq<span class="token operator">=</span><span class="token string">"秋季"</span><span class="token punctuation">,</span>dc<span class="token operator">=</span><span class="token string">"Python"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 以键值对的方式传入实际参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="混合参数"><a href="#混合参数" class="headerlink" title="混合参数"></a>混合参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 注意:位置参数必须在关键字参数的前面，不然会报错</span><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span>home<span class="token punctuation">,</span>tq<span class="token punctuation">,</span>name<span class="token punctuation">,</span>dc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫%s,我喜欢的季节是%s,我学习%s已经一个月了'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>tq<span class="token punctuation">,</span>dc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s赚钱%s花,一分别想带回%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>cs<span class="token punctuation">,</span>cs<span class="token punctuation">,</span>home<span class="token punctuation">)</span><span class="token punctuation">)</span>date<span class="token punctuation">(</span><span class="token string">'深圳'</span><span class="token punctuation">,</span><span class="token string">'家'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"小马哥"</span><span class="token punctuation">,</span>tq<span class="token operator">=</span><span class="token string">"秋季"</span><span class="token punctuation">,</span>dc<span class="token operator">=</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span>soft<span class="token punctuation">,</span>posi<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 默认参数需要放置位置参数的后面</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打开%s软件,搜索%s附近的%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>soft<span class="token punctuation">,</span>posi<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span>date<span class="token punctuation">(</span><span class="token string">'约会'</span><span class="token punctuation">,</span>posi<span class="token operator">=</span><span class="token string">'深圳南山区'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="万能参数"><a href="#万能参数" class="headerlink" title="万能参数"></a>万能参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 万能参数：两个形式参数，接收所有的位置参数，关键字参数</span><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 位置参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 关键字参数</span>date<span class="token punctuation">(</span><span class="token string">'南山区'</span><span class="token punctuation">,</span><span class="token string">'18'</span><span class="token punctuation">,</span>posi<span class="token operator">=</span><span class="token string">'深圳'</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'laddyboy'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'南山区'</span><span class="token punctuation">,</span> <span class="token string">'18'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将位置参数返回为一个元组</span><span class="token punctuation">{</span><span class="token string">'posi'</span><span class="token punctuation">:</span> <span class="token string">'深圳'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'laddyboy'</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 将关键字参数返回为一个字典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="的魔性用法"><a href="#的魔性用法" class="headerlink" title="*的魔性用法"></a>*的魔性用法</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># *的魔性用法</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span>kwargs<span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token string">'mk,j'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">**</span><span class="token punctuation">{</span><span class="token string">'ed'</span><span class="token punctuation">:</span><span class="token string">'12'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">**</span><span class="token punctuation">{</span><span class="token string">'cds'</span><span class="token punctuation">:</span><span class="token string">'lkj'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在调用函数时*是将多个元组的元素整合成一个元组，**是将多个字典整合成一个字典</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token string">'ed'</span><span class="token punctuation">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token string">'cds'</span><span class="token punctuation">:</span> <span class="token string">'lkj'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="形参的顺序问题"><a href="#形参的顺序问题" class="headerlink" title="形参的顺序问题"></a>形参的顺序问题</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'oi'</span><span class="token punctuation">,</span><span class="token string">'cd'</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"alex"</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span>男<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'oi'</span><span class="token punctuation">,</span> <span class="token string">'cd'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'alex'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 按照位置参数 *args 默认参数 **kwargs的顺序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="判断数值大小"><a href="#判断数值大小" class="headerlink" title="判断数值大小"></a>判断数值大小</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义两个形式参数，用来接收实际参数</span>    <span class="token keyword">if</span> a <span class="token operator">></span> b<span class="token punctuation">:</span>        <span class="token keyword">return</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><pre class="line-numbers language-python"><code class="language-python">dc <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token keyword">if</span> <span class="token number">6</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token keyword">else</span> <span class="token string">"B"</span>  <span class="token comment" spellcheck="true"># 如果条件成立dc就等于A，否则等于B</span><span class="token keyword">print</span><span class="token punctuation">(</span>dc<span class="token punctuation">)</span>A<span class="token keyword">def</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> a <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token keyword">else</span> b    <span class="token comment" spellcheck="true"># 如果a大于b，就return a否则return b</span>df <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token number">150</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数的命名空间"><a href="#函数的命名空间" class="headerlink" title="函数的命名空间"></a>函数的命名空间</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 函数的命名空间</span>name <span class="token operator">=</span> <span class="token string">'alex'</span>age <span class="token operator">=</span> <span class="token string">'23'</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sex <span class="token operator">=</span> <span class="token string">'女'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 变量赋值时会在内存中开辟一个名称空间用来存放变量名和对应的值</span><span class="token comment" spellcheck="true"># 定义函数时会在内存中开辟一个函数内存地址，但不会存放函数体的内容</span><span class="token comment" spellcheck="true"># 但函数调用时会再开辟一个临时名称空间，存放函数体的内容，并且临时名称空间随着函数的调用结束而消失</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在python解释器开始执行之后, 就会在内存中开辟一个空间, 每当遇到一个变量的时候, 就把变量名和值之间的关系记录下来, 但是当遇到函数定义的时候, 解释器只是把函数名读入内存, 表示这个函数存在了, 至于函数内部的变量和逻辑, 解释器是不关心的. 也就是说一开始的时候函数只是加载进来, 仅此而已, 只有当函数被调用和访问的时候, 解释器才会根据函数内部声明的变量来进行开辟变量的内部空间. 随着函数执行完毕, 这些函数内部变量占用的空间也会随着函数执行完毕而被清空</p><p>我们给这个存放名字与值的关系的空间起了一个名字——命名空间</p><ul><li>全局名称空间:存放的是py文件中变量与值的对应关系</li><li>局部名称空间:存放的是函数体里面的变量与值的对应关系</li><li>内置名称空间:内置函数，关键字等</li></ul><h2 id="加载到内存的顺序"><a href="#加载到内存的顺序" class="headerlink" title="加载到内存的顺序"></a>加载到内存的顺序</h2><p>内置名称空间 —&gt; 全局名称空间 —&gt; 局部名称空间(当函数执行时)</p><h2 id="取值顺序"><a href="#取值顺序" class="headerlink" title="取值顺序"></a>取值顺序</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 取值顺序，就近原则</span><span class="token comment" spellcheck="true"># 局部名称空间 ---> 全局名称空间</span>name <span class="token operator">=</span> <span class="token string">'mwj'</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'lok'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span>lok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="globals和locals"><a href="#globals和locals" class="headerlink" title="globals和locals"></a>globals和locals</h1><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'li'</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'alex'</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">'qw'</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>globals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回一个字典：包含全局作用域的所有内容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 返回一个字典：当前作用域的所有内容</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'__name__'</span><span class="token punctuation">:</span> <span class="token string">'__main__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>_frozen_importlib_external<span class="token punctuation">.</span>SourceFileLoader object at <span class="token number">0x0000009D39BA5860</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'__annotations__'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>module <span class="token string">'builtins'</span> <span class="token punctuation">(</span>built<span class="token operator">-</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">:</span> <span class="token string">'C:/Python3.7/Python_Scripts/t5.py'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token string">'fun'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function fun at <span class="token number">0x0000009D39B5C1E0</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'qw'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 高阶函数</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>    fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span>    fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">)</span>fun3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 555 333 222 111 666,代码从上至下执行，函数调用函数</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1 4 2 5,从上至下执行，函数定义之后不调用则不会被输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="global-nonlocal"><a href="#global-nonlocal" class="headerlink" title="global nonlocal"></a>global nonlocal</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># global nonlocal</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> name    name <span class="token operator">=</span> <span class="token string">"alex"</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以在局部声明一个全局变量，如果不声明为全局变量，print(name)不输出alex</span><span class="token comment" spellcheck="true"># 原本内层函数不能对外层函数的变量只能引用不能修改</span><span class="token keyword">def</span> <span class="token function">war</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"alex"</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nonlocal name    <span class="token comment" spellcheck="true"># 使用nonlocal 可以使内层函数对外层函数进行修改</span>        name <span class="token operator">+=</span> <span class="token string">"b"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>war<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="局部作用域不能引用全局作用域变量"><a href="#局部作用域不能引用全局作用域变量" class="headerlink" title="局部作用域不能引用全局作用域变量"></a>局部作用域不能引用全局作用域变量</h1><pre class="line-numbers language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 执行报错</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 可以打印</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行会报错，是因为局部作用域不能对全局作用域的变量只能引用不能修改</span><span class="token comment" spellcheck="true"># 通过global在局部作用域声明，可以进行修改</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> count    count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数名作为函数的参数"><a href="#函数名作为函数的参数" class="headerlink" title="函数名作为函数的参数"></a>函数名作为函数的参数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in fun"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in fun1"</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span>fun1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用fun函数并且将fun1作为参数，输出的是fun1函数的内存地址，fun1函数被作为参数时是一个变量</span><span class="token operator">&lt;</span>function fun1 at <span class="token number">0x00000055024C9620</span><span class="token operator">></span><span class="token keyword">in</span> fun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数名可以当做函数的返回值"><a href="#函数名可以当做函数的返回值" class="headerlink" title="函数名可以当做函数的返回值"></a>函数名可以当做函数的返回值</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 函数名可以当做函数的返回值</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in fun"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in fun1"</span><span class="token punctuation">)</span>re <span class="token operator">=</span> fun<span class="token punctuation">(</span>fun1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token keyword">in</span> fun<span class="token operator">&lt;</span>function fun1 at <span class="token number">0x00000030B6739620</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day05</title>
    <link href="https://www.missf.top/2020/04/26/Python%E5%9F%BA%E7%A1%80day05/"/>
    <id>https://www.missf.top/2020/04/26/Python%E5%9F%BA%E7%A1%80day05/</id>
    <published>2020-04-26T05:21:29.000Z</published>
    <updated>2020-05-13T02:17:12.481Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Python文件操作"><a href="#Python文件操作" class="headerlink" title="Python文件操作"></a>Python文件操作</h1><h2 id="全部读取"><a href="#全部读取" class="headerlink" title="全部读取"></a>全部读取</h2><pre class="line-numbers language-python"><code class="language-python">file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"d:\java_restart2.sh"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 文件路径，文件编码，操作方式</span>content <span class="token operator">=</span> file1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将读取到文件的内容复制给content</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印文件的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="读取n个字符"><a href="#读取n个字符" class="headerlink" title="读取n个字符"></a>读取n个字符</h2><pre class="line-numbers language-python"><code class="language-python">file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"d:\java_restart2.sh"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> file1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="按行读取"><a href="#按行读取" class="headerlink" title="按行读取"></a>按行读取</h2><pre class="line-numbers language-python"><code class="language-python">file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"d:\java_restart2.sh"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> file1<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="返回列表"><a href="#返回列表" class="headerlink" title="返回列表"></a>返回列表</h2><pre class="line-numbers language-python"><code class="language-python">file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"d:\java_restart2.sh"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> file1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回一个列表，用原文件的每一行作为列表的每一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for循环读取"><a href="#for循环读取" class="headerlink" title="for循环读取"></a>for循环读取</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 读取大文件时逐行读取防止内存崩溃，涉及到迭代器</span>file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"d:\java_restart2.sh"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> file1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>file1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="读取文件的方式"><a href="#读取文件的方式" class="headerlink" title="读取文件的方式"></a>读取文件的方式</h1><ul><li><code>read()</code> 全部读取</li><li><code>read(n)</code> 读取n个字符</li><li><code>readline()</code> 按行读取</li><li><code>readlines()</code> 返回一个列表，列表的元素是原文件的每一行数据</li><li><code>for循环读取</code> 读取大文件时逐行读取防止内存崩溃</li></ul><h1 id="写入文件的方式"><a href="#写入文件的方式" class="headerlink" title="写入文件的方式"></a>写入文件的方式</h1><h2 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h2><pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打开文件句柄</span>content <span class="token operator">=</span> f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 写入操作</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭文件句柄</span><span class="token comment" spellcheck="true"># 如果写入文件不存在，open()将自动创建它</span><span class="token comment" spellcheck="true"># 如果文件已存在已有内容，会清空再写入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写入多行"><a href="#写入多行" class="headerlink" title="写入多行"></a>写入多行</h2><pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 加换行符</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊\n"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊\n"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在打开一个文件句柄后，可以重新写入多次而不被清空，只有在文件句柄被关闭后，下一次写入才会被清空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="追加文件内容"><a href="#追加文件内容" class="headerlink" title="追加文件内容"></a>追加文件内容</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 没有文件创建文件追加内容，有此文件则在原文件的末尾追加新内容</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊\n"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊\n"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="读写非文字类文件"><a href="#读写非文字类文件" class="headerlink" title="读写非文字类文件"></a>读写非文字类文件</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 音视频或者图片类型的文件，以bytes读取和写入</span>f3 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"tr.jpg"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"rb"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用rb模式打开一张图片</span>content <span class="token operator">=</span> f3<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 以bytes读取原图片数据</span>f4 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"ting.jpg"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span>f4<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 将数据写到一个新文件图片</span>f3<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f4<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="读写模式"><a href="#读写模式" class="headerlink" title="读写模式"></a>读写模式</h1><h2 id="先读后写"><a href="#先读后写" class="headerlink" title="先读后写"></a>先读后写</h2><pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 读取内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"alex"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 写入内容，这里是以追加的方式写入，不会清空文件内容</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调整光标写入"><a href="#调整光标写入" class="headerlink" title="调整光标写入"></a>调整光标写入</h2><pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将光标调整到最前</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"jkl"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 在最前面写入jkl，会将原来前面的三个字符替换掉</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将光标调到最后面</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"ooo"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 在下一行写入ooo</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="强制保存"><a href="#强制保存" class="headerlink" title="强制保存"></a>强制保存</h2><pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"TES.123"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#强制保存，相当于Crtl + s</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断文件句柄是否可读可写"><a href="#判断文件句柄是否可读可写" class="headerlink" title="判断文件句柄是否可读可写"></a>判断文件句柄是否可读可写</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># readable writeable</span>f2 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 写入模式</span><span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取会报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>readable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 由于是写入模式不能读</span><span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>writable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="按照字节调整光标位置"><a href="#按照字节调整光标位置" class="headerlink" title="按照字节调整光标位置"></a>按照字节调整光标位置</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># tell seek</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file2"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 读取文件，光标会移动到下一行</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取当前文件指针的位置</span>f1<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 移动指针到指定的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从指针位置往后读取</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="截取文件"><a href="#截取文件" class="headerlink" title="截取文件"></a>截取文件</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># truncate 只能在可写的模式下截取原文件，只能从头截取</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> f1<span class="token punctuation">.</span>truncate<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 截取文件的前12个字节,文件其他内容会被清空，只保留截取到的字节</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>中华人民<span class="token comment" spellcheck="true"># utf-8编码下，一个中文字符等于三个字节，如果是截取4个字节会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="with-open操作方式"><a href="#with-open操作方式" class="headerlink" title="with open操作方式"></a>with open操作方式</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.自动关闭文件句柄</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file4"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>    content <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.同一语句可操作创建多个文件句柄</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">,</span>open<span class="token punctuation">(</span><span class="token string">"file2"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对file1进行读取操作</span>    f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"777"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对file2进行写入操作</span><span class="token comment" spellcheck="true"># 3.with open 可能引起IO错误的操作</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>    f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打开文件句柄f1进行读取操作，文件句柄自动关闭</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>        f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"777"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 又打开文件句柄f2进行写操作，如果文件句柄f1没有及时关闭又打开了f2文件句柄程序就会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关于文件的修改"><a href="#关于文件的修改" class="headerlink" title="关于文件的修改"></a>关于文件的修改</h1><p>文件的数据都是存放在硬盘上的，因此只存在覆盖，不存在修改一说，我们平时看到的修改文件，都是模拟出来的效果，修改file5文件中的Alex字符为Sb，并且将原文件复制为新文件file.bak，删除原文件，修改新文件的名字为file5，修改速度非常快，根本看不到生成的file5.bak文件，具体的说有两种实现方式</p><ol><li>将硬盘存放的该文件的内容全部加载到内存，在内存中是可以修改的，修改完毕后，再由内存覆盖到硬盘</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># file5文件内容</span>Alex是个屌丝，即使Alex有特斯拉也还是屌丝你们真逗，Alex再牛逼，也掩饰不了资深屌丝的气息<span class="token keyword">import</span> os<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file5"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">,</span>open<span class="token punctuation">(</span><span class="token string">"file5.bak"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 打开两个文件句柄，f1只读，f2可写</span>    old_content <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将f1内容赋值给old_content</span>    new_content <span class="token operator">=</span> old_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span><span class="token string">"Sb"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将Alex替换为Sb的数据赋值给new_content</span>    f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>new_content<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将新数据写入f2</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"file5"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除文件file5</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"file5.bak"</span><span class="token punctuation">,</span><span class="token string">"file5"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将新文件命名为file5</span><span class="token comment" spellcheck="true"># 只样有一个不好的地方，old_content = f1.read()这里是一次性将文件加载到内存中的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>将硬盘存放的该文件的内容一行一行地读入内存，修改完毕就写入新文件，最后用新文件覆盖源文件</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file5"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">,</span>open<span class="token punctuation">(</span><span class="token string">"file5.bak"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">:</span>            new_line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"Sb"</span><span class="token punctuation">,</span><span class="token string">"Alex"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将一行的数据替换完成赋值给新的一行</span>        f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>new_line<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 逐行写入</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"file5"</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"file5.bak"</span><span class="token punctuation">,</span><span class="token string">"file5"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 不会将文件一次加载到内存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day04</title>
    <link href="https://www.missf.top/2020/04/25/Python%E5%9F%BA%E7%A1%80day04/"/>
    <id>https://www.missf.top/2020/04/25/Python%E5%9F%BA%E7%A1%80day04/</id>
    <published>2020-04-25T10:21:29.000Z</published>
    <updated>2020-05-13T02:10:35.333Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="基础数据类型补充"><a href="#基础数据类型补充" class="headerlink" title="基础数据类型补充"></a>基础数据类型补充</h1><h2 id="判断数值是否相等"><a href="#判断数值是否相等" class="headerlink" title="判断数值是否相等"></a>判断数值是否相等</h2><pre class="line-numbers language-python"><code class="language-python">top1 <span class="token operator">=</span> <span class="token string">'alex'</span>top2 <span class="token operator">=</span> <span class="token string">'alex'</span><span class="token keyword">print</span><span class="token punctuation">(</span>top1 <span class="token operator">==</span> top2<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存地址"><a href="#内存地址" class="headerlink" title="内存地址"></a>内存地址</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打印mem会先找到mem的内存地址，然后再找到内存地址指向的数据</span>mem <span class="token operator">=</span> <span class="token string">'mk'</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">170332332864</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断内存地址是否相同"><a href="#判断内存地址是否相同" class="headerlink" title="判断内存地址是否相同"></a>判断内存地址是否相同</h2><pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f <span class="token operator">==</span> g<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>f <span class="token keyword">is</span> g<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># 判断的是两个对象的内存地址是否相同,虽然f的值等于g，但是内存地址却不是指向同一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><strong>数据类型</strong></th><th><strong>可变/不可变</strong></th></tr></thead><tbody><tr><td>整型</td><td>不可变</td></tr><tr><td>字符串</td><td>不可变</td></tr><tr><td>元组</td><td>不可变</td></tr><tr><td>列表</td><td>可变</td></tr><tr><td>集合</td><td>可变</td></tr><tr><td>字典</td><td>可变</td></tr></tbody></table><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 代码块</span>代码全都是基于代码块去运行的，一个文件就是一个代码块，不同的文件就是不同的代码块<span class="token comment" spellcheck="true"># 代码块的缓存机制</span>Python在执行同一个代码块的初始化对象的命令时，会检查其值是否已经存在，如果存在，会将其重用，如果有同样的记录那么它会重复使用这个字典中的值，但是要注意的是，只有在同一个代码块下，才会实现这个缓存机制满足此机制的数据类型<span class="token punctuation">:</span>int str bool优点：节省内存，提升性能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="小数据池"><a href="#小数据池" class="headerlink" title="小数据池"></a>小数据池</h1><p>Python自动将-5~256的整数进行了缓存，当你将这些整数赋值给变量时，并不会重新创建对象，而是使用已经创建好的缓存对象。python会将一定规则的字符串在字符串驻留池中，创建一份，当你将这些字符串赋值给变量时，并不会重新创建对象， 而是使用在字符串驻留池中创建好的对象。</p><ol><li>小数据(又称驻留机制、驻存机制)</li><li>能够应用于不同的代码块</li><li>适应的数据类型:int str bool</li><li>int:-5 ~ 256</li><li>str:一定条件下的str满足小数据池</li><li>bool:全部</li><li>优点:节省内存 提升性能</li></ol><h1 id="编码进阶"><a href="#编码进阶" class="headerlink" title="编码进阶"></a>编码进阶</h1><p>不同的编码之间不能互相识别（会出现报错或者乱码），文字通过网络传输，或者硬盘存储不能使用Unicode编码方式。</p><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><pre class="line-numbers language-python"><code class="language-python">早期的密码本，英文字母，数字，特殊字符<span class="token number">8</span>位<span class="token punctuation">(</span>bit<span class="token punctuation">)</span> <span class="token operator">==</span> 1byte在ascll码中<span class="token punctuation">,</span><span class="token number">8</span>位bit表示一个字节表示一个字符hello  <span class="token operator">=</span>  <span class="token number">01101000</span> <span class="token number">01100101</span> <span class="token number">01100111</span> <span class="token number">0110011</span> <span class="token number">01100101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><pre class="line-numbers language-python"><code class="language-python">万国码包含全世界所有的文字<span class="token number">32</span>位bit表示<span class="token number">4</span>个字节表示一个字符a<span class="token punctuation">:</span><span class="token number">10001000</span> <span class="token number">00010010</span> <span class="token number">00100000</span> <span class="token number">00010010</span>中<span class="token punctuation">:</span><span class="token number">00000000</span> <span class="token number">10010010</span> <span class="token number">00000000</span> <span class="token number">10010010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="utf-8"><a href="#utf-8" class="headerlink" title="utf-8"></a>utf-8</h2><pre class="line-numbers language-python"><code class="language-python">最少用<span class="token number">8</span>位表示一个字符a<span class="token punctuation">:</span><span class="token number">01000010</span><span class="token punctuation">,</span><span class="token number">8</span>位bit表示一个字节表示一个字符欧洲文字<span class="token punctuation">:</span><span class="token number">00000010</span> <span class="token number">00100000</span>    <span class="token number">16</span>位bit表示两个字节表示一个字符中国文字<span class="token punctuation">:</span><span class="token number">00000010</span> <span class="token number">00000010</span> <span class="token number">00000010</span> <span class="token number">24</span>位bit表示三个字节表示一个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gbk"><a href="#gbk" class="headerlink" title="gbk"></a>gbk</h2><pre class="line-numbers language-python"><code class="language-python">最包含英文和自己国家的语言a<span class="token punctuation">:</span><span class="token number">00000010</span>     <span class="token number">8</span>位bit表示一个字节表示一个字符中<span class="token punctuation">:</span><span class="token number">00000010</span> <span class="token number">0000001016</span>     <span class="token number">16</span>位bit表示两个字节表示一个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在Python3x环境下，唯独str类型的内部编码方式是Unicode，</p></blockquote><blockquote><p>所以Python3x中的字符串不能用于直接的网络传输和文件存储</p></blockquote><blockquote><p>补充一个数据类型：bytes类型，与str类型是海尔兄弟，</p></blockquote><blockquote><p>bytes内部编码方式为非Unicode，bytes类型能用于网络传输和文件存储，还拥有str的其他特性</p></blockquote><blockquote><p>但是bytes中文是16进制表示，看不懂，所以常用的还是str类型</p></blockquote><h2 id="bytes类型"><a href="#bytes类型" class="headerlink" title="bytes类型"></a>bytes类型</h2><pre class="line-numbers language-python"><code class="language-python">b1 <span class="token operator">=</span> <span class="token string">'alex'</span>b2 <span class="token operator">=</span> b<span class="token string">'alex'</span><span class="token keyword">print</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span>type<span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span>alex <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span>type<span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span>b<span class="token string">'alex'</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bytes'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># str ---> gbk</span>s0 <span class="token operator">=</span> <span class="token string">'荒原饮露'</span>b1 <span class="token operator">=</span> s0<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 编码，将字符串转换为gbk</span><span class="token keyword">print</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span>b<span class="token string">'\xbb\xc4\xd4\xad\xd2\xfb\xc2\xb6'</span>    <span class="token comment" spellcheck="true"># 可以看到 一个中文两个字节</span>y2 <span class="token operator">=</span> b1<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 解码</span><span class="token keyword">print</span><span class="token punctuation">(</span>y2<span class="token punctuation">)</span>荒原饮露<span class="token comment" spellcheck="true"># str ---> utf-8</span>s2 <span class="token operator">=</span> <span class="token string">'努力奋斗'</span>b2 <span class="token operator">=</span> s2<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span>b<span class="token string">'\xe5\x8a\xaa\xe5\x8a\x9b\xe5\xa5\x8b\xe6\x96\x97'</span>    <span class="token comment" spellcheck="true"># 一个中文三个字节</span>b3 <span class="token operator">=</span> b2<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span>努力奋斗<span class="token comment" spellcheck="true"># gbk ---> utf-8</span>si <span class="token operator">=</span> <span class="token string">'编码'</span>s1 <span class="token operator">=</span> si<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>b<span class="token string">'\xb1\xe0\xc2\xeb'</span> <span class="token comment" spellcheck="true"># 得到gbk编码的bytes类型</span><span class="token number">1</span> <span class="token operator">=</span> s1<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解码再加密</span>b2 <span class="token operator">=</span> b1<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span>b<span class="token string">'\xe7\xbc\x96\xe7\xa0\x81'</span>    <span class="token comment" spellcheck="true"># utf-8编码的bytes类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 赋值运算</span>jk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>yu <span class="token operator">=</span> jk        <span class="token comment" spellcheck="true"># yu变量和jk变量都指向同一个内存地址</span>yu<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">789</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 修改这个列表的时候，两个变量的值都被修改</span><span class="token keyword">print</span><span class="token punctuation">(</span>jk<span class="token punctuation">,</span>yu<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><pre class="line-numbers language-python"><code class="language-python">lo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'de'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'er'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>ko <span class="token operator">=</span> lo<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ko拷贝lo的列表，得到一样的数据，但是浅copy只会拷贝内存中的第一层数据</span>lo<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'lp'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># lo往列表追加一个元素lp</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>lo<span class="token punctuation">)</span><span class="token punctuation">,</span>lo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>ko<span class="token punctuation">)</span><span class="token punctuation">,</span>ko<span class="token punctuation">)</span><span class="token number">205292790408</span> <span class="token punctuation">[</span><span class="token string">'de'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'er'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'lp'</span><span class="token punctuation">]</span>        <span class="token number">205293284808</span> <span class="token punctuation">[</span><span class="token string">'de'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'er'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 可以看到两个列表的内存地址都是不一样的，往lo列表追加lp元素，ko列表是没有跟随lo列表追加lp元素的</span>lo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'io'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 往lo列表的小列表里面追加io元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>ko<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'de'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'er'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'io'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'lp'</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'de'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'er'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'io'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 可以看到，lo和ko列表的小列表都被追加了io元素，简而言之，列表里面的小列表里面的元素是共用的。ko拷贝lo的列表，只会拷贝lo外层列表，而不会拷贝lo的内层列表，lo外层列表发生改变ko不会跟随，但是lo内层列表发生改变ko会跟随，复制一个列表时，lo = ['de',15,['er',4,2]]，de和15元素的地址发生改变，['er',4,2]小列表的元素还是指向原来的地址</span><span class="token comment" spellcheck="true"># 全切片是浅copy</span>ki <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cf'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'ijni'</span><span class="token punctuation">,</span><span class="token string">'678'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span>ji <span class="token operator">=</span> ki<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>ki<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'mk'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ki<span class="token punctuation">,</span>ji<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cf'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'ijni'</span><span class="token punctuation">,</span> <span class="token string">'678'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'mk'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'cf'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'ijni'</span><span class="token punctuation">,</span> <span class="token string">'678'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'mk'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 深copy会在内存中对原列表以及列表里面的可变的数据类型重新创建一份，而列表中不可变得数据类型还是沿用原来的</span><span class="token keyword">import</span> copylo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span><span class="token string">'ty'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'rt'</span><span class="token punctuation">,</span><span class="token string">'km'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span>ko <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>lo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>ko<span class="token punctuation">)</span>lo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>ko<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span> <span class="token string">'ty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rt'</span><span class="token punctuation">,</span> <span class="token string">'km'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span> <span class="token string">'ty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rt'</span><span class="token punctuation">,</span> <span class="token string">'km'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span> <span class="token string">'ty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rt'</span><span class="token punctuation">,</span> <span class="token string">'km'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span> <span class="token string">'ty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rt'</span><span class="token punctuation">,</span> <span class="token string">'km'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 往lo小列表追加元素，ko的小列表的元素不是指向原来的地址，ko的小列表元素没有被改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="深拷贝和浅拷贝的区别"><a href="#深拷贝和浅拷贝的区别" class="headerlink" title="深拷贝和浅拷贝的区别"></a>深拷贝和浅拷贝的区别</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 以下所有的内容都是基于内存地址来说的。</span><span class="token comment" spellcheck="true"># 可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型</span><span class="token comment" spellcheck="true"># 不可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型</span><span class="token comment" spellcheck="true"># 总结：不可变数据类型更改后地址发生改变，可变数据类型更改地址不发生改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="深拷贝和浅拷贝的需要注意的点"><a href="#深拷贝和浅拷贝的需要注意的点" class="headerlink" title="深拷贝和浅拷贝的需要注意的点"></a>深拷贝和浅拷贝的需要注意的点</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在浅拷贝时，拷贝出来的新对象的地址和原对象是不一样的，但是新对象里面的可变元素（如列表）的地址和原对象里的可变元素的地址是相同的，也就是说浅拷贝它拷贝的是浅层次的数据结构（不可变元素），对象里的可变元素作为深层次的数据结构并没有被拷贝到新地址里面去，而是和原对象里的可变元素指向同一个地址，所以在新对象或原对象里对这个可变元素做修改时，两个对象是同时改变的，但是深拷贝不会这样，这个是浅拷贝相对于深拷贝最根本的区别</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day03</title>
    <link href="https://www.missf.top/2020/04/24/Python%E5%9F%BA%E7%A1%80day03/"/>
    <id>https://www.missf.top/2020/04/24/Python%E5%9F%BA%E7%A1%80day03/</id>
    <published>2020-04-24T10:14:29.000Z</published>
    <updated>2020-05-13T02:10:25.517Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 代入验证码项目，输入姓名密码之后有空格也不会报错</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>passworrd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token string">'AeTrd'</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>your_code <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入验证码:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> your_code <span class="token operator">==</span> code<span class="token punctuation">:</span>    <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'alex'</span> <span class="token operator">and</span> passworrd <span class="token operator">==</span> <span class="token string">'sb'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名或者密码错误'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'验证码不正确'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="将一行字符串竖着打印"><a href="#将一行字符串竖着打印" class="headerlink" title="将一行字符串竖着打印"></a>将一行字符串竖着打印</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># while循环</span>t <span class="token operator">=</span> <span class="token string">'荒原饮露cchkskhdiqwuey'</span>s <span class="token operator">=</span> len<span class="token punctuation">(</span>t<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 先统计字符串的长度</span><span class="token comment" spellcheck="true"># print(s)</span>index <span class="token operator">=</span> <span class="token number">0</span>       <span class="token comment" spellcheck="true"># 设定一个索引值</span><span class="token keyword">while</span> index <span class="token operator">&lt;</span> s<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果索引值小于变量s则进入循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 从0开始打印字符串的索引，直到index&lt;s不成立退出循环</span>    index <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true"># index每次自增1</span><span class="token comment" spellcheck="true"># for循环</span>t <span class="token operator">=</span> <span class="token string">'荒原饮露cchkskhdiqwuey'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 还可以进行拼接，print(i+'lo')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="猜数字"><a href="#猜数字" class="headerlink" title="猜数字"></a>猜数字</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 猜数字,只有猜对了才会退出</span>num <span class="token operator">=</span> <span class="token number">66</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    cai <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入你要猜的数字:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cai <span class="token operator">></span> num<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜的数字大了！"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> cai <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜的数字小了"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜对了！"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token comment" spellcheck="true"># 三次猜测不对就退出</span>num <span class="token operator">=</span> <span class="token number">66</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入数字:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> j <span class="token operator">></span> num<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数字大了!"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数字小了!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜对了!"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式一</span>content <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入内容:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 将输入的字符串，去掉前后两端的空格</span>plus_index <span class="token operator">=</span> content<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 找到加号位置，并返回加号的索引数</span>num1 <span class="token operator">=</span> content<span class="token punctuation">[</span><span class="token punctuation">:</span>plus_index<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 取加号前面的区域并且去掉空格</span>num2 <span class="token operator">=</span> content<span class="token punctuation">[</span>plus_index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 取加号后面的区域也去掉空格</span>sum3 <span class="token operator">=</span> int<span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>num2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将取到的无空格值相加</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方式二</span>content <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入内容:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 将输入的字符串，进行去前后两端的空格</span>li <span class="token operator">=</span> content<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 将字符串转换为列表，指定以+进行分割</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token string">'15  '</span><span class="token punctuation">,</span> <span class="token string">'    16'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 将得到的元素相加</span>sum1 <span class="token operator">=</span> int<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 将字符串类型的两个元素强制转换为int，会去掉空格</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="为什么需要列表"><a href="#为什么需要列表" class="headerlink" title="为什么需要列表"></a>为什么需要列表</h2><ul><li>字符串如果长度过于长取值时会很费劲，取出来的数据是字符串类型，使用不方便</li><li>字符串有长度限制(只能存储少量的字符串类型的数据)</li><li>基于以上原因Python提供了一个另外的数据类型:容器类数据类型</li></ul><h2 id="什么是列表"><a href="#什么是列表" class="headerlink" title="什么是列表"></a>什么是列表</h2><ul><li>列表能存储大量的、不同的数据类型，列表存放什么数据类型，取出来之后还是什么数据类型</li><li>列表可以存放的数据类型:数字，字符串，布尔值，小列表，元组，字典，集合，对象</li><li>32位Python的限制是 536870912</li><li>64位Python的限制是 1152921504606846975</li><li>列表是有序的、有索引值的、可切片、方便取值</li></ul><h2 id="列表取值"><a href="#列表取值" class="headerlink" title="列表取值"></a>列表取值</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 取第一个元素</span>sl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span><span class="token string">'荒原'</span><span class="token punctuation">,</span><span class="token string">'154'</span><span class="token punctuation">]</span>sl1 <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>sl<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出索引和索引类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>sl1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># alex &lt;class 'list'> 定义列表时是字符串</span>sl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span><span class="token string">'荒原'</span><span class="token punctuation">,</span><span class="token string">'154'</span><span class="token punctuation">]</span>sl1 <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 0 1 2，顾首不顾尾，只取前两个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>sl1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ['alex', '荒原']</span><span class="token comment" spellcheck="true"># 反向取值</span>sl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span><span class="token string">'荒原'</span><span class="token punctuation">,</span><span class="token string">'154'</span><span class="token punctuation">]</span>sl1 <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sl1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ['154', '荒原', 'alex']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的增加"><a href="#列表的增加" class="headerlink" title="列表的增加"></a>列表的增加</h2><pre class="line-numbers language-python"><code class="language-python">sl<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 增加abc元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">)</span>sl<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 增加布尔值</span><span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">)</span>name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 空列表</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果不执行break,则一直执行while True</span>    username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用户输入字符串</span>    <span class="token keyword">if</span> username<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span><span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 如果输入是q，无论大小写都执行break</span>    name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断到不是q则增加到列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 插入</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>lk<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'yu'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在索引1的位置，插入'yu',索引从零开始 </span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span> <span class="token string">'yu'</span><span class="token punctuation">,</span> <span class="token string">'ctr'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 迭代者追加</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>lk<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span> <span class="token string">'ctr'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>lk<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'asd'</span><span class="token punctuation">,</span><span class="token string">'cvf'</span><span class="token punctuation">,</span><span class="token string">'cdd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span> <span class="token string">'ctr'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'asd'</span><span class="token punctuation">,</span> <span class="token string">'cvf'</span><span class="token punctuation">,</span> <span class="token string">'cdd'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的删除"><a href="#列表的删除" class="headerlink" title="列表的删除"></a>列表的删除</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 按照索引去删除</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>ret <span class="token operator">=</span> lk<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除索引为1的元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 按照元素去删除</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>lk<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'tpo'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 指定删除那个</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 清空列表</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>lk<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># del</span><span class="token number">1</span><span class="token punctuation">.</span>按照索引删除单个元素lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token keyword">del</span> lk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token punctuation">.</span>按照切片删除一部分元素lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token keyword">del</span> lk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token number">3</span><span class="token punctuation">.</span>按照切片（步长）删除一部分元素lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">]</span>s <span class="token operator">=</span> lk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 取区域为0-5，步长为2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token string">'cff'</span><span class="token punctuation">]</span><span class="token keyword">del</span> lk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 取区域为0-5，步长为2，这些元素全部删除</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ctr'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'ioo'</span><span class="token punctuation">,</span> <span class="token string">'tyy'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的修改"><a href="#列表的修改" class="headerlink" title="列表的修改"></a>列表的修改</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 利用索引修改</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">]</span>lk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'we'</span>        <span class="token comment" spellcheck="true"># 利用索引定义要修改的元素的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 利用切片修改</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">]</span>lk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'op'</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'cff'</span><span class="token punctuation">,</span> <span class="token string">'ioo'</span><span class="token punctuation">,</span> <span class="token string">'tyy'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 利用切片+步长修改</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">]</span>lk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'op'</span>        <span class="token comment" spellcheck="true"># 注意步长的个数和修改后的字符串个数</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'ctr'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'cff'</span><span class="token punctuation">,</span> <span class="token string">'ioo'</span><span class="token punctuation">,</span> <span class="token string">'tyy'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的查询"><a href="#列表的查询" class="headerlink" title="列表的查询"></a>列表的查询</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 按照索引查询</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印一个</span><span class="token comment" spellcheck="true"># for 循环</span><span class="token keyword">for</span> i <span class="token keyword">in</span> lk<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出列表所有元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的其他操作"><a href="#列表的其他操作" class="headerlink" title="列表的其他操作"></a>列表的其他操作</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算列表元素的总个数</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">8</span><span class="token comment" spellcheck="true"># 计算某个元素出现的个数</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'cff'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token comment" spellcheck="true"># 通过元素找索引，找到第一个返回，找不到就报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'ctr'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 从小到大排列</span>fg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>fg<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 从大到小排列</span>fg<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 列表翻转</span>fg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>fg<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fg<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 英文字符排序，按照元素首字母的ASCLL码的大小排序</span>fg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dfg'</span><span class="token punctuation">,</span><span class="token string">'arfd'</span><span class="token punctuation">,</span><span class="token string">'wer'</span><span class="token punctuation">,</span><span class="token string">'fgv'</span><span class="token punctuation">]</span>fg<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'arfd'</span><span class="token punctuation">,</span> <span class="token string">'dfg'</span><span class="token punctuation">,</span> <span class="token string">'fgv'</span><span class="token punctuation">,</span> <span class="token string">'wer'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a>列表的嵌套</h2><pre class="line-numbers language-python"><code class="language-python">ll <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'taibai'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 列表里面有嵌套的小列表</span><span class="token comment" spellcheck="true"># 将taibai改成大写</span>ll<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> ll<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 往小列表追加元素'老男孩教育'</span>ll<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'老男孩教育'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将alex改成alexsb</span>ll<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ll<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'sb'</span><span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印嵌套列表元素</span>lj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wedi'</span><span class="token punctuation">,</span><span class="token string">'lko'</span><span class="token punctuation">,</span><span class="token string">'cjd'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'dkd'</span><span class="token punctuation">,</span><span class="token string">'oto'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> lj<span class="token punctuation">:</span>    <span class="token keyword">if</span> type<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> list<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 加个判断如果某个元素类型为list，则再循环一遍，打印出来</span>        <span class="token keyword">for</span> o <span class="token keyword">in</span> i<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 否则正常打印</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>用来存放一些重要的信息，放在列表中不安全，需要一个容器类的数据类型，比如：个人信息，密码等。元组不能修改，但是元组里面的列表可以修改。</p><pre class="line-numbers language-python"><code class="language-python">tu <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义一个元组</span>tu<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'12'</span>    <span class="token comment" spellcheck="true"># 往列表里面追加元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>tu<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'12'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 存放一些重要数据时，需要用元组存放</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>列表如果存储大量的数据，查询速度相对较慢，因为列表存储的数据一般没有什么关联性。针对这个问题，Python提供了一个基础数据类型：字典(dict)</p><h2 id="回顾数据类型"><a href="#回顾数据类型" class="headerlink" title="回顾数据类型"></a>回顾数据类型</h2><table><thead><tr><th>分类</th><th>数据类型</th></tr></thead><tbody><tr><td>容器型数据类型</td><td>list，tuple，dict，set</td></tr><tr><td>非容器型数据类型</td><td>str，bool，int</td></tr><tr><td>可变数据类型（不可哈希）</td><td>list，dict，set</td></tr><tr><td>不可变数据类型（可哈希）</td><td>str，bool，int，tuple</td></tr></tbody></table><p>字典是由键值对形式存储的数据类型，字典的键必须是不可变的数据类型，唯一不重复的，字典的值可以是任意数据类型或者对象。基于字典的键是不可变的，字典的键会通过一种哈希算法，将键的值换算成内存地址，所以字典的查询速度非常快。字典在Python3.6之前是无序的，在3.6及以后字典会按照字典创建时的顺序排列。字典可以存储大量关联性数据。</p><h2 id="字典的增加"><a href="#字典的增加" class="headerlink" title="字典的增加"></a>字典的增加</h2><pre class="line-numbers language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 用字典定义三个键值对</span>dic<span class="token punctuation">[</span><span class="token string">'dfgh'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">150</span>   <span class="token comment" spellcheck="true"># 没有则添加这个键值对</span>dic<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">28</span>     <span class="token comment" spellcheck="true"># 有age这个键就将值覆盖为28</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">,</span> <span class="token string">'dfgh'</span><span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">}</span>dic<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'port'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 没有这个键值对就会添加并赋值为空</span>dic<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'yiyi'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 有name这个值则不修改，没有则增加</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">,</span> <span class="token string">'port'</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典的删除"><a href="#字典的删除" class="headerlink" title="字典的删除"></a>字典的删除</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pop 通过键去删除键值对</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>ret <span class="token operator">=</span> dic<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'sex'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 删除一个不存在的键就会报错</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>        ret1 <span class="token operator">=</span> dic<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'name2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 为了程序能执行下去，想要不报错的话，可以添加一个返回值</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>ty <span class="token operator">=</span> dic<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'re'</span><span class="token punctuation">,</span><span class="token string">'没有此键'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ty<span class="token punctuation">)</span>没有此键<span class="token comment" spellcheck="true"># clear 清空</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>dic<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># popitem 删除最后一个键值对，3.5之前是随机删除，3.6删除最后一个键值对</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>lo <span class="token operator">=</span> dic<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 删除整个字典</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span><span class="token keyword">del</span> dic<span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典的修改"><a href="#字典的修改" class="headerlink" title="字典的修改"></a>字典的修改</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 改</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>dic<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">28</span>        <span class="token comment" spellcheck="true">#重新定义age键的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># update 更新</span>dic1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>dic2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'nji'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'18'</span><span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'001'</span><span class="token punctuation">}</span>dic2<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dic1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将dic1字典中的键值对覆盖添加到dic2，dic1不变</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'001'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># update 正常添加</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span>weight<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span>high<span class="token operator">=</span><span class="token number">175</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#一次添加多个键值对</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">,</span> <span class="token string">'weight'</span><span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token string">'high'</span><span class="token punctuation">:</span> <span class="token number">175</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典的查询"><a href="#字典的查询" class="headerlink" title="字典的查询"></a>字典的查询</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 按键查对应的值，没有此键会报错</span>barrytr <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age1'</span><span class="token punctuation">,</span><span class="token string">'没有此键'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义没有此键时的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span>没有此键<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典的其他操作"><a href="#字典的其他操作" class="headerlink" title="字典的其他操作"></a>字典的其他操作</h2><pre class="line-numbers language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dict_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'man'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dict_items<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'barry'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'man'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># for循环得到的是keys值</span><span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>nameagesex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典的嵌套联系"><a href="#字典的嵌套联系" class="headerlink" title="字典的嵌套联系"></a>字典的嵌套联系</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字典的嵌套练习</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'l1'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token string">'太白'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token number">20181225</span><span class="token punctuation">,</span>        <span class="token string">'place'</span><span class="token punctuation">:</span> <span class="token string">'深圳校区'</span><span class="token punctuation">,</span>        <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'python3期'</span><span class="token punctuation">,</span>        <span class="token string">'name_list'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'awq'</span><span class="token punctuation">,</span> <span class="token string">'xx'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 1.给小列表['alex', '太白'] alex后面插入一个字符串，'aaa'</span>dic<span class="token punctuation">[</span><span class="token string">'l1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.将id对应的3变成1</span>dic<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 3.将1对应的字典的data的值变成20181224</span>dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20181224</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.将name_list对应的awq全部变成大写</span>dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name_list'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name_list'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5.将name_list对应的xx删除</span>dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name_list'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将字典数据格式化输出"><a href="#将字典数据格式化输出" class="headerlink" title="将字典数据格式化输出"></a>将字典数据格式化输出</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 格式化输出</span>msg <span class="token operator">=</span> <span class="token string">'我叫%s,我身高%s，年龄%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'ed'</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将字典数据格式化输出</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span>mk <span class="token operator">=</span> <span class="token string">'我叫%(name)s,今年%(age)s,性别%(sex)s'</span> <span class="token operator">%</span> dic<span class="token keyword">print</span><span class="token punctuation">(</span>mk<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="返回一个新的字典"><a href="#返回一个新的字典" class="headerlink" title="返回一个新的字典"></a>返回一个新的字典</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 返回一个新的字典，键从可迭代对象里面获取，值不变</span>dic1 <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token string">'top'</span><span class="token punctuation">,</span><span class="token string">'ed'</span><span class="token punctuation">)</span>dic2 <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'lop'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'努力'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">:</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token string">'ed'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'lop'</span><span class="token punctuation">:</span> <span class="token string">'努力'</span><span class="token punctuation">}</span>dicu <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dicu<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 坑:值如果是一个可变的数据类型，那么所有的值都是一个内存地址</span>dicu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dicu<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 给dicu[1]这个列表赋值000，所有列表的值都是000，因为列表所有的值都指向一个内存地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据类型的补充"><a href="#数据类型的补充" class="headerlink" title="数据类型的补充"></a>数据类型的补充</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 数据类型的补充</span>str <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> list splitlist <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> str join<span class="token number">0</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>false<span class="token comment" spellcheck="true"># 列表和元组的互换</span><span class="token comment" spellcheck="true"># list &lt;---> tuple</span>jk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>yu <span class="token operator">=</span> tuple<span class="token punctuation">(</span>jk<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>yu<span class="token punctuation">)</span>uy <span class="token operator">=</span> list<span class="token punctuation">(</span>yu<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>uy<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dict ---> list</span>dico <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'kasha'</span><span class="token punctuation">,</span><span class="token string">'ui'</span><span class="token punctuation">:</span><span class="token string">'io'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>dico<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'ui'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dict ---> tuple</span>dich <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'yu'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>dich<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 元组中只有一个元素并且没有逗号，则它不是元组，它与元素数据类型相同</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'al'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'al'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'al'</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span class="token number">1</span> al <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将索引为奇数位的元素删除"><a href="#将索引为奇数位的元素删除" class="headerlink" title="将索引为奇数位的元素删除"></a>将索引为奇数位的元素删除</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将索引为奇数位的元素删除,列表是不等长的</span><span class="token comment" spellcheck="true"># 方法一</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token keyword">del</span> li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 1-所有，步长为2</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法二</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">]</span>new_li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># 定义一个空列表</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 循环</span>    <span class="token keyword">if</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 如果能被2整除</span>        new_li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果能整除，就加入到new_li列表里面，这样索引是奇数位的元素就被删除了</span>li <span class="token operator">=</span> new_li<span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法三</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        li<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将字典中键含有k元素的键值对删除"><a href="#将字典中键含有k元素的键值对删除" class="headerlink" title="将字典中键含有k元素的键值对删除"></a>将字典中键含有k元素的键值对删除</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将字典中键含有k元素的键值对删除</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'ko'</span><span class="token punctuation">:</span><span class="token string">'ty'</span><span class="token punctuation">,</span><span class="token string">'df'</span><span class="token punctuation">:</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token string">'13k'</span><span class="token punctuation">:</span><span class="token string">'hu'</span><span class="token punctuation">,</span><span class="token string">'jl'</span><span class="token punctuation">:</span><span class="token string">'lp'</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 循环列表时不能改变字典的大小</span>lo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># 定义一个空的列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> dict<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 将字典循环给i，赋值时是只将key赋值</span>    <span class="token keyword">if</span> <span class="token string">'k'</span> <span class="token keyword">in</span> i<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果k存在于i中</span>       lo<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 则把这些有k元素的键值对添加到lo这个空字典</span><span class="token keyword">for</span> y <span class="token keyword">in</span> lo<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将lo字典循环给y</span>    dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>y<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 通过键去删除键值对</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中</span>s1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>y <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s1<span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token number">1</span> H<span class="token number">2</span> e<span class="token number">3</span> l<span class="token number">4</span> l<span class="token number">5</span> os2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"top"</span><span class="token punctuation">,</span><span class="token string">"jun"</span><span class="token punctuation">,</span><span class="token string">"mid"</span><span class="token punctuation">,</span><span class="token string">"adc"</span><span class="token punctuation">,</span><span class="token string">"sup"</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s2<span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token number">1</span> top<span class="token number">2</span> jun<span class="token number">3</span> mid<span class="token number">4</span> adc<span class="token number">5</span> su<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合创建"><a href="#集合创建" class="headerlink" title="集合创建"></a>集合创建</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 集合的创建</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"er"</span><span class="token punctuation">,</span><span class="token string">"mk"</span><span class="token punctuation">,</span><span class="token string">"lk"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>set2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'lk'</span><span class="token punctuation">,</span><span class="token string">'oi'</span><span class="token punctuation">,</span><span class="token string">"er"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 不一定要{}或者(),只要是迭代对象就行</span><span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合的无序特点"><a href="#集合的无序特点" class="headerlink" title="集合的无序特点"></a>集合的无序特点</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 集合是无序的</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"rng"</span><span class="token punctuation">,</span><span class="token string">"skt"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">}</span>set1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"fpx"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'rng'</span><span class="token punctuation">,</span> <span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'skt'</span><span class="token punctuation">,</span> <span class="token string">'fpx'</span><span class="token punctuation">,</span> <span class="token string">'we'</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#增加一个元素，不会按照顺序添加，每一次执行代码，顺序都会改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合的迭代增加"><a href="#集合的迭代增加" class="headerlink" title="集合的迭代增加"></a>集合的迭代增加</h2><pre class="line-numbers language-python"><code class="language-python">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"rng"</span><span class="token punctuation">,</span><span class="token string">"skt"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">}</span>set1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">"fpx"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#迭代增加会把整个字符串拆分为多个字符进行增加</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'skt'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'rng'</span><span class="token punctuation">,</span> <span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'we'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合的删除"><a href="#集合的删除" class="headerlink" title="集合的删除"></a>集合的删除</h2><pre class="line-numbers language-python"><code class="language-python">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"rng"</span><span class="token punctuation">,</span><span class="token string">"skt"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">}</span>set1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"skt"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 指定删除元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'we'</span><span class="token punctuation">,</span> <span class="token string">'rng'</span><span class="token punctuation">}</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"rng"</span><span class="token punctuation">,</span><span class="token string">"skt"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">}</span>set1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 随机删除一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"rng"</span><span class="token punctuation">,</span><span class="token string">"skt"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">}</span>set1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 清空集合</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合的元素是不可变类型"><a href="#集合的元素是不可变类型" class="headerlink" title="集合的元素是不可变类型"></a>集合的元素是不可变类型</h2><pre class="line-numbers language-python"><code class="language-python">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"gb"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"rf"</span><span class="token punctuation">,</span><span class="token string">"gb"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 集合里面存在列表元素，执行会报错</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"gb"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"vf"</span><span class="token punctuation">,</span><span class="token string">"jin"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 集合里面存在元组元素可以执行，因为元组是不可变类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面试必考"><a href="#面试必考" class="headerlink" title="面试必考"></a>面试必考</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 面试必考</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将list1和list2的元素集合起来并去重</span>new_list <span class="token operator">=</span> list1 <span class="token operator">+</span> list2<span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span>new_set <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>new_list<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#将new_list转换为集合，再转换为list</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_set<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="电影投票"><a href="#电影投票" class="headerlink" title="电影投票"></a>电影投票</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 电影投票:程序先给出几个目前正在上映的电影列表. 由用户给每个电影投票.</span><span class="token comment" spellcheck="true"># 最终将该用户投票信息公布出来 lst = ['北京遇上西雅图', '解救吴先生', '美国往事', '西西里的美丽传说']</span>lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'北京遇上西雅图'</span><span class="token punctuation">,</span> <span class="token string">'解救吴先生'</span><span class="token punctuation">,</span> <span class="token string">'美国往事'</span><span class="token punctuation">,</span> <span class="token string">'西西里的美丽传说'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(lst)</span>dic <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>lst<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#定义一个字典，key来自lst列表，值是0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> num<span class="token punctuation">,</span>name <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>lst<span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#定义电影序号和电影来自lst列表</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}\t{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#列出电影序号和电影</span>    name_num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入你喜欢的电影序号，或者q/Q退出:'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#记录用户所喜欢的电影序号</span>    <span class="token keyword">if</span> name_num<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#如果用户输入的是数字则进入，否则输出206行的：你输入有误，请重新输入</span>        name_num <span class="token operator">=</span> int<span class="token punctuation">(</span>name_num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用户输入的必须是整数</span>        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> name_num <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#控制用户输入数字的范围必须是比0大，比列表总长度小</span>            dic<span class="token punctuation">[</span>lst<span class="token punctuation">[</span>name_num<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>   <span class="token comment" spellcheck="true">#将用户输入的值记录到dic空字典，lst[name_num-1] == dic字典的第一元素，是0</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已成功为%s投票'</span> <span class="token operator">%</span><span class="token punctuation">(</span>lst<span class="token punctuation">[</span>name_num<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提示用户投票成功</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有该序号的电影，请重新输入"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#如果输入的范围不对，提示没有这个序号的电影</span>    <span class="token keyword">elif</span> name_num<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#如果用户输入q就退出</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你输入有误，请重新输入"</span><span class="token punctuation">)</span><span class="token keyword">for</span> movie_name<span class="token punctuation">,</span>total_num <span class="token keyword">in</span> dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#以列表返回可遍历的键值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s电影的总得票数%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>movie_name<span class="token punctuation">,</span>total_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day02</title>
    <link href="https://www.missf.top/2020/04/24/Python%E5%9F%BA%E7%A1%80day02/"/>
    <id>https://www.missf.top/2020/04/24/Python%E5%9F%BA%E7%A1%80day02/</id>
    <published>2020-04-24T04:14:29.000Z</published>
    <updated>2020-05-13T02:09:42.806Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 格式化输出</span>name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span>job <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入职业："</span><span class="token punctuation">)</span>hobby <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入爱好"</span><span class="token punctuation">)</span>msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""------ info of %s ------Name    : %sAge     : %sjob     : %sHobbie  : %s------ end ------"""</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>job<span class="token punctuation">,</span>hobby<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 坑:单个%号默认被当成一个占位符，如果想单纯的表示%号，请使用%%</span>msg <span class="token operator">=</span> <span class="token string">'我叫%s,今年%s岁,python入门1%%.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'荒原饮露'</span><span class="token punctuation">,</span><span class="token string">'23'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c = a + b 将 a + b 的运算结果赋值给c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c *<em>= a 等效于 c = c *</em> a</td></tr><tr><td>//=</td><td>取整赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr><tr><td>and</td><td>“与”，如果 x 为False，x and y 返回False，否则返回y的计算值</td><td>两边为True才为True</td></tr><tr><td>or</td><td>“或”， 如果 x 为True，返回True，否则它返回y的计算值</td><td>一边为True则为True</td></tr><tr><td>not</td><td>“非”， 如果 x 为True，返回False，如果 x 为False，返回True</td><td>True则False，反之</td></tr></tbody></table><h1 id="逻辑运算符的优先级"><a href="#逻辑运算符的优先级" class="headerlink" title="逻辑运算符的优先级"></a>逻辑运算符的优先级</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">not</span> <span class="token operator">></span> <span class="token operator">and</span> <span class="token operator">></span> <span class="token operator">or</span><span class="token operator">and</span>     两个条件必须同时成立才为<span class="token boolean">True</span><span class="token operator">or</span>         两个条件有一个成立则为<span class="token boolean">True</span><span class="token operator">not</span>     条件为<span class="token boolean">True</span>则结果为<span class="token boolean">False</span>，条件为<span class="token boolean">False</span>则结果为<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符的不等式计算"><a href="#运算符的不等式计算" class="headerlink" title="运算符的不等式计算"></a>运算符的不等式计算</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span>两边式子同时成立，才会为<span class="token boolean">True</span>，否则为<span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">or</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">and</span> <span class="token number">6</span> <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span>先计算<span class="token operator">and</span>，式子为<span class="token boolean">False</span> <span class="token operator">or</span> <span class="token boolean">True</span>，结果则为<span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">and</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">or</span> <span class="token number">4</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">and</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">or</span> <span class="token number">9</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span>先计算<span class="token operator">and</span>，式子为<span class="token boolean">False</span> <span class="token operator">or</span> <span class="token boolean">False</span> <span class="token operator">or</span> <span class="token boolean">False</span>，结果为<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符数字计算"><a href="#运算符数字计算" class="headerlink" title="运算符数字计算"></a>运算符数字计算</h2><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">or</span> y     <span class="token comment" spellcheck="true"># if x is True，return x else return y.如果x为True则返回X，否则返回y</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">or</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">or</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">or</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token comment" spellcheck="true"># x and y和x or y是相反的</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">and</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span> <span class="token operator">and</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">2</span> <span class="token operator">or</span> <span class="token number">3</span> <span class="token operator">and</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">or</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编码初识"><a href="#编码初识" class="headerlink" title="编码初识"></a>编码初识</h1><p>ASCII</p><pre class="line-numbers language-python"><code class="language-python">ASCII<span class="token punctuation">:</span>早期的密码本，只包含英文字母，数字，特殊字符与<span class="token number">01</span>的对应关系采用 <span class="token number">8</span>位比特（bit） <span class="token operator">==</span> 1byte（字节）在ascll编码中 <span class="token number">8</span>位比特表示一个字节表示一个字符h e l l o  <span class="token operator">=</span>  <span class="token number">01101000</span> <span class="token number">01100101</span> <span class="token number">01100111</span> <span class="token number">0110011</span> <span class="token number">01100101</span>缺点<span class="token punctuation">:</span>只为英文使用者考虑，不能处理中文和其他国家的文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GBK</p><pre class="line-numbers language-python"><code class="language-python">由于ASCII编码，于是每个国家都提出了不同的编码来适应自己的语言GBK 只包含本国文字（以及英文字母，数字，特殊字符）与<span class="token number">01</span>对应关系GBK是采用单双字节变长编码，英文使用单字节编码，完全兼容ASCII字符编码，中文部分采用双字节编码a 太 白 <span class="token operator">=</span> <span class="token number">01101000</span> <span class="token number">01100101</span> <span class="token number">01100111</span> <span class="token number">0110011</span> <span class="token number">01100101</span>    <span class="token comment" spellcheck="true"># 1个英文占1个字节，1个中文字符占2个字节，共5字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>UNICODE</p><pre class="line-numbers language-python"><code class="language-python">由于ASCII编码的局限性，unicode应运而生unicode<span class="token punctuation">:</span>万国码，将全世界所有的文字都统一到一套编码里面采用<span class="token number">32</span>位比特<span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token operator">==</span> 4byte在unicode编码中 <span class="token number">32</span>位比特表示<span class="token number">4</span>个字节表示一个字符a：<span class="token number">00000000</span> <span class="token number">00010010</span> <span class="token number">00000000</span> <span class="token number">00010010</span>中：<span class="token number">00000000</span> <span class="token number">10010010</span> <span class="token number">00000000</span> <span class="token number">10010010</span>缺点<span class="token punctuation">:</span>如果使用unicode编码来存储英文，这会大量浪费空间，因为我们知道一个英文字符只占一个字节，而另外三个字节就浪费掉了，这样在存储和传输上非常不划算<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UTF-8</p><pre class="line-numbers language-python"><code class="language-python">utf<span class="token number">-8</span><span class="token punctuation">:</span>包含全世界所有的文字与二进制<span class="token number">01</span>的对应关系<span class="token punctuation">,</span>最少用<span class="token number">8</span>位表示一个字符utf<span class="token number">-8</span>是一种针对Unicode的可变长度字符编码<span class="token punctuation">,</span>是对Unicode编码的压缩和优化，将所有的字符和符号进行分类英文<span class="token punctuation">:</span> <span class="token number">00000010</span> <span class="token number">8</span>位表示一个字节表示一个字符欧洲文字<span class="token punctuation">:</span> <span class="token number">00000010</span> <span class="token number">00100000</span>    <span class="token number">16</span>位表示两个字节表示一个字符中国<span class="token punctuation">(</span>亚洲<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">00000010</span> <span class="token number">00000010</span> <span class="token number">00000010</span> <span class="token number">24</span>位表示三个字节表示一个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子</p><pre class="line-numbers language-python"><code class="language-python"><span class="token string">'old男孩'</span>GBK<span class="token punctuation">:</span><span class="token number">7</span>个字节utf<span class="token number">-8</span><span class="token punctuation">:</span><span class="token number">9</span>个字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="十进制转换为二进制"><a href="#十进制转换为二进制" class="headerlink" title="十进制转换为二进制"></a>十进制转换为二进制</h1><p>关键要点:除二取余，倒序排列，高位补零。</p><p>将十进制数42不断除以2，得到的余数非别是:010101，然后倒序排列，42所对应的二进制就是101010，然后高位补零就是:00101010</p><p>负整数转换为二进制，以-42为例，先得到42的二进制，然后取反(0变1，1变0)再加一，就是11010101 + 1，结果为11010110</p><h1 id="二进制转换成十进制"><a href="#二进制转换成十进制" class="headerlink" title="二进制转换成十进制"></a>二进制转换成十进制</h1><table><thead><tr><th>1</th><th>0</th><th>0</th><th>1</th><th>0</th><th>1</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>1 * 2^7</td><td>0 * 2^6</td><td>0 * 2^5</td><td>1 * 2^4</td><td>0 * 2^3</td><td>1 * 2^2</td><td>1 * 2^1</td><td>0 * 2^0</td></tr></tbody></table><p>将这些数相加，得到的就是10010110这个二进制数的十进制数</p><p>128 + 0 + 0 + 16 + 0 + 4 + 2 + 0 = 150</p><h1 id="数据类型之间的转换"><a href="#数据类型之间的转换" class="headerlink" title="数据类型之间的转换"></a>数据类型之间的转换</h1><pre class="line-numbers language-python"><code class="language-python">int（整数）         <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> bool（布尔值）非零即<span class="token boolean">True</span>bool（布尔值）     <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> int（整数）<span class="token boolean">True</span> <span class="token number">1</span> <span class="token boolean">False</span> <span class="token number">0</span>str（字符串）     <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> bool（布尔值）非空即<span class="token boolean">True</span>str（字符串）    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> int（整数）str（<span class="token number">13</span>   ）转换为整数，会强制去掉空格变成int（<span class="token number">13</span>）bool（布尔值）     <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> str（字符串）还是<span class="token boolean">True</span>，但是str类型的<span class="token boolean">True</span>，失去<span class="token boolean">True</span>的意义y <span class="token operator">=</span> <span class="token boolean">True</span>u <span class="token operator">=</span> str<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>type<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>    <span class="token comment" spellcheck="true"># 由于是str数据类型的True，下面的3 + u会报错，如果是bool数据类型的True可以与数字相加</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串的切片"><a href="#字符串的切片" class="headerlink" title="字符串的切片"></a>字符串的切片</h1><h2 id="字符串索引示意图"><a href="#字符串索引示意图" class="headerlink" title="字符串索引示意图"></a>字符串索引示意图</h2><p>请记住切片原则:<code>顾首不顾尾</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ea14b57c2a9a83be5caa515.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="按照索引取值"><a href="#按照索引取值" class="headerlink" title="按照索引取值"></a>按照索引取值</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'python骑士计划第三期'</span>        s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>s2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># p</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 期</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="按照切片取值"><a href="#按照切片取值" class="headerlink" title="按照切片取值"></a>按照切片取值</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'python骑士计划第三期'</span>        <span class="token comment" spellcheck="true"># 照切片取值，顾首不顾尾，s5 = s[6:-3] 6就是第六个字符以后，-3就是倒数第三个字符以前</span>s3 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 是从零开始数。取整个字符串可以写成s3 = s[:6],取整个字符串是s3 = s[:]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># python</span>s4 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 相当于s[0:6]，0可以不写，默认从零开始</span><span class="token keyword">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># python</span>s5 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 骑士计划</span>s6 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 骑士计划</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切片加步长取值"><a href="#切片加步长取值" class="headerlink" title="切片加步长取值"></a>切片加步长取值</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 步长就是每一步的长度，取pto字符串，要先划分区域，再定义隔几个字符去取</span>s <span class="token operator">=</span> <span class="token string">'python骑士计划第三期'</span>s7 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 划分区域为 0-6（区域为:python，从首个字符串开始取），步长为2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s7<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># pto</span>s8 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 划分区域为 7-最后（区域为:士计划第三期，从第七个字符之后开始取），步长为2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s8<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 士划三</span>s9 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 倒叙取值要加上反向步长</span><span class="token keyword">print</span><span class="token punctuation">(</span>s9<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 期三第</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 后面是-1所以是反向取值，区域定义为 0-5（python），但是区域也是反向的，所以是从期到n的区域里面取</span>骑士计划第三期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h1><h2 id="capitalize-首字母大写"><a href="#capitalize-首字母大写" class="headerlink" title="capitalize() 首字母大写"></a>capitalize() 首字母大写</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'faker'</span>s1 <span class="token operator">=</span> s<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># faker</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Faker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="center-将字符串居中"><a href="#center-将字符串居中" class="headerlink" title="center() 将字符串居中"></a>center() 将字符串居中</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'missf.top'</span>s1 <span class="token operator">=</span> s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>                    missf<span class="token punctuation">.</span>top                         <span class="token comment" spellcheck="true"># 设置50的长度并把字符串居中</span>s2 <span class="token operator">=</span> s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>missf<span class="token punctuation">.</span>top<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 设置50的长度定义填充物并把字符串居中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="swapcase-大小写翻转"><a href="#swapcase-大小写翻转" class="headerlink" title="swapcase() 大小写翻转"></a>swapcase() 大小写翻转</h2><pre class="line-numbers language-python"><code class="language-python">sr <span class="token operator">=</span> <span class="token string">'KubeRnEteS'</span><span class="token keyword">print</span><span class="token punctuation">(</span>sr<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kUBErNeTEs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="title-非字母隔开单词的首字母大写"><a href="#title-非字母隔开单词的首字母大写" class="headerlink" title="title() 非字母隔开单词的首字母大写"></a>title() 非字母隔开单词的首字母大写</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'tpshow9nohup@mid'</span>        <span class="token comment" spellcheck="true"># 注意：第一个字母也会变成大写</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Tpshow9Nohup@Mid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="upper-不区分大小写"><a href="#upper-不区分大小写" class="headerlink" title="upper() 不区分大小写"></a>upper() 不区分大小写</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用途:验证码不区分大小写</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入姓名:"</span><span class="token punctuation">)</span>passworrd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码:"</span><span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token string">'AeTrd'</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>your_code <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入验证码:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> your_code <span class="token operator">==</span> code<span class="token punctuation">:</span>    <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'alex'</span> <span class="token operator">and</span> passworrd <span class="token operator">==</span> <span class="token string">'sb'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名或者密码错误'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'验证码不正确'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="startswich-endswith-判断以什么为开头和结尾"><a href="#startswich-endswith-判断以什么为开头和结尾" class="headerlink" title="startswich() endswith() 判断以什么为开头和结尾"></a>startswich() endswith() 判断以什么为开头和结尾</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'mowenjieadcarry'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 字符串不是以o开头，结果为False</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'mo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span>    <span class="token comment" spellcheck="true"># 字符串以mo开头，结果为True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 切割五个字符之后是否是j开头，结果为True</span><span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'ry'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断以什么为结尾</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="find-index-通过元素找索引"><a href="#find-index-通过元素找索引" class="headerlink" title="find() index() 通过元素找索引"></a>find() index() 通过元素找索引</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'mowenjieadcarry'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">8</span>    <span class="token comment" spellcheck="true"># 返回a元素前面的索引数</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">11</span>    <span class="token comment" spellcheck="true"># 从第九个字符后面开始找，找到的是第二个a</span><span class="token comment" spellcheck="true"># find和index功能几乎一样，区别只有find找不到会返回-1,index会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="strip-默认去除字符串前后的空格-换行符-制表符"><a href="#strip-默认去除字符串前后的空格-换行符-制表符" class="headerlink" title="strip() 默认去除字符串前后的空格/换行符/制表符"></a>strip() 默认去除字符串前后的空格/换行符/制表符</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># strip()    默认去除字符串前后两端的空格，换行符，制表符</span>s <span class="token operator">=</span> <span class="token string">'\n barry \t \n'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># barry</span><span class="token comment" spellcheck="true"># strip 去除字符串两边的字符</span>s <span class="token operator">=</span> <span class="token string">'kkohuang yuan yin lure'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'kore'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 会把kore切割成最小单位，从前后两边逐个去除</span>huang yuan yin lu<span class="token comment" spellcheck="true"># lstrip 只从前面去除</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'k'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ohuang yuan yin lure<span class="token comment" spellcheck="true"># rstrip() 只从后面去除</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'re'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kkohuang yuan yin lu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="split-将字符串转化为列表"><a href="#split-将字符串转化为列表" class="headerlink" title="split() 将字符串转化为列表"></a>split() 将字符串转化为列表</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'kkohuang yuan yin lure'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 默认以空格分割元素</span><span class="token punctuation">[</span><span class="token string">'kkohuang'</span><span class="token punctuation">,</span> <span class="token string">'yuan'</span><span class="token punctuation">,</span> <span class="token string">'yin'</span><span class="token punctuation">,</span> <span class="token string">'lure'</span><span class="token punctuation">]</span>t <span class="token operator">=</span> <span class="token string">'top:mid:adc'</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 指定以冒号进行分割</span><span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'mid'</span><span class="token punctuation">,</span> <span class="token string">'adc'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 指定以冒号进行分割,分割一次</span><span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'mid:adc'</span><span class="token punctuation">]</span>t <span class="token operator">=</span> <span class="token string">':mid:adc'</span>    <span class="token comment" spellcheck="true"># 只有两个分割符，但是转换成列表之后参数个数是n+1</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'mid'</span><span class="token punctuation">,</span> <span class="token string">'adc'</span><span class="token punctuation">]</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="join-列表转化为字符串"><a href="#join-列表转化为字符串" class="headerlink" title="join() 列表转化为字符串"></a>join() 列表转化为字符串</h2><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token string">':mid:adc'</span>s9 <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将每个字符通过指定的连接符连接在一起</span><span class="token keyword">print</span><span class="token punctuation">(</span>s9<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span>m<span class="token operator">-</span>i<span class="token operator">-</span>d<span class="token operator">-</span><span class="token punctuation">:</span><span class="token operator">-</span>a<span class="token operator">-</span>d<span class="token operator">-</span>c    t1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'liz'</span><span class="token punctuation">,</span><span class="token string">'zsd'</span><span class="token punctuation">,</span><span class="token string">'awa'</span><span class="token punctuation">]</span>s10 <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 以空格为分隔符</span><span class="token keyword">print</span><span class="token punctuation">(</span>s10<span class="token punctuation">)</span>liz zsd awa            <span class="token comment" spellcheck="true"># 将列表的多个元素转换回字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="replace-字符串替换"><a href="#replace-字符串替换" class="headerlink" title="replace() 字符串替换"></a>replace() 字符串替换</h2><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token string">'faker是世界第一中单，faker也是一个屌丝，faker'</span>s11 <span class="token operator">=</span> t<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'faker'</span><span class="token punctuation">,</span><span class="token string">'55开'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 可以指定替换的次数，不指定次数则全部替换</span><span class="token keyword">print</span><span class="token punctuation">(</span>s11<span class="token punctuation">)</span><span class="token number">55</span>开是世界第一中单，<span class="token number">55</span>开也是一个屌丝，faker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="format-格式化输出"><a href="#format-格式化输出" class="headerlink" title="format() 格式化输出"></a>format() 格式化输出</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一种</span>s <span class="token operator">=</span> <span class="token string">'我叫{}，我玩{}，我主玩的位置是{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'bang'</span><span class="token punctuation">,</span><span class="token string">'英雄联盟'</span><span class="token punctuation">,</span><span class="token string">'adc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我叫bang，我玩英雄联盟，我主玩的位置是adc</span><span class="token comment" spellcheck="true"># 第二种</span>s <span class="token operator">=</span> <span class="token string">'我叫{0}，今年{1}，性别{2}，我依然叫{0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'20'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我叫小明，今年20，性别女，我依然叫小明</span><span class="token comment" spellcheck="true"># 第三种</span>s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""我叫{name}，今年{age}，性别{sex}，我依然叫{name}"""</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'小明'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我叫小明，今年20，性别女，我依然叫小明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="is-判断字符串和数字组成"><a href="#is-判断字符串和数字组成" class="headerlink" title="is 判断字符串和数字组成"></a>is 判断字符串和数字组成</h2><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span><span class="token string">'huanyuan135'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 判断字符串由字母或数字组成</span><span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 判断字符串只由字母组成</span><span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 判断字符串只由数字组成</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="count-计算字符串中某个字符出现的次数"><a href="#count-计算字符串中某个字符出现的次数" class="headerlink" title="count 计算字符串中某个字符出现的次数"></a>count 计算字符串中某个字符出现的次数</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'cdcdcdcdcdjvnjfnvjfn:jsvnsvpojwpd'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算这个字符串f字符出现的次数</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 切片，顾首不顾尾，从零开始到第八个字符的前面截断</span><span class="token number">4</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 从零开始数，第八个字符到结束</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="len-统计字符串长度"><a href="#len-统计字符串长度" class="headerlink" title="len 统计字符串长度"></a>len 统计字符串长度</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'cdcdcdcdcdjvnjfnvjfn:jsvnsvpojwpd'</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 内置函数</span><span class="token number">33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day01</title>
    <link href="https://www.missf.top/2020/04/23/Python%E5%9F%BA%E7%A1%80day01/"/>
    <id>https://www.missf.top/2020/04/23/Python%E5%9F%BA%E7%A1%80day01/</id>
    <published>2020-04-23T04:14:29.000Z</published>
    <updated>2020-05-13T02:09:34.447Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Python发展史"><a href="#Python发展史" class="headerlink" title="Python发展史"></a>Python发展史</h1><ul><li>创始人:Guido，国人叫龟叔，在1989年的圣诞节写出来的</li><li>2005 - 2012，龟叔去了谷歌工作，谷歌大量使用Python</li><li>2005年国内第一家使用Python的公司—豆瓣</li><li>2012年国内兴起云计算的热潮，Python借助OpenStack又火了一把</li><li>2014年AI兴起，大量的公司使用Python去写算法</li><li>直到2017年Python才真正进入大众的视野</li></ul><h1 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h1><ul><li>WEB开发:最火的Python web框架Django，还有支持异步高并发的Tornado，短小精悍的flask</li><li>网络编程:支持高并发的Twisted网络框架</li><li>爬虫:Python在爬虫领域几乎是霸主地位，具有非常多的爬虫模块支持</li><li>云计算:著名的云计算框架OpenStack就是用Python写的</li><li>人工智能和数据分析:Python是目前人工智能和数据分析领域公认的必备语言</li><li>自动化运维:在Linux运维领域，Python能做很多事情，特别是处理数据的能力非常出色</li><li>游戏开发:Python能做游戏开发，但是使用Python开发游戏的公司可能没有这么多</li></ul><h1 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h1><p>核心:通过编译器将人类写出来的代码一次性全部编译成机器语言让计算机可以识别和执行</p><p>代表语言：c，c++，golang，java</p><p>优点:执行效率高</p><p>缺点:开发效率低，不可以跨平台</p><p>一般多用于研究所、研究院，对执行效率要求高，大数据的计算、底层的开发</p><h1 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h1><p>核心:解释器逐行解释代码，再逐行执行（python是解释器，java中叫虚拟机）</p><p>代表语言:Python，php，Java，ruby</p><p>优点:开发效率高，可以跨平台，可移植性强</p><p>缺点:执行效率相对编译型语言慢</p><h1 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h1><p>优点</p><ol><li>Python是一门高级语言，不用关心底层内存指针等等</li><li>由于Python开源的本质，Python已经被移植到许多平台，具备非常高的可移植性</li><li>Python可以嵌入c语言的代码，c语言也可以嵌入Python的代码，具备可嵌入性</li><li>大量现有的第三方库和模块的支持，使得开发效率大大提高</li></ol><p>缺点</p><ol><li>执行速度比编译型语言慢，如果运行Python花了0.1s，同样的代码c语言花了0.01秒，这样c就比Python快了十倍</li><li>Python源码是以明文形式存放的，如果项目要求源代码必须是加密的，一开始就不应该选择Python</li><li>线程不能利用多核CPU的问题，这也是Python被人诟病最多的一个缺点</li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>官方解释:将程序中一些中间结果暂时存到内存中，供后面程序调用</p><h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><ul><li>变量必须由数字，字母，下划线任意组合</li><li>不能是数字开头</li><li>不能使用Python中的关键字（具体关键字后面再介绍）</li><li>变量要具有描述性</li><li>变量不能过长</li><li>变量不能使用中文</li><li>尽量使用驼峰体</li></ul><h2 id="定义Python变量"><a href="#定义Python变量" class="headerlink" title="定义Python变量"></a>定义Python变量</h2><pre class="line-numbers language-python"><code class="language-python">age1 <span class="token operator">=</span> <span class="token number">12</span>age2 <span class="token operator">=</span> age1age3 <span class="token operator">=</span> age2age2 <span class="token operator">=</span> <span class="token number">24</span><span class="token keyword">print</span> <span class="token punctuation">(</span>age1<span class="token punctuation">,</span>age2<span class="token punctuation">,</span>age3<span class="token punctuation">)</span><span class="token number">12</span> <span class="token number">24</span> <span class="token number">12</span><span class="token comment" spellcheck="true"># 注意：程序中会大量的出现和使用变量，变量中会暂存一些少量的数据，给其他变量代指</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Python常量"><a href="#Python常量" class="headerlink" title="Python常量"></a>Python常量</h1><p>常量，用于定义不变的值。例如:身份证号，圆周率，历史记载，新中国成立时间:1949101</p><h2 id="使用常量"><a href="#使用常量" class="headerlink" title="使用常量"></a>使用常量</h2><p>Python中的常量可以改变（不像c改变常量会报错），但约定俗成Python中将变量全部变成大写，就是表示常量，将一些不想让别人改变的量设置成常量，放在文件最上面</p><h1 id="Python注释"><a href="#Python注释" class="headerlink" title="Python注释"></a>Python注释</h1><p>对某一段代码做解释说明，一般是精简的代码，别人可能看不懂，需要做简单的解释</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#好好学习，天天向上</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''被注释的内容'''</span><span class="token triple-quoted-string string">"""被注释的内容"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基础数据类型初识"><a href="#基础数据类型初识" class="headerlink" title="基础数据类型初识"></a>基础数据类型初识</h1><h2 id="int-整型"><a href="#int-整型" class="headerlink" title="int 整型"></a>int 整型</h2><pre class="line-numbers language-python"><code class="language-python">i1 <span class="token operator">=</span> <span class="token number">10</span>i2 <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span> <span class="token punctuation">(</span>i1 <span class="token operator">*</span> i2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="str-字符串"><a href="#str-字符串" class="headerlink" title="str 字符串"></a>str 字符串</h2><pre class="line-numbers language-python"><code class="language-python">python中凡是用引号引起来的内容就是字符串数据类型ret1 <span class="token operator">=</span> <span class="token string">'荒原饮露'</span>ret2 <span class="token operator">=</span> <span class="token string">"荒原饮露"</span>ret3 <span class="token operator">=</span> <span class="token triple-quoted-string string">"""荒原饮露"""</span>ret4 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''荒原饮露'''</span><span class="token keyword">print</span> <span class="token punctuation">(</span>ret1<span class="token punctuation">,</span>ret2<span class="token punctuation">,</span>ret3<span class="token punctuation">,</span>ret4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bool-布尔值"><a href="#bool-布尔值" class="headerlink" title="bool 布尔值"></a>bool 布尔值</h2><pre class="line-numbers language-python"><code class="language-python">true     <span class="token comment" spellcheck="true"># 真</span>false    <span class="token comment" spellcheck="true"># 假</span>用于判断条件，逻辑语句真假<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="单双引号搭配使用"><a href="#单双引号搭配使用" class="headerlink" title="单双引号搭配使用"></a>单双引号搭配使用</h2><pre class="line-numbers language-python"><code class="language-python">msg <span class="token operator">=</span> <span class="token string">"I' m huangyuanyinlu,18 year"</span><span class="token keyword">print</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># I' m huangyuanyinlu,18 year</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="字符串相加相乘"><a href="#字符串相加相乘" class="headerlink" title="字符串相加相乘"></a>字符串相加相乘</h2><pre class="line-numbers language-python"><code class="language-python">a1 <span class="token operator">=</span> <span class="token string">'Alex'</span>a2 <span class="token operator">=</span> <span class="token string">'sb'</span><span class="token keyword">print</span> <span class="token punctuation">(</span>a1 <span class="token operator">+</span> a2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Alexsb</span><span class="token keyword">print</span> <span class="token punctuation">(</span>a1 <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># AlexAlexAlexAlexAlexAlexAlexAlexAlexAlex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="input-用户交互"><a href="#input-用户交互" class="headerlink" title="input 用户交互"></a>input 用户交互</h1><p>让用户输入用户名密码，得到用户输入的数据，起到了人与程序的交互作用</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的名字："</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的年龄："</span><span class="token punctuation">)</span>sex <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的性别："</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里注意一点:凡是input得到的值，都是字符串数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将用户输入的变量进行拼接"><a href="#将用户输入的变量进行拼接" class="headerlink" title="将用户输入的变量进行拼接"></a>将用户输入的变量进行拼接</h2><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的名字："</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的年龄："</span><span class="token punctuation">)</span>sex <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的性别："</span><span class="token punctuation">)</span>msg <span class="token operator">=</span> <span class="token string">'我的姓名是'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token string">'我的年龄是'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token string">'我的性别是'</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'.'</span><span class="token keyword">print</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 我的姓名是荒原饮露,我的年龄是23,我的性别是男</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="if-流程控制语句"><a href="#if-流程控制语句" class="headerlink" title="if 流程控制语句"></a>if 流程控制语句</h1><h2 id="if-单分支"><a href="#if-单分支" class="headerlink" title="if 单分支"></a>if 单分支</h2><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> input <span class="token punctuation">(</span><span class="token string">"请输入年龄:"</span><span class="token punctuation">)</span>age <span class="token operator">=</span> int<span class="token punctuation">(</span>age<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Python3x之后，input得到的数据都是字符串类型</span><span class="token keyword">print</span> <span class="token punctuation">(</span>age<span class="token punctuation">,</span>type<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输出变量的数据类型</span><span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你已经不是10岁的小孩了'</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="if-多分支"><a href="#if-多分支" class="headerlink" title="if 多分支"></a>if 多分支</h2><pre class="line-numbers language-python"><code class="language-python">jineng <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入你的技能:'</span><span class="token punctuation">)</span><span class="token keyword">if</span> jineng <span class="token operator">==</span> <span class="token string">'三分球'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以参加三分球大赛'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> jineng <span class="token operator">==</span> <span class="token string">'中投'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以参加中距离投篮'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> jineng <span class="token operator">==</span> <span class="token string">'突破'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以参加1V1对抗赛'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'买票进场吧'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 登陆示例</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入用户名：'</span><span class="token punctuation">)</span>password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入密码：'</span><span class="token punctuation">)</span><span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'荒原饮露'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">'123'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码错误'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名不存在'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 买票示例</span>has_ticket <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入车票号码:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>knife_length <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入刀的长度:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> has_ticket <span class="token operator">==</span> <span class="token number">23</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'车票检查通过，准备开始安检'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> knife_length <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刀不超过20厘米，允许上车'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刀超过20厘米，不允许上车'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有车票"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h1><h2 id="单次循环"><a href="#单次循环" class="headerlink" title="单次循环"></a>单次循环</h2><pre class="line-numbers language-python"><code class="language-python">flag <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> flag<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'麦迪'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'科比'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'杜兰特'</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'詹姆斯'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># flag = False后面的依然会输出，因为运行到最后才会重新回到while</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打印1到100"><a href="#打印1到100" class="headerlink" title="打印1到100"></a>打印1到100</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一</span>count <span class="token operator">=</span> <span class="token number">1</span>flag <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> flag<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 方法二</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 不要见方法二代码少就不去理解方法一，因为方法一包含flag = True的编程思想</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算1加到100"><a href="#计算1加到100" class="headerlink" title="计算1加到100"></a>计算1加到100</h2><pre class="line-numbers language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">1</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;=</span> <span class="token number">101</span><span class="token punctuation">:</span>   sum <span class="token operator">=</span> sum <span class="token operator">+</span> count   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>   <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># break是直接终止循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h1><pre class="line-numbers language-python"><code class="language-python">打印<span class="token number">1</span>到<span class="token number">10</span>，但是跳过<span class="token number">7</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token comment" spellcheck="true"># continue是跳出本次循环，继续执行下一个循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 判断count的值，直接+1</span>        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="打印100以内的偶数"><a href="#打印100以内的偶数" class="headerlink" title="打印100以内的偶数"></a>打印100以内的偶数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 利用对2取余去判断是否偶数</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 每次自加2去打印偶数，虽然这样的做法不专业，但是也是体现灵活编程思维的一种方式</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="while-else"><a href="#while-else" class="headerlink" title="while else"></a>while else</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># while else :只有在while循环被break打断时，才不会执行else程序，否则循环完之后一定会执行else程序</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loop"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环正常执行"</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loop"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环正常执行"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># while循环没有被打断，打印完Loop1-6之后还是会打印循环正常执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.missf.top/2019/03/28/Hello-World/"/>
    <id>https://www.missf.top/2019/03/28/Hello-World/</id>
    <published>2019-03-28T04:14:29.000Z</published>
    <updated>2020-05-08T03:02:07.895Z</updated>
    
    <content type="html"><![CDATA[<p>所有无法深入问题本质的那些人，最终都将离开这个行业。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所有无法深入问题本质的那些人，最终都将离开这个行业。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Hello World" scheme="https://www.missf.top/categories/Hello-World/"/>
    
    
      <category term="Hello World" scheme="https://www.missf.top/tags/Hello-World/"/>
    
  </entry>
  
  <entry>
    <title>我在人间凑数的日子</title>
    <link href="https://www.missf.top/2019/03/28/%E6%88%91%E5%9C%A8%E4%BA%BA%E9%97%B4%E5%87%91%E6%95%B0%E7%9A%84%E6%97%A5%E5%AD%90/"/>
    <id>https://www.missf.top/2019/03/28/%E6%88%91%E5%9C%A8%E4%BA%BA%E9%97%B4%E5%87%91%E6%95%B0%E7%9A%84%E6%97%A5%E5%AD%90/</id>
    <published>2019-03-28T04:14:29.000Z</published>
    <updated>2020-05-13T02:12:36.766Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>语言这东西，在表达爱意的时候如此无力，在表达伤害的时候，却如此锋利。</p></blockquote><blockquote><p>你住的城市下雨了，想问你有没有带伞，可我不敢。因为我怕你说没带，而我又无能为力，就像是我爱你，却给不了你想要的温暖。</p></blockquote><blockquote><p>十年太长，什么都会变。一辈子太短，一件事也有可能做不完。回忆永远站在背后，你无法抛弃，只能拥抱。</p></blockquote><blockquote><p>没有回音的山谷不值得纵身一跃。</p></blockquote><blockquote><p>世界上只有一种英雄、看透了生活的真相，却依然热爱生活。</p></blockquote><blockquote><p>你联系我，我就听你说，你不联系我，我就顺其自然，实不相瞒，我很想你，但问题不大，我能控制，因为比较酷。</p></blockquote><blockquote><p>我不知道凌晨五点该说晚安还是早安，也不知道这个年龄是该说爱还是喜欢。</p></blockquote><blockquote><p>曾经我发誓要把生命献给爱情，后来我没死，青春替我偿了命。</p></blockquote><blockquote><p>我与春风皆过客，你携秋水揽星河。</p></blockquote><blockquote><p>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</p></blockquote><blockquote><p>从此无心爱良夜，任他明月下西楼。</p></blockquote><blockquote><p>仅一夜之间，我的心判若两人。你自人山人海中来，原来只为给我一场空欢喜。你来时携风带雨，我无处可避，你走时乱了四季，我久病难医。</p></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;语言这东西，在表达爱意的时候如此无力，在表达伤害的时候，却如此锋利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;你住的城市下雨了，想问你有没有带伞，可我不敢。因为我怕你说没带，而我又无能为力，就像是我爱你，却给不了你想要的
      
    
    </summary>
    
    
      <category term="荒原饮露" scheme="https://www.missf.top/categories/%E8%8D%92%E5%8E%9F%E9%A5%AE%E9%9C%B2/"/>
    
    
      <category term="荒原饮露" scheme="https://www.missf.top/tags/%E8%8D%92%E5%8E%9F%E9%A5%AE%E9%9C%B2/"/>
    
      <category term="记忆" scheme="https://www.missf.top/tags/%E8%AE%B0%E5%BF%86/"/>
    
      <category term="语录" scheme="https://www.missf.top/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
</feed>
