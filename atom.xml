<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒原饮露</title>
  
  <subtitle>青春不是隔岸观火啊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.missf.top/"/>
  <updated>2020-08-18T07:04:20.443Z</updated>
  <id>https://www.missf.top/</id>
  
  <author>
    <name>荒原饮露</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ELK Stack监控系统日志(6)</title>
    <link href="https://www.missf.top/post/c802a07c.html"/>
    <id>https://www.missf.top/post/c802a07c.html</id>
    <published>2020-08-17T10:48:56.000Z</published>
    <updated>2020-08-18T07:04:20.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h1><p>安装配置好ES集群，存储Logstash推送过来的日志</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f3b77ea14195aa594e32f46.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h1><p>编写logstash pipeline配置文件，对日志进行收集，过滤，存储</p><pre class="line-numbers language-json"><code class="language-json">vim /etc/logstash/conf.d/sys.confinput <span class="token punctuation">{</span>  file <span class="token punctuation">{</span>    path => <span class="token punctuation">[</span><span class="token string">"/var/log/messages"</span><span class="token punctuation">]</span>    type => <span class="token string">"system"</span>    tags => <span class="token punctuation">[</span><span class="token string">"syslog"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">]</span>    start_position => <span class="token string">"beginning"</span>    # 从文件开头读取    <span class="token punctuation">}</span>  file <span class="token punctuation">{</span>    path => <span class="token punctuation">[</span><span class="token string">"/var/log/audit/audit.log"</span><span class="token punctuation">]</span>    type => <span class="token string">"system"</span>    tags => <span class="token punctuation">[</span><span class="token string">"auth"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">]</span>    start_position => <span class="token string">"beginning"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"system"</span> <span class="token punctuation">{</span>        if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"syslog"</span> <span class="token punctuation">{</span>            elasticsearch <span class="token punctuation">{</span>                hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>    # 存储到ES地址                index  => <span class="token string">"logstash-system-syslog-%{+YYYY.MM.dd}"</span>    # index的命名格式            <span class="token punctuation">}</span>            stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        else if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"auth"</span> <span class="token punctuation">{</span>            elasticsearch <span class="token punctuation">{</span>                hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>                index  => <span class="token string">"logstash-system-auth-%{+YYYY.MM.dd}"</span>            <span class="token punctuation">}</span>            stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改logstash启动配置文件</p><pre class="line-numbers language-shell"><code class="language-shell"># 启动logstash时需要以root用户去启动,不然由于权限问题无法收集系统日志vim /etc/systemd/system/logstash.service [Unit]Description=logstash[Service]Type=simpleUser=root    # 不以root启动收集系统日志时会提示Permission deniedGroup=root# Load env vars from /etc/default/ and /etc/sysconfig/ if they exist.# Prefixing the path with '-' makes it try to load, but if the file doesn't# exist, it continues onward.EnvironmentFile=-/etc/default/logstashEnvironmentFile=-/etc/sysconfig/logstashExecStart=/usr/share/logstash/bin/logstash -r -f /etc/logstash/conf.d/sys.conf    # 指定我们编写的logstash pipeline配置文件Restart=alwaysWorkingDirectory=/Nice=19LimitNOFILE=16384# When stopping, how long to wait before giving up and sending SIGKILL?# Keep in mind that SIGKILL on a process can cause data loss.TimeoutStopSec=infinity[Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h1><p>将ES集群的数添加到Kibana，创建索引</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f3b6f9e14195aa594e132b3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>配置时间过滤器字段，支持使用正则匹配</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f3b7b4b14195aa594e3ff74.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在Kibana的discover展示数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f3b7d6814195aa594e49bb3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;elasticsearch&quot;&gt;&lt;a href=&quot;#elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;elasticsearch&quot;&gt;&lt;/a&gt;elasticsearch&lt;/h1&gt;&lt;p&gt;安装配置好ES集群，存储Logstash推送过来的日
      
    
    </summary>
    
    
      <category term="ELK Stack" scheme="https://www.missf.top/categories/ELK-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ELK Kibana简述与安装配置(5)</title>
    <link href="https://www.missf.top/post/e26112db.html"/>
    <id>https://www.missf.top/post/e26112db.html</id>
    <published>2020-08-14T07:56:54.000Z</published>
    <updated>2020-08-18T02:37:14.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kibana简述"><a href="#Kibana简述" class="headerlink" title="Kibana简述"></a>Kibana简述</h1><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理解，它操作简单，基于浏览器的用户界面可以快速创建仪表板(dashboard)实时显示Elasticsearch查询动态。设置Kibana非常简单，无需编码或者额外的基础架构，就可以完成Kibana安装并启动Elasticsearch索引监测</p><h1 id="Kibana安装配置"><a href="#Kibana安装配置" class="headerlink" title="Kibana安装配置"></a>Kibana安装配置</h1><pre class="line-numbers language-shell"><code class="language-shell"># 下载Kibanawget https://artifacts.elastic.co/downloads/kibana/kibana-7.8.1-x86_64.rpm# 安装shasum -a 512 kibana-7.8.1-x86_64.rpmrpm --install kibana-7.8.1-x86_64.rpm# 修改Kibana配置文件grep -v "^#" /etc/kibana/kibana.ymlserver.port: 5601server.host: "127.0.0.1"elasticsearch.hosts: ["http://10.10.110.191:9200"]# 启动Kibanasystemctl start kibana.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置Nginx代理Kibana"><a href="#配置Nginx代理Kibana" class="headerlink" title="配置Nginx代理Kibana"></a>配置Nginx代理Kibana</h1><p>配置Nginx反向代理实现鉴权</p><pre class="line-numbers language-shell"><code class="language-shell">vim /usr/local/nginx/conf/nginx.confserver {      listen 9090;      server_name localhost;      location / {        auth_basic "Restricted Access";        auth_basic_user_file /usr/local/nginx/conf/passwd.db;    # 账号密码文件        proxy_pass http://127.0.0.1:5601;        proxy_set_header Host $host;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;      }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置验证登录账号密码</p><pre class="line-numbers language-shell"><code class="language-shell"># 需要安装httpd-tools工具,文件里的密码是密文的htpasswd -c /usr/local/nginx/conf/passwd.db admin    # 连续输入两次密码# 测试本机kibana能否连接,如果本机都不能连接,那么Nginx代理就没有意义curl -L -u admin:12345678 http://127.0.0.1:5601<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="登录Kibana"><a href="#登录Kibana" class="headerlink" title="登录Kibana"></a>登录Kibana</h1><p>登录kibana的地址</p><pre class="line-numbers language-shell"><code class="language-shell">http://10.10.110.194:9090/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic.imgdb.cn/item/5f3a460b14195aa5949b73b3.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kibana简述&quot;&gt;&lt;a href=&quot;#Kibana简述&quot; class=&quot;headerlink&quot; title=&quot;Kibana简述&quot;&gt;&lt;/a&gt;Kibana简述&lt;/h1&gt;&lt;p&gt;Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存
      
    
    </summary>
    
    
      <category term="ELK Stack" scheme="https://www.missf.top/categories/ELK-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ELK Logstash安装与常用插件(4)</title>
    <link href="https://www.missf.top/post/fe947601.html"/>
    <id>https://www.missf.top/post/fe947601.html</id>
    <published>2020-08-11T07:04:57.000Z</published>
    <updated>2020-08-14T07:59:23.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Logstash概述"><a href="#Logstash概述" class="headerlink" title="Logstash概述"></a>Logstash概述</h1><p>logstash是elasticsearch的数据管道，负责对数据源进行处理。工作原理分别是输入、过滤、输出，其中input(负责从数据源采集数据)和output(将数据传输到目的地)是必要的，filter(将数据修改为你指定的格式或内容)是非必要的。logstash 是插件式管理模式，在输入、过滤、输出以及编码过程中都可以使用插件进行定制，Logstash 社区有超过 200 种可用插件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f33c7b714195aa594ff030a.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="安装Logstash"><a href="#安装Logstash" class="headerlink" title="安装Logstash"></a>安装Logstash</h1><pre class="line-numbers language-shell"><code class="language-shell"># 安装jdk,这里使用yum是因为二进制安装的jdk,在Logstash启动时会报could not find javayum install -y java-11-openjdk java-11-openjdk-devel java-11-openjdk-headless# 下载ogstashhttps://artifacts.elastic.co/downloads/logstash/logstash-7.8.1.rpm# 安装yum install -y logstash-7.8.1.rpm# 修改启动分配内存vim /etc/logstash/jvm.options-Xms512m-Xmx512m# 启动logstashsystemctl start logstash.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>比较操作符</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">==</span><span class="token punctuation">(</span>相等<span class="token punctuation">)</span> , <span class="token operator">!=</span><span class="token punctuation">(</span>不等于<span class="token punctuation">)</span> , <span class="token operator">&lt;</span><span class="token punctuation">(</span>小于<span class="token punctuation">)</span> , <span class="token operator">></span><span class="token punctuation">(</span>大于<span class="token punctuation">)</span> , <span class="token operator">&lt;=</span><span class="token punctuation">(</span>小于等于<span class="token punctuation">)</span> , <span class="token operator">>=</span><span class="token punctuation">(</span>大于等于<span class="token punctuation">)</span><span class="token operator">=</span>~<span class="token punctuation">(</span>匹配正则<span class="token punctuation">)</span> , <span class="token operator">!</span>~<span class="token punctuation">(</span>不匹配正则<span class="token punctuation">)</span> in<span class="token punctuation">(</span>包含<span class="token punctuation">)</span> , not in<span class="token punctuation">(</span>不包含<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>布尔操作符</p><pre class="line-numbers language-bash"><code class="language-bash">and<span class="token punctuation">(</span>与<span class="token punctuation">)</span>, or<span class="token punctuation">(</span>或<span class="token punctuation">)</span>, nand<span class="token punctuation">(</span>非与<span class="token punctuation">)</span>, xor<span class="token punctuation">(</span>非或<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一元运算符</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">(</span>取反<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>复合表达式<span class="token punctuation">)</span>, <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>对复合表达式结果取反<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="输入插件"><a href="#输入插件" class="headerlink" title="输入插件"></a>输入插件</h1><p>Stdin示例</p><pre class="line-numbers language-json"><code class="language-json">vim /etc/logstash/conf.d/stdin.confinput <span class="token punctuation">{</span>        # 输入  stdin <span class="token punctuation">{</span>     # 调用stdin插件<span class="token punctuation">,</span>数据输入来自于标准输入  <span class="token punctuation">}</span> <span class="token punctuation">}</span>filter <span class="token punctuation">{</span>     # 过滤<span class="token punctuation">}</span>output <span class="token punctuation">{</span>    # 输出  stdout <span class="token punctuation">{</span>    # 调用stdout插件<span class="token punctuation">,</span>输出时解码打印rubydebug信息    codec => rubydebug   <span class="token punctuation">}</span> <span class="token punctuation">}</span># 指定配置文件启动logstash<span class="token punctuation">,</span>你的标准输入会作为数据源输出/usr/share/logstash/bin/logstash -r -f /etc/logstash/conf.d/stdin.confmwj<span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-12T18<span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">32</span>.683Z<span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"mwj"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span>test data      <span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-12T18<span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">47</span>.691Z<span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"test data"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span>opppp<span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-12T18<span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">11</span>.799Z<span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"opppp"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>File示例</p><pre class="line-numbers language-json"><code class="language-json">vim /etc/logstash/conf.d/file.conf input <span class="token punctuation">{</span>  file <span class="token punctuation">{</span>    # 调用file这个插件    path =><span class="token string">"/var/log/messages"</span>    # 数据源来自这个文件的新追加内容    tags =><span class="token string">"messages"</span>    # 打标签    type =><span class="token string">"syslog"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span># 启动logstash<span class="token punctuation">,</span>-r参数是配置文件被修改会重新加载(但不支持热加载其他的插件<span class="token punctuation">)</span>/usr/share/logstash/bin/logstash -r -f /etc/logstash/conf.d/file.conf<span class="token punctuation">{</span>          <span class="token string">"type"</span> => <span class="token string">"syslog"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T11<span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">45</span>.031Z<span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"path"</span> => <span class="token string">"/var/log/messages"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>          <span class="token string">"tags"</span> => <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token string">"messages"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"Aug 13 19:41:44 localhost yum[86466]: Installed: 1:nginx-mod-http-image-filter-1.16.1-1.el7.x86_64"</span><span class="token punctuation">}</span><span class="token punctuation">{</span>          <span class="token string">"type"</span> => <span class="token string">"syslog"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T11<span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">45</span>.032Z<span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"path"</span> => <span class="token string">"/var/log/messages"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>          <span class="token string">"tags"</span> => <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token string">"messages"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"Aug 13 19:41:44 localhost yum[86466]: Installed: 1:nginx-all-modules-1.16.1-1.el7.noarch"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TCP示例</p><pre class="line-numbers language-json"><code class="language-json">vim /etc/logstash/conf.d/tcp.conf input <span class="token punctuation">{</span>  tcp <span class="token punctuation">{</span>    port =><span class="token number">12345</span>    # 监听<span class="token number">12345</span>端口    type =><span class="token string">"nc"</span>        # 通过nc工具使用tcp/udp连接去发送网络数据给logstash  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span># 启动logstash<span class="token punctuation">,</span>其他机器通过nc <span class="token number">10.10</span>.<span class="token number">110.194</span>(logstash<span class="token punctuation">)</span> <span class="token number">12345</span>去发送数据<span class="token punctuation">{</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"type"</span> => <span class="token string">"nc"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T06<span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">13</span>.448Z<span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"10.10.110.191"</span><span class="token punctuation">,</span>          <span class="token string">"port"</span> => <span class="token number">35228</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"we"</span>    # logstash接收到的信息<span class="token punctuation">}</span><span class="token punctuation">{</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"type"</span> => <span class="token string">"nc"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T06<span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">40</span>.148Z<span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"10.10.110.191"</span><span class="token punctuation">,</span>          <span class="token string">"port"</span> => <span class="token number">35228</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"test"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Beats示例</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  beats <span class="token punctuation">{</span>    port => <span class="token number">5044</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编码插件"><a href="#编码插件" class="headerlink" title="编码插件"></a>编码插件</h1><p>Json/Json_lines示例</p><pre class="line-numbers language-json"><code class="language-json">vim /etc/logstash/conf.d/json.confinput <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>    codec =>json <span class="token punctuation">{</span>    charset => <span class="token punctuation">[</span><span class="token string">"UTF-8"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>  codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span># 启动logstash<span class="token punctuation">,</span>只有输入json格式的数据才会被成功解码输出<span class="token punctuation">,</span>不是json格式的数据logstash不处理(以一行的json格式<span class="token punctuation">)</span>/usr/share/logstash/bin/logstash -r -f conf.d/json.conf<span class="token punctuation">{</span><span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"bank"</span><span class="token punctuation">,</span><span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"account"</span><span class="token punctuation">,</span><span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"472"</span><span class="token punctuation">,</span><span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">5.4032025</span><span class="token punctuation">,</span><span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"account_number"</span> <span class="token operator">:</span> <span class="token number">472</span><span class="token punctuation">,</span><span class="token property">"balance"</span> <span class="token operator">:</span> <span class="token number">25571</span><span class="token punctuation">,</span><span class="token property">"firstname"</span> <span class="token operator">:</span> <span class="token string">"Lee"</span><span class="token punctuation">,</span><span class="token property">"lastname"</span> <span class="token operator">:</span> <span class="token string">"Long"</span><span class="token punctuation">,</span><span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span><span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span><span class="token property">"address"</span> <span class="token operator">:</span> <span class="token string">"288 Mill Street"</span><span class="token punctuation">,</span><span class="token property">"employer"</span> <span class="token operator">:</span> <span class="token string">"Comverges"</span><span class="token punctuation">,</span><span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"leelong@comverges.com"</span><span class="token punctuation">,</span><span class="token property">"city"</span> <span class="token operator">:</span> <span class="token string">"Movico"</span><span class="token punctuation">,</span><span class="token property">"state"</span> <span class="token operator">:</span> <span class="token string">"MT"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    # 数据源# logstash解码输出的json数据<span class="token punctuation">{</span>         <span class="token string">"_type"</span> => <span class="token string">"account"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T07<span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span>.050Z<span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>       <span class="token string">"_source"</span> => <span class="token punctuation">{</span>                <span class="token string">"gender"</span> => <span class="token string">"F"</span><span class="token punctuation">,</span>                 <span class="token string">"state"</span> => <span class="token string">"MT"</span><span class="token punctuation">,</span>               <span class="token string">"address"</span> => <span class="token string">"288 Mill Street"</span><span class="token punctuation">,</span>                  <span class="token string">"city"</span> => <span class="token string">"Movico"</span><span class="token punctuation">,</span>        <span class="token string">"account_number"</span> => <span class="token number">472</span><span class="token punctuation">,</span>                 <span class="token string">"email"</span> => <span class="token string">"leelong@comverges.com"</span><span class="token punctuation">,</span>              <span class="token string">"lastname"</span> => <span class="token string">"Long"</span><span class="token punctuation">,</span>                   <span class="token string">"age"</span> => <span class="token number">32</span><span class="token punctuation">,</span>               <span class="token string">"balance"</span> => <span class="token number">25571</span><span class="token punctuation">,</span>              <span class="token string">"employer"</span> => <span class="token string">"Comverges"</span><span class="token punctuation">,</span>             <span class="token string">"firstname"</span> => <span class="token string">"Lee"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token string">"_id"</span> => <span class="token string">"472"</span><span class="token punctuation">,</span>        <span class="token string">"_index"</span> => <span class="token string">"bank"</span><span class="token punctuation">,</span>        <span class="token string">"_score"</span> => <span class="token number">5.4032025</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Multline示例</p><pre class="line-numbers language-json"><code class="language-json">vim /etc/logstash/conf.d/multline.confinput <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>    codec => multiline <span class="token punctuation">{</span>    pattern => <span class="token string">"^\s"</span>    what => <span class="token string">"previous"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>  codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span># 启动logstash<span class="token punctuation">,</span>multline会将不是以字母开头的行合并到上一行(next是合并到下一行<span class="token punctuation">)</span><span class="token punctuation">,</span>下面模拟java日志报错<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token number">2020</span>-<span class="token number">08</span>-<span class="token number">13</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">195</span> --AsyncResolver-bootstrap-executor<span class="token number">-0</span>--    # 数据源      at com.curre      at org.sprin      at org.sprin<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token number">2020</span>-<span class="token number">08</span>-<span class="token number">13</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">195</span><span class="token punctuation">{</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"tags"</span> => <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token string">"multiline"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T08<span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">38</span>.686Z<span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"[INFO] 2020-08-13 15:56:53,195 --AsyncResolver-bootstrap-executor-0--\n      at com.curre\n      at org.sprin\n      at org.sprin"</span>  # 将不是以字母开头的行合并到上一行<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="过滤插件"><a href="#过滤插件" class="headerlink" title="过滤插件"></a>过滤插件</h1><p>Json示例</p><pre class="line-numbers language-json"><code class="language-json">vim /etc/logstash/conf.d/json.confinput <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span>  json <span class="token punctuation">{</span>    source => <span class="token string">"message"</span>    target => <span class="token string">"content"</span>     # 将输入的json数据放在content字段里面  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug  <span class="token punctuation">}</span><span class="token punctuation">}</span># 不加target => <span class="token string">"content"</span>的效果<span class="token punctuation">{</span><span class="token property">"request"</span><span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"404"</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token string">"563"</span><span class="token punctuation">}</span>    # 数据源<span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"status"</span> => <span class="token string">"404"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T09<span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">25</span>.186Z<span class="token punctuation">,</span>         <span class="token string">"bytes"</span> => <span class="token string">"563"</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token property">"{\"request\":\"get\", \"status\":\"404\", \"bytes\"</span><span class="token operator">:</span>\<span class="token string">"563\"}"</span><span class="token punctuation">,</span>       <span class="token string">"request"</span> => <span class="token string">"get"</span><span class="token punctuation">}</span># 加了target => <span class="token string">"content"</span>之后会把json数据放在content字段<span class="token punctuation">{</span><span class="token property">"request"</span><span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"404"</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token string">"563"</span><span class="token punctuation">}</span>    # 数据源<span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T09<span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">26</span>.702Z<span class="token punctuation">,</span>       <span class="token string">"content"</span> => <span class="token punctuation">{</span>        <span class="token string">"request"</span> => <span class="token string">"get"</span><span class="token punctuation">,</span>          <span class="token string">"bytes"</span> => <span class="token string">"563"</span><span class="token punctuation">,</span>         <span class="token string">"status"</span> => <span class="token string">"404"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token property">"{\"request\":\"get\", \"status\":\"404\", \"bytes\"</span><span class="token operator">:</span>\<span class="token string">"563\"}"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kv示例</p><pre class="line-numbers language-json"><code class="language-json">vim /etc/logstash/conf.d/kv.conf input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span>  kv <span class="token punctuation">{</span>    field_split => "&amp;?<span class="token property">"        # 以&amp;和?作为分隔符,得到key=value的形式    field_split_pattern => "</span><span class="token operator">:</span>+<span class="token string">"    # 以一个或者多个:作为分隔符  }}output {  stdout {    codec => rubydebug  }}pin=12345~0&amp;d=123&amp;e=foo@bar.com&amp;oq=bo?oi=bo&amp;ss=12345:    # 数据源{             "</span>d<span class="token string">" => "</span><span class="token number">123</span><span class="token string">",           "</span>pin<span class="token string">" => "</span><span class="token number">12345</span>~<span class="token number">0</span><span class="token string">",            "</span>ss<span class="token string">" => "</span><span class="token number">12345</span><span class="token operator">:</span><span class="token string">",            "</span>oq<span class="token string">" => "</span>bo<span class="token string">",            "</span>oi<span class="token string">" => "</span>bo<span class="token string">",             "</span>e<span class="token string">" => "</span>foo@bar.com<span class="token string">",    "</span>@timestamp<span class="token string">" => 2020-08-13T09:31:41.881Z,          "</span>host<span class="token string">" => "</span>localhost.localdomain<span class="token string">",       "</span>message<span class="token string">" => "</span>pin=<span class="token number">12345</span>~<span class="token number">0</span>&amp;d=<span class="token number">123</span>&amp;e=foo@bar.com&amp;oq=bo?oi=bo&amp;ss=<span class="token number">12345</span><span class="token operator">:</span><span class="token string">",      "</span>@version<span class="token string">" => "</span><span class="token number">1</span>"<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>grok示例</p><pre class="line-numbers language-json"><code class="language-json">vim /etc/logstash/conf.d/grok.conf input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span>  grok <span class="token punctuation">{</span>    match => <span class="token punctuation">{</span>        <span class="token string">"message"</span> => <span class="token string">"%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}"</span>     # grok模式的语法是%<span class="token punctuation">{</span>SYNTAX<span class="token operator">:</span>SEMANTIC<span class="token punctuation">}</span><span class="token punctuation">,</span>将数据赋值给SEMANTIC    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug  <span class="token punctuation">}</span><span class="token punctuation">}</span># <span class="token number">47.100</span>.<span class="token number">107.121</span> GET /index.html <span class="token number">15824</span> <span class="token number">0.043</span><span class="token punctuation">{</span>        <span class="token string">"client"</span> => <span class="token string">"47.100.107.121"</span><span class="token punctuation">,</span>         <span class="token string">"bytes"</span> => <span class="token string">"15824"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-14T01<span class="token operator">:</span><span class="token number">55</span><span class="token operator">:</span><span class="token number">51</span>.555Z<span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"47.100.107.121 GET /index.html 15824 0.043"</span><span class="token punctuation">,</span>       <span class="token string">"request"</span> => <span class="token string">"/index.html"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>      <span class="token string">"duration"</span> => <span class="token string">"0.043"</span><span class="token punctuation">,</span>        <span class="token string">"method"</span> => <span class="token string">"GET"</span><span class="token punctuation">}</span># 自定义模式<span class="token punctuation">,</span>增加id字段匹配echo 'ID <span class="token punctuation">[</span><span class="token number">0</span>-9A-Z<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">}</span>' > /etc/logstash/patterns    # 编写ID字段的正则匹配规则<span class="token punctuation">,</span>数字或大写字母<span class="token punctuation">,</span><span class="token number">10</span>-<span class="token number">11</span>字符长度vim /etc/logstash/conf.d/grok.confinput <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span>  grok <span class="token punctuation">{</span>    patterns_dir =><span class="token string">"/etc/logstash/patterns"</span>    # 指定正则匹配规则文件    match => <span class="token punctuation">{</span>       <span class="token string">"message"</span> => <span class="token string">"%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration} %{ID:id}"</span>    # 增加ID字段    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">47.100</span>.<span class="token number">107.121</span> GET /index.html <span class="token number">15824</span> <span class="token number">0.043</span> D12458DE39421    # 数据加上ID字段<span class="token punctuation">,</span>如果不符合数字+大写字母+<span class="token punctuation">[</span><span class="token number">10</span>-<span class="token number">11</span><span class="token punctuation">]</span>字符就会匹配失败<span class="token punctuation">{</span>      <span class="token string">"duration"</span> => <span class="token string">"0.043"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>       <span class="token string">"request"</span> => <span class="token string">"/index.html"</span><span class="token punctuation">,</span>         <span class="token string">"bytes"</span> => <span class="token string">"15824"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-14T06<span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">53</span>.054Z<span class="token punctuation">,</span>            <span class="token string">"id"</span> => <span class="token string">"D12458DE394"</span><span class="token punctuation">,</span>    # ID字段成功匹配      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"client"</span> => <span class="token string">"47.100.107.121"</span><span class="token punctuation">,</span>        <span class="token string">"method"</span> => <span class="token string">"GET"</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"47.100.107.121 GET /index.html 15824 0.043 D12458DE39421"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>geoip示例</p><pre class="line-numbers language-json"><code class="language-json">vim /etc/logstash/conf.d/grok.confinput <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span>  grok <span class="token punctuation">{</span>    match => <span class="token punctuation">{</span>       <span class="token string">"message"</span> => <span class="token string">"%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}"</span>        # 将数据源赋值给变量    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  geoip <span class="token punctuation">{</span>    # GeoIP过滤器根据来自Maxmind GeoLite2数据库的数据添加有关IP地址地理位置的信息    source => <span class="token string">"client"</span>    # client是一个变量<span class="token punctuation">,</span>value是数据的IP地址    database => <span class="token string">"/root/GeoLite2-City_20200811/GeoLite2-City.mmdb"</span>    # 通过GeoLite2数据库获取IP的信息  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">47.100</span>.<span class="token number">107.121</span> GET /index.html <span class="token number">15824</span> <span class="token number">0.043</span>    # 数据源<span class="token punctuation">{</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T10<span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">00</span>.482Z<span class="token punctuation">,</span>        <span class="token string">"client"</span> => <span class="token string">"47.100.107.121"</span><span class="token punctuation">,</span>        <span class="token string">"method"</span> => <span class="token string">"GET"</span><span class="token punctuation">,</span>       <span class="token string">"request"</span> => <span class="token string">"/index.html"</span><span class="token punctuation">,</span>      <span class="token string">"duration"</span> => <span class="token string">"0.043"</span><span class="token punctuation">,</span>         <span class="token string">"bytes"</span> => <span class="token string">"15824"</span><span class="token punctuation">,</span>         <span class="token string">"geoip"</span> => <span class="token punctuation">{</span>         <span class="token string">"country_code3"</span> => <span class="token string">"CN"</span><span class="token punctuation">,</span>         <span class="token string">"country_code2"</span> => <span class="token string">"CN"</span><span class="token punctuation">,</span>             <span class="token string">"longitude"</span> => <span class="token number">113.7266</span><span class="token punctuation">,</span>              <span class="token string">"latitude"</span> => <span class="token number">34.7725</span><span class="token punctuation">,</span>        <span class="token string">"continent_code"</span> => <span class="token string">"AS"</span><span class="token punctuation">,</span>              <span class="token string">"location"</span> => <span class="token punctuation">{</span>            <span class="token string">"lon"</span> => <span class="token number">113.7266</span><span class="token punctuation">,</span>            <span class="token string">"lat"</span> => <span class="token number">34.7725</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">"country_name"</span> => <span class="token string">"China"</span><span class="token punctuation">,</span>                    <span class="token string">"ip"</span> => <span class="token string">"47.100.107.121"</span><span class="token punctuation">,</span>              <span class="token string">"timezone"</span> => <span class="token string">"Asia/Shanghai"</span>        # IP地址的位置    <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"47.100.107.121 GET /index.html 15824 0.043"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出插件"><a href="#输出插件" class="headerlink" title="输出插件"></a>输出插件</h1><p>ES示例</p><pre class="line-numbers language-json"><code class="language-json">output <span class="token punctuation">{</span>  elasticsearch <span class="token punctuation">{</span>    hosts => <span class="token string">"localhost:9200"</span>    # 将日志输出到ES主机    index => <span class="token string">"missf-%{+YYYY.MM.dd}"</span>    # 存储到missf这个index并且以时间去命名  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Logstash概述&quot;&gt;&lt;a href=&quot;#Logstash概述&quot; class=&quot;headerlink&quot; title=&quot;Logstash概述&quot;&gt;&lt;/a&gt;Logstash概述&lt;/h1&gt;&lt;p&gt;logstash是elasticsearch的数据管道，负责对数据源进行处理
      
    
    </summary>
    
    
      <category term="ELK Stack" scheme="https://www.missf.top/categories/ELK-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ELK Elasticsearch基础概念(3)</title>
    <link href="https://www.missf.top/post/dbe94810.html"/>
    <id>https://www.missf.top/post/dbe94810.html</id>
    <published>2020-08-06T02:12:40.000Z</published>
    <updated>2020-08-17T02:26:31.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Node: 运行单个ES实例的服务器</p><p>Cluster: 一个或多个节点构成集群</p><p>Index: 索引是多个文档的集合</p><p>Document: Index里每条记录称为Document，若干文档构建成一个Index</p><p>Type: 一个Index可以定义一种或者多种类型，将Document逻辑分组</p><p>Filed: ES存储的最小单元</p><p>Shards: ES将Index分为若干份，每一份是一个分片</p><p>Replicas: Index的一份或多份副本</p><table><thead><tr><th>ES概念</th><th></th><th>ES对应mysql</th></tr></thead><tbody><tr><td>index</td><td>索引</td><td>database</td></tr><tr><td>type</td><td>类型</td><td>table</td></tr><tr><td>document</td><td>文档</td><td>row</td></tr><tr><td>filed</td><td>字段</td><td>column</td></tr></tbody></table><h1 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h1><p>环境准备</p><pre class="line-numbers language-shell"><code class="language-shell">ES1 10.10.110.191ES2 10.10.110.192ES3 10.10.110.193Logstash + Kibana 10.10.110.194web 10.10.110.195# 三台ES机器都需要按实际情况执行下面的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载elasticsearch和校验文件</p><pre class="line-numbers language-shell"><code class="language-shell">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.1-x86_64.rpmwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.1-x86_64.rpm.sha512<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装elasticsearch</p><pre class="line-numbers language-shell"><code class="language-shell">shasum -a 512 -c elasticsearch-7.8.1-x86_64.rpm.sha512yum install -y elasticsearch-7.8.1-x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改elasticsearch配置文件</p><pre class="line-numbers language-shell"><code class="language-shell">grep -v '^#' /etc/elasticsearch/elasticsearch.ymlcluster.name: elk-cluster    # 集群名称,所有节点一样node.name: node-1    # 不同节点,分别用node-1/node-2/node-3...path.data: /var/lib/elasticsearch    # 数据目录,如果加入集群失败可以清空数据目录再重启服务path.logs: /var/log/elasticsearch    # 日志目录network.host: 10.10.110.191        # 监听地址http.port: 9200        # 监听端口discovery.seed_hosts: ["10.10.110.191", "10.10.110.192", "10.10.110.193"]    # 集群发现,可以写成10.10.110.191:9200cluster.initial_master_nodes: ["node-1", "node-2", "node-3"]    # 指定可以成为master的节点,此参数只有在初始化集群时生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改elasticsearch启动分配的内存大小，根据自己的机器配置来修改</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/elasticsearch/jvm.options-Xms512m    # 确保Xmx和Xms的大小是相同的，其目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源-Xmx512m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>三个节点都启动elasticsearch服务</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl start elasticsearch.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看集群状态</p><pre class="line-numbers language-json"><code class="language-json">curl -X GET http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/_cluster/health?pretty<span class="token punctuation">{</span>  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"elk-cluster"</span><span class="token punctuation">,</span>  <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span>    # 集群状态红绿灯<span class="token punctuation">,</span>绿<span class="token operator">:</span>健康<span class="token punctuation">,</span>黄<span class="token operator">:</span>亚健康<span class="token punctuation">,</span>红<span class="token operator">:</span>病态  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"number_of_nodes"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token property">"number_of_data_nodes"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token property">"active_primary_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"active_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"relocating_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"initializing_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"unassigned_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"delayed_unassigned_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"number_of_pending_tasks"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"number_of_in_flight_fetch"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"task_max_waiting_in_queue_millis"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"active_shards_percent_as_number"</span> <span class="token operator">:</span> <span class="token number">100.0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看那个节点是master</p><pre class="line-numbers language-shell"><code class="language-shell">curl -X GET 'http://10.10.110.191:9200/_cat/master?v'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看节点的状态</p><pre class="line-numbers language-shell"><code class="language-shell">curl -X GET 'http://10.10.110.191:9200/_cat/nodes?v'ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name10.10.110.192           64          93   0    0.03    0.04     0.05 dilmrt    *      node-2        # *代表当前节点是master10.10.110.191           65          93   0    0.07    0.09     0.12 dilmrt    -      node-110.10.110.193           64          93   0    0.02    0.04     0.05 dilmrt    -      node-3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><p>elasticsearch提供了一种RestFul API格式去操作数据</p><pre class="line-numbers language-apl"><code class="language-apl">curl <span class="token function">-</span>X <span class="token function">&lt;</span>verb<span class="token function">></span> <span class="token string">'&lt;protocol>://&lt;host>:&lt;port>/&lt;path>?&lt;query_string> -d &lt;body>'</span><span class="token comment" spellcheck="true"># verb: HTTP方法,比如GET、POST、PUT、HEAD、DELETE</span><span class="token comment" spellcheck="true"># host: ES集群中的任意节点主机名</span><span class="token comment" spellcheck="true"># port: ES HTTP服务端口,默认9200</span><span class="token comment" spellcheck="true"># path: 索引路径</span><span class="token comment" spellcheck="true"># query_string: 可选的查询请求参数,例如?pretty参数将格式化输出JSON数据</span><span class="token comment" spellcheck="true"># -d: 里面放一个GET的JSON格式请求主体</span><span class="token comment" spellcheck="true"># body: 自己写的JSON格式的请求主体</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建索引</p><pre class="line-numbers language-json"><code class="language-json">curl -X PUT '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/missf/?pretty'    # 新建一个missf的索引<span class="token punctuation">,</span>?pretty参数是格式化输出JSON数据<span class="token punctuation">{</span>  <span class="token property">"acknowledged"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"shards_acknowledged"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token string">"missf"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询节点所有索引</p><pre class="line-numbers language-shell"><code class="language-shell">curl -X GET 'http://10.10.110.191:9200/_cat/indices?v'health status index uuid                   pri rep docs.count docs.deleted store.size pri.store.sizegreen  open   mwj   Qy8OHomTRn2I7HGHfva9Mg   1   1          0            0       416b           208bgreen  open   missf 13yWyr_PTi6RIPEjsCtCsQ   1   1          0            0       416b           208b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在info索引中插入记录</p><pre class="line-numbers language-json"><code class="language-json">curl -X PUT 'http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/info/_doc/<span class="token number">1</span>?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"mowenjie"</span><span class="token punctuation">,</span><span class="token property">"job"</span><span class="token operator">:</span> <span class="token string">"DevOps"</span><span class="token punctuation">,</span><span class="token property">"base"</span><span class="token operator">:</span> <span class="token string">"sz"</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询info索引的记录</p><pre class="line-numbers language-json"><code class="language-json">curl -X GET 'http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/info/_doc/<span class="token number">1</span>?pretty'    # 查询info索引下类型为_doc<span class="token punctuation">,</span>ID为<span class="token number">1</span>的数据并格式化输出json数据<span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"info"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    # 如果ID不正确就查询不到数据  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"found"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    # 表示查询成功  <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        # _source是自己创建的字段    <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"mowenjie"</span><span class="token punctuation">,</span>    <span class="token property">"job"</span> <span class="token operator">:</span> <span class="token string">"DevOps"</span><span class="token punctuation">,</span>    <span class="token property">"base"</span> <span class="token operator">:</span> <span class="token string">"sz"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只查询索引的_source内容</p><pre class="line-numbers language-json"><code class="language-json">curl -X GET 'http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/info/_doc/<span class="token number">1</span>/_source/?pretty'<span class="token punctuation">{</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"missf"</span><span class="token punctuation">,</span>  <span class="token property">"job"</span> <span class="token operator">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span>  <span class="token property">"base"</span> <span class="token operator">:</span> <span class="token string">"bj"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询一个索引下所有类型的数据</p><pre class="line-numbers language-apl"><code class="language-apl">curl <span class="token function">-</span>X GET <span class="token string">'http://10.10.110.191:9200/info/_search/?pretty'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除info索引下类型为_doc并且ID为2的记录</p><pre class="line-numbers language-json"><code class="language-json">curl -X DELETE 'http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/info/_doc/<span class="token number">2</span>?pretty'    # 这是删除索引下的某条记录<span class="token punctuation">,</span>索引还存在<span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"info"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"deleted"</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除索引</p><pre class="line-numbers language-json"><code class="language-json">curl -X DELETE 'http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/mwj/?pretty'    # 整个索引下的数据都被删除<span class="token punctuation">{</span>      <span class="token property">"acknowledged"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更新索引的记录</p><pre class="line-numbers language-json"><code class="language-json">curl -X PUT 'http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/info/_doc/<span class="token number">1</span>?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"missf"</span>    # 将info索引下_doc类型并且ID为<span class="token number">1</span>的记录更新<span class="token punctuation">}</span>'<span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"info"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span>        # 这个表示是更新操作  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常用查询"><a href="#常用查询" class="headerlink" title="常用查询"></a>常用查询</h1><p>导入官方测试数据</p><pre class="line-numbers language-apl"><code class="language-apl">curl <span class="token function">-</span>H "Content<span class="token function">-</span>Type<span class="token dfn builtin">:</span> application<span class="token monadic-operator operator">/</span>x<span class="token function">-</span>ndjson" <span class="token function">-</span>XPOST "<span class="token number">10.10</span><span class="token number">.110</span><span class="token number">.191</span><span class="token dfn builtin">:</span><span class="token number">9200</span><span class="token monadic-operator operator">/</span>bank<span class="token monadic-operator operator">/</span>account<span class="token monadic-operator operator">/</span>_bulk<span class="token function">?</span>pretty" <span class="token function">-</span><span class="token function">-</span>data<span class="token function">-</span>binary @accounts<span class="token dyadic-operator operator">.</span>jso<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用_search接口查询数据，默认只返回十条数据</p><pre class="line-numbers language-json"><code class="language-json">curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    # 匹配索引下面所有的文档    <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>    # 查询结果按照account_number字段进行升序排列<span class="token punctuation">,</span>如果不排序就会随机返回十条数据<span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询一个区间的数据</p><pre class="line-numbers language-json"><code class="language-json"># 先按account_number进行排序<span class="token punctuation">,</span>然后取<span class="token number">0</span>-<span class="token number">29</span>的数据curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span><span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    # 从第<span class="token number">10</span>条数据开始<span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">30</span>    # 一共返回<span class="token number">30</span>条数据<span class="token punctuation">,</span>就是account_number为<span class="token number">10</span>-<span class="token number">39</span>的数据<span class="token punctuation">}</span>'# 取<span class="token number">1000</span>到<span class="token number">2000</span>这个区间的随机数据curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d'<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>            <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">2000</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以指定的字段和值去查询数据(只要包含这个值的数据就会匹配成功)</p><pre class="line-numbers language-json"><code class="language-json"># email的值等于mf_2013@<span class="token number">163</span>.com的数据都会返回curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"mf_2013@163.com"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>'# address的值包含mill这个关键字都会返回<span class="token punctuation">,</span>match匹配查询是以包含为依据<span class="token punctuation">,</span>值相等也是包含的一种curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"mill"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>'# 只要address的值中包含lane或者mill就会返回数据curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"lane mill"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>'# 两个条件同时成立才返回数据curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"employer"</span><span class="token operator">:</span> <span class="token string">"Comverges"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"mill"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token punctuation">}</span>'# 只要一个条件成立则返回数据curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"employer"</span><span class="token operator">:</span> <span class="token string">"Comverges"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"mill"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Head插件"><a href="#Head插件" class="headerlink" title="Head插件"></a>Head插件</h1><p>安装Head插件，图形化管理elasticsearch</p><pre class="line-numbers language-shell"><code class="language-shell"># elasticsearch-head需要node环境运行,下载nodejswget https://nodejs.org/dist/v12.18.3/node-v12.18.3-linux-x64.tar.xz# 解压xz -d node-v12.18.3-linux-x64.tar.xz && tar xf node-v12.18.3-linux-x64.tarmv node-v12.18.3-linux-x64 /usr/local/node# 配置环境变量vim /etc/profileexport NODE_HOME=/usr/local/nodeexport PATH=$NODE_HOME/bin:$PATH# 安装phantomjswget https://github.com/Medium/phantomjs/releases/download/v2.1.1/phantomjs-2.1.1-linux-x86_64.tar.bz2tar -jxvf  phantomjs-2.1.1-linux-x86_64.tar.bz2 && mv phantomjs-2.1.1-linux-x86_64 /usr/bin/phantomjsecho "export PATH=$PATH:/usr/bin/phantomjs/bin" >> /etc/profilesource /etc/profile# clone elasticsearch-headgit clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-head && npm install -g grunt --registry=https://registry.npm.taobao.orgnpm install --registry=https://registry.npm.taobao.orgnohup npm run start > elasticsearch-head.log &# 修改elasticsearch配置文件vim /etc/elasticsearch/elasticsearch.ymlhttp.cors.enabled: truehttp.cors.allow-origin: "*"systemctl restart elasticsearch.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录web页面可以操作管理elasticsearch数据库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f323e7d14195aa59491cc4b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;Node: 运行单个ES实例的服务器&lt;/p&gt;
&lt;p&gt;Cluster: 一个或多个节点构成集群&lt;/p&gt;
&lt;p&gt;Index: 索
      
    
    </summary>
    
    
      <category term="ELK Stack" scheme="https://www.missf.top/categories/ELK-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ELK Stack架构(2)</title>
    <link href="https://www.missf.top/post/1abc58c4.html"/>
    <id>https://www.missf.top/post/1abc58c4.html</id>
    <published>2020-08-05T10:26:09.000Z</published>
    <updated>2020-08-14T10:19:38.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK-Stack日志处理流程"><a href="#ELK-Stack日志处理流程" class="headerlink" title="ELK Stack日志处理流程"></a>ELK Stack日志处理流程</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f2b632f14195aa59440b65e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h1><p>Input: 输入，输出数据可以是Stdin、File、TCP、Redis、Syslog等</p><p>Filter: 过滤，将日志格式化，有丰富的过滤插件: Grok正则捕获、Date时间处理、Json编解码、Mutate数据修改等</p><p>Output: 输出，输出目标可以是Stdout、File、TCP、Redis、ES等</p><h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p>Elasticsearch将Logstash输出的格式化日志进行存储，并且使用倒排索引使得查询数据是近乎实时的</p><h1 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h1><p>可视化数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ELK-Stack日志处理流程&quot;&gt;&lt;a href=&quot;#ELK-Stack日志处理流程&quot; class=&quot;headerlink&quot; title=&quot;ELK Stack日志处理流程&quot;&gt;&lt;/a&gt;ELK Stack日志处理流程&lt;/h1&gt;&lt;figure class=&quot;image-
      
    
    </summary>
    
    
      <category term="ELK Stack" scheme="https://www.missf.top/categories/ELK-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ELK Stack需求与介绍(1)</title>
    <link href="https://www.missf.top/post/cb83e724.html"/>
    <id>https://www.missf.top/post/cb83e724.html</id>
    <published>2020-08-05T06:19:27.000Z</published>
    <updated>2020-08-17T09:00:15.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于ELK-Stack的需求"><a href="#关于ELK-Stack的需求" class="headerlink" title="关于ELK Stack的需求"></a>关于ELK Stack的需求</h1><p>在项目开发初期或者在版本更新迭代时，开发人员为了排除问题，经常需要登录线上服务器去查询项目日志信息。随着项目和产品线越来越多，我们的服务器会越来越多，日志类型也会越来越多…让开发人员登录线上服务器去查看日志信息，显然不现实，由于涉及到服务器安全问题，开发人员一般不会有服务器的登录权限。传统的查看日志输出信息，我们都是使用awk、sed、grep、tail等命令去搜索自己想要的日志信息，但是在日志量庞大、文本搜索太慢、无法多维度查询等问题面前使用传统命令去查看日志会显得苍白无力，ELK因此就应运而生</p><h1 id="ELK-Stack的介绍"><a href="#ELK-Stack的介绍" class="headerlink" title="ELK Stack的介绍"></a>ELK Stack的介绍</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f2a836114195aa594e93860.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Logstash: 它是一个服务端的数据处理管道，可以从多个数据源中提取数据，对其进行转换，然后将其存储到Elasticsearch中</p><p>Filebeat: 监控日志文件，获取服务器上指定路径的日志文件，并将这些日志转发到Logstash实例以进行处理</p><p>Elasticsearch: 它是一个开源分布式搜索引擎，提供收集、分析、存储数据三大功能</p><p>Kibana: 它是一个基于web的图形界面，用于搜索、分析和可视化存储在Elasticsearch中的日志数据</p><p>Beats : 轻量型采集器的平台，从边缘机器向Logstash和Elasticsearch发送数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于ELK-Stack的需求&quot;&gt;&lt;a href=&quot;#关于ELK-Stack的需求&quot; class=&quot;headerlink&quot; title=&quot;关于ELK Stack的需求&quot;&gt;&lt;/a&gt;关于ELK Stack的需求&lt;/h1&gt;&lt;p&gt;在项目开发初期或者在版本更新迭代时，开发人员
      
    
    </summary>
    
    
      <category term="ELK Stack" scheme="https://www.missf.top/categories/ELK-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus的pushgateway工具(8)</title>
    <link href="https://www.missf.top/post/5cf39589.html"/>
    <id>https://www.missf.top/post/5cf39589.html</id>
    <published>2020-08-04T10:05:33.000Z</published>
    <updated>2020-08-14T06:17:15.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PushGateway部署"><a href="#PushGateway部署" class="headerlink" title="PushGateway部署"></a>PushGateway部署</h1><p>prometheus基于http的pull方式去采集时间序列数据，但是由于业务需求，prometheus和exporter可能不在一个子网或者防火墙原因，导致Prometheus无法直接拉取各个target数据，或者需要将不同的数据进行汇总，这时候就可以使用prometheus的自带组件pushgateway进行数据的汇总，将默认的pull方式改为push方式进行数据的采集</p><pre class="line-numbers language-shell"><code class="language-shell"># 下载pushgatewaywget https://github.com/prometheus/pushgateway/releases/download/v1.2.0/pushgateway-1.2.0.linux-amd64.tar.gz# 解压tar xf pushgateway-1.2.0.linux-amd64.tar.gz && mv pushgateway-1.2.0.linux-amd64 /usr/local/pushgateway# 创建pushgateway启动文件vim /usr/lib/systemd/system/pushgateway.service[Unit]Documentation=pushgateway exporterAfter=local-fs.target network-online.target network.targetWants=local-fs.target network-online.target network.target[Service]Restart=on-failureExecStart=/usr/local/pushgateway/pushgateway    # 需要修改监听端口可以自行添加参数[Install]WantedBy=multi-user.target# 启动pushgatewaysystemctl start pushgateway.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Prometheus添加PushGateway"><a href="#Prometheus添加PushGateway" class="headerlink" title="Prometheus添加PushGateway"></a>Prometheus添加PushGateway</h1><p>在我们的prometheus配置文件添加pushgateway的地址</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/prometheus.yml<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'pushgateway'</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'49.233.200.185:9091'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 这个是安装了pushgateway的服务器地址</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">instance</span><span class="token punctuation">:</span> pushgateway<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启prometheus服务</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pushgateway其实是一个中转站，我们可以使用任何高级语言发送post请求到pushgateway，然后对数据进行增加删除等操作，pushgateway再把数据实时推送到prometheus</p><h1 id="推送数据到PushGateway"><a href="#推送数据到PushGateway" class="headerlink" title="推送数据到PushGateway"></a>推送数据到PushGateway</h1><pre class="line-numbers language-shell"><code class="language-shell">echo "missf 123456" | curl --data-binary @- http://49.233.200.185:9091/metrics/job/prometheus# 数据:missf,值:123456# --data-binary 表示发送二进制数据(post方式)# http://49.233.200.185:9091 pushgateway的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看pushgateway推送到prometheus上的数据，这可以看到有exported_job=”prometheus”和job=”pushgateway”两个指标，我们推送数据时指定的job是prometheus，为什么这里的job会显示pushgateway呢？这里需要修改一个honor_labels的参数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f2a200a14195aa594b740f9.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>修改prometheus的配置文件，开启honor_labels参数(默认为false)</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'pushgateway'</span>    <span class="token key atrule">honor_labels</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'49.233.200.185:9091'</span><span class="token punctuation">]</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">instance</span><span class="token punctuation">:</span> pushgateway<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启prometheus</p><p>再次推送数据到pushgateway，然后查看prometheus上的数据</p><pre class="line-numbers language-shell"><code class="language-shell">echo "mwj 123456" | curl --data-binary @- http://49.233.200.185:9091/metrics/job/prometheus/instance/missf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic.imgdb.cn/item/5f2a245714195aa594b8dbe0.jpg" alt=""></p><p>这里说明一下honor_labels的作用:因为prometheus配置pushgateway的时候，也会指定job和instance，但是它只表示pushgateway实例本身，不能真正表达收集数据的含义。所以配置pushgateway需要添加honor_labels:true参数，避免收集到的数据本身的job和instance被覆盖。具体参考官网</p><h1 id="在PushGateway删除数据"><a href="#在PushGateway删除数据" class="headerlink" title="在PushGateway删除数据"></a>在PushGateway删除数据</h1><pre class="line-numbers language-shell"><code class="language-shell">curl -X DELETE http://49.233.200.185:9091/metrics/job/prometheus/instance/missf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PushGateway部署&quot;&gt;&lt;a href=&quot;#PushGateway部署&quot; class=&quot;headerlink&quot; title=&quot;PushGateway部署&quot;&gt;&lt;/a&gt;PushGateway部署&lt;/h1&gt;&lt;p&gt;prometheus基于http的pull方式去采集
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus业务监控(7)</title>
    <link href="https://www.missf.top/post/f261c617.html"/>
    <id>https://www.missf.top/post/f261c617.html</id>
    <published>2020-08-03T02:26:26.000Z</published>
    <updated>2020-08-05T03:59:06.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blackbox-exporter部署"><a href="#Blackbox-exporter部署" class="headerlink" title="Blackbox_exporter部署"></a>Blackbox_exporter部署</h1><p>Blackbox_exporter是prometheus官方提供的exporter之一，可以提供http、dns、tcp、icmp 的监控数据采集</p><pre class="line-numbers language-shell"><code class="language-shell"># 下载wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.17.0/blackbox_exporter-0.17.0.linux-amd64.tar.gz# 解压tar xf blackbox_exporter-0.17.0.linux-amd64.tar.gz && mv blackbox_exporter-0.17.0.linux-amd64 /usr/local/blackbox# 创建blackbox启动文件vim /usr/lib/systemd/system/blackbox.service [Unit]Documentation=Blackbox exporterAfter=local-fs.target network-online.target network.targetWants=local-fs.target network-online.target network.target[Service]Restart=on-failureExecStart=/usr/local/blackbox/blackbox_exporter --config.file=/usr/local/blackbox/blackbox.yml[Install]WantedBy=multi-user.target# 启动blackboxsystemctl daemon-reloadsystemctl restart blackbox.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置TCP端口检测及告警"><a href="#配置TCP端口检测及告警" class="headerlink" title="配置TCP端口检测及告警"></a>配置TCP端口检测及告警</h1><p>传统的端口检测方式，调用命令的方式去实现</p><pre class="line-numbers language-shell"><code class="language-shell">ncat -vz 47.100.107.121 80    # 返回seconds而不是timeout那么端口就是通的telnet ......zabbix监控端口可以通过模板或者自定义key写脚本实现<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改prometheus配置文件，配置TCP端口检测</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/prometheus.yml<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'nginx_port_check'</span>    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe    <span class="token key atrule">params</span><span class="token punctuation">:</span>      <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>tcp_connect<span class="token punctuation">]</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> check/port/nginx.json    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance      <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__        <span class="token key atrule">replacement</span><span class="token punctuation">:</span> 47.100.107.121<span class="token punctuation">:</span><span class="token number">9115    </span><span class="token comment" spellcheck="true"># 这个是blackbox所在主机以及端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写监控TCP端口的告警规则</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/rules/nginx_port_check.yml<span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx port check   <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> nginx_port_check failed     <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s     <span class="token key atrule">expr</span><span class="token punctuation">:</span> probe_success<span class="token punctuation">{</span>job="nginx_port_check"<span class="token punctuation">}</span> == 0     <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">serverity</span><span class="token punctuation">:</span> critical     <span class="token key atrule">annotations</span><span class="token punctuation">:</span>       <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} port connection fail,{{ $labels.group }} value is:{{ $value }}"</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} port connection failed"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改prometheus配置文件需要重启prometheus服务</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭Nginx测试当80端口无法访问之后的告警结果</p><p><img src="https://pic.imgdb.cn/item/5f27e91d14195aa594ee2d22.jpg" alt=""></p><h1 id="业务接口检测及告警"><a href="#业务接口检测及告警" class="headerlink" title="业务接口检测及告警"></a>业务接口检测及告警</h1><p>基于现在Java + Vue前后端分离的开发模式下，我们很多时候需要去检测Java的接口是否正常。传统的手动检测可以使用postman，或者写shell脚本也可以实现，但是prometheus可以通过blackbox去更好的检测业务接口</p><p>修改prometheus配置文件，添加监控业务接口的job</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'get_mysite'</span>    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe    <span class="token key atrule">params</span><span class="token punctuation">:</span>      <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>http_2xx<span class="token punctuation">]</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> check/url/*.json    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance      <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__        <span class="token key atrule">replacement</span><span class="token punctuation">:</span> 47.100.107.121<span class="token punctuation">:</span><span class="token number">9115</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写监控url链接的告警规则文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/rules/get_mysite.yml<span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> get mysite check  <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> get_mysite_check failed     <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s     <span class="token key atrule">expr</span><span class="token punctuation">:</span> probe_success<span class="token punctuation">{</span>group="get_mysite"<span class="token punctuation">,</span>instance="https<span class="token punctuation">:</span>//www.missf.top"<span class="token punctuation">,</span>job="get_mysite"<span class="token punctuation">}</span> == 0    <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">serverity</span><span class="token punctuation">:</span> critical     <span class="token key atrule">annotations</span><span class="token punctuation">:</span>       <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} failed, {{ $labels.group }} value is:{{ $value }}"</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} website not accessible"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改prometheus配置文件之后记得重启prometheus服务</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果<a href="https://www.missf.top这个链接的http请求不是返回2xx的状态码就会告警" target="_blank" rel="noopener">https://www.missf.top这个链接的http请求不是返回2xx的状态码就会告警</a></p>{% image https://pic.imgdb.cn/item/5f28fbe914195aa5944ce74b.jpg '' '' %}<p>我们在监控业务接口时，只监控到接口的返回状态(2xx状态码)，假如我们想要监控业务接口的返回内容该如何实现呢？那就需要修改blackbox的配置文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">modules</span><span class="token punctuation">:</span>  <span class="token key atrule">http_2xx</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http<span class="token comment" spellcheck="true"># 下面这段是需要添加的内容 </span>    <span class="token key atrule">http</span><span class="token punctuation">:</span>          <span class="token key atrule">method</span><span class="token punctuation">:</span> GET      <span class="token key atrule">headers</span><span class="token punctuation">:</span>        <span class="token key atrule">Host</span><span class="token punctuation">:</span> www.missf.top        <span class="token key atrule">Accept-Language</span><span class="token punctuation">:</span> en<span class="token punctuation">-</span>US        <span class="token key atrule">Origin</span><span class="token punctuation">:</span> missf.top      <span class="token key atrule">fail_if_body_matches_regexp</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果我get的url地址返回的正文中有"apache",那么就会失败,则probe_success值为0</span>        <span class="token punctuation">-</span> <span class="token string">"apache"</span>      <span class="token key atrule">fail_if_body_not_matches_regexp</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"nginx"</span>    <span class="token comment" spellcheck="true"># 如果我get的url地址返回的正文中没有"nginx",那么就会失败,则probe_success值为0</span>  <span class="token key atrule">http_post_2xx</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">method</span><span class="token punctuation">:</span> POST  <span class="token key atrule">tcp_connect</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp  <span class="token key atrule">pop3s_banner</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp    <span class="token key atrule">tcp</span><span class="token punctuation">:</span>      <span class="token key atrule">query_response</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"^+OK"</span>      <span class="token key atrule">tls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">tls_config</span><span class="token punctuation">:</span>        <span class="token key atrule">insecure_skip_verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">ssh_banner</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp    <span class="token key atrule">tcp</span><span class="token punctuation">:</span>      <span class="token key atrule">query_response</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"^SSH-2.0-"</span>  <span class="token key atrule">irc_banner</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp    <span class="token key atrule">tcp</span><span class="token punctuation">:</span>      <span class="token key atrule">query_response</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">send</span><span class="token punctuation">:</span> <span class="token string">"NICK prober"</span>      <span class="token punctuation">-</span> <span class="token key atrule">send</span><span class="token punctuation">:</span> <span class="token string">"USER prober prober prober :prober"</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"PING :([^ ]+)"</span>        <span class="token key atrule">send</span><span class="token punctuation">:</span> <span class="token string">"PONG ${1}"</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"^:[^ ]+ 001"</span>  <span class="token key atrule">icmp</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> icmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改了blackbox配置文件需要重启blackbox服务</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart blackbox.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面所配置的匹配返回内容是在http_2xx这个模块下添加的，我们需要修改prometheus配置文件对应的http_2xx模块的规则文件，配置我们监控业务接口的返回内容的url地址</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/check/url/get_mysite.json <span class="token punctuation">[</span><span class="token punctuation">{</span>        <span class="token key atrule">"targets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"47.100.107.121"</span>    <span class="token comment" spellcheck="true"># 这个url返回的是默认的Nginx页面,对应我上面的匹配规则(nginx/apache)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token key atrule">"labels"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token key atrule">"group"</span><span class="token punctuation">:</span> <span class="token string">"get_mysite"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看blackbox的采集数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f292cb314195aa594682880.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>probe_success的值是根据我们在blackbox配置文件的正则去决定的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f292d4d14195aa59468abde.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时候我们get_mysite.json这个规则文件的job的probe_success值就是通过get获取一个url的返回值去确定的，我们这样就可以去监控接口的返回内容了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f292f3014195aa5946a6ddd.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="配置网络监控"><a href="#配置网络监控" class="headerlink" title="配置网络监控"></a>配置网络监控</h1><p>我们可以让服务器使用icmp协议去请求<a href="http://www.baidu.com或者是一个公网IP，测试服务器的网络是否正常" target="_blank" rel="noopener">www.baidu.com或者是一个公网IP，测试服务器的网络是否正常</a></p><p>修改prometheus配置文件，添加网络监控的job</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'icmp_check_network'</span>     <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s     <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe     <span class="token key atrule">params</span><span class="token punctuation">:</span>       <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>icmp<span class="token punctuation">]</span>     <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> check/icmp/*.json     <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>         <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target       <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>         <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance       <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__         <span class="token key atrule">replacement</span><span class="token punctuation">:</span> 47.100.107.121<span class="token punctuation">:</span><span class="token number">9115</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写网络监控的规则文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/rules/check_network.yml<span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> icmp check network  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> icmp check network failed    <span class="token key atrule">for</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">expr</span><span class="token punctuation">:</span> probe_success<span class="token punctuation">{</span>group="icmp_check_network"<span class="token punctuation">,</span>instance="www.baidu.com"<span class="token punctuation">,</span>job="icmp_check_network"<span class="token punctuation">}</span> == 0    <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">serverity</span><span class="token punctuation">:</span> critical    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} icmp connection failed, {{ $labels.group }} value is: {{ $value }}"</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> "<span class="token punctuation">{</span><span class="token punctuation">{</span> $labels.group <span class="token punctuation">}</span><span class="token punctuation">}</span> connection failed<span class="token punctuation">,</span> <span class="token key atrule">instance</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $labels.instance <span class="token punctuation">}</span><span class="token punctuation">}</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改prometheus配置文件之后记得重启prometheus服务</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Blackbox-exporter部署&quot;&gt;&lt;a href=&quot;#Blackbox-exporter部署&quot; class=&quot;headerlink&quot; title=&quot;Blackbox_exporter部署&quot;&gt;&lt;/a&gt;Blackbox_exporter部署&lt;/h1&gt;&lt;p&gt;Bl
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus告警(6)</title>
    <link href="https://www.missf.top/post/615f0093.html"/>
    <id>https://www.missf.top/post/615f0093.html</id>
    <published>2020-07-23T03:53:03.000Z</published>
    <updated>2020-08-03T02:26:00.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Alertmanager概述"><a href="#Alertmanager概述" class="headerlink" title="Alertmanager概述"></a>Alertmanager概述</h1><p>prometheus发出告警时分为两部分，首先prometheus按告警规则(rule_files配置)向alertmanager发送告警，即告警规则是在prometheus上定义的，然后由alertmanager去管理这些告警，包括去重(deduplicating)、分组(grouping)、静音(silencing)、抑制(inhibition)、聚合(aggregation)，最终通过丰富的告警通知渠道(电话、微信、短信、邮件)将告警通知路由给对应的联系人。prometheus的大部分组件都是go语言开发的，zabbix到4.4之后的客户端才是go编写</p><h1 id="Alertmanager二进制安装"><a href="#Alertmanager二进制安装" class="headerlink" title="Alertmanager二进制安装"></a>Alertmanager二进制安装</h1><pre class="line-numbers language-shell"><code class="language-shell"># 下载wget https://github.com/prometheus/alertmanager/releases/download/v0.21.0/alertmanager-0.21.0.linux-amd64.tar.gz# 解压tar xf alertmanager-0.21.0.linux-amd64.tar.gz && mv alertmanager-0.21.0.linux-amd64 /usr/local/alertmanager# 创建alertmanager启动文件vim /usr/lib/systemd/system/alertmanager.service[Unit]Documentation=alertmanager[Service]Restart=on-failureExecStart=/usr/local/alertmanager/alertmanager --config.file=/usr/local/alertmanager/alertmanager.yml --storage.path=/usr/local/alertmanager/data[Install]WantedBy=multi-user.target# 启动systemctl daemon-reloadsystemctl start alertmanager.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Alertmanager配置文件详解"><a href="#Alertmanager配置文件详解" class="headerlink" title="Alertmanager配置文件详解"></a>Alertmanager配置文件详解</h1><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/alertmanager/alertmanager.yml<span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">resolve_timeout</span><span class="token punctuation">:</span> 5m    <span class="token comment" spellcheck="true"># 恢复的超时时间,这个跟告警恢复通知有关,此参数并不是说在这个时间没有收到告警就会恢复</span><span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 默认以告警名进行分组,就是rule文件的alert值进行分组</span>  <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token comment" spellcheck="true"># 发送警报前，至少等待多少秒才会发送(为了收集同组更多的警报信息一起发送)</span>  <span class="token key atrule">group_interval</span><span class="token punctuation">:</span> 10s    <span class="token comment" spellcheck="true"># 如果警报1已经发送,这时又出现同组的警报2,由于组状态发生变化,警报会在group_interval这个时间内发送,不会被repeat_interval这个时间收敛</span>  <span class="token key atrule">repeat_interval</span><span class="token punctuation">:</span> 20m    <span class="token comment" spellcheck="true"># 报警信息已发送，但事件并没有恢复,则等待多久时间再重新发送(生产环境一般设成20min或者30min)</span>  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'web.hook'</span>    <span class="token comment" spellcheck="true"># 发送警报的接收者名称,如果一个报警没有被一个route匹配,则发送给默认的接收器</span><span class="token key atrule">receivers</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 发送告警信息给那个接收者</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'web.hook'</span>    <span class="token comment" spellcheck="true"># 这个需要和上面定义的接收者名称一致</span>  <span class="token key atrule">webhook_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:5001/'</span><span class="token key atrule">inhibit_rules</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 抑制规则,防止告警风暴</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'critical'</span>    <span class="token key atrule">target_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'warning'</span>    <span class="token key atrule">equal</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">,</span> <span class="token string">'instance'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="检查Alertmanager配置文件"><a href="#检查Alertmanager配置文件" class="headerlink" title="检查Alertmanager配置文件"></a>检查Alertmanager配置文件</h1><pre class="line-numbers language-shell"><code class="language-shell"># 提示SUCCESS,则配置文件没有问题./amtool check-config alertmanager.yml# 修改配置文件之后重启alertmanagersystemctl restart alertmanager.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置邮件告警"><a href="#配置邮件告警" class="headerlink" title="配置邮件告警"></a>配置邮件告警</h1><p>修改alertmanager配置文件，填写邮箱的验证信息，定义路由的收件人，配置发送告警邮件到那个邮箱</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat /usr/local/alertmanager/alertmanager.yml <span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">resolve_timeout</span><span class="token punctuation">:</span> 3m  <span class="token key atrule">smtp_smarthost</span><span class="token punctuation">:</span> <span class="token string">'smtp.qq.com:465'</span>  <span class="token key atrule">smtp_from</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_username</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_password</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true"># 授权码</span>  <span class="token key atrule">smtp_require_tls</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">]</span>  <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">group_interval</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">repeat_interval</span><span class="token punctuation">:</span> 20m  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mail'</span><span class="token key atrule">receivers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'devops.mail'</span>  <span class="token key atrule">email_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> <span class="token string">'mf_2013@163.com'</span>    <span class="token key atrule">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">Subject</span><span class="token punctuation">:</span> <span class="token string">"[WARN] Prometheus 报警邮件"</span> <span class="token punctuation">}</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true"># 发送告警恢复通知</span><span class="token comment" spellcheck="true">#inhibit_rules:</span><span class="token comment" spellcheck="true">#  - source_match:</span><span class="token comment" spellcheck="true">#      severity: 'critical'</span><span class="token comment" spellcheck="true">#    target_match:</span><span class="token comment" spellcheck="true">#      severity: 'warning'</span><span class="token comment" spellcheck="true">#    equal: ['alertname', 'dev', 'instance']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置prometheus与alertmanager通信，设置规则文件的路径和正则匹配</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 修改prometheus配置文件</span>vim /usr/local/prometheus/prometheus.yml<span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">9093    </span><span class="token comment" spellcheck="true"># 这里由于alertmanager是和prometheus部署在同一台机器上,所以写本机地址</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"rules/*.yml"</span>    <span class="token comment" spellcheck="true"># rules这个目录是在prometheus上的,指当前配置文件的同级目录,这个目录需要自己创建</span><span class="token comment" spellcheck="true"># 检查prometheus配置文件</span>./promtool check config prometheus.ymlsystemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写rules文件，根据rules文件中的表达式去告警，这个规则文件的路径是prometheus配置文件中定义的</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 监控节点的状态</span>cat /usr/local/prometheus/rules/node.yml <span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> node_alert  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> Node_InstanceDown            <span class="token key atrule">expr</span><span class="token punctuation">:</span> up == 0    <span class="token comment" spellcheck="true"># 表达式</span>    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在prometheus的web控制台查看配置的规则</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f20e09814195aa594f3290e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>关闭node_exporter.service节点，查看告警邮件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f20e13414195aa594f3b901.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="配置微信告警"><a href="#配置微信告警" class="headerlink" title="配置微信告警"></a>配置微信告警</h1><p>修改alertmanager配置文件，定义路由规则</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat /usr/local/alertmanager/alertmanager.yml <span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">resolve_timeout</span><span class="token punctuation">:</span> 3m  <span class="token key atrule">smtp_smarthost</span><span class="token punctuation">:</span> <span class="token string">'smtp.qq.com:465'</span>  <span class="token key atrule">smtp_from</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_username</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_password</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true"># 授权码</span>  <span class="token key atrule">smtp_require_tls</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">templates</span><span class="token punctuation">:</span><span class="token punctuation">-</span> /usr/local/alertmanager/template/wechat.temp<span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">]</span>  <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">group_interval</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">repeat_interval</span><span class="token punctuation">:</span> 20m  <span class="token comment" spellcheck="true">#receiver: 'devops.mail'</span>  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>  <span class="token key atrule">routes</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 为node_exporter、docker、mysqld_exporter定义匹配路由,每个路由有自己的分组在微信告警时信息就会单独发送</span>  <span class="token punctuation">-</span> <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token comment" spellcheck="true"># 每个服务可以定义自己的接收者,这样在发送时就可以发送给不同的人,不同的服务对应不同的处理人员</span>    <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'node_exporter'</span><span class="token punctuation">]</span>    <span class="token key atrule">match_re</span><span class="token punctuation">:</span>      <span class="token key atrule">job</span><span class="token punctuation">:</span> node_exporter  <span class="token punctuation">-</span> <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'docker'</span><span class="token punctuation">]</span>    <span class="token key atrule">match_re</span><span class="token punctuation">:</span>      <span class="token key atrule">job</span><span class="token punctuation">:</span> docker  <span class="token punctuation">-</span> <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'mysqld_exporter'</span><span class="token punctuation">]</span>    <span class="token key atrule">match_re</span><span class="token punctuation">:</span>      <span class="token key atrule">job</span><span class="token punctuation">:</span> mysqld_exporter<span class="token key atrule">receivers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token comment" spellcheck="true"># 将这个告警同时发送到邮件和微信</span>  <span class="token key atrule">email_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> <span class="token string">'mf_2013@163.com'</span>    <span class="token key atrule">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">Subject</span><span class="token punctuation">:</span> <span class="token string">"[WARN] Prometheus 报警邮件"</span> <span class="token punctuation">}</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">wechat_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">api_secret</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">agent_id</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">corp_id</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">to_party</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment" spellcheck="true">#inhibit_rules:</span><span class="token comment" spellcheck="true">#  - source_match:</span><span class="token comment" spellcheck="true">#      severity: 'critical'</span><span class="token comment" spellcheck="true">#    target_match:</span><span class="token comment" spellcheck="true">#      severity: 'warning'</span><span class="token comment" spellcheck="true">#    equal: ['alertname', 'dev', 'instance']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写rules文件，为了每个服务单独报警，这里将node_exporter、docker、mysqld_exporter分开去写匹配规则</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat /usr/local/prometheus/rules/node.yml <span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> node_exporter  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_exporter_Down    <span class="token key atrule">expr</span><span class="token punctuation">:</span> up<span class="token punctuation">{</span>job="node_exporter"<span class="token punctuation">}</span> == 0    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqld_exporter  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> mysqld_exporter_Down    <span class="token key atrule">expr</span><span class="token punctuation">:</span> up<span class="token punctuation">{</span>job="mysqld_exporter"<span class="token punctuation">}</span> == 0    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> docker  <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> docker_Down    <span class="token key atrule">expr</span><span class="token punctuation">:</span> up<span class="token punctuation">{</span>job="docker"<span class="token punctuation">}</span> == 0    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成之后重启alertmanager</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart alertmanager.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭node_exporter和docker_cadvisor服务，这时候会每个服务单独发送告警信息，由于将全部服务group_by在一个组里面，在发送恢复信息时会出现服务混乱的情况，所以我将每个服务做了路由，每一个服务都有自己的group_by，这样在发送信息时才会单独去发送</p><p><img src="https://pic.imgdb.cn/item/5f2140bc14195aa5945ae70c.jpg" alt=""></p><h1 id="配置钉钉告警"><a href="#配置钉钉告警" class="headerlink" title="配置钉钉告警"></a>配置钉钉告警</h1><p>先去创建一个钉钉机器人，具体过程这里就不详细说明了</p><p>prometheus配置钉钉告警需要使用到prometheus-webhook-dingtalk插件，我们先使用二进制安装钉钉插件，dingtalk服务默认启动的端口是8060</p><p><a href="https://github.com/timonwong/prometheus-webhook-dingtalk" target="_blank" rel="noopener">prometheus-webhook-dingtalk插件下载地址</a></p><pre class="line-numbers language-shell"><code class="language-shell"># 下载prometheus-webhook-dingtalkwget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v1.4.0/prometheus-webhook-dingtalk-1.4.0.linux-amd64.tar.gz# 解压prometheus-webhook-dingtalktar xf prometheus-webhook-dingtalk-1.4.0.linux-amd64.tar.gz && mv prometheus-webhook-dingtalk-1.4.0.linux-amd64 /usr/local/dingtalk# 编写dingtalk启动文件vim /usr/lib/systemd/system/dingtalk.service[Unit]Description=prometheus-webhook-dingtalkAfter=network-online.target[Service]Restart=on-failureExecStart=/usr/local/dingtalk/prometheus-webhook-dingtalk \--ding.profile=Prometheus告警=https://oapi.dingtalk.com/robot/send?access_token=xxxxxx[Install]WantedBy=multi-user.target# 启动dingtalk.servicesystemctl daemon-reloadsystemctl restart dingtalk.service# 查看dingtalk的webhook地址journalctl -fu dingtalk.serviceJul 29 18:38:01 iZuf6fpaicz5jt7kep555qZ prometheus-webhook-dingtalk[5504]: ts=2020-07-29T10:38:01.655Z caller=main.go:133 component=configuration msg="Webhook urls for prometheus alertmanager" urls=http://localhost:8060/dingtalk/Prometheus告警/send<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改prometheus的alertmanager配置，更改告警的路由和接收者</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops_dingtalk'</span>    <span class="token comment" spellcheck="true"># 接收者必须和下面的一致</span><span class="token key atrule">receivers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'devops_dingtalk'</span>  <span class="token key atrule">webhook_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://localhost:8060/dingtalk/Prometheus告警/send'</span>    <span class="token comment" spellcheck="true"># 这个URL是dingtalk的webhook地址</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭docker收集器查看告警效果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f22831a14195aa594112818.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="告警状态"><a href="#告警状态" class="headerlink" title="告警状态"></a>告警状态</h1><p>prometheus的告警状态有三种，我们可以在prometheus的控制台页面上查看告警的状态</p><h2 id="inactive"><a href="#inactive" class="headerlink" title="inactive"></a>inactive</h2><p>没有触发任何阈值，这个是根据scrape_interval参数(采集数据周期)和evaluation_interval参数(对比规则周期)去决定的</p><h2 id="pending"><a href="#pending" class="headerlink" title="pending"></a>pending</h2><p>已触发阈值但未满足告警持续时间，告警进入pending状态之后，需要等待规则配置的for时间，如果在这个时间内触发阈值的表达式一直成立，才会进入firing状态</p><h2 id="firing"><a href="#firing" class="headerlink" title="firing"></a>firing</h2><p>已触发阈值且满足告警持续时间，将告警从prometheus发送给alertmanager，在alertmanager收到告警之后并不会立刻发送，还需要等待一个group_wait时间，直到某个计算周期表达式为假，告警状态变更为inactive，发送一个resolve给altermanger，说明此告警已解决</p><h1 id="告警收敛"><a href="#告警收敛" class="headerlink" title="告警收敛"></a>告警收敛</h1><p>alertmanager在收到prometheus发送的告警之后，并不是把收到的信息简单的直接发送出去，而是通过一系列的收敛机制(分组、抑制、静默)去筛选出需要发送的信息，如果alertmanager收到信息就直接发送出去，会导致告警信息过多，运维人员会被告警信息淹没，错过重要的告警信息 </p><p><img src="https://pic.imgdb.cn/item/5f23803214195aa5946d5b86.jpg" alt=""></p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>将类似性质的告警分类为单个通知，减少告警消息数量</p><p>将类似性质的告警进行聚合发送，帮助运维更好的排查问题</p><h2 id="抑制"><a href="#抑制" class="headerlink" title="抑制"></a>抑制</h2><p>当告警发出后，停止重复发送由此告警而引起的其他告警，帮助运维第一时间掌握最核心的告警信息</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">inhibit_rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'critical'</span>    <span class="token comment" spellcheck="true"># 当发生critical级别的告警时,就会抑制下面warning级别的告警</span>    <span class="token key atrule">target_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'warning'</span>    <span class="token key atrule">equal</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">,</span> <span class="token string">'instance'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 已发送的告警与新产生的告警中equal定义的标签完全相同,则启动抑制机制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静默"><a href="#静默" class="headerlink" title="静默"></a>静默</h2><p>是一种简单的特定时间静音的提醒机制，在发布新版本时我们需要停掉某些进程，这时候告警肯定会触发的，由于这是我们已经预知的现象，我们可以打开prometheus主机的9093端口暂时将告警设置成静音</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f23c66b14195aa5948a1e2d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Prometheus一条告警是怎么触发的"><a href="#Prometheus一条告警是怎么触发的" class="headerlink" title="Prometheus一条告警是怎么触发的"></a>Prometheus一条告警是怎么触发的</h1><p>1.采集数据 scrape_interval: 15s</p><p>2.比对采集到的数据是否触发阈值 evaluation_interval: 15s</p><p>3.判断是否超出持续时间(在这个时间内一直处于触发阈值状态)for: 5s</p><p>4.告警到达alertmanager然后进行分组、抑制、静默</p><p>5.通过分组、抑制、静默一系列机制的信息将会被发送，但是会延迟发送group_wait: 10s</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f23ceb714195aa5948dbd05.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="编写告警规则案例"><a href="#编写告警规则案例" class="headerlink" title="编写告警规则案例"></a>编写告警规则案例</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> general.rules  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_FileSystemUsage    <span class="token comment" spellcheck="true"># 监控磁盘使用率</span>    <span class="token key atrule">expr</span><span class="token punctuation">:</span> 100 <span class="token punctuation">-</span> node_filesystem_free_bytes<span class="token punctuation">{</span>mountpoint="/"<span class="token punctuation">,</span>fstype=~"ext4<span class="token punctuation">|</span>xfs"<span class="token punctuation">}</span> / node_filesystem_size_bytes<span class="token punctuation">{</span>mountpoint="/"<span class="token punctuation">,</span>fstype=~"ext4<span class="token punctuation">|</span>xfs"<span class="token punctuation">}</span> * 100 <span class="token punctuation">></span> 80    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> warning    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} : {{ $labels.mountpoint }} Partition utilization is too high"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} : {{ $labels.mountpoint }} Partition utilization is greater than 80% (Currently: {{ $value }})"</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_MemoryUsage    <span class="token comment" spellcheck="true"># 监控内存使用率</span>    <span class="token key atrule">expr</span><span class="token punctuation">:</span> 100 <span class="token punctuation">-</span> (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) / node_memory_MemTotal_bytes * 100 <span class="token punctuation">></span> 80    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> warning    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} High memory usage"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }}  Memory usage greater than 80% (Currently: {{ $value }})"</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_cpuUsage    <span class="token comment" spellcheck="true"># 监控CPU使用率</span>    <span class="token key atrule">expr</span><span class="token punctuation">:</span> 100 <span class="token punctuation">-</span> irate(node_cpu_seconds_total<span class="token punctuation">{</span>mode="idle"<span class="token punctuation">,</span>job="node_exporter"<span class="token punctuation">,</span>instance="47.100.107.121<span class="token punctuation">:</span>9100"<span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span>) * 100 <span class="token punctuation">></span> 80    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> warning    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} High cpu usage"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} Memory usage greater than 60% (Currently: {{ $value }})"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Alertmanager概述&quot;&gt;&lt;a href=&quot;#Alertmanager概述&quot; class=&quot;headerlink&quot; title=&quot;Alertmanager概述&quot;&gt;&lt;/a&gt;Alertmanager概述&lt;/h1&gt;&lt;p&gt;prometheus发出告警时分为两部分，首
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus监控案例(5)</title>
    <link href="https://www.missf.top/post/ba827699.html"/>
    <id>https://www.missf.top/post/ba827699.html</id>
    <published>2020-07-16T07:43:16.000Z</published>
    <updated>2020-08-03T03:27:09.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监控Linux服务器"><a href="#监控Linux服务器" class="headerlink" title="监控Linux服务器"></a>监控Linux服务器</h1><h2 id="部署node-exporter"><a href="#部署node-exporter" class="headerlink" title="部署node_exporter"></a>部署node_exporter</h2><p>prometheus官方提供Node_exporter来让我们收集机器的系统数据，除node_exporter外，官方还提供consul、memcached、haproxy、mysqld等exporter。exporter类似于zabbix写好的监控模板，但是这些exporter都是需要在被监控节点安装</p><pre class="line-numbers language-shell"><code class="language-shell"># 下载node_exporterwget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz# 解压tar xf node_exporter-1.0.1.linux-amd64.tar.gz && mv node_exporter-1.0.1.linux-amd64 /usr/local/node_exporter# 编写启动文件vim /usr/lib/systemd/system/node_exporter.service[Unit]Description=prometheus[Service]Restart=on-failureExecStart=/usr/local/node_exporter/node_exporter[Install]WantedBy=multi-user.target# 启动node_exportersystemctl daemon-reloadsystemctl start node_exporter.service# 访问node_exporter的数据接口http://10.10.110.23:9100/metrics    # 默认端口是9100,默认接口是metrics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置监控"><a href="#配置监控" class="headerlink" title="配置监控"></a>配置监控</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 修改prometheus配置文件</span>vim /usr/local/prometheus/prometheus.yml  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'node_exporter'</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'/usr/local/prometheus/sd_config/node/*.yaml'</span><span class="token punctuation">]</span>        <span class="token key atrule">refresh_interval</span><span class="token punctuation">:</span> 5s<span class="token comment" spellcheck="true"># 创建服务发现的文件</span>vim /usr/local/prometheus/sd_config/node/*.yaml<span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">'10.10.110.23:9100'</span>        <span class="token comment" spellcheck="true"># 这个地址是被监控节点的IP地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="promSQL监控CPU、内存、硬盘"><a href="#promSQL监控CPU、内存、硬盘" class="headerlink" title="promSQL监控CPU、内存、硬盘"></a>promSQL监控CPU、内存、硬盘</h1><h2 id="CPU监控"><a href="#CPU监控" class="headerlink" title="CPU监控"></a>CPU监控</h2><pre class="line-numbers language-shell"><code class="language-shell"># 计算CPU五分钟内平均的使用率表达式100 - irate(node_cpu_seconds_total{mode="idle",instance="10.10.110.23:9100",job="node_exporter"}[5m]) * 100# node_cpu_seconds_total{mode="idle",instance="10.10.110.23:9100",job="node_exporter"}[5m]:取CPU五分钟之内的空闲值# irate函数:将会用于计算某个指标在一定时间间隔内的变化速率# 将得到的空闲值乘以100再得到CPU百分比的空闲值,再以100减去CPU百分比的空闲值,就得到CPU五分钟内平均的使用率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存监控"><a href="#内存监控" class="headerlink" title="内存监控"></a>内存监控</h2><pre class="line-numbers language-shell"><code class="language-shell"># 计算内存使用率表达式100 - (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) / node_memory_MemTotal_bytes * 100# (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)是内存剩余的总量    在系统层面来考虑:buff和cache是已经被使用的内存    在程序层面来考虑:buff和cache是剩余的内存# 内存剩余的总量除以内存总量得到内存剩余率,再以100减去内存剩余率得到内存使用率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="硬盘监控"><a href="#硬盘监控" class="headerlink" title="硬盘监控"></a>硬盘监控</h2><pre class="line-numbers language-shell"><code class="language-shell"># 计算硬盘使用率表达式100 - node_filesystem_free_bytes{mountpoint="/",fstype=~"ext4|xfs"} / node_filesystem_size_bytes{mountpoint="/",fstype=~"ext4|xfs"} * 100# node_filesystem_free_bytes{mountpoint="/",fstype=~"ext4|xfs"}是根分区硬盘剩余容量,只计算ext4|xfs类型的文件系统# node_filesystem_size_bytes{mountpoint="/",fstype=~"ext4|xfs"}是根分区的硬盘总量# 根分区硬盘剩余容量除以根分区的硬盘总量得到根分区硬盘的剩余率,再以100减去硬盘的剩余率得到硬盘使用率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="监控系统服务状态"><a href="#监控系统服务状态" class="headerlink" title="监控系统服务状态"></a>监控系统服务状态</h1><h2 id="修改node-exporter的启动参数"><a href="#修改node-exporter的启动参数" class="headerlink" title="修改node_exporter的启动参数"></a>修改node_exporter的启动参数</h2><pre class="line-numbers language-shell"><code class="language-shell">vim /usr/lib/systemd/system/node_exporter.service[Unit]Description=prometheus[Service]Restart=on-failureExecStart=/usr/local/node_exporter/node_exporter --collector.systemd --collector.systemd.unit-whitelist=(docker|sshd).service# 利用正则匹配监控systemd的docker|sshd这三个服务[Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重启node-exporter"><a href="#重启node-exporter" class="headerlink" title="重启node_exporter"></a>重启node_exporter</h2><pre class="line-numbers language-shell"><code class="language-shell">systemctl daemon-reloadsystemctl restart node_exporter.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看监控服务的数据指标"><a href="#查看监控服务的数据指标" class="headerlink" title="查看监控服务的数据指标"></a>查看监控服务的数据指标</h2><pre class="line-numbers language-shell"><code class="language-shell">node_systemd_unit_state{name="docker.service"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在activating、active、deactivating、failed、inactive五个状态中value为1的状态，就是服务当前的状态</p>{% image https://pic.imgdb.cn/item/5f1fa26414195aa5947438c7.jpg '' '' %}<h1 id="使用Grafana图表展示监控数据"><a href="#使用Grafana图表展示监控数据" class="headerlink" title="使用Grafana图表展示监控数据"></a>使用Grafana图表展示监控数据</h1><h2 id="安装Grafana"><a href="#安装Grafana" class="headerlink" title="安装Grafana"></a>安装Grafana</h2><pre class="line-numbers language-shell"><code class="language-shell"># 下载软件包wget https://dl.grafana.com/oss/release/grafana-7.1.0-1.x86_64.rpm# 安装yum install grafana-7.1.0-1.x86_64.rpm -y# 启动systemctl enable grafana-server.servicesystemctl start grafana-server.service# Grafana默认端口为3000,账号密码都为admin,初次登录会提示需要修改密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Grafana配置数据源"><a href="#Grafana配置数据源" class="headerlink" title="Grafana配置数据源"></a>Grafana配置数据源</h2><p>填写prometheus主机的地址，在配置数据源时我们还可以配置验证、定义HTTP头部、以及其他的一些信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f14fccb14195aa59415fa14.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Grafana导入仪表盘"><a href="#Grafana导入仪表盘" class="headerlink" title="Grafana导入仪表盘"></a>Grafana导入仪表盘</h2><p>我们可以自己编写仪表盘，也可以使用官方网站上别人已经写好的仪表盘模板直接导入使用，这里我们没有必要自己去编写(重复造轮子而且还没有人家专业…)。我们先去<a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">Grafana Labs</a>上找到监控Linux主机的仪表盘，然后将仪表盘的ID号导入到Grafana</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f1515d514195aa5941cc06f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="查看仪表盘"><a href="#查看仪表盘" class="headerlink" title="查看仪表盘"></a>查看仪表盘</h2><p>Grafana监控Linux主机的仪表盘数据是从prometheus的数据源获取的，就是被监控主机上的node_exporter获取到的数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f1518a914195aa5941d6c7f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="监控Docker服务器"><a href="#监控Docker服务器" class="headerlink" title="监控Docker服务器"></a>监控Docker服务器</h1><h2 id="部署cadvisor"><a href="#部署cadvisor" class="headerlink" title="部署cadvisor"></a>部署cadvisor</h2><p>想要监控Docker容器，需要在被监控主机安装cadvisor插件，暴露一个HTTP端口，为prometheus提供容器的监控数据</p><pre class="line-numbers language-shell"><code class="language-shell"># 由于国内无法连接到gcr.io,这里使用张馆长仓库的镜像地址docker run \--volume=/:/rootfs:ro \--volume=/var/run:/var/run:ro \--volume=/sys:/sys:ro \--volume=/var/lib/docker/:/var/lib/docker:ro \--volume=/dev/disk/:/dev/disk:ro \--publish=8080:8080 \--detach=true \--name=cadvisor \--privileged \--device=/dev/kmsg \registry.aliyuncs.com/k8sxio/cadvisor:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置Prometheus监控cadvisor"><a href="#配置Prometheus监控cadvisor" class="headerlink" title="配置Prometheus监控cadvisor"></a>配置Prometheus监控cadvisor</h2><p>cadvisor可以搜集一台机器上所有运行的容器信息，还提供基础查询界面和http接口，供其他组件如prometheus拉取数据</p><pre class="line-numbers language-shell"><code class="language-shell">vim /usr/local/prometheus/prometheus.yml    # 在prometheus配置文件加入监控主机的cadvisor端口(拉取容器数据)  - job_name: 'docker'    static_configs:    - targets: ['10.10.110.23:8080']systemctl daemon-reloadsystemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Grafana导入仪表盘-1"><a href="#Grafana导入仪表盘-1" class="headerlink" title="Grafana导入仪表盘"></a>Grafana导入仪表盘</h2><p>我们去<a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">Grafana Labs</a>网站寻找一个监控Docker主机的仪表盘，在Grafana进行导入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f23b7c914195aa5948360c4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="查看Docker主机仪表盘"><a href="#查看Docker主机仪表盘" class="headerlink" title="查看Docker主机仪表盘"></a>查看Docker主机仪表盘</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f17260614195aa59400404d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="监控MySQL服务器"><a href="#监控MySQL服务器" class="headerlink" title="监控MySQL服务器"></a>监控MySQL服务器</h1><p>监控MySQL主机和监控Linux主机一样，都是需要导出器去获取数据，这里我们去prometheus官网下载mysqld_exporter，然后在mysql主机上安装(监控那台mysql主机就在那台主机安装mysqld_exporter)</p><h2 id="MySQL主机安装mysqld-exporter"><a href="#MySQL主机安装mysqld-exporter" class="headerlink" title="MySQL主机安装mysqld_exporter"></a>MySQL主机安装mysqld_exporter</h2><pre class="line-numbers language-shell"><code class="language-shell"># 下载wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gz# 解压tar xf mysqld_exporter-0.12.1.linux-amd64.tar.gz && mv mysqld_exporter-0.12.1.linux-amd64 /usr/local/mysqld_exporter# 创建启动文件vim /usr/lib/systemd/system/mysqld_exporter.service[Unit]Documentation=https://prometheus.io/[Service]Restart=on-failureEnvironment=DATA_SOURCE_NAME=exporter:Missf.top123@(localhost:3306)/    # 连接数据库的账号密码,也可以指定.my.cnf文件ExecStart=/usr/local/mysqld_exporter/mysqld_exporter[Install]WantedBy=multi-user.target# 被监控数据库添加mysql用户及监控权限CREATE USER 'exporter'@'localhost' IDENTIFIED BY 'Missf.top123' WITH MAX_USER_CONNECTIONS 3;GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost';FLUSH PRIVILEGES;# 启动mysqld_exportersystemctl start mysqld_exporter# 获取监控数据curl [IP]:9104/metrics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置Prometheus监控mysqld-exporter"><a href="#配置Prometheus监控mysqld-exporter" class="headerlink" title="配置Prometheus监控mysqld_exporter"></a>配置Prometheus监控mysqld_exporter</h2><pre class="line-numbers language-shell"><code class="language-shell"># 修改配置文件vim /usr/local/prometheus/prometheus.yml  - job_name: 'mysqld_exporter'        # 添加监控mysqld_exporter    static_configs:    - targets: ['47.100.107.121:9104']# 重启systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导入MySQL仪表盘"><a href="#导入MySQL仪表盘" class="headerlink" title="导入MySQL仪表盘"></a>导入MySQL仪表盘</h2><p>导入ID为7362的MySQL仪表盘，查看MySQL的监控数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f18f80f14195aa594e798e0.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;监控Linux服务器&quot;&gt;&lt;a href=&quot;#监控Linux服务器&quot; class=&quot;headerlink&quot; title=&quot;监控Linux服务器&quot;&gt;&lt;/a&gt;监控Linux服务器&lt;/h1&gt;&lt;h2 id=&quot;部署node-exporter&quot;&gt;&lt;a href=&quot;#部署node
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus配置文件与核心功能(4)</title>
    <link href="https://www.missf.top/post/521f1005.html"/>
    <id>https://www.missf.top/post/521f1005.html</id>
    <published>2020-07-15T11:06:15.000Z</published>
    <updated>2020-07-29T08:44:20.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局配置文件介绍"><a href="#全局配置文件介绍" class="headerlink" title="全局配置文件介绍"></a>全局配置文件介绍</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 全局默认的数据拉取间隔,默认每隔1m拉取一次监控数据</span>  <span class="token punctuation">[</span> <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = 1m <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 全局默认的单次数据拉取超时</span>  <span class="token punctuation">[</span> <span class="token key atrule">scrape_timeout</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = 10s <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 对告警规则做定期计算的间隔时间,每隔1m对比一次我采集到的数据跟我设置的告警规则,符合告警规则的事件就会被发送到alertmanager,由alertmanager做路由匹配然后进行告警处理</span>  <span class="token punctuation">[</span> <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = 1m <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 监控告警的规则设置</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;filepath_glob<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 配置被监控指标</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;scrape_config<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 指定告警和告警管理器相关的设置</span><span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alert_relabel_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;relabel_config<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>    <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;alertmanager_config<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="scrape-configs"><a href="#scrape-configs" class="headerlink" title="scrape_configs"></a>scrape_configs</h1><p>配置数据源，拉取数据的对象称为Targets，每个Targets用job_name命名，添加数据源又分为静态配置和服务发现</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 定义job名称,是一个拉取单元,每个job_name都会自动引入默认配置如:</span>    <span class="token comment" spellcheck="true"># scrape_interval 依赖全局配置</span>    <span class="token comment" spellcheck="true"># scrape_timeout 依赖全局配置</span>    <span class="token comment" spellcheck="true"># metrics_path 默认为'/metrics'</span>    <span class="token comment" spellcheck="true"># scheme 默认为'http'</span><span class="token key atrule">job_name</span><span class="token punctuation">:</span> &lt;job_name<span class="token punctuation">></span><span class="token comment" spellcheck="true"># 数据拉取间隔</span><span class="token punctuation">[</span> <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = &lt;global_config.scrape_interval<span class="token punctuation">></span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 数据拉取超时时间</span><span class="token punctuation">[</span> <span class="token key atrule">scrape_timeout</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = &lt;global_config.scrape_timeout<span class="token punctuation">></span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 拉取数据指标的地址</span><span class="token punctuation">[</span> <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> &lt;path<span class="token punctuation">></span> <span class="token punctuation">|</span> default = /metrics <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基于文件的服务发现"><a href="#基于文件的服务发现" class="headerlink" title="基于文件的服务发现"></a>基于文件的服务发现</h1><p>基于文件的服务发现不需要依赖其他平台与第三方服务，用户只需将要更新的target信息以yaml或json文件格式添加到target文件中，prometheus会定期的从指定文件中读取target信息并更新。给我们带来的好处就是不需要一个个target去添加，只需要一个yaml或者json文件，便于管理</p><h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml">vim prometheus.yml<span class="token comment" spellcheck="true"># my global config 全局配置文件</span><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span>     5s <span class="token comment" spellcheck="true"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s <span class="token comment" spellcheck="true"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>  <span class="token comment" spellcheck="true"># scrape_timeout is set to the global default (10s).</span><span class="token comment" spellcheck="true"># Alertmanager configuration 告警管理</span><span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># - alertmanager:9093</span><span class="token comment" spellcheck="true"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># - "first_rules.yml"</span>  <span class="token comment" spellcheck="true"># - "second_rules.yml"</span><span class="token comment" spellcheck="true"># A scrape configuration containing exactly one endpoint to scrape:</span><span class="token comment" spellcheck="true"># Here it's Prometheus itself.</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'prometheus'</span>    <span class="token comment" spellcheck="true"># metrics_path defaults to '/metrics'</span>    <span class="token comment" spellcheck="true"># scheme defaults to 'http'.</span><span class="token comment" spellcheck="true">#    scrape_interval: 5s</span><span class="token comment" spellcheck="true">#    static_configs:</span><span class="token comment" spellcheck="true">#    - targets: ['localhost:9090']</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 文件服务发现</span>      <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'/usr/local/prometheus/sd_config/*.yaml'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 指定服务发现的文件路径</span>        <span class="token key atrule">refresh_interval</span><span class="token punctuation">:</span> 5s    <span class="token comment" spellcheck="true"># 每过5秒动态发现服务配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建目录及文件"><a href="#创建目录及文件" class="headerlink" title="创建目录及文件"></a>创建目录及文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/sd_config/test.yaml    <span class="token comment" spellcheck="true"># 需要监控那一台主机就在那一台主机上创建</span><span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">'10.10.110.150:9090'</span>    <span class="token comment" spellcheck="true"># 这个是填写prometheus主机的地址,如果prometheus启动时监听的是8080端口,那么这里就需要和prometheus端口一致,不然获取不到数据</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">group</span><span class="token punctuation">:</span> prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重载配置文件"><a href="#重载配置文件" class="headerlink" title="重载配置文件"></a>重载配置文件</h2><pre class="line-numbers language-shell"><code class="language-shell">ps -ef | grep prometheusroot       1774      1  0 Jul15 ?        00:02:21 /usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.ymlroot       2741   1702  0 14:13 pts/1    00:00:00 grep --color=auto prometheuskill -hup 1774<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;全局配置文件介绍&quot;&gt;&lt;a href=&quot;#全局配置文件介绍&quot; class=&quot;headerlink&quot; title=&quot;全局配置文件介绍&quot;&gt;&lt;/a&gt;全局配置文件介绍&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-yaml&quot;&gt;&lt;code cla
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus部署(3)</title>
    <link href="https://www.missf.top/post/d26dfcbe.html"/>
    <id>https://www.missf.top/post/d26dfcbe.html</id>
    <published>2020-07-15T09:11:11.000Z</published>
    <updated>2020-08-05T10:26:27.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二进制部署"><a href="#二进制部署" class="headerlink" title="二进制部署"></a>二进制部署</h1><pre class="line-numbers language-shell"><code class="language-shell"># 下载二进制安装包wget https://github.com/prometheus/prometheus/releases/download/v2.19.2/prometheus-2.19.2.linux-amd64.tar.gz# 解压tar xf prometheus-2.19.2.linux-amd64.tar.gz && mv prometheus-2.19.2.linux-amd64 /usr/local/prometheus# 创建启动文件cp /usr/lib/systemd/system/sshd.service /usr/lib/systemd/system/prometheus.service# 编写启动文件tee /usr/lib/systemd/system/prometheus.service << EOF[Unit]Description=http://prometheus.io[Service]Restart=on-failureExecStart=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml[Install]WantedBy=multi-user.targetEOF# 启动prometheussystemctl daemon-reloadsystemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/prometheus<span class="token comment" spellcheck="true"># my global config</span><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span>     5s <span class="token comment" spellcheck="true"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s <span class="token comment" spellcheck="true"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>  <span class="token comment" spellcheck="true"># scrape_timeout is set to the global default (10s).</span><span class="token comment" spellcheck="true"># Alertmanager configuration</span><span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># - alertmanager:9093</span><span class="token comment" spellcheck="true"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># - "first_rules.yml"</span>  <span class="token comment" spellcheck="true"># - "second_rules.yml"</span><span class="token comment" spellcheck="true"># A scrape configuration containing exactly one endpoint to scrape:</span><span class="token comment" spellcheck="true"># Here it's Prometheus itself.</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'prometheus'</span>    <span class="token comment" spellcheck="true"># metrics_path defaults to '/metrics'</span>    <span class="token comment" spellcheck="true"># scheme defaults to 'http'.</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'127.0.0.1:9090'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h1><pre class="line-numbers language-shell"><code class="language-shell">docker run -d --name "prometheus" -p 9090:9090 \--mount src=prometheus,dst=/etc/prometheus \--mount type=bind,src=/prometheus/prometheus.yml,dst=/etc/prometheus/prometheus.yml prom/prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="启动常用命令行参数"><a href="#启动常用命令行参数" class="headerlink" title="启动常用命令行参数"></a>启动常用命令行参数</h1><pre class="line-numbers language-shell"><code class="language-shell">./prometheus -h--config.file="prometheus.yml"    # 指定配置文件--web.listen-address="0.0.0.0:9090"        # 指定端口--log.level=info    # 指定日志级别<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二进制部署&quot;&gt;&lt;a href=&quot;#二进制部署&quot; class=&quot;headerlink&quot; title=&quot;二进制部署&quot;&gt;&lt;/a&gt;二进制部署&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-shell&quot;&gt;&lt;code class=&quot;languag
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus概述(2)</title>
    <link href="https://www.missf.top/post/ef0b21f0.html"/>
    <id>https://www.missf.top/post/ef0b21f0.html</id>
    <published>2020-07-14T06:48:33.000Z</published>
    <updated>2020-07-28T08:32:28.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prometheus简介"><a href="#Prometheus简介" class="headerlink" title="Prometheus简介"></a>Prometheus简介</h1><p>Prometheus(普罗米修斯)是一个最初在SoundCloud上构建的监控系统。自2012年成为社区开源项目，拥有非常活跃的开发人员和用户社区。为强调开源及独立维护，Prometheus于2016年加入云原生云计算基金会(CNCF)，成为继Kubernetes之后的第二个托管项目</p><p>可能有些运维小伙伴不知道Prometheus，但是你们一定用过zabbix。现在由于Docker和Kubernetes的兴起，zabbix渐渐的失去了监控的优势，现在Prometheus是用来监控容器的最好实现，只有用到Docker和Kubernetes就离不开Prometheus提供监控支持。以前刚接触zabbix时，配置的微信告警让我开心了一整天，那时候觉得zabbix是世界上最好的监控软件，但是现在却觉得Prometheus才是。可能人总是需要不断向前看、不断向前奔跑的吧！</p><p><a href="https://prometheus.io/" target="_blank" rel="noopener">prometheus官网</a></p><h1 id="Prometheus特点"><a href="#Prometheus特点" class="headerlink" title="Prometheus特点"></a>Prometheus特点</h1><ol><li>多维数据模型(由时序列数据metric和一组key/value组成)</li><li>使用多维度数据完成复杂的语言查询，为prometheus的后期发展奠定基础(PromSQL)</li><li>不依赖分布式存储，单个服务器节点可直接工作</li><li>通过pushgateway进行时序列数据推送(pushing)</li><li>可以通过服务发现或者静态配置去获取要采集的目标服务器</li><li>多种可视化图表及仪表盘支持</li><li>基于HTTP的pull方式采集时间序列数据</li></ol><h1 id="Prometheus-组成及架构"><a href="#Prometheus-组成及架构" class="headerlink" title="Prometheus 组成及架构"></a>Prometheus 组成及架构</h1><p>Prometheus根据配置定时去拉取各个节点的数据，默认使用的拉取方式是pull，也可以使用pushgateway提供的push方式获取各个监控节点的数据。将获取到的数据存入TSDB(时序型数据库)，此时prometheus已经获取到监控数据，可以使用内置的promSQL进行查询。它的报警功能使用alertmanager提供，alertmanager是prometheus的告警管理和发送报警的一个组件。prometheus原生的图表结构过于简单，prometheus的图表展示功能一般由grafana进行统一管理</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f0d6fde14195aa594d4927d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Prometheus数据模型"><a href="#Prometheus数据模型" class="headerlink" title="Prometheus数据模型"></a>Prometheus数据模型</h1><p>Prometheus将所有数据存储为时间序列，具有相同度量名称以及标签属于同一个指标。每个时间序列都由度量标准名称和一组键值对(也成为标签)唯一标识</p><pre class="line-numbers language-shell"><code class="language-shell">#  时间序列格式示例 <metric name>{<label name>=<label value>, ...}api_http_requests_total{method="POST", handler="/messages"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Prometheus指标类型"><a href="#Prometheus指标类型" class="headerlink" title="Prometheus指标类型"></a>Prometheus指标类型</h1><p>Counter: 递增的计数器</p><p>Gauge: 可以任意变化的数值</p><p>Histogram: 对一段时间范围内数据进行采样，并对所有数值求和与统计数量</p><p>Summary: 与Histogram类似</p><p>不同的指标类型用于渲染不同的图表</p><h1 id="Prometheus作业和实例"><a href="#Prometheus作业和实例" class="headerlink" title="Prometheus作业和实例"></a>Prometheus作业和实例</h1><p>实例: 可以抓取的目标称为实例(Instances)    </p><p>作业: 具有相同目标的实例集合称为作业(Job)</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'prometheus'</span>    <span class="token comment" spellcheck="true"># prometheus这个job作用于localhost:9090这个目标</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'localhost:9090'</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'node'</span>    <span class="token comment" spellcheck="true"># node这个job作用于192.168.1.10:9090这个目标</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'192.168.1.10:9090'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prometheus简介&quot;&gt;&lt;a href=&quot;#Prometheus简介&quot; class=&quot;headerlink&quot; title=&quot;Prometheus简介&quot;&gt;&lt;/a&gt;Prometheus简介&lt;/h1&gt;&lt;p&gt;Prometheus(普罗米修斯)是一个最初在SoundCl
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus监控的意义(1)</title>
    <link href="https://www.missf.top/post/ded057ed.html"/>
    <id>https://www.missf.top/post/ded057ed.html</id>
    <published>2020-07-13T17:28:39.000Z</published>
    <updated>2020-07-27T09:51:54.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监控目的"><a href="#监控目的" class="headerlink" title="监控目的"></a>监控目的</h1><p>监控分为白盒监控和黑盒监控。白盒监控: 通过监控内部的运行状态及指标判断接下来可能会发生的问题，从而做出预判或应对的方法。黑盒监控: 监控系统或服务，在发生异常时做出相应的措施。prometheus属于黑盒监控，是在服务发生异常时，我们通过告警信息得知，才去处理异常问题</p><p>监控的目的主要分为以下方面:</p><ol><li>根据历史监控数据，对未来做出预测</li><li>发生异常时即使告警，或做出相应措施</li><li>根据监控报警及时定位问题根源，记录问题出现的证据(记录网络波动)</li><li>通过可视化图表展示，便于直观获取信息</li><li>领导查看数据图表(PV、UV、订单趋势图)</li><li>运维人员能够提前预知风险，避免故障的产生或者在故障发生时能够迅速处理</li></ol><h1 id="怎么监控"><a href="#怎么监控" class="headerlink" title="怎么监控"></a>怎么监控</h1><p>使用传统监控工具，直接调用Linux系统命令去获取服务状态和信息</p><pre class="line-numbers language-shell"><code class="language-shell"># free # vmstat# df# top# ss# iftop...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用监控系统去监控系统和服务，能够整体监控每一项数据</p><pre class="line-numbers language-shell"><code class="language-shell"># zabbix# nagios# prometheus# open-falcon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="监控流程"><a href="#监控流程" class="headerlink" title="监控流程"></a>监控流程</h1><p>监控的大概流程分为:数据采集、数据存储、数据分析、以及展示和告警</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f0d66c514195aa594d1f578.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="监控什么"><a href="#监控什么" class="headerlink" title="监控什么"></a>监控什么</h1><table><thead><tr><th>监控类型</th><th>具体参数</th></tr></thead><tbody><tr><td>硬件监控</td><td>硬件参数、温度、故障等</td></tr><tr><td>系统监控</td><td>CPU，内存，硬盘，网卡流量，TCP状态，进程数</td></tr><tr><td>应用监控</td><td>Nginx、Tomcat、PHP、MySQL、Redis等</td></tr><tr><td>日志监控</td><td>系统日志、服务日志、访问日志、错误日志</td></tr><tr><td>安全监控</td><td>WAF，敏感文件监控</td></tr><tr><td>API监控</td><td>可用性，接口请求，响应时间</td></tr><tr><td>业务监控</td><td>例如电商网站，每分钟产生多少订单、注册多少用户、多少活跃用户、推广活动效果</td></tr><tr><td>流量分析</td><td>根据流量获取用户相关信息，例如用户地理位置、某页面访问状况、页面停留时间等</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;监控目的&quot;&gt;&lt;a href=&quot;#监控目的&quot; class=&quot;headerlink&quot; title=&quot;监控目的&quot;&gt;&lt;/a&gt;监控目的&lt;/h1&gt;&lt;p&gt;监控分为白盒监控和黑盒监控。白盒监控: 通过监控内部的运行状态及指标判断接下来可能会发生的问题，从而做出预判或应对的方法。黑
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Docker单机编排利器Docker Compose(9)</title>
    <link href="https://www.missf.top/post/34699079.html"/>
    <id>https://www.missf.top/post/34699079.html</id>
    <published>2020-07-10T06:27:09.000Z</published>
    <updated>2020-07-14T06:45:50.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Compose-概述"><a href="#Docker-Compose-概述" class="headerlink" title="Docker Compose 概述"></a>Docker Compose 概述</h1><p>Compose是用于定义和运行多容器的工具，通过Compose可以使用YAML文件来配置容器。然后使用一个命令就可以从配置中创建并启动所有服务。其实在刚学习Docker时我就想过，如果我是LNMP架构容器化项目，因为每次都要一个个容器的启动，是否有必要将启停多个容器的命令写成一个shell脚本呢。现在学到Docker Compose，才知道根本没有这个必要，我们现在所有能想到的东西，其实早就有人帮我们实现了。这里不得不敬佩那些为开源项目做出贡献的伟大开发者们</p><p>使用Compose大概分为三个步骤:</p><p>定义Dockerfile，以便可以在任意环境运行</p><p>定义应用程序启动配置文件 docker-compose.yml</p><p>docker-compose启动并管理整个应用程序生命周期</p><h1 id="Linux-安装-Compose"><a href="#Linux-安装-Compose" class="headerlink" title="Linux 安装 Compose"></a>Linux 安装 Compose</h1><p>其实前面我们在学习Harbor时已经安装过docker-compose，这是一个使用python开发的编排工具，国内下载可能会比较慢(你应该知道怎么做了吧…)</p><pre class="line-numbers language-yaml"><code class="language-yaml">curl <span class="token punctuation">-</span>L "https<span class="token punctuation">:</span>//github.com/docker/compose/releases/download/1.26.0/docker<span class="token punctuation">-</span>compose<span class="token punctuation">-</span>$(uname <span class="token punctuation">-</span>s)<span class="token punctuation">-</span>$(uname <span class="token punctuation">-</span>m)"  <span class="token punctuation">-</span>o /usr/bin/docker<span class="token punctuation">-</span>composechmod <span class="token punctuation">,</span>+x ，/usr/bin/docker<span class="token punctuation">-</span>compose ， <span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="docker-compose-yaml配置文件参数"><a href="#docker-compose-yaml配置文件参数" class="headerlink" title="docker-compose.yaml配置文件参数"></a>docker-compose.yaml配置文件参数</h1><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>使用docker-compose启动容器服务除了可以基于指定的镜像，还可以基于一份Dockerfile，在使用up启动时执行构建镜像的任务，这个构建标签就是build。Compose将会利用它自动构建这个镜像，然后使用这个镜像启动服务容器</p><pre class="line-numbers language-yaml"><code class="language-yaml">version<span class="token punctuation">:</span><span class="token string">"3.7"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    context<span class="token punctuation">:</span>./web    dockerfile<span class="token punctuation">:</span>Dockerfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><p>context选项可以是Dockerfile的文件路径，也可以是到链接到git仓库的url。当提供的值是相对路径时，它被解析为相对于撰写文件的路径，此目录也是发送到Docker守护进程的context</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">build</span><span class="token punctuation">:</span>  context<span class="token punctuation">:</span>./dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><p>使用此dockerfile文件来构建，必须使用context指定构建路径</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">build</span><span class="token punctuation">:</span>  context<span class="token punctuation">:</span>.    <span class="token comment" spellcheck="true"># 知道dockerfile必须要有构建路径,.表示当前路径</span>  dockerfile<span class="token punctuation">:</span>Dockerfile<span class="token punctuation">-</span>alternate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>指定docker-compose启动容器服务的镜像，可以是存储仓库、标签以及镜像ID，如果镜像不存在，Compose会自动拉去镜像</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span><span class="token number">14.04</span><span class="token key atrule">image</span><span class="token punctuation">:</span> tutum/influxdb<span class="token key atrule">image</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>registry.com<span class="token punctuation">:</span>4000/postgresql<span class="token key atrule">image</span><span class="token punctuation">:</span> a4bc65fd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><p>覆盖容器启动后默认执行的命令</p><pre class="line-numbers language-yaml"><code class="language-yaml">command<span class="token punctuation">:</span>bundle exec thin <span class="token punctuation">-</span>p 3000command<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"bundle"</span><span class="token punctuation">,</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"thin"</span><span class="token punctuation">,</span><span class="token string">"-p"</span><span class="token punctuation">,</span><span class="token string">"3000"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h2><p>指定容器名称，由于容器名称是唯一的，如果指定自定义名称，则无法使用scale</p><pre class="line-numbers language-yaml"><code class="language-yaml">container_name<span class="token punctuation">:</span>my<span class="token punctuation">-</span>web<span class="token punctuation">-</span>container<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h2><p>添加环境变量，可以使用数组或字典。这个标签的作用是设置镜像变量，它可以保存变量到镜像里面，类似ENV指令一样会把变量一直保存在镜像、容器中</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">environment</span><span class="token punctuation">:</span>  RACK_ENV<span class="token punctuation">:</span>development  SHOW<span class="token punctuation">:</span><span class="token string">'true'</span>  <span class="token key atrule">SESSION_SECRET</span><span class="token punctuation">:</span><span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span>RACK_ENV=development  <span class="token punctuation">-</span>SHOW=true  <span class="token punctuation">-</span>SESSION_SECRET<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h2><p>加入指定网络</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">networks</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> lnmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h2><p>映射端口</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span><span class="token string">"3000"</span>  <span class="token punctuation">-</span><span class="token string">"3000-3005"</span>  <span class="token punctuation">-</span><span class="token string">"8000:8000"</span>  <span class="token punctuation">-</span><span class="token string">"9090-9091:8080-8081"</span>  <span class="token punctuation">-</span><span class="token string">"49100:22"</span>  <span class="token punctuation">-</span><span class="token string">"127.0.0.1:8001:8001"</span>  <span class="token punctuation">-</span><span class="token string">"127.0.0.1:5000-5010:5000-5010"</span>        <span class="token comment" spellcheck="true"># 指定IP+端口的话只会监听ipv4的地址</span>  <span class="token punctuation">-</span><span class="token string">"6060:6060/udp"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h2><p>暴露端口，但不映射到宿主机，只被连接的服务访问。这个标签与Dockerfile中的EXPOSE指令一样，用于指定暴露的端口，实际上docker-compose.yml的端口映射还得ports这样的标签</p><h2 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h2><p>添加主机名的标签，就是往/etc/hosts文件中添加一些记录，与Docker客户端中的–add-host类似</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span><span class="token string">"www.missf.top:124.156.205.241"</span>  <span class="token punctuation">-</span><span class="token string">"mf_missf.gitee.io:212.64.62.174"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h2><p>挂载一个目录或者一个已存在的数据卷容器</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> /opt/data<span class="token punctuation">:</span>/var/lib/mysql        <span class="token comment" spellcheck="true"># 挂载宿主机的/opt/data目录到容器的/var/lib/mysql</span>  <span class="token punctuation">-</span> datavolume<span class="token punctuation">:</span>/var/lib/mysq    <span class="token comment" spellcheck="true"># 将容器的/var/lib/mysq挂载到datavolume数据卷</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h2><p>默认值为 no ，即在任何情况下都不会重新启动容器。当值为 always 时，容器总是重新启动。当值为on-failure时，当出现on-failure报错容器退出时，容器重新启动。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">restart</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span class="token key atrule">restart</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure<span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><p>定义容器主机名</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">hostname</span><span class="token punctuation">:</span> foo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Compose-常用选项与命令"><a href="#Compose-常用选项与命令" class="headerlink" title="Compose 常用选项与命令"></a>Compose 常用选项与命令</h1><h2 id="up"><a href="#up" class="headerlink" title="up"></a>up</h2><p>该命令十分强大，它将尝试自动完成包括构建镜像，创建服务，启动服务，并关联服务相关容器的一系列操作</p><p>up选项如下:</p><p>-d: 在后台运行服务容器</p><p>–force-recreate: 强制重新创建容器，不能与–no-recreate同时使用</p><p>–no-recreate: 如果容器已经存在了，则不重新创建，不能与–force-recreate同时使用</p><p>-no-build: 不自动构建缺失的服务镜像</p><p>–no-deps: 不启动服务所链接的容器</p><h2 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h2><p>可以随时在项目目录下运行docker-compose build来重新构建服务</p><p>build选项如下:</p><p>–force-rm: 删除构建过程中的临时容器</p><p>–no-cache: 构建镜像过程中不使用cache(这将加长构建过程)</p><p>–pull: 始终尝试通过pull来获取更新版本的镜像</p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>列出项目中目前的所有容器</p><p>ps选项如下:</p><p>-q: 只打印容器的ID信息</p><h2 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h2><p>查看服务容器的输出，默认情况下，docker-compose将对不同的服务输出使用不同的颜色来区分</p><pre class="line-numbers language-shell"><code class="language-shell">docker-compose logs [选项]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>删除所有(停止状态的)服务容器，推荐先执行docker-compose stop命令来停止容器</p><p>rm选项如下:</p><p>-f/–force: 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项</p><p>-v: 删除容器所挂载的数据卷</p><h2 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h2><p>设置指定服务运行的容器个数</p><pre class="line-numbers language-shell"><code class="language-shell">docker-compose scale web=3 db=2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="down"><a href="#down" class="headerlink" title="down"></a>down</h2><p>删除容器、网络</p><h2 id="start-stop-restart"><a href="#start-stop-restart" class="headerlink" title="start/stop/restart"></a>start/stop/restart</h2><p>启动/停止/重启服务</p><h1 id="docker-compose编排lnmp容器"><a href="#docker-compose编排lnmp容器" class="headerlink" title="docker-compose编排lnmp容器"></a>docker-compose编排lnmp容器</h1><h2 id="docker-compose目录设计"><a href="#docker-compose目录设计" class="headerlink" title="docker-compose目录设计"></a>docker-compose目录设计</h2><pre class="line-numbers language-shell"><code class="language-shell">tree /docker-compose_lnmp//docker-compose_lnmp/├── docker-compose.yaml├── mysql│   └── start├── nginx│   ├── Dockerfile│   ├── nginx-1.16.1.tar.gz│   ├── nginx.conf│   ├── php.conf│   └── start└── php    ├── Dockerfile    ├── php-7.4.0.tar.gz    ├── php-fpm.conf    ├── php.ini    ├── start    └── www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">php</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> php    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./php      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmp"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"nginx:/usr/local/nginx/html"</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./nginx      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"80:80"</span>      <span class="token punctuation">-</span> <span class="token string">"443:443"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmp"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"nginx:/usr/local/nginx/html/"</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"53306:3306"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmp"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"mysql:/var/lib/mysql/"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> mwj123456      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> wordpress<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">lnmp</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 把php代码放到这个数据卷的目录下</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="docker-compose编排nginx反向代理tomcat集群"><a href="#docker-compose编排nginx反向代理tomcat集群" class="headerlink" title="docker-compose编排nginx反向代理tomcat集群"></a>docker-compose编排nginx反向代理tomcat集群</h1><h2 id="docker-compose目录设计-1"><a href="#docker-compose目录设计-1" class="headerlink" title="docker-compose目录设计"></a>docker-compose目录设计</h2><pre class="line-numbers language-shell"><code class="language-shell">tree /docker-compose_lnmt//docker-compose_lnmt/├── docker-compose.yaml├── nginx│   ├── Dockerfile│   ├── nginx-1.16.1.tar.gz│   ├── nginx.conf│   ├── start│   └── tomcat.conf└── tomcat    ├── apache-tomcat-8.5.57.tar.gz    ├── Dockerfile    ├── jdk-8u211-linux-x64.tar.gz    └── start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-compose-yaml-1"><a href="#docker-compose-yaml-1" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h2><pre class="line-numbers language-yaml"><code class="language-yaml">cat docker<span class="token punctuation">-</span>compose.yaml <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./nginx      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"80:80"</span>      <span class="token punctuation">-</span> <span class="token string">"443:443"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmt"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"webapps:/usr/local/tomcat/webapps/"</span>  <span class="token key atrule">tomcat1</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> tomcat1    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./tomcat      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmt"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"webapps:/usr/local/tomcat/webapps/"</span>  <span class="token key atrule">tomcat2</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> tomcat2    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./tomcat      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmt"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"webapps:/usr/local/tomcat/webapps/"</span>  <span class="token key atrule">tomcat3</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> tomcat3    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./tomcat      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmt"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"webapps:/usr/local/tomcat/webapps/"</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"53306:3306"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmt"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"mysql:/var/lib/mysql/"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> mwj123456      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> test<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">webapps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 把war包放到这个数据卷的目录下,就会自动解压</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">lnmt</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="监听Nginx容器访问日志"><a href="#监听Nginx容器访问日志" class="headerlink" title="监听Nginx容器访问日志"></a>监听Nginx容器访问日志</h2><pre class="line-numbers language-shell"><code class="language-shell">tail -f /usr/local/nginx/logs/access.log     # 点击浏览器刷新页面,可以看到upstream_addr的IP变化,这样就实现了反向代理Tomcat集群{"@timestamp": "2020-07-14T08:03:19+08:00", "clientRealIp": "10.10.110.1", "scheme": "http", "method": "GET", "host": "10.10.110.150", "url": "/", "size": 1056, "referrer": "-", "agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36", "upstream_addr": "192.168.16.3:8080", "request_time": 0.323, "request_length": 450, "upstream_connect_time": "0.003", "upstream_response_time": "0.324", "upstream_status": "200", "status": "200"}{"@timestamp": "2020-07-14T08:03:28+08:00", "clientRealIp": "10.10.110.1", "scheme": "http", "method": "GET", "host": "10.10.110.150", "url": "/", "size": 1056, "referrer": "-", "agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36", "upstream_addr": "192.168.16.6:8080", "request_time": 0.345, "request_length": 450, "upstream_connect_time": "0.000", "upstream_response_time": "0.345", "upstream_status": "200", "status": "200"}{"@timestamp": "2020-07-14T08:03:29+08:00", "clientRealIp": "10.10.110.1", "scheme": "http", "method": "GET", "host": "10.10.110.150", "url": "/", "size": 1056, "referrer": "-", "agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36", "upstream_addr": "192.168.16.4:8080", "request_time": 0.355, "request_length": 450, "upstream_connect_time": "0.000", "upstream_response_time": "0.354", "upstream_status": "200", "status": "200"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-Compose-概述&quot;&gt;&lt;a href=&quot;#Docker-Compose-概述&quot; class=&quot;headerlink&quot; title=&quot;Docker Compose 概述&quot;&gt;&lt;/a&gt;Docker Compose 概述&lt;/h1&gt;&lt;p&gt;Compose是用于
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Docker图形化页面管理(8)</title>
    <link href="https://www.missf.top/post/92368be2.html"/>
    <id>https://www.missf.top/post/92368be2.html</id>
    <published>2020-07-10T02:03:55.000Z</published>
    <updated>2020-07-14T01:21:39.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker图形化页面管理"><a href="#Docker图形化页面管理" class="headerlink" title="Docker图形化页面管理"></a>Docker图形化页面管理</h1><h2 id="Portainer概述"><a href="#Portainer概述" class="headerlink" title="Portainer概述"></a>Portainer概述</h2><p>Portainer是Docker的图形化管理工具，portainer通过连接/var/run/docker.sock文件去管理容器，可让你轻松管理不同的Docker环境(Docker主机或Swarm群集)。Portainer提供状态显示面板、应用模板快速部署、容器镜像网络数据卷、事件日志显示、容器控制台操作、登录用户管理和控制等功能。Docker图形化管理界面有很多实现的工具，但生态一直不温不火，这是由于Docker的很多操作都是直接在命令行进行，再加上Docker的操作也比较简单。一般这样的图形化管理平台都是交给开发和测试人员去使用的</p><h2 id="Portainer安装"><a href="#Portainer安装" class="headerlink" title="Portainer安装"></a>Portainer安装</h2><pre class="line-numbers language-shell"><code class="language-shell">docker run -d -p 8000:8000 -p 9000:9000 --name "portainer" --restart=always \-v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer    # 这里portainer通过连接/var/run/docker.sock文件去管理容器,所以需要把宿主机的docker.sock文件挂载到portainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="登录Portainer页面"><a href="#登录Portainer页面" class="headerlink" title="登录Portainer页面"></a>登录Portainer页面</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f07e05614195aa594bd5076.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Portainer连接容器的方式"><a href="#Portainer连接容器的方式" class="headerlink" title="Portainer连接容器的方式"></a>Portainer连接容器的方式</h2><p>Local:管理Portainer所在主机上的Docker主机，需要将宿主机的docker.sock文件挂载到Portainer容器内</p><p>Remote:管理远程主机上的Docker主机，但是要开启远程的Docker主机的Docker API，允许Portainer通过TCP连接</p><p>Agent:直接连接到在Swarm集群中运行的Portainer代理</p><p>Azure:连接到Microsoft Azure</p><p>这里我们先使用Local的方式连接到Portainer所在的主机</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f07e0c714195aa594bd6b94.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Portainer管理界面"><a href="#Portainer管理界面" class="headerlink" title="Portainer管理界面"></a>Portainer管理界面</h2><p>通过下图可以看到Portainer提供了对容器、镜像、网络、数据卷、变量、主机的操作，App templates是一些供我们下载的公共镜像，我们还可以看到正在运行的容器状态、日志、基于镜像、创建时间、映射端口等</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f07e77714195aa594bf164b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Portainer连接远程Docker主机"><a href="#Portainer连接远程Docker主机" class="headerlink" title="Portainer连接远程Docker主机"></a>Portainer连接远程Docker主机</h2><p>首先需要在远程Docker主机上开启Docker API</p><pre class="line-numbers language-shell"><code class="language-shell">vim /usr/lib/systemd/system/docker.serviceExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375    # 表示所有地址都能连接到Docker API,也可以指定IP连接,默认端口是2375systemctl daemon-reloadsystemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在Portainer再创建一个连接远程Docker主机API的节点</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f08078d14195aa594c7af99.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时候我们可以使用Portainer去管理本地和远程主机上的Docker资源了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f0807e114195aa594c7cc1f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker图形化页面管理&quot;&gt;&lt;a href=&quot;#Docker图形化页面管理&quot; class=&quot;headerlink&quot; title=&quot;Docker图形化页面管理&quot;&gt;&lt;/a&gt;Docker图形化页面管理&lt;/h1&gt;&lt;h2 id=&quot;Portainer概述&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Docker企业级镜像仓库Harbor(7)</title>
    <link href="https://www.missf.top/post/d46af348.html"/>
    <id>https://www.missf.top/post/d46af348.html</id>
    <published>2020-07-08T05:33:50.000Z</published>
    <updated>2020-07-21T01:44:09.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Harbor-概述"><a href="#Harbor-概述" class="headerlink" title="Harbor 概述"></a>Harbor 概述</h1><p>Harbor是由VMWare公司开源的容器镜像仓库。事实上，Harbor是在Docker Registry上进行了相应的企业级扩展，从而获得了更加广泛的应用，这些新的企业级特性包括：管理用户界面，基于角色的访问控制 ，AD/LDAP集成以及审计日志等，足以满足基本企业需求</p><p><a href="https://goharbor.io/" target="_blank" rel="noopener">Harbor 官网</a></p><p><a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">Harbor GitHub 地址</a></p><h1 id="Harbor-部署条件"><a href="#Harbor-部署条件" class="headerlink" title="Harbor 部署条件"></a>Harbor 部署条件</h1><h2 id="服务器硬件配置"><a href="#服务器硬件配置" class="headerlink" title="服务器硬件配置"></a>服务器硬件配置</h2><p>最低要求:CPU2核/内存4G/硬盘40GB</p><p>推荐:CPU4核/内存8G/硬盘160GB</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>Docker 17.06版本+ </p><p>Docker Compose 1.18版本+</p><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><p>在线安装:从Docker Hub下载Harbor相关镜像，因此安装软件包非常小 </p><p>离线安装:安装包包含部署的相关镜像，因此安装包比较大</p><h1 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h1><h2 id="下载二进制文件"><a href="#下载二进制文件" class="headerlink" title="下载二进制文件"></a>下载二进制文件</h2><pre class="line-numbers language-shell"><code class="language-shell">https://github.com/docker/compose/releases    # docker-compose下载地址# 下载docker-compose-Linux-x86_64这个二进制文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置二进制文件"><a href="#配置二进制文件" class="headerlink" title="配置二进制文件"></a>配置二进制文件</h2><pre class="line-numbers language-shell"><code class="language-shell">mv docker-compose-Linux-x86_64 /usr/bin/docker-composechmod +x /usr/bin/docker-composedocker-compose --help  # 安装完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Harbor-HTTP部署"><a href="#Harbor-HTTP部署" class="headerlink" title="Harbor HTTP部署"></a>Harbor HTTP部署</h1><h2 id="下载Harbor安装包"><a href="#下载Harbor安装包" class="headerlink" title="下载Harbor安装包"></a>下载Harbor安装包</h2><pre class="line-numbers language-shell"><code class="language-shell">wget https://github.com/goharbor/harbor/releases/download/v2.0.1/harbor-offline-installer-v2.0.1.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h2><pre class="line-numbers language-shell"><code class="language-shell">tar xf harbor-offline-installer-v2.0.1.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><pre class="line-numbers language-shell"><code class="language-shell">cp harbor.yml.tmpl harbor.ymlvim harbor.ymlhostname: reg.missf.com        # 修改Harbor默认域名https:     # 先注释https相关配置harbor_admin_password: MF-yihan        # 修改Harbor的密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部署Harbor"><a href="#部署Harbor" class="headerlink" title="部署Harbor"></a>部署Harbor</h2><pre class="line-numbers language-shell"><code class="language-shell">./prepare    # 做一系列的准备工作./install.sh    # 利用docker-compose拉取一系列的镜像,安装好之后就会直接启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="访问Harbor"><a href="#访问Harbor" class="headerlink" title="访问Harbor"></a>访问Harbor</h2><pre class="line-numbers language-shell"><code class="language-shell"># 通过本地电脑配置hosts,然后在浏览器访问我们的域名reg.missf.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>{% image https://pic.imgdb.cn/item/5f05980114195aa5940c513f.jpg '' '' %}<h2 id="登录Harbor"><a href="#登录Harbor" class="headerlink" title="登录Harbor"></a>登录Harbor</h2><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/hosts    # 添加解析,登录时可以直接访问域名10.10.110.151 reg.missf.comvim /etc/docker/daemon.json     # 配置域名可信任,因为现在没有配置https,而docker默认是使用https协议去连接的,不配置不能登录成功{        "registry-mirrors": ["https://265wemgl.mirror.aliyuncs.com"],        "insecure registries": ["reg.missf.com"]}systemctl restart docker.service    # 修改了daemon.json需要重启dockerdocker-compose down && docker-compose up -d        # 重启docker之后容器有些会退出,重启harbor重启把容器拉起来 docker login reg.missf.com    # 登录成功Username: adminPassword: WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="推送镜像到Harbor仓库"><a href="#推送镜像到Harbor仓库" class="headerlink" title="推送镜像到Harbor仓库"></a>推送镜像到Harbor仓库</h2><pre class="line-numbers language-shell"><code class="language-shell">docker tag nginx:1.0 reg.missf.com/library/nginx:1.0    # 推送之前修改镜像的标签(镜像中心/项目/镜像:标签)docker push reg.missf.com/library/nginx:1.0        # 推送镜像，pull拉取镜像也是使用这个标签去拉取The push refers to repository [reg.missf.com/library/nginx]b1b653ec37ba: Pushed fe503a975c26: Pushed 60165efe909a: Pushed e098d2f9f0dd: Pushed ae9b67129281: Pushed d2039520c249: Pushed 034f282942cd: Pushed 1.0: digest: sha256:a4c155ecb6b7eee5d332764057c29a74d8965de19f9d739f1792cf479c2bf030 size: 1786<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看Harbor上推送成功的镜像"><a href="#查看Harbor上推送成功的镜像" class="headerlink" title="查看Harbor上推送成功的镜像"></a>查看Harbor上推送成功的镜像</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f068ad814195aa5945965c5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Harbor-HTTPS部署"><a href="#Harbor-HTTPS部署" class="headerlink" title="Harbor HTTPS部署"></a>Harbor HTTPS部署</h1><p>由于Harbor不附带任何证书，它默认使用HTTP来提供注册表请求。但是强烈建议为生产环境配置ssl证书。这里我们由于是实验测试，使用自签名证书，到时候生产环境配置可以去阿里云购买ssl证书。</p><h2 id="生成自签名ssl证书"><a href="#生成自签名ssl证书" class="headerlink" title="生成自签名ssl证书"></a>生成自签名ssl证书</h2><p>由于kubernetes使用cfssl自签证书,这里我们也使用cfssl生成自签证书</p><pre class="line-numbers language-shell"><code class="language-shell"># 执行这个脚本,安装cfssl并将命令放到/usr/bin/下供我们直接使用cat cfssl.sh     wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64chmod +x cfssl*mv cfssl_linux-amd64 /usr/bin/cfsslmv cfssljson_linux-amd64 /usr/bin/cfssljsonmv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo# 执行这个脚本,生成两个json的ca配置文件并自动生成证书,cfssl是根据json的配置文件去生成ca证书的cat certs.sh     cat > ca-config.json <<EOF{  "signing": {    "default": {      "expiry": "87600h"    },    "profiles": {      "kubernetes": {         "expiry": "87600h",         "usages": [            "signing",            "key encipherment",            "server auth",            "client auth"        ]      }    }  }}EOFcat > ca-csr.json <<EOF{    "CN": "kubernetes",    "key": {        "algo": "rsa",        "size": 2048    },    "names": [        {            "C": "CN",            "L": "Beijing",            "ST": "Beijing"        }    ]}EOFcfssl gencert -initca ca-csr.json | cfssljson -bare ca -    # 初始化ca配置文件cat > reg.missf.com-csr.json <<EOF{  "CN": "reg.missf.com",  "hosts": [],  "key": {    "algo": "rsa",    "size": 2048  },  "names": [    {      "C": "CN",      "L": "BeiJing",      "ST": "BeiJing"    }  ]}EOFcfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes reg.missf.com-csr.json | cfssljson -bare reg.missf.com    # 生成ca证书# 执行完上面两个脚本之后我们会得到下面这两个文件reg.missf.com-key.pemreg.missf.com.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Harbor启用HTTPS"><a href="#Harbor启用HTTPS" class="headerlink" title="Harbor启用HTTPS"></a>Harbor启用HTTPS</h2><pre class="line-numbers language-shell"><code class="language-shell">https:  # https port for harbor, default is 443  port: 443  # The path of cert and key files for nginx  certificate: /root/ssh/reg.missf.com.pem  private_key: /root/ssh/reg.missf.com-key.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重新配置并部署Harbor"><a href="#重新配置并部署Harbor" class="headerlink" title="重新配置并部署Harbor"></a>重新配置并部署Harbor</h2><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart docker.service./preparedocker-compose downdocker-compose up –d    # 重新打开Harbor页面会自动跳转到https,但是由于是自签证书,所以仍会显示不安全<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他Docker主机连接Harbor仓库"><a href="#其他Docker主机连接Harbor仓库" class="headerlink" title="其他Docker主机连接Harbor仓库"></a>其他Docker主机连接Harbor仓库</h2><p>一般Harbor仓库都是自己公司内部使用,但是有时候也会开放给别的Docker主机去pull镜像，如果其他的Docker主机需要连接Harbor，必须要有证书才能连接</p><pre class="line-numbers language-shell"><code class="language-shell"># 复制Harbor主机的证书到需要连接Harbor仓库的Docker主机上mkdir -p /etc/docker/certs.d/reg.missf.com/        # 在Docker主机上创建目录cp reg.missf.com.pem /etc/docker/certs.d/reg.missf.com/reg.missf.com.crt    # 将Harbor主机的证书复制到Docker主机echo "10.10.110.151 reg.missf.com" >> /etc/hosts    # 这里由于是实验环境,需要配置域名解析docker login reg.missf.com    # 在其他的docker主机登录到Harbor,就可以pull拉取Harbor仓库的镜像了Username: adminPassword: WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Harbor主从复制"><a href="#Harbor主从复制" class="headerlink" title="Harbor主从复制"></a>Harbor主从复制</h1><h2 id="Harbor主从复制的三种方式"><a href="#Harbor主从复制的三种方式" class="headerlink" title="Harbor主从复制的三种方式"></a>Harbor主从复制的三种方式</h2><p>学习过MySQL主从的同学可以看出，其实Harbor的主从复制和MySQL的主从复制方式非常相似</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f06efe214195aa59476a2a7.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="主节点的仓库管理新建目标"><a href="#主节点的仓库管理新建目标" class="headerlink" title="主节点的仓库管理新建目标"></a>主节点的仓库管理新建目标</h2><p>新建一个目标，就代表本地Harbor可以连接到这个远程Harbor，当我们配置复制管理的目的Registry时，可以从新建目标里面填写复制镜像到那个Harbor节点</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f06ef9014195aa5947687f2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="主节点的复制管理新建规则"><a href="#主节点的复制管理新建规则" class="headerlink" title="主节点的复制管理新建规则"></a>主节点的复制管理新建规则</h2><p>配置复制模式和目的Registry，将本地Harbor主节点上的镜像(可以使用过滤器进行选择性推送)推送到备用Harbor节点上</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f07bcfc14195aa594b4097d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="推送验证"><a href="#推送验证" class="headerlink" title="推送验证"></a>推送验证</h2><p>这时候只有有镜像被推送到Harbor的主节点，那么Harbor主节点就会把镜像push到Harbor的备用节点，可以查看复制记录</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f07c1be14195aa594b536af.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Harbor运行维护"><a href="#Harbor运行维护" class="headerlink" title="Harbor运行维护"></a>Harbor运行维护</h1><h2 id="Harbor容器功能介绍"><a href="#Harbor容器功能介绍" class="headerlink" title="Harbor容器功能介绍"></a>Harbor容器功能介绍</h2><table><thead><tr><th>容器</th><th>功能</th></tr></thead><tbody><tr><td>harbor-core</td><td>配置管理中心</td></tr><tr><td>harbor-jobservice</td><td>负责镜像复制</td></tr><tr><td>harbor-log</td><td>记录操作日志</td></tr><tr><td>harbor-portal</td><td>Web管理页面和API</td></tr><tr><td>harbor-db</td><td>PG数据库</td></tr><tr><td>registryctl</td><td>镜像存储</td></tr><tr><td>nginx</td><td>前端代理，负责前端页面和镜像上传/下载转发</td></tr><tr><td>redis</td><td>会话</td></tr></tbody></table><p>Harbor容器数据持久化目录:/data(这个目录需要定时备份)</p><p>日志文件目录:/var/log/harbor</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Harbor-概述&quot;&gt;&lt;a href=&quot;#Harbor-概述&quot; class=&quot;headerlink&quot; title=&quot;Harbor 概述&quot;&gt;&lt;/a&gt;Harbor 概述&lt;/h1&gt;&lt;p&gt;Harbor是由VMWare公司开源的容器镜像仓库。事实上，Harbor是在Dock
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile定制容器镜像(6)</title>
    <link href="https://www.missf.top/post/44241b5a.html"/>
    <id>https://www.missf.top/post/44241b5a.html</id>
    <published>2020-06-30T05:33:50.000Z</published>
    <updated>2020-07-30T08:23:20.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile-介绍"><a href="#Dockerfile-介绍" class="headerlink" title="Dockerfile 介绍"></a>Dockerfile 介绍</h1><p>Dockerfile是由一行一行的命令语句组成，并且从上到下执行，支持以#注释行。一般Dockerfile的内容分为四个部分，基础镜像信息、维护者信息、镜像操作指令、容器启动时执行指令</p><h1 id="Dockerfile-常用指令"><a href="#Dockerfile-常用指令" class="headerlink" title="Dockerfile 常用指令"></a>Dockerfile 常用指令</h1><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>FROM</td><td>指定构建新镜像时是基于那个镜像，Dockerfile的第一条指令必须为FROM指令，如果在同一个Dockerfile中创建多个镜像可以使用多个FROM指令</td></tr><tr><td>LABEL</td><td>为镜像添加标签</td></tr><tr><td>RUN</td><td>每条RUN指令将在当前镜像的基础上执行指定shell命令，并提交为新的镜像</td></tr><tr><td>COPY</td><td>拷贝宿主机(Dockerfile所在目录的相对路径)的文件或目录到镜像中</td></tr><tr><td>ADD</td><td>复制指定的&lt;src&gt;到容器中的&lt;dest&gt;，&lt;src&gt;可以是Dockerfile所在目录的文件或目录，可以是一个URL，还可以是一个tar文件(自动解压缩)</td></tr><tr><td>ENV</td><td>指定一个环境变量，会被后续RUN指令使用，并在容器运行时保持</td></tr><tr><td>USER</td><td>指定运行容器时的用户名或UID，后续的RUN也会使用指定用户</td></tr><tr><td>EXPOSE</td><td>声明容器运行的服务端口，启动容器时可以将这些端口转发到宿主机或者指定宿主机那个端口映射过来</td></tr><tr><td>WORKDIR</td><td>为后续的RUN、CMD、ENTRYPOINT指令配置工作目录</td></tr><tr><td>VOLUME</td><td>在镜像中创建挂载点，这样只要通过该镜像创建的容器都有了挂载点，查看容器详细信息可以看到容器挂载点映射到宿主机的目录</td></tr><tr><td>CMD</td><td>容器启动时执行指令，每个Dockerfile只能有一条CMD指令，如果有多个CMD指令只有最后一个生效</td></tr><tr><td>ENTRYPOINT</td><td>ENTRYPOINT如果与CMD一起使用，CMD将作为ENTRYPOINT的默认参数，如果有多个ENTRYPOINT指令只有最后一个生效</td></tr></tbody></table><h1 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h1><h2 id="Dockerfile-demo"><a href="#Dockerfile-demo" class="headerlink" title="Dockerfile demo"></a>Dockerfile demo</h2><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># This dockerfile demo for project build to docker imagesFROM centos:7LABEL maintainer www.missf.topUSER rootRUN yum install -y nginxEXPOSE 80 443VOLUME ["/usr/local/nginx/"]CMD ["/usr/local/nginx/bin"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker-build构建镜像"><a href="#Docker-build构建镜像" class="headerlink" title="Docker build构建镜像"></a>Docker build构建镜像</h2><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># 在Dockerfile所在的目录下构建镜像,后面的"."表示当前目录docker build -t demo:1.0 .# 构建过程如下Sending build context to Docker daemon  2.048kBStep 1/8 : FROM centos:77: Pulling from library/centos524b0c1e57f8: Pull complete Digest: sha256:e9ce0b76f29f942502facd849f3e468232492b259b9d9f076f71b392293f1582Status: Downloaded newer image for centos:7 ---> b5b4d78bc90cStep 2/8 : LABEL maintainer mownejie ---> Running in 7dbcab7ef3ceRemoving intermediate container 7dbcab7ef3ce ---> 4db1e9da6977Step 3/8 : ENV JAVA_HOME /usr/local/java ---> Running in b896cedee458Removing intermediate container b896cedee458 ---> f8991838d97eStep 4/8 : USER root ---> Running in 8252457198f0Removing intermediate container 8252457198f0 ---> 96ef213928adStep 5/8 : RUN yum install -y nginx ---> Running in 8807973810c5......# -t 指定这个镜像的tag# -f 指定这个Dockerfile文件的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CMD-与-ENTRYPOINT-区别"><a href="#CMD-与-ENTRYPOINT-区别" class="headerlink" title="CMD 与 ENTRYPOINT 区别"></a>CMD 与 ENTRYPOINT 区别</h1><h2 id="CMD用法"><a href="#CMD用法" class="headerlink" title="CMD用法"></a>CMD用法</h2><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># exec形式,首选形式,传参不支持引用变量CMD ["executable", "param1", "param2"]# CMD作为ENTRYPOINT的默认参数CMD ["param1", "param2"]# Shell形式CMD command param1 param2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ENTRYPOINT用法"><a href="#ENTRYPOINT用法" class="headerlink" title="ENTRYPOINT用法"></a>ENTRYPOINT用法</h2><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">ENTRYPOINT ["executable", "param1", "param2"]    # 假如配合CMD一起使用,那么["param1", "param2"]可以写在CMD作为ENTRYPOINT的默认参数ENTRYPOINT command param1 param2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre class="line-numbers language-shell"><code class="language-shell">1. CMD和ENTRYPOINT指令都可以用来定义运行容器时所使用的命令2. Dockerfile至少指定一个CMD或ENTRYPOINT3. CMD可以用作ENTRYPOINT默认参数，或者用作容器的默认命令4. docker run启动容器时指定<command>，将会覆盖dockerfile定义的CMD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="构建Nginx容器镜像"><a href="#构建Nginx容器镜像" class="headerlink" title="构建Nginx容器镜像"></a>构建Nginx容器镜像</h1><h2 id="dockerfile内容"><a href="#dockerfile内容" class="headerlink" title="dockerfile内容"></a>dockerfile内容</h2><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM centos:7.7.1908LABEL maintainer www.missf.topRUN yum install -y gcc gcc-c++ make \    openssl-devel pcre-devel gd-devel \    iproute net-tools telnet wget curl && \    yum clean all && rm -rf /var/cache/yum/*ADD nginx-1.16.1.tar.gz /RUN cd nginx-1.16.1 && \    ./configure --user=nginx --group=nginx \    --prefix=/usr/local/nginx \    --with-http_stub_status_module \    --with-http_ssl_module \    --with-http_gzip_static_module \    --with-http_sub_module && \    make -j4 && make install && \    mkdir /usr/local/nginx/conf/vhost && \    cd / && rm -rf nginx* && \    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeRUN useradd -s /sbin/nologin nginxENV PATH $PATH:/usr/local/nginx/sbinENV LANG="en_US.utf8"COPY nginx.conf /usr/local/nginx/conf/nginx.confCOPY php.conf /usr/local/nginx/conf/vhost/php.confWORKDIR /usr/local/nginxEXPOSE 80 443CMD ["nginx", "-g", "daemon off;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost /Dockerfile/nginx]# lltotal 1028-rw-r--r-- 1 root root     890 Jul  6 18:58 Dockerfile-rw-r--r-- 1 root root 1032630 Jan 14 09:53 nginx-1.16.1.tar.gz-rw-r--r-- 1 root root    3297 Jul  6 18:46 nginx.conf-rw-r--r-- 1 root root     362 Jul  6 20:13 php.conf-rw-r--r-- 1 root root     128 Jul  6 18:51 start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="构建PHP容器镜像"><a href="#构建PHP容器镜像" class="headerlink" title="构建PHP容器镜像"></a>构建PHP容器镜像</h1><h2 id="dockerfile内容-1"><a href="#dockerfile内容-1" class="headerlink" title="dockerfile内容"></a>dockerfile内容</h2><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM centos:7.7.1908LABEL maintainer www.missf.topRUN yum install -y epel-release && \    yum install -y sqlite-devel libmcrypt-devel mhash-devel libxslt-devel \    libjpeg-devel libpng libpng-devel freetype freetype-devel \    libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel libjpeg \    glib2 glib2-develbzip2 bzip2-devel ncurses ncurses-devel \    curl-devel e2fsprogs e2fsprogs-devel krb5 gcc krb5-devel libidn \    openssl-devel libsqlite3x-devel oniguruma-devel openssl libidn-devel \    iproute net-tools telnet wget curl && \    yum clean all && rm -rf /var/cache/yum/*ADD php-7.4.0.tar.gz /RUN cd /php-7.4.0 && \    ./configure --prefix=/usr/local/php \    --with-config-file-path=/usr/local/php/etc \    --enable-opcache --with-curl --enable-fpm \    --enable-gd --with-iconv --enable-mbstring \    --with-mysqli --with-openssl --enable-static \    --enable-sockets --enable-inline-optimization \    --with-zlib --disable-ipv6 --disable-fileinfo \    --with-mcrypt --enable-hash --with-jpeg-dir --with-png-dir \    --with-freetype-dir --with-pdo-mysql --disable-debug && \    make -j 4 && make install && \    cp /php-7.4.0/php.ini-production /usr/local/php/etc/php.ini && \    cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf && \    cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf && \    sed -i "90a \daemonize = no" /usr/local/php/etc/php-fpm.conf && \    mkdir /usr/local/php/log && \    cd / && rm -rf php* && \    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeENV PATH $PATH:/usr/local/php/sbinENV LANG="en_US.utf8"COPY php.ini /usr/local/php/etc/COPY php-fpm.conf /usr/local/php/etc/COPY www.conf /usr/local/php/etc/php-fpm.d/WORKDIR /usr/local/phpEXPOSE 9000CMD ["php-fpm"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h2><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost /Dockerfile/php]# lltotal 16144-rw-r--r-- 1 root root     1758 Jul  6 18:53 Dockerfile-rw-r--r-- 1 root root 16418792 Jul  1 10:39 php-7.4.0.tar.gz-rw-r--r-- 1 root root     5394 Jul  1 21:51 php-fpm.conf-rw-r--r-- 1 root root    72953 Jul  1 22:09 php.ini-rw-r--r-- 1 root root       93 Jul  6 18:56 start-rw-r--r-- 1 root root    19616 Jul  6 18:53 www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="容器化搭建个人博客"><a href="#容器化搭建个人博客" class="headerlink" title="容器化搭建个人博客"></a>容器化搭建个人博客</h1><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><pre class="line-numbers language-shell"><code class="language-shell">docker network create lnmp    # 将多个容器加入到一个自定义网络<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建MySQL容器"><a href="#创建MySQL容器" class="headerlink" title="创建MySQL容器"></a>创建MySQL容器</h2><pre class="line-numbers language-shell"><code class="language-shell">docker volume create mysqldocker run -e MYSQL_ROOT_PASSWORD=mwj123456 -e MYSQL_DATABASE=wordpress -p 53306:3306 --name "mysql" --network lnmp --mount src=mysql,dst=/var/lib/mysql/ -d mysql:5.7# 将MySQL数据库的数据持久化到mysql这个数据卷<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建PHP容器"><a href="#创建PHP容器" class="headerlink" title="创建PHP容器"></a>创建PHP容器</h2><pre class="line-numbers language-shell"><code class="language-shell">docker volume create nginxdocker run --name php --network lnmp --mount src=nginx,dst=/usr/local/nginx/html/ -d php:1.0    # 这里先启动PHP容器再启动Nginx容器,因为Nginx要去连接PHP容器,如果PHP容器没有启动,那Nginx就因为无法连接到PHP所有退出了# 这里需要把Nginx代码也挂载到PHP容器内,而且容器内的路径要与Nginx配置文件路径一致# 因为Nginx配置文件将所有*.php的请求都通过fastcgi_pass代理到PHP容器去处理,所有需要把代码也挂载到PHP容器内,不然访问php文件会提示未找到文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建Nginx容器"><a href="#创建Nginx容器" class="headerlink" title="创建Nginx容器"></a>创建Nginx容器</h2><pre class="line-numbers language-shell"><code class="language-shell">docker container run --name "nginx" --mount src=nginx,dst=/usr/local/nginx/html --network lnmp -p 80:80 -p 443:443 -d nginx:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="部署WordPress代码"><a href="#部署WordPress代码" class="headerlink" title="部署WordPress代码"></a>部署WordPress代码</h2><pre class="line-numbers language-shell"><code class="language-shell">docker volume inspect nginx        # 先查看数据卷在宿主机上的目录,然后把代码解压到对应的目录下tar xf wordpress-5.4.2-zh_CN.tar.gz -C /var/lib/docker/volumes/nginx/_data/# 这时候通过访问宿主机的IP就能看到WordPress的安装页面了,如果无法对wp-config.php文件写入,就手动创建并写入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="构建Tomcat容器镜像"><a href="#构建Tomcat容器镜像" class="headerlink" title="构建Tomcat容器镜像"></a>构建Tomcat容器镜像</h1><h2 id="dockerfile内容-2"><a href="#dockerfile内容-2" class="headerlink" title="dockerfile内容"></a>dockerfile内容</h2><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM centos:7.7.1908LABEL maintainer www.missf.topADD jdk-8u211-linux-x64.tar.gz /usr/local/ADD apache-tomcat-8.5.57.tar.gz /usr/local/RUN mv /usr/local/jdk1.8.0_211 /usr/local/jdk && \    mv /usr/local/apache-tomcat-8.5.57 /usr/local/tomcat && \    rm -rf /usr/local/tomcat/webapps/*ENV JAVA_HOME /usr/local/jdkENV CLASSPATH ${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jarENV CATALINA_HOME /usr/local/tomcatENV PATH $PATH:${JAVA_HOME}/bin:${CATALINA_HOME}/lib:${CATALINA_HOME}/binRUN sed -i '1a JAVA_OPTS="-Djava.security.egd=file:/dev/./urandom"' ${CATALINA_HOME}/bin/catalina.sh && \    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeWORKDIR ${CATALINA_HOME}EXPOSE 8080CMD ["catalina.sh", "run"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="目录结构-2"><a href="#目录结构-2" class="headerlink" title="目录结构"></a>目录结构</h2><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost /Dockerfile/tomcat]# lltotal 200568-rw-r--r-- 1 root root  10379806 Jul  7 11:19 apache-tomcat-8.5.57.tar.gz-rw-r--r-- 1 root root       728 Jul  7 19:41 Dockerfile-rw-r--r-- 1 root root 194990602 Jul  2  2019 jdk-8u211-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部署测试代码"><a href="#部署测试代码" class="headerlink" title="部署测试代码"></a>部署测试代码</h2><pre class="line-numbers language-shell"><code class="language-shell">docker volume inspect tomcat    # 查看Tomcat容器代码目录持久化到宿主机的目录ll /var/lib/docker/volumes/tomcat/_data        # 放到这个目录的war包会被自动解压total 17840drwxr-x--- 4 root root       37 Jul  7 21:34 ROOT-rw-r--r-- 1 root root 18265402 Jun 20 13:08 ROOT.war<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="构建java微服务项目镜像"><a href="#构建java微服务项目镜像" class="headerlink" title="构建java微服务项目镜像"></a>构建java微服务项目镜像</h1><h2 id="dockerfile内容-3"><a href="#dockerfile内容-3" class="headerlink" title="dockerfile内容"></a>dockerfile内容</h2><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># 一个容器内只跑一个jar包FROM java:8-jdk-alpineLABEL maintainer www.missf.topENV JAVA_OPTS="$JAVA_OPTS -Dfile.encoding=UTF8 -Duser.timezone=GMT+08 -Xms128m -Xmx128m"RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories && \    apk add -U tzdata && \    mkdir /projects && \    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeCOPY hello.jar /projects/EXPOSE 8888CMD ["/bin/sh", "-c", "java -jar $JAVA_OPTS /projects/hello.jar"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Dockerfile-最佳实践"><a href="#Dockerfile-最佳实践" class="headerlink" title="Dockerfile 最佳实践"></a>Dockerfile 最佳实践</h1><h2 id="减少镜像层"><a href="#减少镜像层" class="headerlink" title="减少镜像层"></a>减少镜像层</h2><p>一次RUN指令形成新的一层镜像，shell命令尽量写在一行，减少镜像层</p><h2 id="优化镜像大小"><a href="#优化镜像大小" class="headerlink" title="优化镜像大小"></a>优化镜像大小</h2><p>在形成新的一层镜像之后，如果没有在同一层删除缓存或者没用的文件，那么这些文件都会被带到下一层，所有要在每一层清理对应的残留数据，减少镜像大小</p><h2 id="减少网络传输"><a href="#减少网络传输" class="headerlink" title="减少网络传输"></a>减少网络传输</h2><p>例如镜像所需要下载的软件包，mvn仓库</p><h2 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h2><p>代码编译、部署在一个Dockerfile完成，只会保留部署阶段产生的数据</p><h2 id="选择最小的基础镜像"><a href="#选择最小的基础镜像" class="headerlink" title="选择最小的基础镜像"></a>选择最小的基础镜像</h2><p>例如alpine</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Dockerfile-介绍&quot;&gt;&lt;a href=&quot;#Dockerfile-介绍&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile 介绍&quot;&gt;&lt;/a&gt;Dockerfile 介绍&lt;/h1&gt;&lt;p&gt;Dockerfile是由一行一行的命令语句组成，并且
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器网络(5)</title>
    <link href="https://www.missf.top/post/bc1d2f66.html"/>
    <id>https://www.missf.top/post/bc1d2f66.html</id>
    <published>2020-06-23T01:49:44.000Z</published>
    <updated>2020-07-14T01:20:15.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器的四种网络模式"><a href="#容器的四种网络模式" class="headerlink" title="容器的四种网络模式"></a>容器的四种网络模式</h1><h2 id="bridge-模式"><a href="#bridge-模式" class="headerlink" title="bridge 模式"></a>bridge 模式</h2><p>当启动docker进程之后，docker会默认创建一个名为docker0的虚拟网桥，创建容器时如果不指定网络，默认就是添加到这个网桥中。这样docker主机上的所有容器都可以通过交换机的方式连接在一个二层网络中。创建容器时，docker会先创建容器的虚拟网卡，容器的虚拟网卡去连接docker主机的docker0虚拟网桥，相当于用一根网线将容器和docker主机连接起来。虚拟网卡连接到docker0子网后，由docker0虚拟网桥分配IP给容器的虚拟网卡使用，并设置docker0虚拟网桥的IP地址为容器的默认网关。除了docker启动时默认创建的bridge默认网络，我们还可以自定义bridge网络。相比默认的具备内部DNS发现，bridge网络模式还可以通过容器名去实现容器之间的网络通信</p><p>查看docker宿主机上的docker0虚拟网桥，默认网段是172.17.0.1，安装docker之后默认创建的</p><pre class="line-numbers language-shell"><code class="language-shell">ip a s docker03: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:9f:dc:ee:74 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:9fff:fedc:ee74/64 scope link        valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看默认定义好的网络模式,这里没有container模式是因为container是启动容器时直接指定的</p><pre class="line-numbers language-shell"><code class="language-shell">docker network lsNETWORK ID          NAME                DRIVER              SCOPEa42d2b0e12ec        bridge              bridge              local168bbf4b0447        host                host                localec481d03e2a1        none                null                local21be62f7b97e        webserver           bridge              local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看bridge网络模式的详细信息</p><pre class="line-numbers language-shell"><code class="language-shell">docker network inspect bridge[    {        "Name": "bridge",        "Id": "a42d2b0e12ec0e039e7c4686099468585b88c8df8b639eaa780700980adb9e1b",        "Created": "2020-06-23T17:16:25.717600267+08:00",        "Scope": "local",        "Driver": "bridge",        "EnableIPv6": false,        "IPAM": {            "Driver": "default",            "Options": null,            "Config": [                {                    "Subnet": "172.17.0.0/16",                    "Gateway": "172.17.0.1"                }            ]        },        "Internal": false,        "Attachable": false,        "Ingress": false,        "ConfigFrom": {            "Network": ""        },        "ConfigOnly": false,        "Containers": {            "253d0d8f196182eccaa52238068513cebfbf2abe69d2a7980e40d8c136b53960": {                "Name": "nginx",                "EndpointID": "7fd4576f90bc1d0fd966ed5794710dd43461d077ea32f99e54a8b3c56ba1de08",                "MacAddress": "02:42:ac:11:00:02",                "IPv4Address": "172.17.0.2/16",                "IPv6Address": ""            },            "8652448b6f9a99d9b9a6c70277ea23924b21df57289d4deb29a146974ad4c4dd": {                "Name": "centos7",                "EndpointID": "e112927463f07a606a3a019f3af7400c711b9a903fec19c130b27c7d5f53d359",                "MacAddress": "02:42:ac:11:00:03",                "IPv4Address": "172.17.0.3/16",                "IPv6Address": ""            }        },        "Options": {            "com.docker.network.bridge.default_bridge": "true",            "com.docker.network.bridge.enable_icc": "true",            "com.docker.network.bridge.enable_ip_masquerade": "true",            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",            "com.docker.network.bridge.name": "docker0",            "com.docker.network.driver.mtu": "1500"        },        "Labels": {}    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装网桥管理工具包</p><pre class="line-numbers language-shell"><code class="language-shell">yum install -y bridge-utils.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看虚拟网桥上的接口信息</p><pre class="line-numbers language-shell"><code class="language-shell">brctl show docker0bridge name    bridge id                STP enabled        interfacesdocker0        8000.02429fdcee74        no                veth81bdc19                                                    vetha8f66a7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建类型为bridge的自定义网桥</p><pre class="line-numbers language-shell"><code class="language-shell">docker network create webserver21be62f7b97ebfc9ce6f6a1aaaffd59a4a220c6b778f36a98c72162023b5c5e5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动容器时指定使用自定义创建的webserver网桥(具备DNS发现)</p><pre class="line-numbers language-shell"><code class="language-shell">docker container run -itd --name "app1" --network webserver centos:7.7.1908 98efd7fb3c63c0bd487039b7ef00925d786e0499f10d76003afa2277cc93b404docker container run -itd --name "app2" --network webserver centos:7.7.1908 c81e58db50ca74111d46f460ff322378b45414a36804738597559ec3c06cf542docker container run -itd --name "app3" --network webserver centos:7.7.190841fb1a7dd161c03a158a104da54dcfa3b226035feceecabd003f7a18e91bff61<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看容器的IP地址</p><pre class="line-numbers language-shell"><code class="language-shell">docker inspect --format='{{.NetworkSettings.Networks.webserver.IPAddress}}' app1172.18.0.2docker inspect --format='{{.NetworkSettings.Networks.webserver.IPAddress}}' app2172.18.0.3docker inspect --format='{{.NetworkSettings.Networks.webserver.IPAddress}}' app3172.18.0.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>容器之间的通信测试，自定义的bridge网桥相比默认的bridge网桥具备内部DNS发现， IP和主机名都是可以PING通</p><pre class="line-numbers language-shell"><code class="language-shell">ping 172.18.0.2PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.203 ms64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.085 msping 98efd7fb3c63    # 如果启动容器时不指定自定义的网桥,那就会使用默认的bridge模式,这样是不能PING通主机名的PING 98efd7fb3c63 (172.18.0.2) 56(84) bytes of data.64 bytes from app1.webserver (172.18.0.2): icmp_seq=1 ttl=64 time=0.402 ms64 bytes from app1.webserver (172.18.0.2): icmp_seq=2 ttl=64 time=0.100 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="host模式"><a href="#host模式" class="headerlink" title="host模式"></a>host模式</h2><p>如果启动容器时指定host模式，那么这个容器将不会获得一个独立的Network namespace，而是和宿主机共用一个Network namespace。容器不会虚拟出自己的网卡，而是使用宿主机的IP和端口。这种无需NAT转换的网络模式无需再映射容器与宿主机之间的端口，在提高网络传输性能的同时，造成了网络环境隔离性弱化。容器之间不再拥有隔离独立的网络，docker host上已使用的端口就不能再用了</p><p>启动一个nginx容器，再查看宿主机上的80端口是否被使用</p><pre class="line-numbers language-shell"><code class="language-shell">docker container run -itd --name "host_nginx" --network=host nginx:1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看宿主机上的80端口是否被nginx容器所使用</p><pre class="line-numbers language-shell"><code class="language-shell">netstat -lntup | grep 80tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      7358/nginx: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看宿主机上nginx进程的父进程是否为docker</p><pre class="line-numbers language-shell"><code class="language-shell">ps -afx | grep containerd -A 1  1100 ?        Ssl    1:18 /usr/bin/containerd  7341 ?        Sl     0:00  \_ containerd-shim -namespace moby -workdir /var/lib/containerd/io.containerd.runtime.v1.linux/moby/adf66250b1fcd95c2531f04f8504bea614dd90903f4f074e150ce6202895a023 -address /run/containerd/containerd.sock -containerd-binary /usr/bin/containerd -runtime-root /var/run/docker/runtime-runc  7358 pts/0    Ss+    0:00      \_ nginx: master process nginx -g daemon off;    # 这个nginx进程是容器中启动的nginx进程,这也正如我们前面所说,使用host模式启动容器,容器会和宿主机共用一个Network namespace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进入容器中查看网卡信息，可以看到宿主机上的网卡也会显示，这就是共用了一个Network namespace的结果</p><pre class="line-numbers language-shell"><code class="language-shell">ifconfigbr-21be62f7b97e: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500        inet 172.18.0.1  netmask 255.255.0.0  broadcast 172.18.255.255        inet6 fe80::42:6fff:fe77:c9f0  prefixlen 64  scopeid 0x20<link>        ether 02:42:6f:77:c9:f0  txqueuelen 0  (Ethernet)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255        inet6 fe80::42:9fff:fedc:ee74  prefixlen 64  scopeid 0x20<link>        ether 02:42:9f:dc:ee:74  txqueuelen 0  (Ethernet)        RX packets 3  bytes 114 (114.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 8  bytes 677 (677.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0ens32: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 10.10.110.150  netmask 255.255.255.0  broadcast 10.10.110.255        inet6 fe80::20c:29ff:fec4:cbac  prefixlen 64  scopeid 0x20<link>        ether 00:0c:29:c4:cb:ac  txqueuelen 1000  (Ethernet)        RX packets 91694  bytes 118390130 (112.9 MiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 41857  bytes 2875558 (2.7 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10<host>        loop  txqueuelen 1000  (Local Loopback)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="none模式"><a href="#none模式" class="headerlink" title="none模式"></a>none模式</h2><p>容器启动时指定none模式是获取独立的Network namespace，但不为容器进行任何网络配置。容器内部只有loopback网络设备不会再有其他的网络资源，将网络创建的责任完全交给用户。作为 Docker 开发者，才能在这基础做其他无限多可能的网络定制开发，这种方式可以实现更加灵活复杂的网络，同时也体现了Docker设计理念的开放</p><p>启动一个none模式的容器</p><pre class="line-numbers language-shell"><code class="language-shell">docker container run -itd --name "none_centos" --network=none centos:7.7.1908<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器查看网卡设备信息</p><pre class="line-numbers language-shell"><code class="language-shell">docker container exec -it none_centos /bin/bashifconfig    # 这里只有一个回环口地址,因为none模式不会对容器进行任何网络配置lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10<host>        loop  txqueuelen 1000  (Local Loopback)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="container模式"><a href="#container模式" class="headerlink" title="container模式"></a>container模式</h2><p>创建新的容器时指定和已存在的容器共享一个Network namespace，这些容器之间共享IP、端口范围等网络配置，容器之间传输效率高。两个容器除了网络资源共享之外，其他资源还是隔离的。虽然多个容器共享网络环境，但是多个容器形成的整体依然与宿主机以及其他容器形成网络隔离</p><p>启动一个名为server1的容器</p><pre class="line-numbers language-shell"><code class="language-shell">docker container run -itd --name "server1" centos:7.7.1908<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再启动两个容器，把它们加入到server1这个容器的Network namespace</p><pre class="line-numbers language-shell"><code class="language-shell">docker container run -itd --name "server2" --network=container:server1 centos:7.7.1908docker container run -itd --name "server3" --network=container:server1 centos:7.7.1908<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看各个容器的IP地址</p><pre class="line-numbers language-shell"><code class="language-shell">docker inspect --format='{{.NetworkSettings.Networks.bridge.IPAddress}}' server1172.17.0.3docker inspect --format='{{.NetworkSettings.Networks.bridge.IPAddress}}' server2<no value>docker inspect --format='{{.NetworkSettings.Networks.bridge.IPAddress}}' server3<no value><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们在查看server2和server3容器IP时，显示为&lt;no value&gt;，其实它们是和server1共用一个Network namespace的</p><pre class="line-numbers language-shell"><code class="language-shell">docker container exec -it server2 /bin/bash[root@41436b0be6f7 /]# ifconfigeth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255        ether 02:42:ac:11:00:03  txqueuelen 0  (Ethernet)        RX packets 10969  bytes 20985758 (20.0 MiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 6234  bytes 344851 (336.7 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0docker container exec -it server3 /bin/bash[root@41436b0be6f7 /]# ifconfigeth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255        ether 02:42:ac:11:00:03  txqueuelen 0  (Ethernet)        RX packets 10969  bytes 20985758 (20.0 MiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 6234  bytes 344851 (336.7 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0# 两个容器的IP、主机名都相同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="容器虚拟网卡和docker0网桥的veth-pair配对"><a href="#容器虚拟网卡和docker0网桥的veth-pair配对" class="headerlink" title="容器虚拟网卡和docker0网桥的veth pair配对"></a>容器虚拟网卡和docker0网桥的veth pair配对</h1><p>veth是成对出现的虚拟网络设备， 发送到veth一端虚拟设备的请求会从另一端的虚拟设备中发出。创建一个容器的同时会为这个容器创建一对虚拟网卡veth pair，这个成对出现的虚拟网卡veth pair，分别放到宿主机和容器中，宿主机一端桥接到默认的docker0或者自定义的网桥上，容器一端放到新创建容器的Network namespace中，并把名字修改为eth0。虚拟网卡veth pair就像是一根网线，将宿主机的docker0和容器连接起来</p><pre class="line-numbers language-shell"><code class="language-shell">docker container run -itd --name "server1" centos:7.7.1908    # 创建容器brctl show docker0    # 查看宿主机上的docker0网桥bridge name    bridge id        STP enabled    interfacesdocker0        8000.02429fdcee74    no        veth7459cf7ip a s veth7459cf7    # 这是虚拟网卡veth pair在宿主机上的一端34: veth7459cf7@if33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default     link/ether 86:54:3c:c6:70:6b brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet6 fe80::8454:3cff:fec6:706b/64 scope link        valid_lft forever preferred_lft forever[root@ec94bfbd724f /]# ifconfig        # 容器内部的eth0网卡是虚拟网卡veth pair在容器中的一端eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)        RX packets 5495  bytes 10346440 (9.8 MiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 3386  bytes 186731 (182.3 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="容器网络访问原理图"><a href="#容器网络访问原理图" class="headerlink" title="容器网络访问原理图"></a>容器网络访问原理图</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ef9619814195aa5940901bf.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="容器网络实现的核心技术-iptables"><a href="#容器网络实现的核心技术-iptables" class="headerlink" title="容器网络实现的核心技术: iptables"></a>容器网络实现的核心技术: iptables</h1><p>docker容器的跨网络隔离与通信，是使用iptables去实现的</p><h2 id="源IP地址变换规则"><a href="#源IP地址变换规则" class="headerlink" title="源IP地址变换规则"></a>源IP地址变换规则</h2><p>docker在安装完成后，将默认在宿主机上增加一些iptables规则，以用于docker容器和容器之间的隔离与通信，可以使用使用iptables-save命令查看</p><pre class="line-numbers language-shell"><code class="language-shell">iptables-save | grep docker-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE参数说明:-s:源地址172.17.0.0/16-o:指定数据报文流出接口为docker0-j:动作为MASQUERADE(地址伪装)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这条规则关系着docker容器和外界的通信，含义是源地址为172.17.0.0/16的数据包(即docker容器发出的数据)，当不是从docker0网卡发出时做SNAT(源地址转换)。这样使得docker容器访问外网的流量，在外界看来就是从宿主机上发出的，外界感觉不到docker容器的存在</p><h2 id="目标IP地址变换规则"><a href="#目标IP地址变换规则" class="headerlink" title="目标IP地址变换规则"></a>目标IP地址变换规则</h2><p>从docker容器访问外网的流量，在外部看来就是从宿主机上发出的，外部感觉不到docker容器的存在。其实这也是由相应的iptables规则去实现的</p><pre class="line-numbers language-shell"><code class="language-shell">docker container run -itd --name "nginx" -p 80:80 nginx:1.17<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看创建容器之后生成的iptables规则</p><pre class="line-numbers language-shell"><code class="language-shell">iptables-save | grep docker-A DOCKER ! -i docker0 -p tcp -m tcp --dport 80 -j DNAT --to-destination 172.17.0.2:80-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这两条规则将访问宿主机的80端口的流量转发到了172.17.0.2的80端口上(即真正提供服务的docker容器的IP+端口)，所以外界访问docker容器是通过iptables做DNAT(目的地址转换)实现的</p><h1 id="etcd-和-flannel-实现-docker-跨主机通信"><a href="#etcd-和-flannel-实现-docker-跨主机通信" class="headerlink" title="etcd 和 flannel 实现 docker 跨主机通信"></a>etcd 和 flannel 实现 docker 跨主机通信</h1><p>flannel是一种基于overlay网络的跨主机容器网络解决方案，也就是将TCP数据包封装在另一种网络包里面进行路由转发和通信，flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，让集群中的不同节点主机创建的容器都具有全集群唯一的虚拟ip地址，flannel使用go语言编写</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>flannel为每个host分配一个subnet，容器从这个subnet中分配ip，这些ip可以在host间路由，容器间无需使用nat和端口映射即可实现跨主机通信。每个subnet都是从一个更大的ip池中划分的，flannel会在每个主机上运行一个叫flanneld的agent，其职责就是从池子中分配subnet。etcd相当于一个数据库，flannel使用etcd存放网络配置、已分配的subnet、host的IP等信息</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><table><thead><tr><th>节点</th><th>安装软件</th><th>系统</th><th>内核版本</th><th>docker版本</th></tr></thead><tbody><tr><td>10.10.110.150(master)</td><td>etcd、flannel、docker</td><td>CentOS7.7.1908</td><td>3.10.0-1062.el7.x86_64</td><td>19.03.12</td></tr><tr><td>10.10.110.151(slave)</td><td>flannel、docker</td><td>CentOS7.7.1908</td><td>3.10.0-1062.el7.x86_64</td><td>19.03.12</td></tr></tbody></table><h2 id="master节点配置"><a href="#master节点配置" class="headerlink" title="master节点配置"></a>master节点配置</h2><p>安装配置etcd</p><pre class="line-numbers language-shell"><code class="language-shell">yum install -y etcd        # 安装etcd,由于不配置etcd集群,所以只在10.10.110.150节点安装etcd就行了sed -i "s/localhost/10.10.110.150/g" /etc/etcd/etcd.conf    # 修改etcd配置文件systemctl start etcd.service    # 启动etcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装配置flannel</p><pre class="line-numbers language-shell"><code class="language-shell">yum install -y flannelsed -i "s/127.0.0.1/10.10.110.150/g" /etc/sysconfig/flanneld    # flannel连接到etcd,slave连接也是填写master的IPetcdctl --endpoints="http://10.10.110.150:2379" set /atomic.io/network/config '{ "Network":"172.17.0.0/16", "Backend": {"Type": "vxlan"}} '        # 配置etcd的子网,如果这一步不配置,那么etcd无法启动systemctl start flanneld.service    # 启动flannel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="slave节点配置"><a href="#slave节点配置" class="headerlink" title="slave节点配置"></a>slave节点配置</h2><p>安装配置flannel</p><pre class="line-numbers language-shell"><code class="language-shell">yum install -y flannelsed -i "s/127.0.0.1/10.10.110.150/g" /etc/sysconfig/flanneld    # 这里是填写master节点的IP,让slave连接到master的etcd,多slave也一样systemctl start flanneld.service    # 确保slave节点能连接到master节点的etcd,如果不关闭防火墙,那必须打开2379端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置docker使用flannel的网络"><a href="#配置docker使用flannel的网络" class="headerlink" title="配置docker使用flannel的网络"></a>配置docker使用flannel的网络</h2><p>master节点</p><pre class="line-numbers language-shell"><code class="language-shell">vim /usr/lib/systemd/system/docker.serviceEnvironmentFile=/run/flannel/docker        # 加载这个文件里面的变量,这个文件记录了flannel分配给master节点的子网信息(slave也会有自己的子网)ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock $DOCKER_NETWORK_OPTIONS    # 这个变量是上面文件中定义的,意思是在启动容器时指定使用flannel分配的子网去配置容器的网络iptables -P FORWARD ACCEPT        # 开启iptables转发,如不开启即使配置成功也不能通信systemctl daemon-reloadsystemctl restart flanneld.service    # 这里必须先重启flannel再重启docker,这时候启动容器就会使用flannel去配置容器的网络systemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>slave节点配置</p><pre class="line-numbers language-shell"><code class="language-shell">vim /usr/lib/systemd/system/docker.serviceEnvironmentFile=/run/flannel/docker        # 查看slave节点上这个文件,网段是和master节点不一样的ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock $DOCKER_NETWORK_OPTIONSiptables -P FORWARD ACCEPTsystemctl daemon-reloadsystemctl restart flanneld.servicesystemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看宿主机的IP变化"><a href="#查看宿主机的IP变化" class="headerlink" title="查看宿主机的IP变化"></a>查看宿主机的IP变化</h2><p>master节点</p><pre class="line-numbers language-shell"><code class="language-shell">ip a3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default     link/ether 02:42:e3:89:96:4e brd ff:ff:ff:ff:ff:ff    inet 172.17.98.1/24 brd 172.17.98.255 scope global docker0       valid_lft forever preferred_lft forever4: flannel.1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UNKNOWN group default     link/ether 02:6f:fa:71:67:f7 brd ff:ff:ff:ff:ff:ff    inet 172.17.98.0/32 scope global flannel.1       valid_lft forever preferred_lft forever    inet6 fe80::6f:faff:fe71:67f7/64 scope link        valid_lft forever preferred_lft forever    # docker0虚拟网卡和flannel虚拟网卡已经在同一网段，这时候说明配置成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>slave节点</p><pre class="line-numbers language-shell"><code class="language-shell">ip a3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default     link/ether 02:42:f2:30:ba:34 brd ff:ff:ff:ff:ff:ff    inet 172.17.75.1/24 brd 172.17.75.255 scope global docker0       valid_lft forever preferred_lft forever4: flannel.1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UNKNOWN group default     link/ether f6:ae:d1:c0:e1:a7 brd ff:ff:ff:ff:ff:ff    inet 172.17.75.0/32 scope global flannel.1       valid_lft forever preferred_lft forever    inet6 fe80::f4ae:d1ff:fec0:e1a7/64 scope link        valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在两个节点创建容器相互ping验证"><a href="#在两个节点创建容器相互ping验证" class="headerlink" title="在两个节点创建容器相互ping验证"></a>在两个节点创建容器相互ping验证</h2><p>master节点</p><pre class="line-numbers language-shell"><code class="language-shell">docker run -it busybox sh/ # ifconfigeth0      Link encap:Ethernet  HWaddr 02:42:AC:11:62:02            inet addr:172.17.98.2  Bcast:172.17.98.255  Mask:255.255.255.0          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1          RX packets:8 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0           RX bytes:656 (656.0 B)  TX bytes:0 (0.0 B)lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)/ # ping 172.17.75.2PING 172.17.75.2 (172.17.75.2): 56 data bytes64 bytes from 172.17.75.2: seq=0 ttl=62 time=0.492 ms64 bytes from 172.17.75.2: seq=1 ttl=62 time=0.353 ms64 bytes from 172.17.75.2: seq=2 ttl=62 time=0.342 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>slave节点</p><pre class="line-numbers language-shell"><code class="language-shell">docker run -it busybox sh/ # ifconfigeth0      Link encap:Ethernet  HWaddr 02:42:AC:11:4B:02            inet addr:172.17.75.2  Bcast:172.17.75.255  Mask:255.255.255.0          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1          RX packets:6 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0           RX bytes:516 (516.0 B)  TX bytes:0 (0.0 B)lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)/ # ping 172.17.98.2PING 172.17.98.2 (172.17.98.2): 56 data bytes64 bytes from 172.17.98.2: seq=0 ttl=62 time=1.945 ms64 bytes from 172.17.98.2: seq=1 ttl=62 time=0.344 ms64 bytes from 172.17.98.2: seq=2 ttl=62 time=0.384 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意:如果不能ping通，先重启flannel再重启docker试试</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;容器的四种网络模式&quot;&gt;&lt;a href=&quot;#容器的四种网络模式&quot; class=&quot;headerlink&quot; title=&quot;容器的四种网络模式&quot;&gt;&lt;/a&gt;容器的四种网络模式&lt;/h1&gt;&lt;h2 id=&quot;bridge-模式&quot;&gt;&lt;a href=&quot;#bridge-模式&quot; class
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器数据持久化(4)</title>
    <link href="https://www.missf.top/post/a7b8d397.html"/>
    <id>https://www.missf.top/post/a7b8d397.html</id>
    <published>2020-06-19T02:14:10.000Z</published>
    <updated>2020-07-14T01:17:51.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器数据持久化的三种方式"><a href="#容器数据持久化的三种方式" class="headerlink" title="容器数据持久化的三种方式"></a>容器数据持久化的三种方式</h1><p>由于容器的镜像分层机制，我们在容器里面创建文件或者修改文件，结果都会保存在容器的可读写层中，一旦容器被销毁，那么这个读写层也会随着容器销毁而消失。而且当一个容器需要和其他容器的读写层进行数据交互时，也会显得非常困难。于是在将容器数据持久化到宿主机方面，docker为我们提供了三种持久化的方式</p><h2 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h2><p>volumes由docker负责创建、管理。用户可以显式的调用命令docker volume create创建volume，也可以通过container、service的启动隐式创建</p><p>docker创建的volumes本质上还是宿主机文件系统中的一个目录，一个volumes可以供多个容器使用，即使没有容器使用此volumes，它也不会自动删除，除非用户明确删除它</p><p>如果用户显式创建volumes则需要给它一个名称，如果是隐式创建volumes则docker会为它分配一个在宿主机范围内唯一的名字</p><p>通过使用第三方提供的volume driver，用户可以将数据持久到远程主机或者云存储中，也就是说存储空间可以不由宿主机提供</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建volumesdocker volume create nginx_volumes# 查看volumesdocker volume ls# 查看卷详细信息docker volume inspect nginx_volumes [    {        "CreatedAt": "2020-06-19T18:47:49+08:00",        "Driver": "local",        "Labels": {},        "Mountpoint": "/var/lib/docker/volumes/nginx_volumes/_data",    # 这是volumes在宿主机上的真实路径        "Name": "nginx_volumes",        "Options": {},        "Scope": "local"    }]# 清理volumesdocker volume rm nginx_volumes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将nginx容器的html目录映射到宿主机的nginx_volumes目录</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建数据持久化的容器,如果卷不存在则自动创建docker container run -itd --name "nginx1" -p 80:80 -v nginx_volumes:/usr/share/nginx/html nginx:1.17    # -v方式docker container run -itd --name "nginx1" -p 80:80 --mount src=nginx_volumes,dst=/usr/share/nginx/html nginx:1.17 # --mount方式# 查看nginx_volumes在宿主机的真实目录ll /var/lib/docker/volumes/nginx_volumes/_datatotal 8-rw-r--r-- 1 root root 494 Apr 14 22:19 50x.html    # 这时候nginx容器内部的文件已经被映射到宿主机上了-rw-r--r-- 1 root root 612 Apr 14 22:19 index.html# 修改宿主机上的index.html文件echo "nginx_volumes test" > /var/lib/docker/volumes/nginx_volumes/_data/index.html# 访问宿主机的80端口(前面启动容器时将容器的80端口绑定到宿主机的80端了)curl 10.10.110.150nginx_volumes test    # nginx容器内的文件确实被修改成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bind-mounts"><a href="#bind-mounts" class="headerlink" title="bind mounts"></a>bind mounts</h2><p>bind mounts本质上是容器共享宿主机文件系统，比如docker将宿主机的/etc/resov.conf文件bind mount到容器里，两者会使用相同的dns服务器</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建容器,将宿主机的/nginx/app绑定到容器的/usr/share/nginx/html目录 docker container run -itd --name "nginx1" --mount type=bind,src=/nginx/app,dst=/usr/share/nginx/html nginx:1.17docker container run -itd --name "nginx1" -v /nginx/app:/usr/share/nginx/html nginx:1.17# 查看宿主机和容器的目录ls /nginx/appdocker exec -it nginx1 ls /usr/share/nginx/html        # 两个目录都为空,这是因为bind mounts是将宿主机的目录绑定到容器的目录,容器目录已有的内容会被隐藏(bind mounts以宿主机目录为主)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意: 如果源文件或源目录不存在，则不会自动创建。如果容器目录为非空目录，则容器目录现有内容会被宿主机目录内容所隐藏。</code></p><h2 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h2><p>出于安全原因，或者容器性能优化的原因有时候不需要容器的数据长久保存时可以使用这种方式。将容器数据挂载存储在宿主机的内存中，避免写入容器可写层，提高容器性能</p><h1 id="volumes-和-bind-mounts-的使用场景和区别"><a href="#volumes-和-bind-mounts-的使用场景和区别" class="headerlink" title="volumes 和 bind mounts 的使用场景和区别"></a>volumes 和 bind mounts 的使用场景和区别</h1><p>volumes适合多个容器需要共享数据、将数据保存到远程主机或云上等场景。bind mounts适合将宿主机的系统配置文件共享给容器。volumes是将容器内部的数据映射到宿主机对应的volumes目录，如果容器内部是一个非空目录，volumes目录也是一个非空目录，那么两个目录的文件会合并。而bind mounts是将宿主机上任意位置的目录或文件挂载到容器中，如果宿主机的目录非空，那么容器目录的数据将会被宿主机目录的数据隐藏，容器内的数据要卸除挂载后才会恢复</p><p>Bind mounts和volumes都可以通过使用标志-v或–volume来挂载到容器中，只是格式有些许不同。然而，在Docker17.06及其以上版本中，我们推荐使用–mount来对容器或服务进行这三种方式的挂载，因为这种格式更加清晰</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;容器数据持久化的三种方式&quot;&gt;&lt;a href=&quot;#容器数据持久化的三种方式&quot; class=&quot;headerlink&quot; title=&quot;容器数据持久化的三种方式&quot;&gt;&lt;/a&gt;容器数据持久化的三种方式&lt;/h1&gt;&lt;p&gt;由于容器的镜像分层机制，我们在容器里面创建文件或者修改文件，
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
</feed>
