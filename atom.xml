<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒原饮露</title>
  
  <subtitle>可能是未来的架构师，也可能送外卖。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.missf.top/"/>
  <updated>2020-09-11T11:07:30.787Z</updated>
  <id>https://www.missf.top/</id>
  
  <author>
    <name>荒原饮露</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL 配置主从复制</title>
    <link href="https://www.missf.top/post/4a05c739.html"/>
    <id>https://www.missf.top/post/4a05c739.html</id>
    <published>2020-09-10T08:47:49.000Z</published>
    <updated>2020-09-11T11:07:30.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><pre class="line-numbers language-bash"><code class="language-bash">mysql master: 10.10.110.180mysql slave1: 10.10.110.181mysql slave2: 10.10.110.182<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="MySQL主从同步原理"><a href="#MySQL主从同步原理" class="headerlink" title="MySQL主从同步原理"></a>MySQL主从同步原理</h1><p>当mysql master服务器上的数据发生改变时(增、删、改)，则将其改变写入binlog二进制日志中。slave服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变，如果发生改变，则开启一个I/O 线程请求master二进制事件，同时主节点为每个I/O线程启动一个dump线程，用于向其发送二进制事件，并保存至从库本地的中继日志中，从库将启动SQL线程从中继日志中读取二进制日志，在本地回放，使得从库数据和主库的数据保持一致，最后IO线程和SQL线程将进入睡眠状态，等待下一次被唤醒</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f59f0f5160a154a67b2414f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="主从同步的前提"><a href="#主从同步的前提" class="headerlink" title="主从同步的前提"></a>主从同步的前提</h1><blockquote><p>master一定要开启binlog二进制日志，授予slave远程连接权限</p></blockquote><blockquote><p>mysql主从复制至少需要两个mysql实例，可以分布在不同服务器，也可以在同一台服务器</p></blockquote><blockquote><p>最好master实例和slave实例的mysql版本相同(如果不同，那么master实例版本需要低于slave实例)</p></blockquote><blockquote><p>master实例和slave实例之间时间需同步</p></blockquote><h1 id="配置MySQL-Master节点"><a href="#配置MySQL-Master节点" class="headerlink" title="配置MySQL Master节点"></a>配置MySQL Master节点</h1><pre class="line-numbers language-bash"><code class="language-bash">1.下载MySQL5.7的源安装包<span class="token function">wget</span> http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm2.安装MySQL5.7源yum localinstall -y mysql57-community-release-el7-8.noarch.rpm3.安装MySQL服务yum <span class="token function">install</span> -y mysql-community-server4.启动MySQL服务systemctl start mysqld.service <span class="token operator">&amp;&amp;</span> systemctl <span class="token function">enable</span> mysqld.service5.查看密码<span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log6.登录MySQL修改密码ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'!missf3T'</span><span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span>7.授予slave实例远程连接权限GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'slave'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'!missf3T'</span> WITH GRANT OPTION<span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span>8.修改MySQL配置文件<span class="token punctuation">..</span>.log-bin<span class="token operator">=</span>mysql-binserver_id<span class="token operator">=</span>180port<span class="token operator">=</span>53306default-time_zone<span class="token operator">=</span><span class="token string">'+8:00'</span>character-set-server<span class="token operator">=</span>utf8mb4wait_timeout<span class="token operator">=</span>60<span class="token punctuation">..</span>.9.重启MySQLsystemctl restart mysqld10.查看binlog记录日志信息的偏移量positionmysql<span class="token operator">></span> show master status<span class="token punctuation">;</span>+------------------+----------+--------------+------------------+-------------------+<span class="token operator">|</span> File             <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span>+------------------+----------+--------------+------------------+-------------------+<span class="token operator">|</span> mysql-bin.000001 <span class="token operator">|</span>      154 <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span>+------------------+----------+--------------+------------------+-------------------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置MySQL-Slave节点"><a href="#配置MySQL-Slave节点" class="headerlink" title="配置MySQL Slave节点"></a>配置MySQL Slave节点</h1><pre class="line-numbers language-bash"><code class="language-bash">1.安装MySQL,指定不与主库相同的server_id<span class="token punctuation">..</span>.server_id<span class="token operator">=</span>181<span class="token punctuation">..</span>.2.指定主库信息,master信息会存到/var/lib/mysql/master.info文件中mysql<span class="token operator">></span> change master to    -<span class="token operator">></span> master_host<span class="token operator">=</span><span class="token string">"10.10.110.180"</span>,    -<span class="token operator">></span> master_user<span class="token operator">=</span><span class="token string">"slave"</span>,    -<span class="token operator">></span> master_password<span class="token operator">=</span><span class="token string">"!missf3T"</span>,    -<span class="token operator">></span> master_port<span class="token operator">=</span>53306,    -<span class="token operator">></span> master_log_file<span class="token operator">=</span><span class="token string">"mysql-bin.000001"</span>,    -<span class="token operator">></span> master_log_pos<span class="token operator">=</span>154<span class="token punctuation">;</span>Query OK, 0 rows affected, 2 warnings <span class="token punctuation">(</span>0.01 sec<span class="token punctuation">)</span>3.启动slave线程,若要更改指定的主库信息,需先执行stop slave,修改完成后执行start slavemysql<span class="token operator">></span> start slave<span class="token punctuation">;</span>Query OK, 0 rows affected <span class="token punctuation">(</span>0.04 sec<span class="token punctuation">)</span>4.查看slave状态mysql<span class="token operator">></span> show slave status\G*************************** 1. row ***************************               Slave_IO_State: Waiting <span class="token keyword">for</span> master to send event                  Master_Host: 10.10.110.180                  Master_User: slave                  Master_Port: 53306                Connect_Retry: 60              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: 154               Relay_Log_File: localhost-relay-bin.000005                Relay_Log_Pos: 320        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 154              Relay_Log_Space: 697              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 180                  Master_UUID: ce5675fc-f34e-11ea-bd8e-000c29321c87             Master_Info_File: /var/lib/mysql/master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has <span class="token function">read</span> all relay log<span class="token punctuation">;</span> waiting <span class="token keyword">for</span> <span class="token function">more</span> updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set:                 Auto_Position: 0         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="验证主从同步效果"><a href="#验证主从同步效果" class="headerlink" title="验证主从同步效果"></a>验证主从同步效果</h1><p>在mysql master上创建测试数据，然后在mysql slave上查看数据是否已经同步成功</p><pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> create database <span class="token function">test</span><span class="token punctuation">;</span>Query OK, 1 row affected <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> use <span class="token function">test</span><span class="token punctuation">;</span>Database changedmysql<span class="token operator">></span> create table test<span class="token punctuation">(</span>name varchar<span class="token punctuation">(</span>25<span class="token punctuation">)</span>,city varchar<span class="token punctuation">(</span>30<span class="token punctuation">)</span>,age int<span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK, 0 rows affected <span class="token punctuation">(</span>0.05 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> insert into test.test values<span class="token punctuation">(</span><span class="token string">"mysql"</span>,<span class="token string">"china"</span>,11<span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK, 1 row affected <span class="token punctuation">(</span>0.39 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> * from test.test<span class="token punctuation">;</span>+-------+-------+------+<span class="token operator">|</span> name  <span class="token operator">|</span> city  <span class="token operator">|</span> age  <span class="token operator">|</span>+-------+-------+------+<span class="token operator">|</span> mysql <span class="token operator">|</span> china <span class="token operator">|</span>   11 <span class="token operator">|</span>+-------+-------+------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="开启并行复制"><a href="#开启并行复制" class="headerlink" title="开启并行复制"></a>开启并行复制</h1><p>mysql的主从复制都是单线程的操作，就是说Slave_IO_Running和Slave_SQL_Running都是单线程的。主库所有DDL和DML的操作都是顺序写入到binlog中，从库的Slave_SQL_Running线程将主库的DDL和DML操作在从库回放。由于Slave_SQL_Running是单线程的缘故，如果从库有一个DDL需要执行十分钟，那么所有之后的DDL会等待这个DDL执行完才会继续执行，这就导致了延时，而mysql master节点可以并发执行，Slave_SQL_Running线程却不可以，这是主从同步出现延迟的关键原因</p><p>但是mysql5.7版本已经支持真正的并行复制功能，官方引入了基于组提交的并行复制Enhanced Multi-threaded Slaves(简称MTS)，因此复制延迟问题已经得到了极大的改进</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mysql5.7开启并行复制</span>slave-parallel-type<span class="token operator">=</span>LOGICAL_CLOCKslave-parallel-workers<span class="token operator">=</span>16master_info_repository<span class="token operator">=</span>TABLErelay_log_info_repository<span class="token operator">=</span>TABLErelay_log_recovery<span class="token operator">=</span>ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>slave-parallel-type：默认值为DATABASE是基于库的并行复制方式。修改为LOGICAL_CLOCK是基于组提交的并行复制方式，因为组提交的事务都是可以并行回放，数据不会相互影响</p></blockquote><blockquote><p>slave-parallel-workers：因为引入了基于组提交的并行复制，可以开启多个worker线程并发执行relay log中主库提交的事务</p></blockquote><p>查看并行复制是否配置成功</p><pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> show variables like <span class="token string">'slave_parallel_%'</span><span class="token punctuation">;</span>+------------------------+---------------+<span class="token operator">|</span> Variable_name          <span class="token operator">|</span> Value         <span class="token operator">|</span>+------------------------+---------------+<span class="token operator">|</span> slave_parallel_type    <span class="token operator">|</span> LOGICAL_CLOCK <span class="token operator">|</span><span class="token operator">|</span> slave_parallel_workers <span class="token operator">|</span> 16            <span class="token operator">|</span>+------------------------+---------------+2 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;language-bas
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://www.missf.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://www.missf.top/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Elastic 收集Java日志(9)</title>
    <link href="https://www.missf.top/post/5a1ae96.html"/>
    <id>https://www.missf.top/post/5a1ae96.html</id>
    <published>2020-09-08T10:20:14.000Z</published>
    <updated>2020-09-09T07:19:56.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h1><p>tomcat属于java应用，这里收集tomcat日志作为示例</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载软件包</span><span class="token function">wget</span> -P /server/tools/https://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.53/bin/apache-tomcat-8.5.53.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf apache-tomcat-8.5.53.tar.gz -C /usr/local/ <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> /usr/local/apache-tomcat-8.5.53/ /usr/local/tomcat<span class="token comment" spellcheck="true"># 启动tomcat</span>/usr/local/tomcat/bin/startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写Filebeat-pipeline"><a href="#编写Filebeat-pipeline" class="headerlink" title="编写Filebeat pipeline"></a>编写Filebeat pipeline</h1><p>filebeat获取所有不以”[“开头的行，并将它们合并到上一行以”[“开头的行之后</p><pre class="line-numbers language-json"><code class="language-json">filebeat.inputs<span class="token operator">:</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /usr/local/tomcat/logs/catalina.out  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"catalina"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    server<span class="token operator">:</span> tomcat    type<span class="token operator">:</span> tomcat-catalina  fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>  multiline<span class="token operator">:</span>    pattern<span class="token operator">:</span> '^\<span class="token punctuation">[</span>'    negate<span class="token operator">:</span> <span class="token boolean">true</span>    match<span class="token operator">:</span> after#output.console<span class="token operator">:</span>output.redis<span class="token operator">:</span>  hosts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"10.10.110.194:56379"</span><span class="token punctuation">]</span>  password<span class="token operator">:</span> <span class="token string">"123456"</span>  key<span class="token operator">:</span> <span class="token string">"tomcat"</span>  db<span class="token operator">:</span> <span class="token number">0</span>  datatype<span class="token operator">:</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="模拟Tomcat报错日志"><a href="#模拟Tomcat报错日志" class="headerlink" title="模拟Tomcat报错日志"></a>模拟Tomcat报错日志</h1><p>往tomcat的日志写入错误信息，模拟报错信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /usr/local/tomcat/logs/catalina.out <span class="token operator">&lt;&lt;</span> <span class="token string">EOFSep 09, 2020 5:50:33 PM org.apache.catalina.startup.Catalina stopServerSEVERE: Catalina.stop: org.xml.sax.SAXParseException; systemId: file:/usr/local/tomcat/conf/server.xml; lineNumber: 22; columnNumber: 45; Attribute name "dda" associated with an element type "Server" must be followed by the ' = ' character.        at java.xml/com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1243)        at java.xml/com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl<span class="token variable">$JAXPSAXParser</span>.parse(SAXParserImpl.java:635)        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1495)        at org.apache.catalina.startup.Catalina.stopServer(Catalina.java:485)        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.base/java.lang.reflect.Method.invoke(Method.java:566)        at org.apache.catalina.startup.Bootstrap.stopServer(Bootstrap.java:389)        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:479)EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写Logstash-pipeline"><a href="#编写Logstash-pipeline" class="headerlink" title="编写Logstash pipeline"></a>编写Logstash pipeline</h1><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  redis <span class="token punctuation">{</span>    host => <span class="token string">"10.10.110.194"</span>    port => <span class="token number">56379</span>    password => <span class="token string">"123456"</span>    db => <span class="token string">"0"</span>    data_type => <span class="token string">"list"</span>    key => <span class="token string">"tomcat"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"tomcat-catalina"</span> <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"catalina"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"filebeat-tomcat-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Kibana展示数据"><a href="#Kibana展示数据" class="headerlink" title="Kibana展示数据"></a>Kibana展示数据</h1><p>这里展示数据是不显示完全的，我们可以指定字段查看更详细的信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f588106160a154a67e70090.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>指定message字段，查看被合并成一行的tomcat报错日志</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f5881ef160a154a67e7b65a.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装Tomcat&quot;&gt;&lt;a href=&quot;#安装Tomcat&quot; class=&quot;headerlink&quot; title=&quot;安装Tomcat&quot;&gt;&lt;/a&gt;安装Tomcat&lt;/h1&gt;&lt;p&gt;tomcat属于java应用，这里收集tomcat日志作为示例&lt;/p&gt;
&lt;pre class
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic 收集Nginx日志(8)</title>
    <link href="https://www.missf.top/post/baa98a96.html"/>
    <id>https://www.missf.top/post/baa98a96.html</id>
    <published>2020-08-25T06:27:22.000Z</published>
    <updated>2020-09-09T04:03:07.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx配置Json格式日志"><a href="#Nginx配置Json格式日志" class="headerlink" title="Nginx配置Json格式日志"></a>Nginx配置Json格式日志</h1><p>修改Nginx配置文件，定义输出json格式的日志，便于filebeat和logstash收集</p><pre class="line-numbers language-json"><code class="language-json">http <span class="token punctuation">{</span>    log_format  main  '<span class="token punctuation">{</span><span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token string">"$time_iso8601"</span><span class="token punctuation">,</span> '                        '<span class="token property">"clientRealIp"</span><span class="token operator">:</span> <span class="token string">"$remote_addr"</span><span class="token punctuation">,</span> '                        '<span class="token property">"scheme"</span><span class="token operator">:</span> <span class="token string">"$scheme"</span><span class="token punctuation">,</span> '                        '<span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"$request_method"</span><span class="token punctuation">,</span> '                        '<span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"$host"</span><span class="token punctuation">,</span> '                        '<span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"$request_uri"</span><span class="token punctuation">,</span> '                        '<span class="token property">"size"</span><span class="token operator">:</span> $body_bytes_sent<span class="token punctuation">,</span> '                        '<span class="token property">"referrer"</span><span class="token operator">:</span> <span class="token string">"$http_referer"</span><span class="token punctuation">,</span> '                        '<span class="token property">"agent"</span><span class="token operator">:</span> <span class="token string">"$http_user_agent"</span><span class="token punctuation">,</span> '                        '<span class="token property">"upstream_addr"</span><span class="token operator">:</span> <span class="token string">"$upstream_addr"</span><span class="token punctuation">,</span> '                        '<span class="token property">"request_time"</span><span class="token operator">:</span> $request_time<span class="token punctuation">,</span> '                        '<span class="token property">"request_length"</span><span class="token operator">:</span> $request_length<span class="token punctuation">,</span> '                        '<span class="token property">"upstream_connect_time"</span><span class="token operator">:</span> <span class="token string">"$upstream_connect_time"</span><span class="token punctuation">,</span> '                        '<span class="token property">"upstream_response_time"</span><span class="token operator">:</span> <span class="token string">"$upstream_response_time"</span><span class="token punctuation">,</span> '                        '<span class="token property">"upstream_status"</span><span class="token operator">:</span> <span class="token string">"$upstream_status"</span><span class="token punctuation">,</span> '                        '<span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"$status"</span><span class="token punctuation">}</span>'<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Filebeat配置文件"><a href="#Filebeat配置文件" class="headerlink" title="Filebeat配置文件"></a>Filebeat配置文件</h1><p>编写filebeat配置文件，收集Nginx的access.log和error.log，并且添加自定义字段和标签存储到redis</p><pre class="line-numbers language-json"><code class="language-json">cat /etc/filebeat/filebeat-nginx.yml filebeat.inputs<span class="token operator">:</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  json.keys_under_root<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /usr/local/nginx/logs/access.log  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"access"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    server<span class="token operator">:</span> nginx    type<span class="token operator">:</span> nginx-access  fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  json.keys_under_root<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /usr/local/nginx/logs/error.log  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    server<span class="token operator">:</span> nginx    type<span class="token operator">:</span> nginx-error  fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>processors<span class="token operator">:</span>- drop_fields<span class="token operator">:</span>    fields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"input_type"</span><span class="token punctuation">,</span> <span class="token string">"ecs.version"</span><span class="token punctuation">,</span> <span class="token string">"host.name"</span><span class="token punctuation">,</span> <span class="token string">"agent"</span><span class="token punctuation">,</span> <span class="token string">"log.offset"</span><span class="token punctuation">]</span>#output.console<span class="token operator">:</span>output.redis<span class="token operator">:</span>  hosts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"10.10.110.194:56379"</span><span class="token punctuation">]</span>  password<span class="token operator">:</span> <span class="token string">"123456"</span>  key<span class="token operator">:</span> <span class="token string">"nginx"</span>  db<span class="token operator">:</span> <span class="token number">0</span>  datatype<span class="token operator">:</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="控制台调试Filebeat输出的日志数据"><a href="#控制台调试Filebeat输出的日志数据" class="headerlink" title="控制台调试Filebeat输出的日志数据"></a>控制台调试Filebeat输出的日志数据</h1><p>通过drop_fields去控制我们想要输出的字段，得到精简的日志数据</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token string">"2020-09-07T18:08:49.000Z"</span><span class="token punctuation">,</span>    <span class="token property">"@metadata"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"beat"</span><span class="token operator">:</span> <span class="token string">"filebeat"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"7.9.0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"nginx"</span><span class="token punctuation">,</span>    <span class="token property">"ecs"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"file"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/usr/local/nginx/logs/access.log"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"json"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"input"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"log"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"nginx-access"</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"10.10.110.194 - - [08/Sep/2020:02:08:41 +0800] \"GET /848dd HTTP/1.1\" 404 153 \"-\" \"curl/7.29.0\""</span><span class="token punctuation">,</span>    <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"access"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Logstash读取Redis中的日志数据"><a href="#Logstash读取Redis中的日志数据" class="headerlink" title="Logstash读取Redis中的日志数据"></a>Logstash读取Redis中的日志数据</h1><p>logstash读取redis中的日志数据，并且在Kibana展示Nginx日志</p><pre class="line-numbers language-json"><code class="language-json"># logstash配置文件通过我们定义的fields字段和标签匹配数据<span class="token punctuation">,</span>将不同的数据存储到不同的indexinput <span class="token punctuation">{</span>  redis <span class="token punctuation">{</span>    host => <span class="token string">"10.10.110.194"</span>    port => <span class="token number">56379</span>    password => <span class="token string">"123456"</span>    db => <span class="token string">"0"</span>    data_type => <span class="token string">"list"</span>    key => <span class="token string">"nginx"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span> # 通过字段和标签判断日志数据<span class="token punctuation">,</span>存储到不同的index  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"nginx-access"</span> <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"access"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"filebeat-nginx-access%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"nginx-error"</span> <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"error"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"filebeat-nginx-error%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Kibana展示Nginx日志"><a href="#Kibana展示Nginx日志" class="headerlink" title="Kibana展示Nginx日志"></a>Kibana展示Nginx日志</h1><p>我们可以在kibana上创建索引，查看Nginx日志，通过字段去统计和展示日志数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f560c25160a154a6759d557.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx配置Json格式日志&quot;&gt;&lt;a href=&quot;#Nginx配置Json格式日志&quot; class=&quot;headerlink&quot; title=&quot;Nginx配置Json格式日志&quot;&gt;&lt;/a&gt;Nginx配置Json格式日志&lt;/h1&gt;&lt;p&gt;修改Nginx配置文件，定义输出js
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic 引入Filebeat(7)</title>
    <link href="https://www.missf.top/post/9482a90c.html"/>
    <id>https://www.missf.top/post/9482a90c.html</id>
    <published>2020-08-20T03:58:57.000Z</published>
    <updated>2020-09-09T09:13:03.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入Filebeat架构简介"><a href="#引入Filebeat架构简介" class="headerlink" title="引入Filebeat架构简介"></a>引入Filebeat架构简介</h1><p>filebeat代替logstash去收集日志数据，然后将收集到的日志数据存储到redis或者kafka，再由logstash去消费数据。filebeat是非常轻量级单用途的日志采集器，属于Beats家族。早期的elk架构使用logstash收集、解析日志，但是logstash对内存、CPU、IO等资源消耗比较高(因为logstash是使用java语言编写的)，后来出现了使用golang编写的filebeat日志收集器，可以不依赖任何环境安装即可使用，同时对资源的占用可以忽略不计，使用filebeat替代logstash去收集日志是非常好的方案</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f55ced6160a154a674c1b90.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="安装Filebeat"><a href="#安装Filebeat" class="headerlink" title="安装Filebeat"></a>安装Filebeat</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载filebeat</span><span class="token function">wget</span> https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.9.0-x86_64.rpm<span class="token comment" spellcheck="true"># 安装</span>yum <span class="token function">install</span> -y filebeat-7.9.0-x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写Filebeat配置文件"><a href="#编写Filebeat配置文件" class="headerlink" title="编写Filebeat配置文件"></a>编写Filebeat配置文件</h1><p>filebeat配置文件负责收集日志，然后将数据存到redis</p><pre class="line-numbers language-json"><code class="language-json">cat /etc/filebeat/filebeat.ymlfilebeat.inputs<span class="token operator">:</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /var/log/messages  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span><span class="token string">"syslog"</span><span class="token punctuation">]</span>  #include_lines<span class="token operator">:</span> <span class="token punctuation">[</span>'sometext'<span class="token punctuation">]</span> Filebeat仅导出与列表中的正则表达式匹配的行  #exclude_lines<span class="token operator">:</span> <span class="token punctuation">[</span>'^DBG'<span class="token punctuation">]</span> Filebeat会删除列表中与正则表达式匹配的所有行  fields<span class="token operator">:</span>    # 可以指定字段向输出添加附加信息    type<span class="token operator">:</span> system  # fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>     # 如果为<span class="token boolean">true</span><span class="token punctuation">,</span>则自定义字段将作为顶级字段而不是作为fields字段的子字典- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /var/log/audit/audit.log  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"audit"</span><span class="token punctuation">,</span><span class="token string">"syslog"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    type<span class="token operator">:</span> system  # fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>output.console<span class="token operator">:</span>    # 将收集到的日志数据输出到控制台<span class="token punctuation">,</span>可以查看fields定义的字段output.redis<span class="token operator">:</span>    # filebeat将收集到的日志存储到redis  hosts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"10.10.110.194:56379"</span><span class="token punctuation">]</span>  password<span class="token operator">:</span> <span class="token string">"123456"</span>  key<span class="token operator">:</span> <span class="token string">"filebeat"</span>  db<span class="token operator">:</span> <span class="token number">0</span>  timeout<span class="token operator">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查看Filebeat输出的Json数据"><a href="#查看Filebeat输出的Json数据" class="headerlink" title="查看Filebeat输出的Json数据"></a>查看Filebeat输出的Json数据</h1><p>我们在调试日志格式时使用命令去启动filebeat，使用systemctl的方式去调试会出现很多转义符，不便于查看</p><pre class="line-numbers language-json"><code class="language-json">/usr/bin/filebeat -c /etc/filebeat/filebeat.yml    # 这里需要将控制台输出的数据json格式化<span class="token punctuation">{</span>    <span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token string">"2020-09-07T16:17:42.615Z"</span><span class="token punctuation">,</span>    <span class="token property">"@metadata"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"beat"</span><span class="token operator">:</span> <span class="token string">"filebeat"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"7.9.0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"ecs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.5.0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"localhost.localdomain"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"agent"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"ephemeral_id"</span><span class="token operator">:</span> <span class="token string">"660a2bfb-9a56-43a8-ae93-788060f5d243"</span><span class="token punctuation">,</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"6a8ff370-52b5-4f89-ad9c-b6feecf938a9"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"filebeat"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"7.9.0"</span><span class="token punctuation">,</span>        <span class="token property">"hostname"</span><span class="token operator">:</span> <span class="token string">"localhost.localdomain"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"offset"</span><span class="token operator">:</span> <span class="token number">997322</span><span class="token punctuation">,</span>        <span class="token property">"file"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/var/log/messages"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"Sep  8 00:01:01 localhost systemd: Started Session 7 of user root."</span><span class="token punctuation">,</span>    <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span> <span class="token string">"syslog"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span> # 这里由于filebeat配置文件中没有开启fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>这个选项<span class="token punctuation">,</span>所以我们定义的字段会在fields里面        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"system"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"input"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"log"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="定义Filebeat输出的Json数据"><a href="#定义Filebeat输出的Json数据" class="headerlink" title="定义Filebeat输出的Json数据"></a>定义Filebeat输出的Json数据</h1><p>我们除了可以自己自定义字段，还可以删除一些filebeat默认输出的字段，让日志数据更加易于查看</p><pre class="line-numbers language-json"><code class="language-json"># 定义filebeat配置文件<span class="token punctuation">,</span>过滤不需要的json数据filebeat.inputs<span class="token operator">:</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  # json.keys_under_root<span class="token operator">:</span> <span class="token boolean">true</span> 开始json解析<span class="token punctuation">,</span>不是json格式的日志不要开启此选项  paths<span class="token operator">:</span>    - /var/log/messages  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span><span class="token string">"syslog"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    type<span class="token operator">:</span> system  fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>- type<span class="token operator">:</span> log  enabled<span class="token operator">:</span> <span class="token boolean">true</span>  paths<span class="token operator">:</span>    - /var/log/audit/audit.log  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"audit"</span><span class="token punctuation">,</span><span class="token string">"syslog"</span><span class="token punctuation">]</span>  fields<span class="token operator">:</span>    type<span class="token operator">:</span> system  fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span>processors<span class="token operator">:</span>- drop_fields<span class="token operator">:</span>    fields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"input_type"</span><span class="token punctuation">,</span> <span class="token string">"ecs.version"</span><span class="token punctuation">,</span> <span class="token string">"host.name"</span><span class="token punctuation">,</span> <span class="token string">"agent"</span><span class="token punctuation">,</span> <span class="token string">"log.offset"</span><span class="token punctuation">]</span>    # 将这些字段丢弃output.console<span class="token operator">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看自定义之后的json数据</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token string">"2020-09-07T17:37:59.500Z"</span><span class="token punctuation">,</span>    <span class="token property">"@metadata"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"beat"</span><span class="token operator">:</span> <span class="token string">"filebeat"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"7.9.0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span> <span class="token string">"syslog"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"input"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"log"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span>    # fields_under_root<span class="token operator">:</span> <span class="token boolean">true</span> 将作为顶级字段    <span class="token property">"ecs"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"file"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/var/log/messages"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"Sep  8 01:35:28 localhost systemd-logind: Removed session 4."</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Logstash消费Redis中的数据"><a href="#Logstash消费Redis中的数据" class="headerlink" title="Logstash消费Redis中的数据"></a>Logstash消费Redis中的数据</h1><p>filebeat将日志数据存储到redis之后，logstash从redis读取日志数据就是非常简单的事情了</p><pre class="line-numbers language-json"><code class="language-json">cat /etc/logstash/conf.d/sys-from-redis.confinput <span class="token punctuation">{</span>  redis <span class="token punctuation">{</span>    host => <span class="token string">"10.10.110.194"</span>    port => <span class="token number">56379</span>    password => <span class="token string">"123456"</span>    db => <span class="token string">"0"</span>    data_type => <span class="token string">"list"</span>    batch_count => <span class="token string">"1"</span>    key => <span class="token string">"filebeat"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"system"</span> <span class="token punctuation">{</span>    # 这里的匹配由filebeat输出的json数据格式来定义    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"messages"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"filebeat-fromredis-messages-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    else if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"audit"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"filebeat-fromredis-audit-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Elasticsearch查看数据"><a href="#Elasticsearch查看数据" class="headerlink" title="Elasticsearch查看数据"></a>Elasticsearch查看数据</h1><p>索引的命名根据我们在logstash处理数据时的定义格式</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f5600d8160a154a675742af.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引入Filebeat架构简介&quot;&gt;&lt;a href=&quot;#引入Filebeat架构简介&quot; class=&quot;headerlink&quot; title=&quot;引入Filebeat架构简介&quot;&gt;&lt;/a&gt;引入Filebeat架构简介&lt;/h1&gt;&lt;p&gt;filebeat代替logstash去收集日
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic 引入Redis(6)</title>
    <link href="https://www.missf.top/post/23bc2fbc.html"/>
    <id>https://www.missf.top/post/23bc2fbc.html</id>
    <published>2020-08-17T10:48:56.000Z</published>
    <updated>2020-09-07T10:45:28.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入Redis架构简介"><a href="#引入Redis架构简介" class="headerlink" title="引入Redis架构简介"></a>引入Redis架构简介</h1><p>logstash分为shipper(负责收集日志数据)和indexer(负责对日志做过滤存储到ES)两个角色。当日志量达到一个量级之后，我们就不能继续使用logstash去收集和处理数据，由于ES的HTTP API处理能力有限，在日志写入频繁的情况下可能会超时、丢失，所以用队列来做缓冲在两个logstash角色之间可以引入redis或者kafka。使用消息队列的方式可减少ES压力，队列起到缓冲作用，也可以一定程度保护数据不丢失。同时我们还能将所有收集到的日志统一在logstash indexer进行处理</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f51fb57160a154a6778fb68.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><pre class="line-numbers language-bash"><code class="language-bash">logstash 10.10.110.195    <span class="token comment" spellcheck="true"># logstash shipper生产数据,将获取到的数据存到redis</span>logstash + redis 10.10.110.194    <span class="token comment" spellcheck="true"># logstash indexer消费redis中的日志数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="生产日志数据"><a href="#生产日志数据" class="headerlink" title="生产日志数据"></a>生产日志数据</h1><p>编写logstash pipeline配置文件，将收集到的日志数据存储到redis</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  file <span class="token punctuation">{</span>    path => <span class="token punctuation">[</span><span class="token string">"/var/log/messages"</span><span class="token punctuation">]</span>    type => <span class="token string">"syslog"</span>    tags => <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span><span class="token string">"log"</span><span class="token punctuation">]</span>    start_position => <span class="token string">"beginning"</span>  <span class="token punctuation">}</span>  file <span class="token punctuation">{</span>    path => <span class="token punctuation">[</span><span class="token string">"/var/log/audit/audit.log"</span><span class="token punctuation">]</span>    type => <span class="token string">"syslog"</span>    tags => <span class="token punctuation">[</span><span class="token string">"audit"</span><span class="token punctuation">,</span><span class="token string">"log"</span><span class="token punctuation">]</span>    start_position => <span class="token string">"beginning"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  redis <span class="token punctuation">{</span>    host => <span class="token punctuation">[</span><span class="token string">"10.10.110.194:56379"</span><span class="token punctuation">]</span>    password => <span class="token string">"123456"</span>    db => <span class="token string">"0"</span>    data_type => <span class="token string">"list"</span>    key => <span class="token string">"logstash"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动logstash进行收集日志存储到redis</p><pre class="line-numbers language-bash"><code class="language-bash">/usr/share/logstash/bin/logstash -rf /etc/logstash/conf.d/syslog-toredis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Redis查看日志数据"><a href="#Redis查看日志数据" class="headerlink" title="Redis查看日志数据"></a>Redis查看日志数据</h1><p>logstash在收集到日志数据并且添加上标签和类型然后存储到redis，我们可以返回列表的长度来得知日志数据是否被存储到redis</p>{% image https://pic.imgdb.cn/item/5f55cd21160a154a674bc848.jpg '' '' %}<h1 id="消费日志数据"><a href="#消费日志数据" class="headerlink" title="消费日志数据"></a>消费日志数据</h1><p>编写logstash pipeline配置文件，将redis中的日志数据存储到ES</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  redis <span class="token punctuation">{</span>    host => <span class="token string">"10.10.110.194"</span>    port => <span class="token number">56379</span>    password => <span class="token string">"123456"</span>    db => <span class="token string">"0"</span>    data_type => <span class="token string">"list"</span>    key => <span class="token string">"logstash"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"syslog"</span> <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"messages"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"syslog-fromredis-messages-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    else if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"audit"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"syslog-fromredis-audit-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Redis查看消费的数据"><a href="#Redis查看消费的数据" class="headerlink" title="Redis查看消费的数据"></a>Redis查看消费的数据</h1><p>日志数据被消费完之后就代表已经写入到ES</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># redis中的key会全部存到ES中(日志数据被消费完)</span>127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7041127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5791127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4541127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3041127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1666127.0.0.1:56379<span class="token operator">></span> llen logstash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:56379<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引入Redis架构简介&quot;&gt;&lt;a href=&quot;#引入Redis架构简介&quot; class=&quot;headerlink&quot; title=&quot;引入Redis架构简介&quot;&gt;&lt;/a&gt;引入Redis架构简介&lt;/h1&gt;&lt;p&gt;logstash分为shipper(负责收集日志数据)和indexe
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Kibana展示系统日志(5)</title>
    <link href="https://www.missf.top/post/c802a07c.html"/>
    <id>https://www.missf.top/post/c802a07c.html</id>
    <published>2020-08-16T10:39:44.000Z</published>
    <updated>2020-09-09T09:08:46.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写logstash-pipeline配置文件"><a href="#编写logstash-pipeline配置文件" class="headerlink" title="编写logstash pipeline配置文件"></a>编写logstash pipeline配置文件</h1><p>定义日志收集、过滤、存储的方式</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  file <span class="token punctuation">{</span>    path => <span class="token punctuation">[</span><span class="token string">"/var/log/messages"</span><span class="token punctuation">]</span>    type => <span class="token string">"syslog"</span>    tags => <span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">,</span><span class="token string">"log"</span><span class="token punctuation">]</span>    start_position => <span class="token string">"beginning"</span>    # 从文件开头读取    <span class="token punctuation">}</span>  file <span class="token punctuation">{</span>    path => <span class="token punctuation">[</span><span class="token string">"/var/log/audit/audit.log"</span><span class="token punctuation">]</span>    type => <span class="token string">"syslog"</span>    tags => <span class="token punctuation">[</span><span class="token string">"audit"</span><span class="token punctuation">,</span><span class="token string">"log"</span><span class="token punctuation">]</span>    start_position => <span class="token string">"beginning"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  if <span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"syslog"</span> <span class="token punctuation">{</span>    if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"messages"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>    # 存储带ES        index  => <span class="token string">"syslog-messages-%{+YYYY.MM.dd}"</span>    # index的命名格式      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    else if <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> == <span class="token string">"audit"</span> <span class="token punctuation">{</span>      elasticsearch <span class="token punctuation">{</span>        hosts  => <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.192:9200"</span><span class="token punctuation">,</span><span class="token string">"http://10.10.110.193:9200"</span><span class="token punctuation">]</span>        index  => <span class="token string">"syslog-audit-%{+YYYY.MM.dd}"</span>      <span class="token punctuation">}</span>      stdout <span class="token punctuation">{</span> codec=> rubydebug <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Logstash收集日志存储到ES"><a href="#Logstash收集日志存储到ES" class="headerlink" title="Logstash收集日志存储到ES"></a>Logstash收集日志存储到ES</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动logstash,systemctl启动方式可以指定配置文件</span>/usr/share/logstash/bin/logstash -rf /etc/logstash/conf.d/syslog.conf<span class="token comment" spellcheck="true"># logstash常用参数</span>-n 指定logstash实例的名称,默认为当前主机名-f 指定启动配置文件-e 指定直接执行的配置文件内容,可以不指定-f参数了-r 检测配置文件变化,自动重新加载-t 检查配置的语法是否正确并退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Elasticsearch查看数据"><a href="#Elasticsearch查看数据" class="headerlink" title="Elasticsearch查看数据"></a>Elasticsearch查看数据</h1><p>索引的命名格式按日期去分割</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f50be45160a154a6732f27c.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="将ES的日志索引到Kibana"><a href="#将ES的日志索引到Kibana" class="headerlink" title="将ES的日志索引到Kibana"></a>将ES的日志索引到Kibana</h1><p>Kibana的配置文件指定ES的地址，使用正则匹配去创建索引</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f50c769160a154a67356974.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>配置时间过滤器字段</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f51e97a160a154a67727f8b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Kibana展示日志数据"><a href="#Kibana展示日志数据" class="headerlink" title="Kibana展示日志数据"></a>Kibana展示日志数据</h1><p>可以根据日志数据的字段去查看指定的信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f51f25f160a154a6776bac0.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编写logstash-pipeline配置文件&quot;&gt;&lt;a href=&quot;#编写logstash-pipeline配置文件&quot; class=&quot;headerlink&quot; title=&quot;编写logstash pipeline配置文件&quot;&gt;&lt;/a&gt;编写logstash pipeli
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Kibana(4)</title>
    <link href="https://www.missf.top/post/e26112db.html"/>
    <id>https://www.missf.top/post/e26112db.html</id>
    <published>2020-08-14T07:56:54.000Z</published>
    <updated>2020-09-09T09:04:44.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kibana简述"><a href="#Kibana简述" class="headerlink" title="Kibana简述"></a>Kibana简述</h1><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理解，它操作简单，基于浏览器的用户界面可以快速创建仪表板(dashboard)实时显示Elasticsearch查询动态。设置Kibana非常简单，无需编码或者额外的基础架构，就可以完成Kibana安装并启动Elasticsearch索引监测</p><h1 id="Kibana安装配置"><a href="#Kibana安装配置" class="headerlink" title="Kibana安装配置"></a>Kibana安装配置</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载Kibana</span><span class="token function">wget</span> https://artifacts.elastic.co/downloads/kibana/kibana-7.8.1-x86_64.rpm<span class="token comment" spellcheck="true"># 安装</span>shasum -a 512 kibana-7.8.1-x86_64.rpmrpm --install kibana-7.8.1-x86_64.rpm<span class="token comment" spellcheck="true"># 修改Kibana配置文件</span><span class="token function">grep</span> -v <span class="token string">"^#"</span> /etc/kibana/kibana.ymlserver.port: 5601server.host: <span class="token string">"127.0.0.1"</span>elasticsearch.hosts: <span class="token punctuation">[</span><span class="token string">"http://10.10.110.191:9200"</span><span class="token punctuation">]</span>i18n.locale: <span class="token string">"zh-CN"</span><span class="token comment" spellcheck="true"># 启动Kibana</span>systemctl start kibana.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置Nginx代理Kibana"><a href="#配置Nginx代理Kibana" class="headerlink" title="配置Nginx代理Kibana"></a>配置Nginx代理Kibana</h1><p>配置Nginx反向代理实现鉴权</p><pre class="line-numbers language-bash"><code class="language-bash">vim /usr/local/nginx/conf/nginx.confserver <span class="token punctuation">{</span>      listen 9090<span class="token punctuation">;</span>      server_name localhost<span class="token punctuation">;</span>      location / <span class="token punctuation">{</span>        auth_basic <span class="token string">"Restricted Access"</span><span class="token punctuation">;</span>        auth_basic_user_file /usr/local/nginx/conf/passwd.db<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 账号密码文件</span>        proxy_pass http://127.0.0.1:5601<span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置验证登录账号密码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 需要安装httpd-tools工具,文件里的密码是密文的</span>htpasswd -c /usr/local/nginx/conf/passwd.db admin    <span class="token comment" spellcheck="true"># 连续输入两次密码</span><span class="token comment" spellcheck="true"># 测试本机kibana能否连接,如果本机都不能连接,那么Nginx代理就没有意义</span>curl -L -u admin:12345678 http://127.0.0.1:5601<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="登录Kibana"><a href="#登录Kibana" class="headerlink" title="登录Kibana"></a>登录Kibana</h1><p>登录kibana的地址</p><pre class="line-numbers language-bash"><code class="language-bash">http://10.10.110.194:9090/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Nginx账号密码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f50a2a9160a154a672c41a2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>kibana web页面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f50a1ee160a154a672c0902.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kibana简述&quot;&gt;&lt;a href=&quot;#Kibana简述&quot; class=&quot;headerlink&quot; title=&quot;Kibana简述&quot;&gt;&lt;/a&gt;Kibana简述&lt;/h1&gt;&lt;p&gt;Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Logstash(3)</title>
    <link href="https://www.missf.top/post/fe947601.html"/>
    <id>https://www.missf.top/post/fe947601.html</id>
    <published>2020-08-11T07:04:57.000Z</published>
    <updated>2020-09-01T07:00:22.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Logstash概述"><a href="#Logstash概述" class="headerlink" title="Logstash概述"></a>Logstash概述</h1><p>logstash是elasticsearch的数据管道，负责对数据源进行处理。工作原理分别是输入、过滤、输出。其中input(负责从数据源采集数据)和output(将数据传输到目的地)是必要的，filter(将数据修改为你指定的格式或内容)是非必要的。logstash是插件式管理模式，在输入、过滤、输出以及编码过程中都可以使用插件进行定制，Logstash社区有超过200种可用插件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f4ca600160a154a67c1320d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Logstash安装"><a href="#Logstash安装" class="headerlink" title="Logstash安装"></a>Logstash安装</h1><p>这里使用yum是因为二进制安装的jdk，在Logstash启动时会报could not find java</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装jdk</span>yum <span class="token function">install</span> -y java-11-openjdk java-11-openjdk-devel java-11-openjdk-headless<span class="token comment" spellcheck="true"># 下载logstash</span><span class="token function">wget</span> https://artifacts.elastic.co/downloads/logstash/logstash-7.8.1.rpm<span class="token comment" spellcheck="true"># 安装logstash</span>yum <span class="token function">install</span> -y logstash-7.8.1.rpm<span class="token comment" spellcheck="true"># 修改启动分配内存</span>vim /etc/logstash/jvm.options-Xms512m-Xmx512m<span class="token comment" spellcheck="true"># 第一个logstash示例</span><span class="token function">cd</span> logstash Installation directorybin/logstash -e <span class="token string">'input { stdin { } } output { stdout {} }'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 执行结果如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f4db451160a154a67703955.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Logstash配置详解"><a href="#Logstash配置详解" class="headerlink" title="Logstash配置详解"></a>Logstash配置详解</h1><p>Logstash的配置有两个必须元素(input和output)和一个可选元素(filter)</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span> # 输入   stdin <span class="token punctuation">{</span>     ... # 标准输入  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span> # 过滤  ...    # 对数据进行分割、截取等处理 <span class="token punctuation">}</span>output <span class="token punctuation">{</span> # 输出   stdout <span class="token punctuation">{</span>    ...  # 标准输出  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入</p><p>采集各种样式、大小和来源的数据，数据往往以各种各样的形式，或分散或集中地存在于不同的系统中</p><p> Logstash支持各种输入选择 ，可以在同一时间从众多常用来源捕捉事件</p><p>能够以连续的流式传输方式，轻松地从您的日志、指标、Web 应用、数据存储以及各种AWS服务采集数据</p></blockquote><blockquote><p> 过滤</p><p>实时解析和转换数据，Logstash过滤器能够解析各个事件</p><p>识别已命名的字段以构建结构，并将它们转换成通用格式，以便更轻松更快速地分析和实现商业价值</p></blockquote><blockquote><p>输出</p><p>Logstash提供众多输出选择，你可以将数据发送到指定的地方，并且能够灵活地解锁众多下游用例</p></blockquote><h1 id="输入插件Stdin示例"><a href="#输入插件Stdin示例" class="headerlink" title="输入插件Stdin示例"></a>输入插件Stdin示例</h1><p>从标准输入读取数据输出到标准输出</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json">mwj<span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-12T18<span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">32</span>.683Z<span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"mwj"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span>test data      <span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-12T18<span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">47</span>.691Z<span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"test data"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输入插件File示例"><a href="#输入插件File示例" class="headerlink" title="输入插件File示例"></a>输入插件File示例</h1><p>从文件中读取数据，输出到标准输出</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  file <span class="token punctuation">{</span>    # 调用file这个插件<span class="token punctuation">,</span>logstash社区有非常多的插件可以供我们使用    path =><span class="token string">"/var/log/messages"</span>    # 数据源来自这个文件的内容    tags =><span class="token string">"messages"</span>    # 打标签    type =><span class="token string">"syslog"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>          <span class="token string">"type"</span> => <span class="token string">"syslog"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T11<span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">45</span>.031Z<span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"path"</span> => <span class="token string">"/var/log/messages"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>          <span class="token string">"tags"</span> => <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token string">"messages"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"Aug 13 19:41:44 localhost yum[86466]: Installed: 1:nginx-mod-http-image-filter-1.16.1-1.el7.x86_64"</span><span class="token punctuation">}</span><span class="token punctuation">{</span>          <span class="token string">"type"</span> => <span class="token string">"syslog"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T11<span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">45</span>.032Z<span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"path"</span> => <span class="token string">"/var/log/messages"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>          <span class="token string">"tags"</span> => <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token string">"messages"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"Aug 13 19:41:44 localhost yum[86466]: Installed: 1:nginx-all-modules-1.16.1-1.el7.noarch"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输入插件TCP示例"><a href="#输入插件TCP示例" class="headerlink" title="输入插件TCP示例"></a>输入插件TCP示例</h1><p>logstash从本机端口读取数据，其他机器通过nc工具发送数据到logstash指定的端口</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  tcp <span class="token punctuation">{</span>    port =><span class="token number">12345</span>    # 监听<span class="token number">12345</span>端口    type =><span class="token string">"nc"</span>        # 通过nc工具使用tcp/udp连接去发送网络数据给logstash  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"type"</span> => <span class="token string">"nc"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T06<span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">13</span>.448Z<span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"10.10.110.191"</span><span class="token punctuation">,</span>          <span class="token string">"port"</span> => <span class="token number">35228</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"we"</span>    # logstash接收到其他机器nc工具发送过来的信息(nc <span class="token number">10.10</span>.<span class="token number">110.194</span> <span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"type"</span> => <span class="token string">"nc"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T06<span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">40</span>.148Z<span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"10.10.110.191"</span><span class="token punctuation">,</span>          <span class="token string">"port"</span> => <span class="token number">35228</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"test"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编解码插件Json示例"><a href="#编解码插件Json示例" class="headerlink" title="编解码插件Json示例"></a>编解码插件Json示例</h1><p>只有输入json格式的数据才会被成功编解码，不是json格式的数据logstash不处理</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>    codec => json <span class="token punctuation">{</span>    charset => <span class="token punctuation">[</span><span class="token string">"UTF-8"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>  codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"孙七"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"555@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"听音乐、看电影"</span><span class="token punctuation">}</span><span class="token punctuation">{</span>         <span class="token string">"hobby"</span> => <span class="token string">"听音乐、看电影"</span><span class="token punctuation">,</span>          <span class="token string">"name"</span> => <span class="token string">"孙七"</span><span class="token punctuation">,</span>          <span class="token string">"mail"</span> => <span class="token string">"555@qq.com"</span><span class="token punctuation">,</span>           <span class="token string">"age"</span> => <span class="token number">24</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">09</span>-01T14<span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">24</span>.066Z<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编解码插件Multline示例"><a href="#编解码插件Multline示例" class="headerlink" title="编解码插件Multline示例"></a>编解码插件Multline示例</h1><p>multline会将不是以字母开头的行合并到上一行(next是合并到下一行)，下面模拟java日志报错</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>    codec => multiline <span class="token punctuation">{</span>    pattern => <span class="token string">"^\s"</span>    what => <span class="token string">"previous"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>  codec => rubydebug   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token number">2020</span>-<span class="token number">08</span>-<span class="token number">13</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">195</span> --AsyncResolver-bootstrap-executor<span class="token number">-0</span>--    # 模拟java报错信息      at com.curre      at org.sprin      at org.sprin<span class="token punctuation">{</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">09</span>-01T14<span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">50</span>.642Z<span class="token punctuation">,</span>          <span class="token string">"tags"</span> => <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token string">"multiline"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"[INFO] 2020-08-13 15:56:53,195 --AsyncResolver-bootstrap-executor-0--\n      at com.curre\n      at org.sprin\n      at org.sprin"</span><span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="过滤插件Json示例"><a href="#过滤插件Json示例" class="headerlink" title="过滤插件Json示例"></a>过滤插件Json示例</h1><p>将json数据做过滤放在content字段里面</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span>  json <span class="token punctuation">{</span>    source => <span class="token string">"message"</span>    target => <span class="token string">"content"</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"request"</span><span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"404"</span><span class="token punctuation">,</span> <span class="token property">"bytes"</span><span class="token operator">:</span><span class="token string">"563"</span><span class="token punctuation">}</span>    # 数据源<span class="token punctuation">{</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T09<span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">26</span>.702Z<span class="token punctuation">,</span>       <span class="token string">"content"</span> => <span class="token punctuation">{</span>        <span class="token string">"request"</span> => <span class="token string">"get"</span><span class="token punctuation">,</span>          <span class="token string">"bytes"</span> => <span class="token string">"563"</span><span class="token punctuation">,</span>         <span class="token string">"status"</span> => <span class="token string">"404"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token property">"{\"request\":\"get\", \"status\":\"404\", \"bytes\"</span><span class="token operator">:</span>\<span class="token string">"563\"}"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="过滤插件Kv示例"><a href="#过滤插件Kv示例" class="headerlink" title="过滤插件Kv示例"></a>过滤插件Kv示例</h1><p>以&amp;和?作为分隔符，得到key=value形式的数据</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter <span class="token punctuation">{</span>  kv <span class="token punctuation">{</span>    field_split => "&amp;?<span class="token property">"              # 以&amp;和?作为分隔符,得到key=value的形式    field_split_pattern => "</span><span class="token operator">:</span>+"      # 以一个或者多个<span class="token operator">:</span>作为分隔符  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  stdout <span class="token punctuation">{</span>    codec => rubydebug  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-json"><code class="language-json">pin=<span class="token number">12345</span>~<span class="token number">0</span>&amp;d=<span class="token number">123</span>&amp;e=foo@bar.com&amp;oq=bo?oi=bo&amp;ss=<span class="token number">12345</span><span class="token operator">:</span>    # 数据源<span class="token punctuation">{</span>             <span class="token string">"d"</span> => <span class="token string">"123"</span><span class="token punctuation">,</span>           <span class="token string">"pin"</span> => <span class="token string">"12345~0"</span><span class="token punctuation">,</span>            <span class="token string">"ss"</span> => <span class="token string">"12345:"</span><span class="token punctuation">,</span>            <span class="token string">"oq"</span> => <span class="token string">"bo"</span><span class="token punctuation">,</span>            <span class="token string">"oi"</span> => <span class="token string">"bo"</span><span class="token punctuation">,</span>             <span class="token string">"e"</span> => <span class="token string">"foo@bar.com"</span><span class="token punctuation">,</span>    <span class="token string">"@timestamp"</span> => <span class="token number">2020</span>-<span class="token number">08</span>-13T09<span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">41</span>.881Z<span class="token punctuation">,</span>          <span class="token string">"host"</span> => <span class="token string">"localhost.localdomain"</span><span class="token punctuation">,</span>       <span class="token string">"message"</span> => <span class="token string">"pin=12345~0&amp;d=123&amp;e=foo@bar.com&amp;oq=bo?oi=bo&amp;ss=12345:"</span><span class="token punctuation">,</span>      <span class="token string">"@version"</span> => <span class="token string">"1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出插件ES示例"><a href="#输出插件ES示例" class="headerlink" title="输出插件ES示例"></a>输出插件ES示例</h1><p>logstash将日志输出到ES节点，存储到missf这个index并且以时间去命名</p><pre class="line-numbers language-json"><code class="language-json">output <span class="token punctuation">{</span>  elasticsearch <span class="token punctuation">{</span>    hosts => <span class="token string">"localhost:9200"</span>    index => <span class="token string">"missf-%{+YYYY.MM.dd}"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Logstash概述&quot;&gt;&lt;a href=&quot;#Logstash概述&quot; class=&quot;headerlink&quot; title=&quot;Logstash概述&quot;&gt;&lt;/a&gt;Logstash概述&lt;/h1&gt;&lt;p&gt;logstash是elasticsearch的数据管道，负责对数据源进行处理
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Elasticsearch(2)</title>
    <link href="https://www.missf.top/post/1abc58c4.html"/>
    <id>https://www.missf.top/post/1abc58c4.html</id>
    <published>2020-08-05T10:26:09.000Z</published>
    <updated>2020-09-09T08:57:44.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch简介"><a href="#Elasticsearch简介" class="headerlink" title="Elasticsearch简介"></a>Elasticsearch简介</h1><p>Elasticsearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发，并作为Apache许可条款下的开放源代码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索、稳定、可靠、快速、使用方便</p><p>我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多用户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题及可能出现的更多其它问题</p><h1 id="Elasticsearch集群部署"><a href="#Elasticsearch集群部署" class="headerlink" title="Elasticsearch集群部署"></a>Elasticsearch集群部署</h1><p>Elasticsearch的发展是非常快速的，所以在ES5.0之前，ELK的各个版本都不统一，出现了版本号混乱的状态，所以从5.0开始，所有Elastic Stack中的项目全部统一版本号。目前最新版本是7.8.1</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 环境准备</span>ES1 10.10.110.191ES2 10.10.110.192ES3 10.10.110.193<span class="token comment" spellcheck="true"># 下载elasticsearch和校验文件</span><span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.1-x86_64.rpm<span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.1-x86_64.rpm.sha512<span class="token comment" spellcheck="true"># 安装elasticsearch</span>shasum -a 512 -c elasticsearch-7.8.1-x86_64.rpm.sha512yum <span class="token function">install</span> -y elasticsearch-7.8.1-x86_64.rpm<span class="token comment" spellcheck="true"># 修改jvm启动参数,根据自己机器决定</span>vim /etc/elasticsearch/jvm.options-Xms512m    <span class="token comment" spellcheck="true"># 确保Xmx和Xms的大小是相同的，其目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源</span>-Xmx512m<span class="token comment" spellcheck="true"># 修改进程在VMAs(虚拟内存区域)创建内存映射最大数量</span><span class="token keyword">echo</span> <span class="token string">"vm.max_map_count=655360"</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&amp;&amp;</span> sysctl -p<span class="token comment" spellcheck="true"># 修改elasticsearch配置文件</span><span class="token function">grep</span> -v <span class="token string">'^#'</span> /etc/elasticsearch/elasticsearch.ymlcluster.name: elk-cluster    <span class="token comment" spellcheck="true"># 集群名称,所有节点一样</span>node.name: node-1    <span class="token comment" spellcheck="true"># 不同节点,分别用node-1/node-2/node-3...</span>path.data: /var/lib/elasticsearch    <span class="token comment" spellcheck="true"># 数据目录,如果加入集群失败可以清空数据目录再重启服务</span>path.logs: /var/log/elasticsearch    <span class="token comment" spellcheck="true"># 日志目录</span>network.host: 10.10.110.191        <span class="token comment" spellcheck="true"># 不同节点,分别用10.10.110......</span>http.port: 9200        <span class="token comment" spellcheck="true"># 监听端口</span>discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">"10.10.110.191"</span>, <span class="token string">"10.10.110.192"</span>, <span class="token string">"10.10.110.193"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 集群发现,可以写成10.10.110.191:9200</span>cluster.initial_master_nodes: <span class="token punctuation">[</span><span class="token string">"node-1"</span>, <span class="token string">"node-2"</span>, <span class="token string">"node-3"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 指定可以成为master的节点,此参数只有在初始化集群时生效</span><span class="token comment" spellcheck="true"># 启动elasticsearch服务</span>systemctl start elasticsearch.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Elasticsearch集群常用查询"><a href="#Elasticsearch集群常用查询" class="headerlink" title="Elasticsearch集群常用查询"></a>Elasticsearch集群常用查询</h1><p>查看集群状态</p><pre class="line-numbers language-json"><code class="language-json">curl -X GET http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/_cluster/health?pretty# 响应<span class="token punctuation">{</span>  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"elk-cluster"</span><span class="token punctuation">,</span>  <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span>    # 集群状态红绿灯<span class="token punctuation">,</span>绿<span class="token operator">:</span>健康<span class="token punctuation">,</span>黄<span class="token operator">:</span>亚健康<span class="token punctuation">,</span>红<span class="token operator">:</span>病态  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"number_of_nodes"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token property">"number_of_data_nodes"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token property">"active_primary_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"active_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"relocating_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"initializing_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"unassigned_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"delayed_unassigned_shards"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"number_of_pending_tasks"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"number_of_in_flight_fetch"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"task_max_waiting_in_queue_millis"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"active_shards_percent_as_number"</span> <span class="token operator">:</span> <span class="token number">100.0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看节点状态</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">'http://10.10.110.191:9200/_cat/nodes?v'</span>ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name10.10.110.191           62          93   0    0.00    0.01     0.05 dilmrt    -      node-110.10.110.193           62          74   0    0.00    0.01     0.05 dilmrt    *      node-3    <span class="token comment" spellcheck="true"># *代表当前节点是master</span>10.10.110.192           70          75   0    0.00    0.01     0.05 dilmrt    -      node-2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询节点所有索引</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">'http://10.10.110.191:9200/_cat/indices?v'</span>health status index uuid                   pri rep docs.count docs.deleted store.size pri.store.sizegreen  <span class="token function">open</span>   data  njHuT0XvSOa2NHPJM3Aj-g   1   1          3            0     19.5kb          9.7kb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询一个索引所有数据</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">'http://10.10.110.191:9200/data/_search/?pretty'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Elasticsearch-head安装"><a href="#Elasticsearch-head安装" class="headerlink" title="Elasticsearch-head安装"></a>Elasticsearch-head安装</h1><p>由于ES官方并没有为ES提供界面管理工具，仅仅是提供了后台的服务。elasticsearch-head是一个为ES开发的一个页面客户端工具，其源码托管于GitHub，地址为：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a></p><p>elasticsearch-head提供了四种安装方式：</p><ul><li><p>源码安装通过npm run start启动(不推荐)</p></li><li><p>通过docker安装(推荐)</p></li><li><p>通过chrome插件安装(推荐)</p></li><li><p>通过ES的plugin方式安装(不推荐)</p></li></ul><p>通过docker安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 拉取镜像</span>docker pull mobz/elasticsearch-head:5<span class="token comment" spellcheck="true"># 启动容器</span>docker run -itd --name <span class="token string">"elasticsearch-head"</span> -p 9100:9100 -v elasticsearch_head:/usr/src/app --restart always mobz/elasticsearch-head:5<span class="token comment" spellcheck="true"># 由于前后端分离开发,所以会存在跨域问题,需要在服务端做CORS的配置</span>vim /etc/elasticsearch/elasticsearch.ymlhttp.cors.enabled: <span class="token boolean">true</span>http.cors.allow-origin: <span class="token string">"*"</span><span class="token comment" spellcheck="true"># Web访问</span>http://10.10.110.191:9100/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Elasticsearch Head数据浏览不显示数据，使用浏览器按F12查看发现406 Not Acceptable错误，出现这个错误是因为后台返回的数据是json格式前台无法解析，解决方法如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 找到docker数据卷在宿主机上的目录</span>docker volume inspect elasticsearch_head<span class="token comment" spellcheck="true"># 修改数据卷目录下_site/vendor.js文件</span>contentType: <span class="token string">"application/x-www-form-urlencoded"</span> 修改为 contentType: <span class="token string">"application/json;charset=UTF-8"</span>var inspectData <span class="token operator">=</span> s.contentType <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"application/x-www-form-urlencoded"</span> <span class="token operator">&amp;&amp;</span> 修改为 var inspectData <span class="token operator">=</span> s.contentType <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"application/json;charset=UTF-8"</span> <span class="token operator">&amp;&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Elasticsearch基本概念"><a href="#Elasticsearch基本概念" class="headerlink" title="Elasticsearch基本概念"></a>Elasticsearch基本概念</h1><p>索引(index)是Elasticsearch存放数据的地方，可以理解为关系型数据库的数据库。我们的数据被存储和索引在分片(shards)中，索引只是一个把一个或多个分片分组在一起的逻辑空间。索引的结构是为快速有效的全文索引准备的，索引名称必须是小写，并且不能用下划线开头</p><p>类型(type)用于区分同一个索引下不同的数据类型，相当于关系型数据库中的表。在Elasticsearch中，我们使用相同类型的文档表示相同的”事物”，因为他们的数据结构也是相同的。每个类型都有自己的映射(mapping)或者结构定义，就像传统数据库表中的列一样。所有类型下的文档被存储在同一个索引下，但是类型的映射会告诉Elasticsearch不同的文档如何被索引(ES6.0之后一个索引只能存在一种类型)</p><p>文档(document)是ElasticSearch中存储的实体数据，一个文档相当于数据库表中的一行记录。在Elasticsearch中，文档这个术语有着特殊含义。它特指最顶层结构或者根对象(root object)序列化成的JSON数据(以唯一ID标识并存储于Elasticsearch中)</p><p>关系型数据库与Elasticsearch的概念类比如下</p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">Relational DB</td><td align="center">Databases</td><td align="center">Tables</td><td align="center">Rows</td><td align="center">Columns</td></tr><tr><td align="center">Elasticsearch</td><td align="center">Indices</td><td align="center">Types</td><td align="center">Documents</td><td align="center">Fields</td></tr></tbody></table><h1 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h1><p>在Elasticsearch中，提供了功能丰富的RESTful API的操作，包括基本的CRUD、创建索引、删除索引等操作。RESTful是统一规范的http接口，任何语言都可以使用。我们可以直接使用web客户端(postman)来测试，甚至还可以使用Linux上的curl工具测试，不需要自己写程序来调用Elasticsearch服务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Elasticsearch RESTful操作数据的风格</span>curl -X <span class="token operator">&lt;</span>verb<span class="token operator">></span> <span class="token string">'&lt;protocol>://&lt;host>:&lt;port>/&lt;path>?&lt;query_string> -d &lt;body>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>verb: HTTP方法，如GET、POST、PUT、HEAD、DELETE</p><p>host: ES集群中的任意节点主机名</p><p>port: ES HTTP服务端口默认9200</p><p>path: 索引路径</p><p>query_string: 可选的查询请求参数，例如?pretty参数将格式化输出JSON数据</p><p>-d: 一个GET的JSON格式请求主体</p><p>body: 自己写的JSON格式的请求主体</p><h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><p>在Lucene中创建索引是需要定义字段名称以及字段的类型，在Elasticsearch中提供了非结构化的索引，就是不需要创建索引结构，即可写入数据到索引中，实际上在Elasticsearch底层会进行结构化操作，此操作对用户是透明的</p><pre class="line-numbers language-apl"><code class="language-apl"><span class="token comment" spellcheck="true"># 创建一个data的空索引</span>curl <span class="token function">-</span>X PUT <span class="token string">'10.10.110.191:9200/data'</span><span class="token comment" spellcheck="true"># 删除索引</span>curl <span class="token function">-</span>X DELETE <span class="token string">'10.10.110.191:9200/data'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>URL规则：POST /索引/类型/id</p><pre class="line-numbers language-json"><code class="language-json"># 往data这个索引下的user类型中插入一条ID为<span class="token number">1</span>的数据<span class="token punctuation">,</span>?pretty是以json格式返回数据curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/<span class="token number">1</span>?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"mowenjie"</span><span class="token punctuation">,</span><span class="token property">"job"</span><span class="token operator">:</span> <span class="token string">"DevOps"</span><span class="token punctuation">,</span><span class="token property">"base"</span><span class="token operator">:</span> <span class="token string">"sz"</span><span class="token punctuation">}</span>'# 响应<span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span># 不指定ID插入数据会自动生成IDcurl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"missf"</span><span class="token punctuation">,</span><span class="token property">"job"</span><span class="token operator">:</span> <span class="token string">"linux"</span><span class="token punctuation">,</span><span class="token property">"base"</span><span class="token operator">:</span> <span class="token string">"sz"</span><span class="token punctuation">}</span>'# 响应<span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"-J1PMXQBkHjO2vDovLJx"</span><span class="token punctuation">,</span>      <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h1><p>在Elasticsearch中可以通过覆盖的方式对数据进行更新</p><pre class="line-numbers language-json"><code class="language-json"># 对ID为<span class="token number">1</span>的这条数据进行更新curl -X PUT '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/<span class="token number">1</span>?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"fan"</span><span class="token punctuation">,</span><span class="token property">"job"</span><span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span><span class="token property">"base"</span><span class="token operator">:</span> <span class="token string">"bj"</span><span class="token punctuation">}</span>'# 查询更新结果curl -X GET '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/<span class="token number">1</span>?pretty'<span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    # 更新之后的数据版本进行了+<span class="token number">1</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"found"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"fan"</span><span class="token punctuation">,</span>    <span class="token property">"job"</span> <span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span>    <span class="token property">"base"</span> <span class="token operator">:</span> <span class="token string">"bj"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 上面是更新整条数据<span class="token punctuation">,</span>下面是局部更新一条数据的某些字段<span class="token punctuation">,</span>需要使用_update标识curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/<span class="token number">1</span>/_update?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span><span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"aaa"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h1><p>在Elasticsearch中，删除文档数据只需要发起DELETE请求即可</p><pre class="line-numbers language-json"><code class="language-json"># 删除ID为<span class="token number">1</span>的这条数据curl -X DELETE 'http<span class="token operator">:</span>//<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/<span class="token number">1</span>?pretty'# 响应<span class="token punctuation">,</span>看到返回<span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"deleted"</span>就表示删除成功<span class="token punctuation">,</span>如果删除一条不存在的数据会返回<span class="token number">404</span><span class="token punctuation">{</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"deleted"</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除一个文档也不会立即从磁盘上移除，它只是被标记成已删除。Elasticsearch将会在你之后添加更多索引的时候才在后台进行删除内容的清理</p><h1 id="搜索数据"><a href="#搜索数据" class="headerlink" title="搜索数据"></a>搜索数据</h1><p>根据id搜索数据</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">'10.10.110.191:9200/data/user/003?pretty'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索全部数据</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X GET <span class="token string">'10.10.110.191:9200/data/user/_search?pretty'</span>    <span class="token comment" spellcheck="true"># 响应默认只返回10条数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关键字搜素数据</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查询base等于sz的用户数据</span>curl -X GET <span class="token string">'10.10.110.191:9200/data/user/_search?q=base:sz'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="DSL搜索"><a href="#DSL搜索" class="headerlink" title="DSL搜索"></a>DSL搜索</h1><p>Elasticsearch提供基于JSON的完整查询语言DSL(Query DSL)来定义查询，它允许你构建更加复杂、强大的查询</p><pre class="line-numbers language-json"><code class="language-json"># 查询base等于sz的用户curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>    # 请求体  <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"base"</span> <span class="token operator">:</span> <span class="token string">"sz"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'# 查询age大于<span class="token number">16</span>且job等于Linux的用户curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>             <span class="token property">"gt"</span><span class="token operator">:</span> <span class="token number">16</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"job"</span><span class="token operator">:</span> <span class="token string">"Linux"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'# 全文搜索curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"miss lisi"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h1><p>查询得到需要高亮的数据，再使用highlight将需要高亮的字段写在fields里面</p><pre class="line-numbers language-json"><code class="language-json">curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"miss lisi"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>在Elasticsearch中支持聚合操作，类似SQL中的group by操作</p><pre class="line-numbers language-json"><code class="language-json"># 根据字段值分组聚合curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"age_terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'# 响应<span class="token punctuation">,</span>age字段值为<span class="token number">16</span>的有<span class="token number">1</span>条数据<span class="token punctuation">,</span>age字段值为<span class="token number">25</span>的有<span class="token number">2</span>条数据<span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"age_terms"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"doc_count_error_upper_bound"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"sum_other_doc_count"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"buckets"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>        <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">2</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>        <span class="token property">"doc_count"</span> <span class="token operator">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>一个文档不只有数据，它还包含了元数据(metadata)——关于文档的信息。三个必须的元数据节点是</p><table><thead><tr><th>节点</th><th>说明</th></tr></thead><tbody><tr><td>_index</td><td>文档存储的地方</td></tr><tr><td>_type</td><td>文档代表的对象的类</td></tr><tr><td>_id</td><td>文档的唯一标识</td></tr></tbody></table><p>索引(index)类似于关系型数据库里的”数据库”——它是我们存储和索引关联数据的地方</p><p>_type(类型)，在关系型数据库中，我们经常将相同类的对象存储在一个表里，因为它们有着相同的结构。同理，在Elasticsearch中我们使用相同类型(type)的文档表示相同的”事物”，因为他们的数据结构也是相同的</p><p>id仅仅是一个字符串，它与_index和_type组合时，就可以在Elasticsearch中唯一标识一个文档。当创建一个文档时你可以自定义_id ，也可以让Elasticsearch帮你自动生成</p><h1 id="响应查询"><a href="#响应查询" class="headerlink" title="响应查询"></a>响应查询</h1><p>指定响应字段</p><pre class="line-numbers language-apl"><code class="language-apl"><span class="token comment" spellcheck="true"># 只响应_source下的name,job字段</span>curl <span class="token function">-</span>X GET <span class="token string">'10.10.110.191:9200/data/user/001/?_source=name,job'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不返回元数据，仅仅返回原始数据</p><pre class="line-numbers language-apl"><code class="language-apl">curl <span class="token function">-</span>X GET <span class="token string">'10.10.110.191:9200/data/user/001/_source'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="判断文档存在"><a href="#判断文档存在" class="headerlink" title="判断文档存在"></a>判断文档存在</h1><p>如果我们只需要判断文档是否存在，而不查询文档内容</p><pre class="line-numbers language-apl"><code class="language-apl"><span class="token comment" spellcheck="true"># 如果文档存在,Elasticsearch将返回HTTP/1.1 200 OK,如果不存在就返回HTTP/1.1 404 Not Found</span>curl <span class="token function">-</span>i <span class="token function">-</span>X HEAD <span class="token string">'http://10.10.110.191:9200/data/user/001'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然，这只表示你在查询的那一刻文档不存在，但并不表示几毫秒后依旧不存在，另一个进程在这期间可能创建新文档</p><h1 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h1><p>有些情况下可以通过批量操作以减少网络请求，如：批量查询、批量插入数据</p><pre class="line-numbers language-json"><code class="language-json"># 批量查询curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/data/user/_mget?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"ids"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"002"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>'# 响应<span class="token punctuation">{</span>  <span class="token property">"docs"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>      <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>      <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"001"</span><span class="token punctuation">,</span>      <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"found"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span>        <span class="token property">"job"</span> <span class="token operator">:</span> <span class="token string">"Python"</span><span class="token punctuation">,</span>        <span class="token property">"base"</span> <span class="token operator">:</span> <span class="token string">"sh"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">16</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span>      <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>      <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"002"</span><span class="token punctuation">,</span>      <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"found"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"mowenjie"</span><span class="token punctuation">,</span>        <span class="token property">"job"</span> <span class="token operator">:</span> <span class="token string">"Linux"</span><span class="token punctuation">,</span>        <span class="token property">"base"</span> <span class="token operator">:</span> <span class="token string">"sz"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">36</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p>和SQL使用LIMIT关键字返回只有一页的结果一样，Elasticsearch接受from和size参数</p><pre class="line-numbers language-bash"><code class="language-bash">size: 结果数,默认10 from: 从第n条数据之后开始,默认0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询一个区间的数据</p><pre class="line-numbers language-json"><code class="language-json"># 导入官方测试数据curl -H <span class="token string">"Content-Type: application/x-ndjson"</span> -XPOST <span class="token string">"10.10.110.191:9200/bank/account/_bulk?pretty"</span> --data-binary @accounts.json# 将数据的account_number字段进行排序之后再取数据curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d '<span class="token punctuation">{</span><span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"account_number"</span><span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    # 从第<span class="token number">10</span>条数据之后开始<span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">30</span>    # 一共返回<span class="token number">30</span>条数据<span class="token punctuation">,</span>就是account_number为<span class="token number">10</span>-<span class="token number">39</span>的数据<span class="token punctuation">}</span>'# 取<span class="token number">1000</span>到<span class="token number">2000</span>这个区间的随机数据curl -X GET <span class="token string">"http://10.10.110.191:9200/bank/account/_search?pretty"</span> -H <span class="token string">"Content-Type:application/json"</span> -d'<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>            <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">2000</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><p>前面我们创建的索引以及插入数据，都是由Elasticsearch进行自动判断类型，有些时候我们是需要进行明确字段类型的，否则自动判断的类型和实际需求是不相符的。每个字段都有一个数据类型，可以是一个简单的类型：text、keyword、date、long、double、boolean、ip，或者一个支持JSON层次结构的类型：例如object、nested，或者是一种特殊的类型：geo_point、geo_shape、completion</p><p>创建明确类型的索引</p><pre class="line-numbers language-json"><code class="language-json">curl -X PUT '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>      <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"0"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"mail"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"hobby"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看索引映射</p><pre class="line-numbers language-apl"><code class="language-apl">curl <span class="token function">-</span>X GET <span class="token string">'10.10.110.191:9200/itcast/_mapping'</span><span class="token comment" spellcheck="true"># 响应</span><span class="token dfn builtin">{</span>  "itcast" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>    "mappings" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>      "properties" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>        "age" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>          "type" <span class="token dfn builtin">:</span> "integer"        <span class="token dfn builtin">}</span><span class="token function">,</span>        "hobby" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>          "type" <span class="token dfn builtin">:</span> "text"        <span class="token dfn builtin">}</span><span class="token function">,</span>        "mail" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>          "type" <span class="token dfn builtin">:</span> "keyword"        <span class="token dfn builtin">}</span><span class="token function">,</span>        "name" <span class="token dfn builtin">:</span> <span class="token dfn builtin">{</span>          "type" <span class="token dfn builtin">:</span> "text"        <span class="token dfn builtin">}</span>      <span class="token dfn builtin">}</span>    <span class="token dfn builtin">}</span>  <span class="token dfn builtin">}</span><span class="token dfn builtin">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>批量插入数据</p><pre class="line-numbers language-json"><code class="language-json"># 如果插入的数据类型与我们字段定义的类型不同<span class="token punctuation">,</span>那么就无法插入curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast/_bulk' -H <span class="token string">"Content-Type:application/json"</span> --data-binary @itcast.json<span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"111@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"羽毛球、乒乓球、足球"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"222@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"羽毛球、乒乓球、足球、篮球"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"333@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"羽毛球、篮球、游泳、听音乐"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"4"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"444@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"跑步、游泳"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"5"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"孙七"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span><span class="token property">"mail"</span><span class="token operator">:</span> <span class="token string">"555@qq.com"</span><span class="token punctuation">,</span><span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"听音乐、看电影"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询插入的数据</p><pre class="line-numbers language-apl"><code class="language-apl">curl <span class="token function">-</span>X POST <span class="token string">'10.10.110.191:9200/itcast/_doc/_search?pretty'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="结构化查询"><a href="#结构化查询" class="headerlink" title="结构化查询"></a>结构化查询</h1><p>term主要用于精确匹配某些值，比如数字、日期、布尔值或not_analyzed的字符串(未经分析的文本数据类型)</p><pre class="line-numbers language-json"><code class="language-json">curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast/_doc/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"term"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">20</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>range过滤允许我们按照指定范围查询一批数据</p><pre class="line-numbers language-json"><code class="language-json"># 查询age大于等于<span class="token number">20</span>小于等于<span class="token number">22</span>范围的数据(gt<span class="token operator">:</span>大于<span class="token punctuation">,</span>gte<span class="token operator">:</span>大于等于<span class="token punctuation">,</span>lt<span class="token operator">:</span>小于<span class="token punctuation">,</span>lte<span class="token operator">:</span>小于等于<span class="token punctuation">)</span>curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/bank/account/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">22</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exists查询可以用于查找文档中是否包含指定字段或没有某个字段，类似于SQL语句中的IS_NULL条件</p><pre class="line-numbers language-json"><code class="language-json"># 查询原始数据中含有address字段的文档curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/bank/account/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"exists"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"address"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>match是一个模糊查询，需要指定字段名，但是会进行分词(中英文分词不一样)</p><pre class="line-numbers language-json"><code class="language-json"># 查询hobby字段是乒乓球的记录<span class="token punctuation">,</span>在查询之前会进行分词(只要记录包含<span class="token punctuation">[</span>乒/乓/球<span class="token punctuation">]</span>都会被匹配成功<span class="token punctuation">)</span>curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast/_doc/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"hobby"</span><span class="token operator">:</span> <span class="token string">"乒乓球"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bool查询可以用来合并多个条件查询结果的布尔逻辑，它包含以下操作符：</p><blockquote><p>must: 多个查询条件的完全匹配，相当于and</p></blockquote><blockquote><p>must_not: 多个查询条件的相反匹配，相当于not</p></blockquote><blockquote><p>should: 至少有一个查询条件匹配，相当于or</p></blockquote><blockquote><p>filter: 必须匹配，但它不会对匹配的数据进行评分</p></blockquote><pre class="line-numbers language-json"><code class="language-json"># 只要包含<span class="token string">"乒乓 游泳"</span>的数据都会被匹配curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast/_doc/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"hobby"</span><span class="token operator">:</span> <span class="token string">"乒乓 游泳"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'# hobby包含乒乓但是age不等于<span class="token number">21</span>的数据curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/itcast/_doc/_search?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>   <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"hobby"</span><span class="token operator">:</span> <span class="token string">"乒乓"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"21"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h1><p>中文分词的难点在于在汉语中没有明显的词汇分界点，如在英语中空格可以作为分隔符，如果分隔不正确就会造成歧义。常用中文分词器有IK、jieba、THULAC等，推荐使用IK分词器</p><blockquote><p>IK Analyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。从2006年12月推出1.0版开始，IKAnalyzer已经推出了3个大版本。最初，它是以开源项目Luence为应用主体的，结合词典分词和文法分析算法的中文分词组件。新版本的IK Analyzer 3.0则发展为面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。采用了特有的”正向迭代最细粒度切分算法”，具有80万字/秒的高速处理能力 采用了多子处理器分析模式，支持：英文字母（IP地址、Email、URL）、数字（日期，常用中文数量词，罗马数字，科学计数法），中文词汇（姓名、地名处理）等分词处理。 优化的词典存储，更小的内存占用</p></blockquote><p>安装ik中文分词器</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载对应es版本的ik分词器</span>https://github.com/medcl/elasticsearch-analysis-ik<span class="token comment" spellcheck="true"># 创建目录</span><span class="token function">cd</span> your-es-root/plugins/ <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> ik<span class="token comment" spellcheck="true"># 解压</span>unzip plugin to folder your-es-root/plugins/ik<span class="token comment" spellcheck="true"># 重启es(集群环境每一台都要配置)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分词测试</p><pre class="line-numbers language-json"><code class="language-json">curl -X POST '<span class="token number">10.10</span>.<span class="token number">110.191</span><span class="token operator">:</span><span class="token number">9200</span>/_analyze?pretty' -H <span class="token string">"Content-Type:application/json"</span> -d ' <span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"我是中国人"</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"tokens"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"我"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"是"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"中国人"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"国人"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Elasticsearch简介&quot;&gt;&lt;a href=&quot;#Elasticsearch简介&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch简介&quot;&gt;&lt;/a&gt;Elasticsearch简介&lt;/h1&gt;&lt;p&gt;Elasticsearch是一个基于
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Stack(1)</title>
    <link href="https://www.missf.top/post/cb83e724.html"/>
    <id>https://www.missf.top/post/cb83e724.html</id>
    <published>2020-08-05T06:19:27.000Z</published>
    <updated>2020-09-03T09:26:42.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elastic-Stack简介"><a href="#Elastic-Stack简介" class="headerlink" title="Elastic Stack简介"></a>Elastic Stack简介</h1><p>ELK日志收集分析平台相信所有的运维工程师都听说过，实际上ELK不是一门技术，而是三个软件的简称。它们分别是由Elasticsearch、Logstash、Kibana组成，在ELK发展的过程中，又有新成员Beats的加入，所以就形成了Elastic Stack</p><p>Elastic Stack的组成</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f46336d160a154a677a6088.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p>Elasticsearch基于java语言开发，是个开源分布式搜索引擎，它的特点有:分布式、零配置、自动发现、索引自动分片、索引副本机制、RESTful风格接口、多数据源、自动搜索负载等</p><h1 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h1><p>Logstash基于java语言开发，是一个开源的用于收集，分析和存储日志的工具</p><h1 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h1><p>Kibana基于nodejs，也是一个开源和免费的工具，Kibana可以为 Logstash和ElasticSearch提供的日志分析的友好Web界面，可以汇总、分析和搜索重要数据日志</p><h1 id="Beats"><a href="#Beats" class="headerlink" title="Beats"></a>Beats</h1><p>Beats是elastic公司开源的一款采集系统监控数据的代理agent，是在被监控服务器上以客户端形式运行的数据收集器的统称，可以直接把数据发送给Elasticsearch或者通过Logstash发送给Elasticsearch，然后进行后续的数据分析活动</p><p>Beats由如下组成：</p><ul><li><p>Packetbeat：一个网络数据包分析器，用于监控、收集网络流量信息，Packetbeat嗅探服务器之间的流量，解析应用层协议，并关联到消息的处理，其支持ICMP(v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、Redis、MongoDB、Memcache等协议</p></li><li><p>Filebeat：用于监控、收集服务器日志文件，其已取代logstash forwarder</p></li><li><p>Metricbeat：可定期获取外部系统的监控指标信息，其可以监控、收集 Apache、HAProxy、MongoDB、MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper等服务</p></li><li><p>Winlogbeat：用于监控、收集Windows系统的日志信息</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Elastic-Stack简介&quot;&gt;&lt;a href=&quot;#Elastic-Stack简介&quot; class=&quot;headerlink&quot; title=&quot;Elastic Stack简介&quot;&gt;&lt;/a&gt;Elastic Stack简介&lt;/h1&gt;&lt;p&gt;ELK日志收集分析平台相信所有的运维
      
    
    </summary>
    
    
      <category term="Elastic Stack" scheme="https://www.missf.top/categories/Elastic-Stack/"/>
    
    
      <category term="ELK" scheme="https://www.missf.top/tags/ELK/"/>
    
      <category term="企业级日志系统" scheme="https://www.missf.top/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据收集分析" scheme="https://www.missf.top/tags/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus的pushgateway工具(8)</title>
    <link href="https://www.missf.top/post/5cf39589.html"/>
    <id>https://www.missf.top/post/5cf39589.html</id>
    <published>2020-08-04T10:05:33.000Z</published>
    <updated>2020-08-28T03:02:24.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PushGateway部署"><a href="#PushGateway部署" class="headerlink" title="PushGateway部署"></a>PushGateway部署</h1><p>prometheus基于http的pull方式去采集时间序列数据，但是由于业务需求，prometheus和exporter可能不在一个子网或者防火墙原因，导致Prometheus无法直接拉取各个target数据，或者需要将不同的数据进行汇总，这时候就可以使用prometheus的自带组件pushgateway进行数据的汇总，将默认的pull方式改为push方式进行数据的采集</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载pushgateway</span><span class="token function">wget</span> https://github.com/prometheus/pushgateway/releases/download/v1.2.0/pushgateway-1.2.0.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf pushgateway-1.2.0.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> pushgateway-1.2.0.linux-amd64 /usr/local/pushgateway<span class="token comment" spellcheck="true"># 创建pushgateway启动文件</span>vim /usr/lib/systemd/system/pushgateway.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Documentation<span class="token operator">=</span>pushgateway exporterAfter<span class="token operator">=</span>local-fs.target network-online.target network.targetWants<span class="token operator">=</span>local-fs.target network-online.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/pushgateway/pushgateway    <span class="token comment" spellcheck="true"># 需要修改监听端口可以自行添加参数</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 启动pushgateway</span>systemctl start pushgateway.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Prometheus添加PushGateway"><a href="#Prometheus添加PushGateway" class="headerlink" title="Prometheus添加PushGateway"></a>Prometheus添加PushGateway</h1><p>在我们的prometheus配置文件添加pushgateway的地址</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/prometheus.yml<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'pushgateway'</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'49.233.200.185:9091'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 这个是安装了pushgateway的服务器地址</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">instance</span><span class="token punctuation">:</span> pushgateway<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启prometheus服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pushgateway其实是一个中转站，我们可以使用任何高级语言发送post请求到pushgateway，然后对数据进行增加删除等操作，pushgateway再把数据实时推送到prometheus</p><h1 id="推送数据到PushGateway"><a href="#推送数据到PushGateway" class="headerlink" title="推送数据到PushGateway"></a>推送数据到PushGateway</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"missf 123456"</span> <span class="token operator">|</span> curl --data-binary @- http://49.233.200.185:9091/metrics/job/prometheus<span class="token comment" spellcheck="true"># 数据:missf,值:123456</span><span class="token comment" spellcheck="true"># --data-binary 表示发送二进制数据(post方式)</span><span class="token comment" spellcheck="true"># http://49.233.200.185:9091 pushgateway的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看pushgateway推送到prometheus上的数据，这可以看到有exported_job=”prometheus”和job=”pushgateway”两个指标，我们推送数据时指定的job是prometheus，为什么这里的job会显示pushgateway呢？这里需要修改一个honor_labels的参数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f2a200a14195aa594b740f9.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>修改prometheus的配置文件，开启honor_labels参数(默认为false)</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'pushgateway'</span>    <span class="token key atrule">honor_labels</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'49.233.200.185:9091'</span><span class="token punctuation">]</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">instance</span><span class="token punctuation">:</span> pushgateway<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启prometheus</p><p>再次推送数据到pushgateway，然后查看prometheus上的数据</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"mwj 123456"</span> <span class="token operator">|</span> curl --data-binary @- http://49.233.200.185:9091/metrics/job/prometheus/instance/missf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic.imgdb.cn/item/5f2a245714195aa594b8dbe0.jpg" alt=""></p><p>这里说明一下honor_labels的作用:因为prometheus配置pushgateway的时候，也会指定job和instance，但是它只表示pushgateway实例本身，不能真正表达收集数据的含义。所以配置pushgateway需要添加honor_labels:true参数，避免收集到的数据本身的job和instance被覆盖。具体参考官网</p><h1 id="在PushGateway删除数据"><a href="#在PushGateway删除数据" class="headerlink" title="在PushGateway删除数据"></a>在PushGateway删除数据</h1><pre class="line-numbers language-bash"><code class="language-bash">curl -X DELETE http://49.233.200.185:9091/metrics/job/prometheus/instance/missf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PushGateway部署&quot;&gt;&lt;a href=&quot;#PushGateway部署&quot; class=&quot;headerlink&quot; title=&quot;PushGateway部署&quot;&gt;&lt;/a&gt;PushGateway部署&lt;/h1&gt;&lt;p&gt;prometheus基于http的pull方式去采集
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus业务监控(7)</title>
    <link href="https://www.missf.top/post/f261c617.html"/>
    <id>https://www.missf.top/post/f261c617.html</id>
    <published>2020-08-03T02:26:26.000Z</published>
    <updated>2020-08-28T03:01:55.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blackbox-exporter部署"><a href="#Blackbox-exporter部署" class="headerlink" title="Blackbox_exporter部署"></a>Blackbox_exporter部署</h1><p>Blackbox_exporter是prometheus官方提供的exporter之一，可以提供http、dns、tcp、icmp 的监控数据采集</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载</span><span class="token function">wget</span> https://github.com/prometheus/blackbox_exporter/releases/download/v0.17.0/blackbox_exporter-0.17.0.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf blackbox_exporter-0.17.0.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> blackbox_exporter-0.17.0.linux-amd64 /usr/local/blackbox<span class="token comment" spellcheck="true"># 创建blackbox启动文件</span>vim /usr/lib/systemd/system/blackbox.service <span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Documentation<span class="token operator">=</span>Blackbox exporterAfter<span class="token operator">=</span>local-fs.target network-online.target network.targetWants<span class="token operator">=</span>local-fs.target network-online.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/blackbox/blackbox_exporter --config.file<span class="token operator">=</span>/usr/local/blackbox/blackbox.yml<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 启动blackbox</span>systemctl daemon-reloadsystemctl restart blackbox.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置TCP端口检测及告警"><a href="#配置TCP端口检测及告警" class="headerlink" title="配置TCP端口检测及告警"></a>配置TCP端口检测及告警</h1><p>传统的端口检测方式，调用命令的方式去实现</p><pre class="line-numbers language-bash"><code class="language-bash">ncat -vz 47.100.107.121 80    <span class="token comment" spellcheck="true"># 返回seconds而不是timeout那么端口就是通的</span>telnet <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>zabbix监控端口可以通过模板或者自定义key写脚本实现<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改prometheus配置文件，配置TCP端口检测</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/prometheus.yml<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'nginx_port_check'</span>    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe    <span class="token key atrule">params</span><span class="token punctuation">:</span>      <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>tcp_connect<span class="token punctuation">]</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> check/port/nginx.json    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance      <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__        <span class="token key atrule">replacement</span><span class="token punctuation">:</span> 47.100.107.121<span class="token punctuation">:</span><span class="token number">9115    </span><span class="token comment" spellcheck="true"># 这个是blackbox所在主机以及端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写监控TCP端口的告警规则</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/rules/nginx_port_check.yml<span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx port check   <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> nginx_port_check failed     <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s     <span class="token key atrule">expr</span><span class="token punctuation">:</span> probe_success<span class="token punctuation">{</span>job="nginx_port_check"<span class="token punctuation">}</span> == 0     <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">serverity</span><span class="token punctuation">:</span> critical     <span class="token key atrule">annotations</span><span class="token punctuation">:</span>       <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} port connection fail,{{ $labels.group }} value is:{{ $value }}"</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} port connection failed"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改prometheus配置文件需要重启prometheus服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭Nginx测试当80端口无法访问之后的告警结果</p><p><img src="https://pic.imgdb.cn/item/5f27e91d14195aa594ee2d22.jpg" alt=""></p><h1 id="业务接口检测及告警"><a href="#业务接口检测及告警" class="headerlink" title="业务接口检测及告警"></a>业务接口检测及告警</h1><p>基于现在Java + Vue前后端分离的开发模式下，我们很多时候需要去检测Java的接口是否正常。传统的手动检测可以使用postman，或者写shell脚本也可以实现，但是prometheus可以通过blackbox去更好的检测业务接口</p><p>修改prometheus配置文件，添加监控业务接口的job</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'get_mysite'</span>    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe    <span class="token key atrule">params</span><span class="token punctuation">:</span>      <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>http_2xx<span class="token punctuation">]</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> check/url/*.json    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target      <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>        <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance      <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__        <span class="token key atrule">replacement</span><span class="token punctuation">:</span> 47.100.107.121<span class="token punctuation">:</span><span class="token number">9115</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写监控url链接的告警规则文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/rules/get_mysite.yml<span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> get mysite check  <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> get_mysite_check failed     <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s     <span class="token key atrule">expr</span><span class="token punctuation">:</span> probe_success<span class="token punctuation">{</span>group="get_mysite"<span class="token punctuation">,</span>instance="https<span class="token punctuation">:</span>//www.missf.top"<span class="token punctuation">,</span>job="get_mysite"<span class="token punctuation">}</span> == 0    <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">serverity</span><span class="token punctuation">:</span> critical     <span class="token key atrule">annotations</span><span class="token punctuation">:</span>       <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} failed, {{ $labels.group }} value is:{{ $value }}"</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} website not accessible"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改prometheus配置文件之后记得重启prometheus服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果<a href="https://www.missf.top这个链接的http请求不是返回2xx的状态码就会告警" target="_blank" rel="noopener">https://www.missf.top这个链接的http请求不是返回2xx的状态码就会告警</a></p>{% image https://pic.imgdb.cn/item/5f28fbe914195aa5944ce74b.jpg '' '' %}<p>我们在监控业务接口时，只监控到接口的返回状态(2xx状态码)，假如我们想要监控业务接口的返回内容该如何实现呢？那就需要修改blackbox的配置文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">modules</span><span class="token punctuation">:</span>  <span class="token key atrule">http_2xx</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http<span class="token comment" spellcheck="true"># 下面这段是需要添加的内容 </span>    <span class="token key atrule">http</span><span class="token punctuation">:</span>          <span class="token key atrule">method</span><span class="token punctuation">:</span> GET      <span class="token key atrule">headers</span><span class="token punctuation">:</span>        <span class="token key atrule">Host</span><span class="token punctuation">:</span> www.missf.top        <span class="token key atrule">Accept-Language</span><span class="token punctuation">:</span> en<span class="token punctuation">-</span>US        <span class="token key atrule">Origin</span><span class="token punctuation">:</span> missf.top      <span class="token key atrule">fail_if_body_matches_regexp</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果我get的url地址返回的正文中有"apache",那么就会失败,则probe_success值为0</span>        <span class="token punctuation">-</span> <span class="token string">"apache"</span>      <span class="token key atrule">fail_if_body_not_matches_regexp</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"nginx"</span>    <span class="token comment" spellcheck="true"># 如果我get的url地址返回的正文中没有"nginx",那么就会失败,则probe_success值为0</span>  <span class="token key atrule">http_post_2xx</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> http    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">method</span><span class="token punctuation">:</span> POST  <span class="token key atrule">tcp_connect</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp  <span class="token key atrule">pop3s_banner</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp    <span class="token key atrule">tcp</span><span class="token punctuation">:</span>      <span class="token key atrule">query_response</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"^+OK"</span>      <span class="token key atrule">tls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">tls_config</span><span class="token punctuation">:</span>        <span class="token key atrule">insecure_skip_verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">ssh_banner</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp    <span class="token key atrule">tcp</span><span class="token punctuation">:</span>      <span class="token key atrule">query_response</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"^SSH-2.0-"</span>  <span class="token key atrule">irc_banner</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> tcp    <span class="token key atrule">tcp</span><span class="token punctuation">:</span>      <span class="token key atrule">query_response</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">send</span><span class="token punctuation">:</span> <span class="token string">"NICK prober"</span>      <span class="token punctuation">-</span> <span class="token key atrule">send</span><span class="token punctuation">:</span> <span class="token string">"USER prober prober prober :prober"</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"PING :([^ ]+)"</span>        <span class="token key atrule">send</span><span class="token punctuation">:</span> <span class="token string">"PONG ${1}"</span>      <span class="token punctuation">-</span> <span class="token key atrule">expect</span><span class="token punctuation">:</span> <span class="token string">"^:[^ ]+ 001"</span>  <span class="token key atrule">icmp</span><span class="token punctuation">:</span>    <span class="token key atrule">prober</span><span class="token punctuation">:</span> icmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改了blackbox配置文件需要重启blackbox服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart blackbox.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面所配置的匹配返回内容是在http_2xx这个模块下添加的，我们需要修改prometheus配置文件对应的http_2xx模块的规则文件，配置我们监控业务接口的返回内容的url地址</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/check/url/get_mysite.json <span class="token punctuation">[</span><span class="token punctuation">{</span>        <span class="token key atrule">"targets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"47.100.107.121"</span>    <span class="token comment" spellcheck="true"># 这个url返回的是默认的Nginx页面,对应我上面的匹配规则(nginx/apache)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token key atrule">"labels"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token key atrule">"group"</span><span class="token punctuation">:</span> <span class="token string">"get_mysite"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看blackbox的采集数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f292cb314195aa594682880.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>probe_success的值是根据我们在blackbox配置文件的正则去决定的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f292d4d14195aa59468abde.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时候我们get_mysite.json这个规则文件的job的probe_success值就是通过get获取一个url的返回值去确定的，我们这样就可以去监控接口的返回内容了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f292f3014195aa5946a6ddd.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="配置网络监控"><a href="#配置网络监控" class="headerlink" title="配置网络监控"></a>配置网络监控</h1><p>我们可以让服务器使用icmp协议去请求<a href="http://www.baidu.com或者是一个公网IP，测试服务器的网络是否正常" target="_blank" rel="noopener">www.baidu.com或者是一个公网IP，测试服务器的网络是否正常</a></p><p>修改prometheus配置文件，添加网络监控的job</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'icmp_check_network'</span>     <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s     <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe     <span class="token key atrule">params</span><span class="token punctuation">:</span>       <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>icmp<span class="token punctuation">]</span>     <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> check/icmp/*.json     <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>         <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target       <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>         <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance       <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__         <span class="token key atrule">replacement</span><span class="token punctuation">:</span> 47.100.107.121<span class="token punctuation">:</span><span class="token number">9115</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写网络监控的规则文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/rules/check_network.yml<span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> icmp check network  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> icmp check network failed    <span class="token key atrule">for</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">expr</span><span class="token punctuation">:</span> probe_success<span class="token punctuation">{</span>group="icmp_check_network"<span class="token punctuation">,</span>instance="www.baidu.com"<span class="token punctuation">,</span>job="icmp_check_network"<span class="token punctuation">}</span> == 0    <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">serverity</span><span class="token punctuation">:</span> critical    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.group }} icmp connection failed, {{ $labels.group }} value is: {{ $value }}"</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> "<span class="token punctuation">{</span><span class="token punctuation">{</span> $labels.group <span class="token punctuation">}</span><span class="token punctuation">}</span> connection failed<span class="token punctuation">,</span> <span class="token key atrule">instance</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $labels.instance <span class="token punctuation">}</span><span class="token punctuation">}</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改prometheus配置文件之后记得重启prometheus服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Blackbox-exporter部署&quot;&gt;&lt;a href=&quot;#Blackbox-exporter部署&quot; class=&quot;headerlink&quot; title=&quot;Blackbox_exporter部署&quot;&gt;&lt;/a&gt;Blackbox_exporter部署&lt;/h1&gt;&lt;p&gt;Bl
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus告警(6)</title>
    <link href="https://www.missf.top/post/615f0093.html"/>
    <id>https://www.missf.top/post/615f0093.html</id>
    <published>2020-07-23T03:53:03.000Z</published>
    <updated>2020-08-28T03:01:19.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Alertmanager概述"><a href="#Alertmanager概述" class="headerlink" title="Alertmanager概述"></a>Alertmanager概述</h1><p>prometheus发出告警时分为两部分，首先prometheus按告警规则(rule_files配置)向alertmanager发送告警，即告警规则是在prometheus上定义的，然后由alertmanager去管理这些告警，包括去重(deduplicating)、分组(grouping)、静音(silencing)、抑制(inhibition)、聚合(aggregation)，最终通过丰富的告警通知渠道(电话、微信、短信、邮件)将告警通知路由给对应的联系人。prometheus的大部分组件都是go语言开发的，zabbix到4.4之后的客户端才是go编写</p><h1 id="Alertmanager二进制安装"><a href="#Alertmanager二进制安装" class="headerlink" title="Alertmanager二进制安装"></a>Alertmanager二进制安装</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载</span><span class="token function">wget</span> https://github.com/prometheus/alertmanager/releases/download/v0.21.0/alertmanager-0.21.0.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf alertmanager-0.21.0.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> alertmanager-0.21.0.linux-amd64 /usr/local/alertmanager<span class="token comment" spellcheck="true"># 创建alertmanager启动文件</span>vim /usr/lib/systemd/system/alertmanager.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Documentation<span class="token operator">=</span>alertmanager<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/alertmanager/alertmanager --config.file<span class="token operator">=</span>/usr/local/alertmanager/alertmanager.yml --storage.path<span class="token operator">=</span>/usr/local/alertmanager/data<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 启动</span>systemctl daemon-reloadsystemctl start alertmanager.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Alertmanager配置文件详解"><a href="#Alertmanager配置文件详解" class="headerlink" title="Alertmanager配置文件详解"></a>Alertmanager配置文件详解</h1><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/alertmanager/alertmanager.yml<span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">resolve_timeout</span><span class="token punctuation">:</span> 5m    <span class="token comment" spellcheck="true"># 恢复的超时时间,这个跟告警恢复通知有关,此参数并不是说在这个时间没有收到告警就会恢复</span><span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 默认以告警名进行分组,就是rule文件的alert值进行分组</span>  <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token comment" spellcheck="true"># 发送警报前，至少等待多少秒才会发送(为了收集同组更多的警报信息一起发送)</span>  <span class="token key atrule">group_interval</span><span class="token punctuation">:</span> 10s    <span class="token comment" spellcheck="true"># 如果警报1已经发送,这时又出现同组的警报2,由于组状态发生变化,警报会在group_interval这个时间内发送,不会被repeat_interval这个时间收敛</span>  <span class="token key atrule">repeat_interval</span><span class="token punctuation">:</span> 20m    <span class="token comment" spellcheck="true"># 报警信息已发送，但事件并没有恢复,则等待多久时间再重新发送(生产环境一般设成20min或者30min)</span>  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'web.hook'</span>    <span class="token comment" spellcheck="true"># 发送警报的接收者名称,如果一个报警没有被一个route匹配,则发送给默认的接收器</span><span class="token key atrule">receivers</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 发送告警信息给那个接收者</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'web.hook'</span>    <span class="token comment" spellcheck="true"># 这个需要和上面定义的接收者名称一致</span>  <span class="token key atrule">webhook_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:5001/'</span><span class="token key atrule">inhibit_rules</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 抑制规则,防止告警风暴</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'critical'</span>    <span class="token key atrule">target_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'warning'</span>    <span class="token key atrule">equal</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">,</span> <span class="token string">'instance'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="检查Alertmanager配置文件"><a href="#检查Alertmanager配置文件" class="headerlink" title="检查Alertmanager配置文件"></a>检查Alertmanager配置文件</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 提示SUCCESS,则配置文件没有问题</span>./amtool check-config alertmanager.yml<span class="token comment" spellcheck="true"># 修改配置文件之后重启alertmanager</span>systemctl restart alertmanager.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置邮件告警"><a href="#配置邮件告警" class="headerlink" title="配置邮件告警"></a>配置邮件告警</h1><p>修改alertmanager配置文件，填写邮箱的验证信息，定义路由的收件人，配置发送告警邮件到那个邮箱</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat /usr/local/alertmanager/alertmanager.yml <span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">resolve_timeout</span><span class="token punctuation">:</span> 3m  <span class="token key atrule">smtp_smarthost</span><span class="token punctuation">:</span> <span class="token string">'smtp.qq.com:465'</span>  <span class="token key atrule">smtp_from</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_username</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_password</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true"># 授权码</span>  <span class="token key atrule">smtp_require_tls</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">]</span>  <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">group_interval</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">repeat_interval</span><span class="token punctuation">:</span> 20m  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mail'</span><span class="token key atrule">receivers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'devops.mail'</span>  <span class="token key atrule">email_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> <span class="token string">'mf_2013@163.com'</span>    <span class="token key atrule">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">Subject</span><span class="token punctuation">:</span> <span class="token string">"[WARN] Prometheus 报警邮件"</span> <span class="token punctuation">}</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true"># 发送告警恢复通知</span><span class="token comment" spellcheck="true">#inhibit_rules:</span><span class="token comment" spellcheck="true">#  - source_match:</span><span class="token comment" spellcheck="true">#      severity: 'critical'</span><span class="token comment" spellcheck="true">#    target_match:</span><span class="token comment" spellcheck="true">#      severity: 'warning'</span><span class="token comment" spellcheck="true">#    equal: ['alertname', 'dev', 'instance']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置prometheus与alertmanager通信，设置规则文件的路径和正则匹配</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 修改prometheus配置文件</span>vim /usr/local/prometheus/prometheus.yml<span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">9093    </span><span class="token comment" spellcheck="true"># 这里由于alertmanager是和prometheus部署在同一台机器上,所以写本机地址</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"rules/*.yml"</span>    <span class="token comment" spellcheck="true"># rules这个目录是在prometheus上的,指当前配置文件的同级目录,这个目录需要自己创建</span><span class="token comment" spellcheck="true"># 检查prometheus配置文件</span>./promtool check config prometheus.ymlsystemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写rules文件，根据rules文件中的表达式去告警，这个规则文件的路径是prometheus配置文件中定义的</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 监控节点的状态</span>cat /usr/local/prometheus/rules/node.yml <span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> node_alert  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> Node_InstanceDown            <span class="token key atrule">expr</span><span class="token punctuation">:</span> up == 0    <span class="token comment" spellcheck="true"># 表达式</span>    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在prometheus的web控制台查看配置的规则</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f20e09814195aa594f3290e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>关闭node_exporter.service节点，查看告警邮件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f20e13414195aa594f3b901.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="配置微信告警"><a href="#配置微信告警" class="headerlink" title="配置微信告警"></a>配置微信告警</h1><p>修改alertmanager配置文件，定义路由规则</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat /usr/local/alertmanager/alertmanager.yml <span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">resolve_timeout</span><span class="token punctuation">:</span> 3m  <span class="token key atrule">smtp_smarthost</span><span class="token punctuation">:</span> <span class="token string">'smtp.qq.com:465'</span>  <span class="token key atrule">smtp_from</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_username</span><span class="token punctuation">:</span> <span class="token string">'1173354099@qq.com'</span>  <span class="token key atrule">smtp_auth_password</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true"># 授权码</span>  <span class="token key atrule">smtp_require_tls</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">templates</span><span class="token punctuation">:</span><span class="token punctuation">-</span> /usr/local/alertmanager/template/wechat.temp<span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">]</span>  <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">group_interval</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">repeat_interval</span><span class="token punctuation">:</span> 20m  <span class="token comment" spellcheck="true">#receiver: 'devops.mail'</span>  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>  <span class="token key atrule">routes</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 为node_exporter、docker、mysqld_exporter定义匹配路由,每个路由有自己的分组在微信告警时信息就会单独发送</span>  <span class="token punctuation">-</span> <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token comment" spellcheck="true"># 每个服务可以定义自己的接收者,这样在发送时就可以发送给不同的人,不同的服务对应不同的处理人员</span>    <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'node_exporter'</span><span class="token punctuation">]</span>    <span class="token key atrule">match_re</span><span class="token punctuation">:</span>      <span class="token key atrule">job</span><span class="token punctuation">:</span> node_exporter  <span class="token punctuation">-</span> <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'docker'</span><span class="token punctuation">]</span>    <span class="token key atrule">match_re</span><span class="token punctuation">:</span>      <span class="token key atrule">job</span><span class="token punctuation">:</span> docker  <span class="token punctuation">-</span> <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token key atrule">group_wait</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">group_by</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'mysqld_exporter'</span><span class="token punctuation">]</span>    <span class="token key atrule">match_re</span><span class="token punctuation">:</span>      <span class="token key atrule">job</span><span class="token punctuation">:</span> mysqld_exporter<span class="token key atrule">receivers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'devops.mailwechat'</span>    <span class="token comment" spellcheck="true"># 将这个告警同时发送到邮件和微信</span>  <span class="token key atrule">email_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> <span class="token string">'mf_2013@163.com'</span>    <span class="token key atrule">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">Subject</span><span class="token punctuation">:</span> <span class="token string">"[WARN] Prometheus 报警邮件"</span> <span class="token punctuation">}</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">wechat_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">api_secret</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">agent_id</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">corp_id</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">to_party</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment" spellcheck="true">#inhibit_rules:</span><span class="token comment" spellcheck="true">#  - source_match:</span><span class="token comment" spellcheck="true">#      severity: 'critical'</span><span class="token comment" spellcheck="true">#    target_match:</span><span class="token comment" spellcheck="true">#      severity: 'warning'</span><span class="token comment" spellcheck="true">#    equal: ['alertname', 'dev', 'instance']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写rules文件，为了每个服务单独报警，这里将node_exporter、docker、mysqld_exporter分开去写匹配规则</p><pre class="line-numbers language-yaml"><code class="language-yaml">cat /usr/local/prometheus/rules/node.yml <span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> node_exporter  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_exporter_Down    <span class="token key atrule">expr</span><span class="token punctuation">:</span> up<span class="token punctuation">{</span>job="node_exporter"<span class="token punctuation">}</span> == 0    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqld_exporter  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> mysqld_exporter_Down    <span class="token key atrule">expr</span><span class="token punctuation">:</span> up<span class="token punctuation">{</span>job="mysqld_exporter"<span class="token punctuation">}</span> == 0    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> docker  <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> docker_Down    <span class="token key atrule">expr</span><span class="token punctuation">:</span> up<span class="token punctuation">{</span>job="docker"<span class="token punctuation">}</span> == 0    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> error    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} down"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成之后重启alertmanager</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart alertmanager.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭node_exporter和docker_cadvisor服务，这时候会每个服务单独发送告警信息，由于将全部服务group_by在一个组里面，在发送恢复信息时会出现服务混乱的情况，所以我将每个服务做了路由，每一个服务都有自己的group_by，这样在发送信息时才会单独去发送</p><p><img src="https://pic.imgdb.cn/item/5f2140bc14195aa5945ae70c.jpg" alt=""></p><h1 id="配置钉钉告警"><a href="#配置钉钉告警" class="headerlink" title="配置钉钉告警"></a>配置钉钉告警</h1><p>先去创建一个钉钉机器人，具体过程这里就不详细说明了</p><p>prometheus配置钉钉告警需要使用到prometheus-webhook-dingtalk插件，我们先使用二进制安装钉钉插件，dingtalk服务默认启动的端口是8060</p><p><a href="https://github.com/timonwong/prometheus-webhook-dingtalk" target="_blank" rel="noopener">prometheus-webhook-dingtalk插件下载地址</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载prometheus-webhook-dingtalk</span><span class="token function">wget</span> https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v1.4.0/prometheus-webhook-dingtalk-1.4.0.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压prometheus-webhook-dingtalk</span><span class="token function">tar</span> xf prometheus-webhook-dingtalk-1.4.0.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> prometheus-webhook-dingtalk-1.4.0.linux-amd64 /usr/local/dingtalk<span class="token comment" spellcheck="true"># 编写dingtalk启动文件</span>vim /usr/lib/systemd/system/dingtalk.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>prometheus-webhook-dingtalkAfter<span class="token operator">=</span>network-online.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/dingtalk/prometheus-webhook-dingtalk \--ding.profile<span class="token operator">=</span>Prometheus告警<span class="token operator">=</span>https://oapi.dingtalk.com/robot/send?access_token<span class="token operator">=</span>xxxxxx<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 启动dingtalk.service</span>systemctl daemon-reloadsystemctl restart dingtalk.service<span class="token comment" spellcheck="true"># 查看dingtalk的webhook地址</span>journalctl -fu dingtalk.serviceJul 29 18:38:01 iZuf6fpaicz5jt7kep555qZ prometheus-webhook-dingtalk<span class="token punctuation">[</span>5504<span class="token punctuation">]</span>: ts<span class="token operator">=</span>2020-07-29T10:38:01.655Z caller<span class="token operator">=</span>main.go:133 component<span class="token operator">=</span>configuration msg<span class="token operator">=</span><span class="token string">"Webhook urls for prometheus alertmanager"</span> urls<span class="token operator">=</span>http://localhost:8060/dingtalk/Prometheus告警/send<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改prometheus的alertmanager配置，更改告警的路由和接收者</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">route</span><span class="token punctuation">:</span>  <span class="token key atrule">receiver</span><span class="token punctuation">:</span> <span class="token string">'devops_dingtalk'</span>    <span class="token comment" spellcheck="true"># 接收者必须和下面的一致</span><span class="token key atrule">receivers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'devops_dingtalk'</span>  <span class="token key atrule">webhook_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://localhost:8060/dingtalk/Prometheus告警/send'</span>    <span class="token comment" spellcheck="true"># 这个URL是dingtalk的webhook地址</span>    <span class="token key atrule">send_resolved</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭docker收集器查看告警效果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f22831a14195aa594112818.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="告警状态"><a href="#告警状态" class="headerlink" title="告警状态"></a>告警状态</h1><p>prometheus的告警状态有三种，我们可以在prometheus的控制台页面上查看告警的状态</p><h2 id="inactive"><a href="#inactive" class="headerlink" title="inactive"></a>inactive</h2><p>没有触发任何阈值，这个是根据scrape_interval参数(采集数据周期)和evaluation_interval参数(对比规则周期)去决定的</p><h2 id="pending"><a href="#pending" class="headerlink" title="pending"></a>pending</h2><p>已触发阈值但未满足告警持续时间，告警进入pending状态之后，需要等待规则配置的for时间，如果在这个时间内触发阈值的表达式一直成立，才会进入firing状态</p><h2 id="firing"><a href="#firing" class="headerlink" title="firing"></a>firing</h2><p>已触发阈值且满足告警持续时间，将告警从prometheus发送给alertmanager，在alertmanager收到告警之后并不会立刻发送，还需要等待一个group_wait时间，直到某个计算周期表达式为假，告警状态变更为inactive，发送一个resolve给altermanger，说明此告警已解决</p><h1 id="告警收敛"><a href="#告警收敛" class="headerlink" title="告警收敛"></a>告警收敛</h1><p>alertmanager在收到prometheus发送的告警之后，并不是把收到的信息简单的直接发送出去，而是通过一系列的收敛机制(分组、抑制、静默)去筛选出需要发送的信息，如果alertmanager收到信息就直接发送出去，会导致告警信息过多，运维人员会被告警信息淹没，错过重要的告警信息 </p><p><img src="https://pic.imgdb.cn/item/5f23803214195aa5946d5b86.jpg" alt=""></p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>将类似性质的告警分类为单个通知，减少告警消息数量</p><p>将类似性质的告警进行聚合发送，帮助运维更好的排查问题</p><h2 id="抑制"><a href="#抑制" class="headerlink" title="抑制"></a>抑制</h2><p>当告警发出后，停止重复发送由此告警而引起的其他告警，帮助运维第一时间掌握最核心的告警信息</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">inhibit_rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'critical'</span>    <span class="token comment" spellcheck="true"># 当发生critical级别的告警时,就会抑制下面warning级别的告警</span>    <span class="token key atrule">target_match</span><span class="token punctuation">:</span>      <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token string">'warning'</span>    <span class="token key atrule">equal</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alertname'</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">,</span> <span class="token string">'instance'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 已发送的告警与新产生的告警中equal定义的标签完全相同,则启动抑制机制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静默"><a href="#静默" class="headerlink" title="静默"></a>静默</h2><p>是一种简单的特定时间静音的提醒机制，在发布新版本时我们需要停掉某些进程，这时候告警肯定会触发的，由于这是我们已经预知的现象，我们可以打开prometheus主机的9093端口暂时将告警设置成静音</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f23c66b14195aa5948a1e2d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Prometheus一条告警是怎么触发的"><a href="#Prometheus一条告警是怎么触发的" class="headerlink" title="Prometheus一条告警是怎么触发的"></a>Prometheus一条告警是怎么触发的</h1><p>1.采集数据 scrape_interval: 15s</p><p>2.比对采集到的数据是否触发阈值 evaluation_interval: 15s</p><p>3.判断是否超出持续时间(在这个时间内一直处于触发阈值状态)for: 5s</p><p>4.告警到达alertmanager然后进行分组、抑制、静默</p><p>5.通过分组、抑制、静默一系列机制的信息将会被发送，但是会延迟发送group_wait: 10s</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f23ceb714195aa5948dbd05.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="编写告警规则案例"><a href="#编写告警规则案例" class="headerlink" title="编写告警规则案例"></a>编写告警规则案例</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">groups</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> general.rules  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_FileSystemUsage    <span class="token comment" spellcheck="true"># 监控磁盘使用率</span>    <span class="token key atrule">expr</span><span class="token punctuation">:</span> 100 <span class="token punctuation">-</span> node_filesystem_free_bytes<span class="token punctuation">{</span>mountpoint="/"<span class="token punctuation">,</span>fstype=~"ext4<span class="token punctuation">|</span>xfs"<span class="token punctuation">}</span> / node_filesystem_size_bytes<span class="token punctuation">{</span>mountpoint="/"<span class="token punctuation">,</span>fstype=~"ext4<span class="token punctuation">|</span>xfs"<span class="token punctuation">}</span> * 100 <span class="token punctuation">></span> 80    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> warning    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} : {{ $labels.mountpoint }} Partition utilization is too high"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} : {{ $labels.mountpoint }} Partition utilization is greater than 80% (Currently: {{ $value }})"</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_MemoryUsage    <span class="token comment" spellcheck="true"># 监控内存使用率</span>    <span class="token key atrule">expr</span><span class="token punctuation">:</span> 100 <span class="token punctuation">-</span> (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) / node_memory_MemTotal_bytes * 100 <span class="token punctuation">></span> 80    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> warning    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} High memory usage"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }}  Memory usage greater than 80% (Currently: {{ $value }})"</span>  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> node_cpuUsage    <span class="token comment" spellcheck="true"># 监控CPU使用率</span>    <span class="token key atrule">expr</span><span class="token punctuation">:</span> 100 <span class="token punctuation">-</span> irate(node_cpu_seconds_total<span class="token punctuation">{</span>mode="idle"<span class="token punctuation">,</span>job="node_exporter"<span class="token punctuation">,</span>instance="47.100.107.121<span class="token punctuation">:</span>9100"<span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span>) * 100 <span class="token punctuation">></span> 80    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5s    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">serverity</span><span class="token punctuation">:</span> warning    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">"Instance {{ $labels.instance }} High cpu usage"</span>      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"{{ $labels.instance }} Memory usage greater than 60% (Currently: {{ $value }})"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Alertmanager概述&quot;&gt;&lt;a href=&quot;#Alertmanager概述&quot; class=&quot;headerlink&quot; title=&quot;Alertmanager概述&quot;&gt;&lt;/a&gt;Alertmanager概述&lt;/h1&gt;&lt;p&gt;prometheus发出告警时分为两部分，首
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus监控案例(5)</title>
    <link href="https://www.missf.top/post/ba827699.html"/>
    <id>https://www.missf.top/post/ba827699.html</id>
    <published>2020-07-16T07:43:16.000Z</published>
    <updated>2020-08-28T03:00:43.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监控Linux服务器"><a href="#监控Linux服务器" class="headerlink" title="监控Linux服务器"></a>监控Linux服务器</h1><h2 id="部署node-exporter"><a href="#部署node-exporter" class="headerlink" title="部署node_exporter"></a>部署node_exporter</h2><p>prometheus官方提供Node_exporter来让我们收集机器的系统数据，除node_exporter外，官方还提供consul、memcached、haproxy、mysqld等exporter。exporter类似于zabbix写好的监控模板，但是这些exporter都是需要在被监控节点安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载node_exporter</span><span class="token function">wget</span> https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf node_exporter-1.0.1.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> node_exporter-1.0.1.linux-amd64 /usr/local/node_exporter<span class="token comment" spellcheck="true"># 编写启动文件</span>vim /usr/lib/systemd/system/node_exporter.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>prometheus<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/node_exporter/node_exporter<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 启动node_exporter</span>systemctl daemon-reloadsystemctl start node_exporter.service<span class="token comment" spellcheck="true"># 访问node_exporter的数据接口</span>http://10.10.110.23:9100/metrics    <span class="token comment" spellcheck="true"># 默认端口是9100,默认接口是metrics</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置监控"><a href="#配置监控" class="headerlink" title="配置监控"></a>配置监控</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改prometheus配置文件</span>vim /usr/local/prometheus/prometheus.yml  - job_name: <span class="token string">'node_exporter'</span>    file_sd_configs:      - files: <span class="token punctuation">[</span><span class="token string">'/usr/local/prometheus/sd_config/node/*.yaml'</span><span class="token punctuation">]</span>        refresh_interval: 5s<span class="token comment" spellcheck="true"># 创建服务发现的文件</span>vim /usr/local/prometheus/sd_config/node/*.yaml- targets:  - <span class="token string">'10.10.110.23:9100'</span>        <span class="token comment" spellcheck="true"># 这个地址是被监控节点的IP地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="promSQL监控CPU、内存、硬盘"><a href="#promSQL监控CPU、内存、硬盘" class="headerlink" title="promSQL监控CPU、内存、硬盘"></a>promSQL监控CPU、内存、硬盘</h1><h2 id="CPU监控"><a href="#CPU监控" class="headerlink" title="CPU监控"></a>CPU监控</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 计算CPU五分钟内平均的使用率表达式</span>100 - irate<span class="token punctuation">(</span>node_cpu_seconds_total<span class="token punctuation">{</span>mode<span class="token operator">=</span><span class="token string">"idle"</span>,instance<span class="token operator">=</span><span class="token string">"10.10.110.23:9100"</span>,job<span class="token operator">=</span><span class="token string">"node_exporter"</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">)</span> * 100<span class="token comment" spellcheck="true"># node_cpu_seconds_total{mode="idle",instance="10.10.110.23:9100",job="node_exporter"}[5m]:取CPU五分钟之内的空闲值</span><span class="token comment" spellcheck="true"># irate函数:将会用于计算某个指标在一定时间间隔内的变化速率</span><span class="token comment" spellcheck="true"># 将得到的空闲值乘以100再得到CPU百分比的空闲值,再以100减去CPU百分比的空闲值,就得到CPU五分钟内平均的使用率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存监控"><a href="#内存监控" class="headerlink" title="内存监控"></a>内存监控</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 计算内存使用率表达式</span>100 - <span class="token punctuation">(</span>node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes<span class="token punctuation">)</span> / node_memory_MemTotal_bytes * 100<span class="token comment" spellcheck="true"># (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)是内存剩余的总量</span>    在系统层面来考虑:buff和cache是已经被使用的内存    在程序层面来考虑:buff和cache是剩余的内存<span class="token comment" spellcheck="true"># 内存剩余的总量除以内存总量得到内存剩余率,再以100减去内存剩余率得到内存使用率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="硬盘监控"><a href="#硬盘监控" class="headerlink" title="硬盘监控"></a>硬盘监控</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 计算硬盘使用率表达式</span>100 - node_filesystem_free_bytes<span class="token punctuation">{</span>mountpoint<span class="token operator">=</span><span class="token string">"/"</span>,fstype<span class="token operator">=</span>~<span class="token string">"ext4|xfs"</span><span class="token punctuation">}</span> / node_filesystem_size_bytes<span class="token punctuation">{</span>mountpoint<span class="token operator">=</span><span class="token string">"/"</span>,fstype<span class="token operator">=</span>~<span class="token string">"ext4|xfs"</span><span class="token punctuation">}</span> * 100<span class="token comment" spellcheck="true"># node_filesystem_free_bytes{mountpoint="/",fstype=~"ext4|xfs"}是根分区硬盘剩余容量,只计算ext4|xfs类型的文件系统</span><span class="token comment" spellcheck="true"># node_filesystem_size_bytes{mountpoint="/",fstype=~"ext4|xfs"}是根分区的硬盘总量</span><span class="token comment" spellcheck="true"># 根分区硬盘剩余容量除以根分区的硬盘总量得到根分区硬盘的剩余率,再以100减去硬盘的剩余率得到硬盘使用率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="监控系统服务状态"><a href="#监控系统服务状态" class="headerlink" title="监控系统服务状态"></a>监控系统服务状态</h1><h2 id="修改node-exporter的启动参数"><a href="#修改node-exporter的启动参数" class="headerlink" title="修改node_exporter的启动参数"></a>修改node_exporter的启动参数</h2><pre class="line-numbers language-bash"><code class="language-bash">vim /usr/lib/systemd/system/node_exporter.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>prometheus<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/node_exporter/node_exporter --collector.systemd --collector.systemd.unit-whitelist<span class="token operator">=</span><span class="token punctuation">(</span>docker<span class="token operator">|</span>sshd<span class="token punctuation">)</span>.service<span class="token comment" spellcheck="true"># 利用正则匹配监控systemd的docker|sshd这三个服务</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重启node-exporter"><a href="#重启node-exporter" class="headerlink" title="重启node_exporter"></a>重启node_exporter</h2><pre class="line-numbers language-bash"><code class="language-bash">systemctl daemon-reloadsystemctl restart node_exporter.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看监控服务的数据指标"><a href="#查看监控服务的数据指标" class="headerlink" title="查看监控服务的数据指标"></a>查看监控服务的数据指标</h2><pre class="line-numbers language-bash"><code class="language-bash">node_systemd_unit_state<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">"docker.service"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在activating、active、deactivating、failed、inactive五个状态中value为1的状态，就是服务当前的状态</p>{% image https://pic.imgdb.cn/item/5f1fa26414195aa5947438c7.jpg '' '' %}<h1 id="使用Grafana图表展示监控数据"><a href="#使用Grafana图表展示监控数据" class="headerlink" title="使用Grafana图表展示监控数据"></a>使用Grafana图表展示监控数据</h1><h2 id="安装Grafana"><a href="#安装Grafana" class="headerlink" title="安装Grafana"></a>安装Grafana</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载软件包</span><span class="token function">wget</span> https://dl.grafana.com/oss/release/grafana-7.1.0-1.x86_64.rpm<span class="token comment" spellcheck="true"># 安装</span>yum <span class="token function">install</span> grafana-7.1.0-1.x86_64.rpm -y<span class="token comment" spellcheck="true"># 启动</span>systemctl <span class="token function">enable</span> grafana-server.servicesystemctl start grafana-server.service<span class="token comment" spellcheck="true"># Grafana默认端口为3000,账号密码都为admin,初次登录会提示需要修改密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Grafana配置数据源"><a href="#Grafana配置数据源" class="headerlink" title="Grafana配置数据源"></a>Grafana配置数据源</h2><p>填写prometheus主机的地址，在配置数据源时我们还可以配置验证、定义HTTP头部、以及其他的一些信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f14fccb14195aa59415fa14.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Grafana导入仪表盘"><a href="#Grafana导入仪表盘" class="headerlink" title="Grafana导入仪表盘"></a>Grafana导入仪表盘</h2><p>我们可以自己编写仪表盘，也可以使用官方网站上别人已经写好的仪表盘模板直接导入使用，这里我们没有必要自己去编写(重复造轮子而且还没有人家专业…)。我们先去<a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">Grafana Labs</a>上找到监控Linux主机的仪表盘，然后将仪表盘的ID号导入到Grafana</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f1515d514195aa5941cc06f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="查看仪表盘"><a href="#查看仪表盘" class="headerlink" title="查看仪表盘"></a>查看仪表盘</h2><p>Grafana监控Linux主机的仪表盘数据是从prometheus的数据源获取的，就是被监控主机上的node_exporter获取到的数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f1518a914195aa5941d6c7f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="监控Docker服务器"><a href="#监控Docker服务器" class="headerlink" title="监控Docker服务器"></a>监控Docker服务器</h1><h2 id="部署cadvisor"><a href="#部署cadvisor" class="headerlink" title="部署cadvisor"></a>部署cadvisor</h2><p>想要监控Docker容器，需要在被监控主机安装cadvisor插件，暴露一个HTTP端口，为prometheus提供容器的监控数据</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 由于国内无法连接到gcr.io,这里使用张馆长仓库的镜像地址</span>docker run \--volume<span class="token operator">=</span>/:/rootfs:ro \--volume<span class="token operator">=</span>/var/run:/var/run:ro \--volume<span class="token operator">=</span>/sys:/sys:ro \--volume<span class="token operator">=</span>/var/lib/docker/:/var/lib/docker:ro \--volume<span class="token operator">=</span>/dev/disk/:/dev/disk:ro \--publish<span class="token operator">=</span>8080:8080 \--detach<span class="token operator">=</span>true \--name<span class="token operator">=</span>cadvisor \--privileged \--device<span class="token operator">=</span>/dev/kmsg \registry.aliyuncs.com/k8sxio/cadvisor:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置Prometheus监控cadvisor"><a href="#配置Prometheus监控cadvisor" class="headerlink" title="配置Prometheus监控cadvisor"></a>配置Prometheus监控cadvisor</h2><p>cadvisor可以搜集一台机器上所有运行的容器信息，还提供基础查询界面和http接口，供其他组件如prometheus拉取数据</p><pre class="line-numbers language-bash"><code class="language-bash">vim /usr/local/prometheus/prometheus.yml    <span class="token comment" spellcheck="true"># 在prometheus配置文件加入监控主机的cadvisor端口(拉取容器数据)</span>  - job_name: <span class="token string">'docker'</span>    static_configs:    - targets: <span class="token punctuation">[</span><span class="token string">'10.10.110.23:8080'</span><span class="token punctuation">]</span>systemctl daemon-reloadsystemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Grafana导入仪表盘-1"><a href="#Grafana导入仪表盘-1" class="headerlink" title="Grafana导入仪表盘"></a>Grafana导入仪表盘</h2><p>我们去<a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">Grafana Labs</a>网站寻找一个监控Docker主机的仪表盘，在Grafana进行导入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f23b7c914195aa5948360c4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="查看Docker主机仪表盘"><a href="#查看Docker主机仪表盘" class="headerlink" title="查看Docker主机仪表盘"></a>查看Docker主机仪表盘</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f17260614195aa59400404d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="监控MySQL服务器"><a href="#监控MySQL服务器" class="headerlink" title="监控MySQL服务器"></a>监控MySQL服务器</h1><p>监控MySQL主机和监控Linux主机一样，都是需要导出器去获取数据，这里我们去prometheus官网下载mysqld_exporter，然后在mysql主机上安装(监控那台mysql主机就在那台主机安装mysqld_exporter)</p><h2 id="MySQL主机安装mysqld-exporter"><a href="#MySQL主机安装mysqld-exporter" class="headerlink" title="MySQL主机安装mysqld_exporter"></a>MySQL主机安装mysqld_exporter</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载</span><span class="token function">wget</span> https://github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf mysqld_exporter-0.12.1.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> mysqld_exporter-0.12.1.linux-amd64 /usr/local/mysqld_exporter<span class="token comment" spellcheck="true"># 创建启动文件</span>vim /usr/lib/systemd/system/mysqld_exporter.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Documentation<span class="token operator">=</span>https://prometheus.io/<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureEnvironment<span class="token operator">=</span>DATA_SOURCE_NAME<span class="token operator">=</span>exporter:Missf.top123@<span class="token punctuation">(</span>localhost:3306<span class="token punctuation">)</span>/    <span class="token comment" spellcheck="true"># 连接数据库的账号密码,也可以指定.my.cnf文件</span>ExecStart<span class="token operator">=</span>/usr/local/mysqld_exporter/mysqld_exporter<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target<span class="token comment" spellcheck="true"># 被监控数据库添加mysql用户及监控权限</span>CREATE USER <span class="token string">'exporter'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'Missf.top123'</span> WITH MAX_USER_CONNECTIONS 3<span class="token punctuation">;</span>GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO <span class="token string">'exporter'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 启动mysqld_exporter</span>systemctl start mysqld_exporter<span class="token comment" spellcheck="true"># 获取监控数据</span>curl <span class="token punctuation">[</span>IP<span class="token punctuation">]</span>:9104/metrics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置Prometheus监控mysqld-exporter"><a href="#配置Prometheus监控mysqld-exporter" class="headerlink" title="配置Prometheus监控mysqld_exporter"></a>配置Prometheus监控mysqld_exporter</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改配置文件</span>vim /usr/local/prometheus/prometheus.yml  - job_name: <span class="token string">'mysqld_exporter'</span>        <span class="token comment" spellcheck="true"># 添加监控mysqld_exporter</span>    static_configs:    - targets: <span class="token punctuation">[</span><span class="token string">'47.100.107.121:9104'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重启</span>systemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导入MySQL仪表盘"><a href="#导入MySQL仪表盘" class="headerlink" title="导入MySQL仪表盘"></a>导入MySQL仪表盘</h2><p>导入ID为7362的MySQL仪表盘，查看MySQL的监控数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f18f80f14195aa594e798e0.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;监控Linux服务器&quot;&gt;&lt;a href=&quot;#监控Linux服务器&quot; class=&quot;headerlink&quot; title=&quot;监控Linux服务器&quot;&gt;&lt;/a&gt;监控Linux服务器&lt;/h1&gt;&lt;h2 id=&quot;部署node-exporter&quot;&gt;&lt;a href=&quot;#部署node
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus配置文件与核心功能(4)</title>
    <link href="https://www.missf.top/post/521f1005.html"/>
    <id>https://www.missf.top/post/521f1005.html</id>
    <published>2020-07-15T11:06:15.000Z</published>
    <updated>2020-08-28T03:00:04.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局配置文件介绍"><a href="#全局配置文件介绍" class="headerlink" title="全局配置文件介绍"></a>全局配置文件介绍</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 全局默认的数据拉取间隔,默认每隔1m拉取一次监控数据</span>  <span class="token punctuation">[</span> <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = 1m <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 全局默认的单次数据拉取超时</span>  <span class="token punctuation">[</span> <span class="token key atrule">scrape_timeout</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = 10s <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 对告警规则做定期计算的间隔时间,每隔1m对比一次我采集到的数据跟我设置的告警规则,符合告警规则的事件就会被发送到alertmanager,由alertmanager做路由匹配然后进行告警处理</span>  <span class="token punctuation">[</span> <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = 1m <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 监控告警的规则设置</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;filepath_glob<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 配置被监控指标</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;scrape_config<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 指定告警和告警管理器相关的设置</span><span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alert_relabel_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;relabel_config<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>    <span class="token punctuation">[</span> <span class="token punctuation">-</span> &lt;alertmanager_config<span class="token punctuation">></span> <span class="token punctuation">...</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="scrape-configs"><a href="#scrape-configs" class="headerlink" title="scrape_configs"></a>scrape_configs</h1><p>配置数据源，拉取数据的对象称为Targets，每个Targets用job_name命名，添加数据源又分为静态配置和服务发现</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 定义job名称,是一个拉取单元,每个job_name都会自动引入默认配置如:</span>    <span class="token comment" spellcheck="true"># scrape_interval 依赖全局配置</span>    <span class="token comment" spellcheck="true"># scrape_timeout 依赖全局配置</span>    <span class="token comment" spellcheck="true"># metrics_path 默认为'/metrics'</span>    <span class="token comment" spellcheck="true"># scheme 默认为'http'</span><span class="token key atrule">job_name</span><span class="token punctuation">:</span> &lt;job_name<span class="token punctuation">></span><span class="token comment" spellcheck="true"># 数据拉取间隔</span><span class="token punctuation">[</span> <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = &lt;global_config.scrape_interval<span class="token punctuation">></span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 数据拉取超时时间</span><span class="token punctuation">[</span> <span class="token key atrule">scrape_timeout</span><span class="token punctuation">:</span> &lt;duration<span class="token punctuation">></span> <span class="token punctuation">|</span> default = &lt;global_config.scrape_timeout<span class="token punctuation">></span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 拉取数据指标的地址</span><span class="token punctuation">[</span> <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> &lt;path<span class="token punctuation">></span> <span class="token punctuation">|</span> default = /metrics <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基于文件的服务发现"><a href="#基于文件的服务发现" class="headerlink" title="基于文件的服务发现"></a>基于文件的服务发现</h1><p>基于文件的服务发现不需要依赖其他平台与第三方服务，用户只需将要更新的target信息以yaml或json文件格式添加到target文件中，prometheus会定期的从指定文件中读取target信息并更新。给我们带来的好处就是不需要一个个target去添加，只需要一个yaml或者json文件，便于管理</p><h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml">vim prometheus.yml<span class="token comment" spellcheck="true"># my global config 全局配置文件</span><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span>     5s <span class="token comment" spellcheck="true"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s <span class="token comment" spellcheck="true"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>  <span class="token comment" spellcheck="true"># scrape_timeout is set to the global default (10s).</span><span class="token comment" spellcheck="true"># Alertmanager configuration 告警管理</span><span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># - alertmanager:9093</span><span class="token comment" spellcheck="true"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># - "first_rules.yml"</span>  <span class="token comment" spellcheck="true"># - "second_rules.yml"</span><span class="token comment" spellcheck="true"># A scrape configuration containing exactly one endpoint to scrape:</span><span class="token comment" spellcheck="true"># Here it's Prometheus itself.</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'prometheus'</span>    <span class="token comment" spellcheck="true"># metrics_path defaults to '/metrics'</span>    <span class="token comment" spellcheck="true"># scheme defaults to 'http'.</span><span class="token comment" spellcheck="true">#    scrape_interval: 5s</span><span class="token comment" spellcheck="true">#    static_configs:</span><span class="token comment" spellcheck="true">#    - targets: ['localhost:9090']</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 文件服务发现</span>      <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'/usr/local/prometheus/sd_config/*.yaml'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 指定服务发现的文件路径</span>        <span class="token key atrule">refresh_interval</span><span class="token punctuation">:</span> 5s    <span class="token comment" spellcheck="true"># 每过5秒动态发现服务配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建目录及文件"><a href="#创建目录及文件" class="headerlink" title="创建目录及文件"></a>创建目录及文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml">vim /usr/local/prometheus/sd_config/test.yaml    <span class="token comment" spellcheck="true"># 需要监控那一台主机就在那一台主机上创建</span><span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">'10.10.110.150:9090'</span>    <span class="token comment" spellcheck="true"># 这个是填写prometheus主机的地址,如果prometheus启动时监听的是8080端口,那么这里就需要和prometheus端口一致,不然获取不到数据</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">group</span><span class="token punctuation">:</span> prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重载配置文件"><a href="#重载配置文件" class="headerlink" title="重载配置文件"></a>重载配置文件</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> prometheusroot       1774      1  0 Jul15 ?        00:02:21 /usr/local/prometheus/prometheus --config.file<span class="token operator">=</span>/usr/local/prometheus/prometheus.ymlroot       2741   1702  0 14:13 pts/1    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto prometheus<span class="token function">kill</span> -hup 1774<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;全局配置文件介绍&quot;&gt;&lt;a href=&quot;#全局配置文件介绍&quot; class=&quot;headerlink&quot; title=&quot;全局配置文件介绍&quot;&gt;&lt;/a&gt;全局配置文件介绍&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-yaml&quot;&gt;&lt;code cla
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus部署(3)</title>
    <link href="https://www.missf.top/post/d26dfcbe.html"/>
    <id>https://www.missf.top/post/d26dfcbe.html</id>
    <published>2020-07-15T09:11:11.000Z</published>
    <updated>2020-08-28T02:59:52.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二进制部署"><a href="#二进制部署" class="headerlink" title="二进制部署"></a>二进制部署</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载二进制安装包</span><span class="token function">wget</span> https://github.com/prometheus/prometheus/releases/download/v2.19.2/prometheus-2.19.2.linux-amd64.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> xf prometheus-2.19.2.linux-amd64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> prometheus-2.19.2.linux-amd64 /usr/local/prometheus<span class="token comment" spellcheck="true"># 创建启动文件</span><span class="token function">cp</span> /usr/lib/systemd/system/sshd.service /usr/lib/systemd/system/prometheus.service<span class="token comment" spellcheck="true"># 编写启动文件</span><span class="token function">tee</span> /usr/lib/systemd/system/prometheus.service <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[Unit]Description=http://prometheus.io[Service]Restart=on-failureExecStart=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml[Install]WantedBy=multi-user.targetEOF</span><span class="token comment" spellcheck="true"># 启动prometheus</span>systemctl daemon-reloadsystemctl restart prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><pre class="line-numbers language-bash"><code class="language-bash">vim /usr/local/prometheus/prometheus<span class="token comment" spellcheck="true"># my global config</span>global:  scrape_interval:     5s <span class="token comment" spellcheck="true"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>  evaluation_interval: 15s <span class="token comment" spellcheck="true"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>  <span class="token comment" spellcheck="true"># scrape_timeout is set to the global default (10s).</span><span class="token comment" spellcheck="true"># Alertmanager configuration</span>alerting:  alertmanagers:  - static_configs:    - targets:      <span class="token comment" spellcheck="true"># - alertmanager:9093</span><span class="token comment" spellcheck="true"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span>rule_files:  <span class="token comment" spellcheck="true"># - "first_rules.yml"</span>  <span class="token comment" spellcheck="true"># - "second_rules.yml"</span><span class="token comment" spellcheck="true"># A scrape configuration containing exactly one endpoint to scrape:</span><span class="token comment" spellcheck="true"># Here it's Prometheus itself.</span>scrape_configs:  <span class="token comment" spellcheck="true"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span>  - job_name: <span class="token string">'prometheus'</span>    <span class="token comment" spellcheck="true"># metrics_path defaults to '/metrics'</span>    <span class="token comment" spellcheck="true"># scheme defaults to 'http'.</span>    static_configs:    - targets: <span class="token punctuation">[</span><span class="token string">'127.0.0.1:9090'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h1><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name <span class="token string">"prometheus"</span> -p 9090:9090 \--mount src<span class="token operator">=</span>prometheus,dst<span class="token operator">=</span>/etc/prometheus \--mount type<span class="token operator">=</span>bind,src<span class="token operator">=</span>/prometheus/prometheus.yml,dst<span class="token operator">=</span>/etc/prometheus/prometheus.yml prom/prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="启动常用命令行参数"><a href="#启动常用命令行参数" class="headerlink" title="启动常用命令行参数"></a>启动常用命令行参数</h1><pre class="line-numbers language-bash"><code class="language-bash">./prometheus -h--config.file<span class="token operator">=</span><span class="token string">"prometheus.yml"</span>    <span class="token comment" spellcheck="true"># 指定配置文件</span>--web.listen-address<span class="token operator">=</span><span class="token string">"0.0.0.0:9090"</span>        <span class="token comment" spellcheck="true"># 指定端口</span>--log.level<span class="token operator">=</span>info    <span class="token comment" spellcheck="true"># 指定日志级别</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二进制部署&quot;&gt;&lt;a href=&quot;#二进制部署&quot; class=&quot;headerlink&quot; title=&quot;二进制部署&quot;&gt;&lt;/a&gt;二进制部署&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;language
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus概述(2)</title>
    <link href="https://www.missf.top/post/ef0b21f0.html"/>
    <id>https://www.missf.top/post/ef0b21f0.html</id>
    <published>2020-07-14T06:48:33.000Z</published>
    <updated>2020-08-28T02:59:28.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prometheus简介"><a href="#Prometheus简介" class="headerlink" title="Prometheus简介"></a>Prometheus简介</h1><p>Prometheus(普罗米修斯)是一个最初在SoundCloud上构建的监控系统。自2012年成为社区开源项目，拥有非常活跃的开发人员和用户社区。为强调开源及独立维护，Prometheus于2016年加入云原生云计算基金会(CNCF)，成为继Kubernetes之后的第二个托管项目</p><p>可能有些运维小伙伴不知道Prometheus，但是你们一定用过zabbix。现在由于Docker和Kubernetes的兴起，zabbix渐渐的失去了监控的优势，现在Prometheus是用来监控容器的最好实现，只有用到Docker和Kubernetes就离不开Prometheus提供监控支持。以前刚接触zabbix时，配置的微信告警让我开心了一整天，那时候觉得zabbix是世界上最好的监控软件，但是现在却觉得Prometheus才是。可能人总是需要不断向前看、不断向前奔跑的吧！</p><p><a href="https://prometheus.io/" target="_blank" rel="noopener">prometheus官网</a></p><h1 id="Prometheus特点"><a href="#Prometheus特点" class="headerlink" title="Prometheus特点"></a>Prometheus特点</h1><ol><li>多维数据模型(由时序列数据metric和一组key/value组成)</li><li>使用多维度数据完成复杂的语言查询，为prometheus的后期发展奠定基础(PromSQL)</li><li>不依赖分布式存储，单个服务器节点可直接工作</li><li>通过pushgateway进行时序列数据推送(pushing)</li><li>可以通过服务发现或者静态配置去获取要采集的目标服务器</li><li>多种可视化图表及仪表盘支持</li><li>基于HTTP的pull方式采集时间序列数据</li></ol><h1 id="Prometheus-组成及架构"><a href="#Prometheus-组成及架构" class="headerlink" title="Prometheus 组成及架构"></a>Prometheus 组成及架构</h1><p>Prometheus根据配置定时去拉取各个节点的数据，默认使用的拉取方式是pull，也可以使用pushgateway提供的push方式获取各个监控节点的数据。将获取到的数据存入TSDB(时序型数据库)，此时prometheus已经获取到监控数据，可以使用内置的promSQL进行查询。它的报警功能使用alertmanager提供，alertmanager是prometheus的告警管理和发送报警的一个组件。prometheus原生的图表结构过于简单，prometheus的图表展示功能一般由grafana进行统一管理</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f0d6fde14195aa594d4927d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Prometheus数据模型"><a href="#Prometheus数据模型" class="headerlink" title="Prometheus数据模型"></a>Prometheus数据模型</h1><p>Prometheus将所有数据存储为时间序列，具有相同度量名称以及标签属于同一个指标。每个时间序列都由度量标准名称和一组键值对(也成为标签)唯一标识</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#  时间序列格式示例 &lt;metric name>{&lt;label name>=&lt;label value>, ...}</span>api_http_requests_total<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">"POST"</span>, handler<span class="token operator">=</span><span class="token string">"/messages"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Prometheus指标类型"><a href="#Prometheus指标类型" class="headerlink" title="Prometheus指标类型"></a>Prometheus指标类型</h1><p>Counter: 递增的计数器</p><p>Gauge: 可以任意变化的数值</p><p>Histogram: 对一段时间范围内数据进行采样，并对所有数值求和与统计数量</p><p>Summary: 与Histogram类似</p><p>不同的指标类型用于渲染不同的图表</p><h1 id="Prometheus作业和实例"><a href="#Prometheus作业和实例" class="headerlink" title="Prometheus作业和实例"></a>Prometheus作业和实例</h1><p>实例: 可以抓取的目标称为实例(Instances)    </p><p>作业: 具有相同目标的实例集合称为作业(Job)</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'prometheus'</span>    <span class="token comment" spellcheck="true"># prometheus这个job作用于localhost:9090这个目标</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'localhost:9090'</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'node'</span>    <span class="token comment" spellcheck="true"># node这个job作用于192.168.1.10:9090这个目标</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'192.168.1.10:9090'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prometheus简介&quot;&gt;&lt;a href=&quot;#Prometheus简介&quot; class=&quot;headerlink&quot; title=&quot;Prometheus简介&quot;&gt;&lt;/a&gt;Prometheus简介&lt;/h1&gt;&lt;p&gt;Prometheus(普罗米修斯)是一个最初在SoundCl
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus监控的意义(1)</title>
    <link href="https://www.missf.top/post/ded057ed.html"/>
    <id>https://www.missf.top/post/ded057ed.html</id>
    <published>2020-07-13T17:28:39.000Z</published>
    <updated>2020-08-28T02:59:02.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监控目的"><a href="#监控目的" class="headerlink" title="监控目的"></a>监控目的</h1><p>监控分为白盒监控和黑盒监控。白盒监控: 通过监控内部的运行状态及指标判断接下来可能会发生的问题，从而做出预判或应对的方法。黑盒监控: 监控系统或服务，在发生异常时做出相应的措施。prometheus属于黑盒监控，是在服务发生异常时，我们通过告警信息得知，才去处理异常问题</p><p>监控的目的主要分为以下方面:</p><ol><li>根据历史监控数据，对未来做出预测</li><li>发生异常时即使告警，或做出相应措施</li><li>根据监控报警及时定位问题根源，记录问题出现的证据(记录网络波动)</li><li>通过可视化图表展示，便于直观获取信息</li><li>领导查看数据图表(PV、UV、订单趋势图)</li><li>运维人员能够提前预知风险，避免故障的产生或者在故障发生时能够迅速处理</li></ol><h1 id="怎么监控"><a href="#怎么监控" class="headerlink" title="怎么监控"></a>怎么监控</h1><p>使用传统监控工具，直接调用Linux系统命令去获取服务状态和信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># free </span><span class="token comment" spellcheck="true"># vmstat</span><span class="token comment" spellcheck="true"># df</span><span class="token comment" spellcheck="true"># top</span><span class="token comment" spellcheck="true"># ss</span><span class="token comment" spellcheck="true"># iftop</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用监控系统去监控系统和服务，能够整体监控每一项数据</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># zabbix</span><span class="token comment" spellcheck="true"># nagios</span><span class="token comment" spellcheck="true"># prometheus</span><span class="token comment" spellcheck="true"># open-falcon</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="监控流程"><a href="#监控流程" class="headerlink" title="监控流程"></a>监控流程</h1><p>监控的大概流程分为:数据采集、数据存储、数据分析、以及展示和告警</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f0d66c514195aa594d1f578.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="监控什么"><a href="#监控什么" class="headerlink" title="监控什么"></a>监控什么</h1><table><thead><tr><th>监控类型</th><th>具体参数</th></tr></thead><tbody><tr><td>硬件监控</td><td>硬件参数、温度、故障等</td></tr><tr><td>系统监控</td><td>CPU，内存，硬盘，网卡流量，TCP状态，进程数</td></tr><tr><td>应用监控</td><td>Nginx、Tomcat、PHP、MySQL、Redis等</td></tr><tr><td>日志监控</td><td>系统日志、服务日志、访问日志、错误日志</td></tr><tr><td>安全监控</td><td>WAF，敏感文件监控</td></tr><tr><td>API监控</td><td>可用性，接口请求，响应时间</td></tr><tr><td>业务监控</td><td>例如电商网站，每分钟产生多少订单、注册多少用户、多少活跃用户、推广活动效果</td></tr><tr><td>流量分析</td><td>根据流量获取用户相关信息，例如用户地理位置、某页面访问状况、页面停留时间等</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;监控目的&quot;&gt;&lt;a href=&quot;#监控目的&quot; class=&quot;headerlink&quot; title=&quot;监控目的&quot;&gt;&lt;/a&gt;监控目的&lt;/h1&gt;&lt;p&gt;监控分为白盒监控和黑盒监控。白盒监控: 通过监控内部的运行状态及指标判断接下来可能会发生的问题，从而做出预判或应对的方法。黑
      
    
    </summary>
    
    
      <category term="Prometheus" scheme="https://www.missf.top/categories/Prometheus/"/>
    
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Prometheus" scheme="https://www.missf.top/tags/Prometheus/"/>
    
      <category term="监控" scheme="https://www.missf.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose单机编排利器(9)</title>
    <link href="https://www.missf.top/post/34699079.html"/>
    <id>https://www.missf.top/post/34699079.html</id>
    <published>2020-07-10T06:27:09.000Z</published>
    <updated>2020-09-09T07:22:32.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Compose-概述"><a href="#Docker-Compose-概述" class="headerlink" title="Docker Compose 概述"></a>Docker Compose 概述</h1><p>Compose是用于定义和运行多容器的工具，通过Compose可以使用YAML文件来配置容器。然后使用一个命令就可以从配置中创建并启动所有服务。其实在刚学习Docker时我就想过，如果我是LNMP架构容器化项目，因为每次都要一个个容器的启动，是否有必要将启停多个容器的命令写成一个shell脚本呢。现在学到Docker Compose，才知道根本没有这个必要，我们现在所有能想到的东西，其实早就有人帮我们实现了。这里不得不敬佩那些为开源项目做出贡献的伟大开发者们</p><p>使用Compose大概分为三个步骤:</p><p>定义Dockerfile，以便可以在任意环境运行</p><p>定义应用程序启动配置文件 docker-compose.yml</p><p>docker-compose启动并管理整个应用程序生命周期</p><h1 id="Linux-安装-Compose"><a href="#Linux-安装-Compose" class="headerlink" title="Linux 安装 Compose"></a>Linux 安装 Compose</h1><p>其实前面我们在学习Harbor时已经安装过docker-compose，这是一个使用python开发的编排工具，国内下载可能会比较慢(你应该知道怎么做了吧…)</p><pre class="line-numbers language-bash"><code class="language-bash">curl -L <span class="token string">"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>"</span>  -o /usr/bin/docker-compose<span class="token function">chmod</span> +x /usr/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="docker-compose-yaml配置文件参数"><a href="#docker-compose-yaml配置文件参数" class="headerlink" title="docker-compose.yaml配置文件参数"></a>docker-compose.yaml配置文件参数</h1><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>使用docker-compose启动容器服务除了可以基于指定的镜像，还可以基于一份Dockerfile，在使用up启动时执行构建镜像的任务，这个构建标签就是build。Compose将会利用它自动构建这个镜像，然后使用这个镜像启动服务容器</p><pre class="line-numbers language-yaml"><code class="language-yaml">version<span class="token punctuation">:</span><span class="token string">"3.7"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    context<span class="token punctuation">:</span>./web    dockerfile<span class="token punctuation">:</span>Dockerfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><p>context选项可以是Dockerfile的文件路径，也可以是到链接到git仓库的url。当提供的值是相对路径时，它被解析为相对于撰写文件的路径，此目录也是发送到Docker守护进程的context</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">build</span><span class="token punctuation">:</span>  context<span class="token punctuation">:</span>./dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><p>使用此dockerfile文件来构建，必须使用context指定构建路径</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">build</span><span class="token punctuation">:</span>  context<span class="token punctuation">:</span>.    <span class="token comment" spellcheck="true"># 知道dockerfile必须要有构建路径,.表示当前路径</span>  dockerfile<span class="token punctuation">:</span>Dockerfile<span class="token punctuation">-</span>alternate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>指定docker-compose启动容器服务的镜像，可以是存储仓库、标签以及镜像ID，如果镜像不存在，Compose会自动拉去镜像</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span><span class="token number">14.04</span><span class="token key atrule">image</span><span class="token punctuation">:</span> tutum/influxdb<span class="token key atrule">image</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>registry.com<span class="token punctuation">:</span>4000/postgresql<span class="token key atrule">image</span><span class="token punctuation">:</span> a4bc65fd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><p>覆盖容器启动后默认执行的命令</p><pre class="line-numbers language-yaml"><code class="language-yaml">command<span class="token punctuation">:</span>bundle exec thin <span class="token punctuation">-</span>p 3000command<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"bundle"</span><span class="token punctuation">,</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"thin"</span><span class="token punctuation">,</span><span class="token string">"-p"</span><span class="token punctuation">,</span><span class="token string">"3000"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h2><p>指定容器名称，由于容器名称是唯一的，如果指定自定义名称，则无法使用scale</p><pre class="line-numbers language-yaml"><code class="language-yaml">container_name<span class="token punctuation">:</span>my<span class="token punctuation">-</span>web<span class="token punctuation">-</span>container<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h2><p>添加环境变量，可以使用数组或字典。这个标签的作用是设置镜像变量，它可以保存变量到镜像里面，类似ENV指令一样会把变量一直保存在镜像、容器中</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">environment</span><span class="token punctuation">:</span>  RACK_ENV<span class="token punctuation">:</span>development  SHOW<span class="token punctuation">:</span><span class="token string">'true'</span>  <span class="token key atrule">SESSION_SECRET</span><span class="token punctuation">:</span><span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span>RACK_ENV=development  <span class="token punctuation">-</span>SHOW=true  <span class="token punctuation">-</span>SESSION_SECRET<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h2><p>加入指定网络</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">networks</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> lnmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h2><p>映射端口</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span><span class="token string">"3000"</span>  <span class="token punctuation">-</span><span class="token string">"3000-3005"</span>  <span class="token punctuation">-</span><span class="token string">"8000:8000"</span>  <span class="token punctuation">-</span><span class="token string">"9090-9091:8080-8081"</span>  <span class="token punctuation">-</span><span class="token string">"49100:22"</span>  <span class="token punctuation">-</span><span class="token string">"127.0.0.1:8001:8001"</span>  <span class="token punctuation">-</span><span class="token string">"127.0.0.1:5000-5010:5000-5010"</span>        <span class="token comment" spellcheck="true"># 指定IP+端口的话只会监听ipv4的地址</span>  <span class="token punctuation">-</span><span class="token string">"6060:6060/udp"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h2><p>暴露端口，但不映射到宿主机，只被连接的服务访问。这个标签与Dockerfile中的EXPOSE指令一样，用于指定暴露的端口，实际上docker-compose.yml的端口映射还得ports这样的标签</p><h2 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h2><p>添加主机名的标签，就是往/etc/hosts文件中添加一些记录，与Docker客户端中的–add-host类似</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span><span class="token string">"www.missf.top:124.156.205.241"</span>  <span class="token punctuation">-</span><span class="token string">"mf_missf.gitee.io:212.64.62.174"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h2><p>挂载一个目录或者一个已存在的数据卷容器</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> /opt/data<span class="token punctuation">:</span>/var/lib/mysql        <span class="token comment" spellcheck="true"># 挂载宿主机的/opt/data目录到容器的/var/lib/mysql</span>  <span class="token punctuation">-</span> datavolume<span class="token punctuation">:</span>/var/lib/mysq    <span class="token comment" spellcheck="true"># 将容器的/var/lib/mysq挂载到datavolume数据卷</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h2><p>默认值为 no ，即在任何情况下都不会重新启动容器。当值为 always 时，容器总是重新启动。当值为on-failure时，当出现on-failure报错容器退出时，容器重新启动。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">restart</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span class="token key atrule">restart</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure<span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><p>定义容器主机名</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">hostname</span><span class="token punctuation">:</span> foo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Compose-常用选项与命令"><a href="#Compose-常用选项与命令" class="headerlink" title="Compose 常用选项与命令"></a>Compose 常用选项与命令</h1><h2 id="up"><a href="#up" class="headerlink" title="up"></a>up</h2><p>该命令十分强大，它将尝试自动完成包括构建镜像，创建服务，启动服务，并关联服务相关容器的一系列操作</p><p>up选项如下:</p><p>-d: 在后台运行服务容器</p><p>–force-recreate: 强制重新创建容器，不能与–no-recreate同时使用</p><p>–no-recreate: 如果容器已经存在了，则不重新创建，不能与–force-recreate同时使用</p><p>-no-build: 不自动构建缺失的服务镜像</p><p>–no-deps: 不启动服务所链接的容器</p><h2 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h2><p>可以随时在项目目录下运行docker-compose build来重新构建服务</p><p>build选项如下:</p><p>–force-rm: 删除构建过程中的临时容器</p><p>–no-cache: 构建镜像过程中不使用cache(这将加长构建过程)</p><p>–pull: 始终尝试通过pull来获取更新版本的镜像</p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>列出项目中目前的所有容器</p><p>ps选项如下:</p><p>-q: 只打印容器的ID信息</p><h2 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h2><p>查看服务容器的输出，默认情况下，docker-compose将对不同的服务输出使用不同的颜色来区分</p><pre class="line-numbers language-bash"><code class="language-bash">docker-compose logs <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>删除所有(停止状态的)服务容器，推荐先执行docker-compose stop命令来停止容器</p><p>rm选项如下:</p><p>-f/–force: 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项</p><p>-v: 删除容器所挂载的数据卷</p><h2 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h2><p>设置指定服务运行的容器个数</p><pre class="line-numbers language-bash"><code class="language-bash">docker-compose scale web<span class="token operator">=</span>3 db<span class="token operator">=</span>2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="down"><a href="#down" class="headerlink" title="down"></a>down</h2><p>删除容器、网络</p><h2 id="start-stop-restart"><a href="#start-stop-restart" class="headerlink" title="start/stop/restart"></a>start/stop/restart</h2><p>启动/停止/重启服务</p><h1 id="docker-compose编排lnmp容器"><a href="#docker-compose编排lnmp容器" class="headerlink" title="docker-compose编排lnmp容器"></a>docker-compose编排lnmp容器</h1><h2 id="docker-compose目录设计"><a href="#docker-compose目录设计" class="headerlink" title="docker-compose目录设计"></a>docker-compose目录设计</h2><pre class="line-numbers language-bash"><code class="language-bash">tree /docker-compose_lnmp//docker-compose_lnmp/├── docker-compose.yaml├── mysql│   └── start├── nginx│   ├── Dockerfile│   ├── nginx-1.16.1.tar.gz│   ├── nginx.conf│   ├── php.conf│   └── start└── php    ├── Dockerfile    ├── php-7.4.0.tar.gz    ├── php-fpm.conf    ├── php.ini    ├── start    └── www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">php</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> php    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./php      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmp"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"nginx:/usr/local/nginx/html"</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./nginx      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"80:80"</span>      <span class="token punctuation">-</span> <span class="token string">"443:443"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmp"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"nginx:/usr/local/nginx/html/"</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"53306:3306"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmp"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"mysql:/var/lib/mysql/"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> mwj123456      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> wordpress<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">lnmp</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 把php代码放到这个数据卷的目录下</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="docker-compose编排nginx反向代理tomcat集群"><a href="#docker-compose编排nginx反向代理tomcat集群" class="headerlink" title="docker-compose编排nginx反向代理tomcat集群"></a>docker-compose编排nginx反向代理tomcat集群</h1><h2 id="docker-compose目录设计-1"><a href="#docker-compose目录设计-1" class="headerlink" title="docker-compose目录设计"></a>docker-compose目录设计</h2><pre class="line-numbers language-bash"><code class="language-bash">tree /docker-compose_lnmt//docker-compose_lnmt/├── docker-compose.yaml├── nginx│   ├── Dockerfile│   ├── nginx-1.16.1.tar.gz│   ├── nginx.conf│   ├── start│   └── tomcat.conf└── tomcat    ├── apache-tomcat-8.5.57.tar.gz    ├── Dockerfile    ├── jdk-8u211-linux-x64.tar.gz    └── start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-compose-yaml-1"><a href="#docker-compose-yaml-1" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h2><pre class="line-numbers language-yaml"><code class="language-yaml">cat docker<span class="token punctuation">-</span>compose.yaml <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./nginx      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"80:80"</span>      <span class="token punctuation">-</span> <span class="token string">"443:443"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmt"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"webapps:/usr/local/tomcat/webapps/"</span>  <span class="token key atrule">tomcat1</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> tomcat1    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./tomcat      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmt"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"webapps:/usr/local/tomcat/webapps/"</span>  <span class="token key atrule">tomcat2</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> tomcat2    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./tomcat      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmt"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"webapps:/usr/local/tomcat/webapps/"</span>  <span class="token key atrule">tomcat3</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> tomcat3    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./tomcat      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmt"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"webapps:/usr/local/tomcat/webapps/"</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"53306:3306"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"lnmt"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"mysql:/var/lib/mysql/"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> mwj123456      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> test<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">webapps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 把war包放到这个数据卷的目录下,就会自动解压</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">lnmt</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="监听Nginx容器访问日志"><a href="#监听Nginx容器访问日志" class="headerlink" title="监听Nginx容器访问日志"></a>监听Nginx容器访问日志</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tail</span> -f /usr/local/nginx/logs/access.log     <span class="token comment" spellcheck="true"># 点击浏览器刷新页面,可以看到upstream_addr的IP变化,这样就实现了反向代理Tomcat集群</span><span class="token punctuation">{</span><span class="token string">"@timestamp"</span><span class="token keyword">:</span> <span class="token string">"2020-07-14T08:03:19+08:00"</span>, <span class="token string">"clientRealIp"</span><span class="token keyword">:</span> <span class="token string">"10.10.110.1"</span>, <span class="token string">"scheme"</span><span class="token keyword">:</span> <span class="token string">"http"</span>, <span class="token string">"method"</span><span class="token keyword">:</span> <span class="token string">"GET"</span>, <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"10.10.110.150"</span>, <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"/"</span>, <span class="token string">"size"</span><span class="token keyword">:</span> 1056, <span class="token string">"referrer"</span><span class="token keyword">:</span> <span class="token string">"-"</span>, <span class="token string">"agent"</span><span class="token keyword">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"</span>, <span class="token string">"upstream_addr"</span><span class="token keyword">:</span> <span class="token string">"192.168.16.3:8080"</span>, <span class="token string">"request_time"</span><span class="token keyword">:</span> 0.323, <span class="token string">"request_length"</span><span class="token keyword">:</span> 450, <span class="token string">"upstream_connect_time"</span><span class="token keyword">:</span> <span class="token string">"0.003"</span>, <span class="token string">"upstream_response_time"</span><span class="token keyword">:</span> <span class="token string">"0.324"</span>, <span class="token string">"upstream_status"</span><span class="token keyword">:</span> <span class="token string">"200"</span>, <span class="token string">"status"</span><span class="token keyword">:</span> <span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"@timestamp"</span><span class="token keyword">:</span> <span class="token string">"2020-07-14T08:03:28+08:00"</span>, <span class="token string">"clientRealIp"</span><span class="token keyword">:</span> <span class="token string">"10.10.110.1"</span>, <span class="token string">"scheme"</span><span class="token keyword">:</span> <span class="token string">"http"</span>, <span class="token string">"method"</span><span class="token keyword">:</span> <span class="token string">"GET"</span>, <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"10.10.110.150"</span>, <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"/"</span>, <span class="token string">"size"</span><span class="token keyword">:</span> 1056, <span class="token string">"referrer"</span><span class="token keyword">:</span> <span class="token string">"-"</span>, <span class="token string">"agent"</span><span class="token keyword">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"</span>, <span class="token string">"upstream_addr"</span><span class="token keyword">:</span> <span class="token string">"192.168.16.6:8080"</span>, <span class="token string">"request_time"</span><span class="token keyword">:</span> 0.345, <span class="token string">"request_length"</span><span class="token keyword">:</span> 450, <span class="token string">"upstream_connect_time"</span><span class="token keyword">:</span> <span class="token string">"0.000"</span>, <span class="token string">"upstream_response_time"</span><span class="token keyword">:</span> <span class="token string">"0.345"</span>, <span class="token string">"upstream_status"</span><span class="token keyword">:</span> <span class="token string">"200"</span>, <span class="token string">"status"</span><span class="token keyword">:</span> <span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"@timestamp"</span><span class="token keyword">:</span> <span class="token string">"2020-07-14T08:03:29+08:00"</span>, <span class="token string">"clientRealIp"</span><span class="token keyword">:</span> <span class="token string">"10.10.110.1"</span>, <span class="token string">"scheme"</span><span class="token keyword">:</span> <span class="token string">"http"</span>, <span class="token string">"method"</span><span class="token keyword">:</span> <span class="token string">"GET"</span>, <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"10.10.110.150"</span>, <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"/"</span>, <span class="token string">"size"</span><span class="token keyword">:</span> 1056, <span class="token string">"referrer"</span><span class="token keyword">:</span> <span class="token string">"-"</span>, <span class="token string">"agent"</span><span class="token keyword">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"</span>, <span class="token string">"upstream_addr"</span><span class="token keyword">:</span> <span class="token string">"192.168.16.4:8080"</span>, <span class="token string">"request_time"</span><span class="token keyword">:</span> 0.355, <span class="token string">"request_length"</span><span class="token keyword">:</span> 450, <span class="token string">"upstream_connect_time"</span><span class="token keyword">:</span> <span class="token string">"0.000"</span>, <span class="token string">"upstream_response_time"</span><span class="token keyword">:</span> <span class="token string">"0.354"</span>, <span class="token string">"upstream_status"</span><span class="token keyword">:</span> <span class="token string">"200"</span>, <span class="token string">"status"</span><span class="token keyword">:</span> <span class="token string">"200"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-Compose-概述&quot;&gt;&lt;a href=&quot;#Docker-Compose-概述&quot; class=&quot;headerlink&quot; title=&quot;Docker Compose 概述&quot;&gt;&lt;/a&gt;Docker Compose 概述&lt;/h1&gt;&lt;p&gt;Compose是用于
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Docker图形化页面管理(8)</title>
    <link href="https://www.missf.top/post/92368be2.html"/>
    <id>https://www.missf.top/post/92368be2.html</id>
    <published>2020-07-10T02:03:55.000Z</published>
    <updated>2020-08-28T03:17:36.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker图形化页面管理"><a href="#Docker图形化页面管理" class="headerlink" title="Docker图形化页面管理"></a>Docker图形化页面管理</h1><h2 id="Portainer概述"><a href="#Portainer概述" class="headerlink" title="Portainer概述"></a>Portainer概述</h2><p>Portainer是Docker的图形化管理工具，portainer通过连接/var/run/docker.sock文件去管理容器，可让你轻松管理不同的Docker环境(Docker主机或Swarm群集)。Portainer提供状态显示面板、应用模板快速部署、容器镜像网络数据卷、事件日志显示、容器控制台操作、登录用户管理和控制等功能。Docker图形化管理界面有很多实现的工具，但生态一直不温不火，这是由于Docker的很多操作都是直接在命令行进行，再加上Docker的操作也比较简单。一般这样的图形化管理平台都是交给开发和测试人员去使用的</p><h2 id="Portainer安装"><a href="#Portainer安装" class="headerlink" title="Portainer安装"></a>Portainer安装</h2><pre class="line-numbers language-bash"><code class="language-bash">docker run -d -p 8000:8000 -p 9000:9000 --name <span class="token string">"portainer"</span> --restart<span class="token operator">=</span>always \-v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer    <span class="token comment" spellcheck="true"># 这里portainer通过连接/var/run/docker.sock文件去管理容器,所以需要把宿主机的docker.sock文件挂载到portainer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="登录Portainer页面"><a href="#登录Portainer页面" class="headerlink" title="登录Portainer页面"></a>登录Portainer页面</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f07e05614195aa594bd5076.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Portainer连接容器的方式"><a href="#Portainer连接容器的方式" class="headerlink" title="Portainer连接容器的方式"></a>Portainer连接容器的方式</h2><p>Local:管理Portainer所在主机上的Docker主机，需要将宿主机的docker.sock文件挂载到Portainer容器内</p><p>Remote:管理远程主机上的Docker主机，但是要开启远程的Docker主机的Docker API，允许Portainer通过TCP连接</p><p>Agent:直接连接到在Swarm集群中运行的Portainer代理</p><p>Azure:连接到Microsoft Azure</p><p>这里我们先使用Local的方式连接到Portainer所在的主机</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f07e0c714195aa594bd6b94.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Portainer管理界面"><a href="#Portainer管理界面" class="headerlink" title="Portainer管理界面"></a>Portainer管理界面</h2><p>通过下图可以看到Portainer提供了对容器、镜像、网络、数据卷、变量、主机的操作，App templates是一些供我们下载的公共镜像，我们还可以看到正在运行的容器状态、日志、基于镜像、创建时间、映射端口等</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f07e77714195aa594bf164b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Portainer连接远程Docker主机"><a href="#Portainer连接远程Docker主机" class="headerlink" title="Portainer连接远程Docker主机"></a>Portainer连接远程Docker主机</h2><p>首先需要在远程Docker主机上开启Docker API</p><pre class="line-numbers language-bash"><code class="language-bash">vim /usr/lib/systemd/system/docker.serviceExecStart<span class="token operator">=</span>/usr/bin/dockerd -H tcp://0.0.0.0:2375    <span class="token comment" spellcheck="true"># 表示所有地址都能连接到Docker API,也可以指定IP连接,默认端口是2375</span>systemctl daemon-reloadsystemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在Portainer再创建一个连接远程Docker主机API的节点</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f08078d14195aa594c7af99.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时候我们可以使用Portainer去管理本地和远程主机上的Docker资源了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5f0807e114195aa594c7cc1f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker图形化页面管理&quot;&gt;&lt;a href=&quot;#Docker图形化页面管理&quot; class=&quot;headerlink&quot; title=&quot;Docker图形化页面管理&quot;&gt;&lt;/a&gt;Docker图形化页面管理&lt;/h1&gt;&lt;h2 id=&quot;Portainer概述&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.missf.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.missf.top/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://www.missf.top/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="云计算" scheme="https://www.missf.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
</feed>
