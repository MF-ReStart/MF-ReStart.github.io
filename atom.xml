<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒原饮露</title>
  
  <subtitle>青春不是隔岸观火啊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.missf.top/"/>
  <updated>2020-06-02T07:51:22.028Z</updated>
  <id>https://www.missf.top/</id>
  
  <author>
    <name>荒原饮露</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ansible的循环(11)</title>
    <link href="https://www.missf.top/post/167e62f3.html"/>
    <id>https://www.missf.top/post/167e62f3.html</id>
    <published>2020-06-01T02:47:20.000Z</published>
    <updated>2020-06-02T07:51:22.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ansible的循环"><a href="#ansible的循环" class="headerlink" title="ansible的循环"></a>ansible的循环</h1><p>我们在编写playbook的时候，不可避免的要执行一些重复性操作，比如指定安装软件包，批量创建用户，操作某个目录下的所有文件等。ansible一门简单的自动化语言，所以流程控制、循环语句这些编程语言的基本元素它同样都具备。 Ansible提供了两个用于创建循环的关键字: loop和with_&lt;lookup&gt;，Ansible 2.5中添加了loop，但它还不是with_&lt;lookup&gt;的完全替代品。在官方推荐使用loop，但我们现在还可以在大多数用例中使用with_&lt;lookup&gt;，但是随着loop语法的不断改进，with_&lt;lookup&gt;以后可能会失效。</p><h2 id="循环一个自定义列表"><a href="#循环一个自定义列表" class="headerlink" title="循环一个自定义列表"></a>循环一个自定义列表</h2><p>使用with_items关键字创建一个循环，with_items会把列表的每一条信息，单独放到item变量里面，然后循环打印每次item变量的值</p><pre><code># 方式1---- hosts: dbserver  remote_user: root  tasks:  - debug:      msg: &quot;{{ item }}&quot;    with_items:    - 1    - 2    - 3# 方式2---- hosts: dbserver  remote_user: root  tasks:  - debug: msg: &quot;{{ item }}&quot;    with_items: [1,2,3]# 方式3---- hosts: dbserver  remote_user: root  vars:    list:    - a    - b    - c  tasks:  - debug: msg: {{ item }}    with_items: &#39;{{ list }}&#39;方式4---- hosts: dbserver  remote_user: root  vars:    list: [1,2,3]  tasks:  - debug: msg: {{ item }}    with_items: &#39;{{ list }}&#39;</code></pre><h2 id="定义稍微复杂的列表"><a href="#定义稍微复杂的列表" class="headerlink" title="定义稍微复杂的列表"></a>定义稍微复杂的列表</h2><p>自定义列表中的每一个键值对都是一个对象，我们可以通过对象的属性对应的”键”，获取到对应的”值”，执行下面的playbook之后，mm和nn都会被输出</p><pre><code>---- hosts: dbserver  remote_user: root  tasks:  - debug:      msg: &quot;{{ item.name }}&quot;    with_items:    - { name: mm, age: 23}    - { name: nn, age: 24}ansible-playbook item.yaml    # 执行playbookok: [dbserver] =&gt; (item={u&#39;age&#39;: 23, u&#39;name&#39;: u&#39;mm&#39;}) =&gt; {    &quot;msg&quot;: &quot;mm&quot;}ok: [dbserver] =&gt; (item={u&#39;age&#39;: 24, u&#39;name&#39;: u&#39;nn&#39;}) =&gt; {    &quot;msg&quot;: &quot;nn&quot;}</code></pre><h2 id="利用循环创建多个文件"><a href="#利用循环创建多个文件" class="headerlink" title="利用循环创建多个文件"></a>利用循环创建多个文件</h2><pre><code># 没学习循环之前可能这样创建多个文件---- hosts: dbserver  remote_user: root  gather_facts: no  tasks:  - file:      path: &#39;/opt/a&#39;      state: touch  - file:      path: &#39;/opt/b&#39;      state: touch  - file:      path: &#39;/opt/c&#39;      state: touch  - file:      path: &#39;/opt/d&#39;      state: touch# 使用循环的方式---- hosts: dbserver  remote_user: root  gather_facts: no  vars:    dirs:    - &#39;/opt/a&#39;    - &#39;/opt/b&#39;    - &#39;/opt/c&#39;    - &#39;/opt/d&#39;  tasks:  - file:      path: &#39;{{ item }}&#39;      state: touch    with_items: &#39;{{ dirs }}&#39;</code></pre><h2 id="利用循环多次调用模块"><a href="#利用循环多次调用模块" class="headerlink" title="利用循环多次调用模块"></a>利用循环多次调用模块</h2><p>不使用循环的情况下调用模块，返回的信息是这样的</p><pre><code>---- hosts: dbserver  remote_user: root  tasks:  - shell: &#39;ls /etc&#39;    register: returnvalue  - debug:      var: returnvalueansible-playbook item.yamlok: [dbserver] =&gt; {    &quot;returnvalue&quot;: {        &quot;changed&quot;: true,         &quot;cmd&quot;: &quot;ls /etc&quot;,         &quot;delta&quot;: &quot;0:00:00.025062&quot;,         &quot;end&quot;: &quot;2020-06-02 01:06:34.741709&quot;,         &quot;failed&quot;: false,         &quot;rc&quot;: 0,         &quot;start&quot;: &quot;2020-06-02 01:06:34.716647&quot;,         &quot;stderr&quot;: &quot;&quot;,         &quot;stderr_lines&quot;: [],这里省略......}</code></pre><p>我们使用循环重复调用了shell模块两次，分别执行了两条命令，然后将shell模块的返回值存放到了returnvalue变量中，最后使用debug模块输出了returnvalue变量的值。当使用了循环之后，每次shell模块执行后的返回值都会放入一个名为results的序列中，其实，results也是一个返回值，当模块中使用了循环时，模块每次执行的返回值都会追加存放到results这个返回值中，所以，我们可以通过results关键字获取到每次模块执行后的返回值</p><pre><code>---- hosts: dbserver  remote_user: root  tasks:  - shell: &#39;{{ item }}&#39;    with_items:    - &#39;ls /etc&#39;    - &#39;ls /var&#39;    register: returnvalue  - debug:      var: returnvalueansible-playbook item.yamlok: [dbserver] =&gt; {    &quot;returnvalue&quot;: {        &quot;changed&quot;: true,         &quot;msg&quot;: &quot;All items completed&quot;,         &quot;results&quot;: [                {                &quot;ansible_loop_var&quot;: &quot;item&quot;,                 &quot;changed&quot;: true,                 &quot;cmd&quot;: &quot;ls /etc&quot;,                 &quot;delta&quot;: &quot;0:00:00.026532&quot;,                 &quot;end&quot;: &quot;2020-06-02 01:08:22.264277&quot;,                 &quot;failed&quot;: false,                 &quot;invocation&quot;: { 这里省略......}</code></pre><p>先使用循环重复的调用了shell模块，然后将shell模块每次执行后的返回值注册到了变量returnvalue中，之后，在使用debug模块时，通过返回值results获取到了之前每次执行shell模块的返回值（shell每次执行后的返回值已经被放入到item变量中），最后又通过返回值stdout获取到了每次shell模块执行后的标准输出</p><pre><code>---- hosts: dbserver  remote_user: root  tasks:  - shell: &#39;{{ item }}&#39;    with_items:    - &#39;ls /etc&#39;    - &#39;ls /var&#39;    register: returnvalue  - debug:      msg: &#39;{{ item.stdout }}&#39;    with_items: &#39;{{ returnvalue.results}}&#39;</code></pre><h2 id="打印序列中的序列"><a href="#打印序列中的序列" class="headerlink" title="打印序列中的序列"></a>打印序列中的序列</h2><p>with_items块序列下面有一个自定义列表[1,2,3]，执行playbook会循环打印[1,2,3]列表里的每一个值</p><pre><code>---- hosts: dbserver  remote_user: root  tasks:  - debug:      msg: &quot;{{ item }}&quot;    with_items: [1,2,3]ok: [dbserver] =&gt; (item=1) =&gt; {    &quot;msg&quot;: 1}ok: [dbserver] =&gt; (item=2) =&gt; {    &quot;msg&quot;: 2}ok: [dbserver] =&gt; (item=3) =&gt; {    &quot;msg&quot;: 3}</code></pre><p>with_items块序列下面有两个自定义列表，执行playbook还是会循环打印两个列表里的每一个值</p><pre><code>---- hosts: dbserver  remote_user: root  tasks:  - debug:      msg: &quot;{{ item }}&quot;    with_items:     - [1,2,3]    - [4,5,6]ok: [dbserver] =&gt; (item=1) =&gt; {    &quot;msg&quot;: 1}ok: [dbserver] =&gt; (item=2) =&gt; {    &quot;msg&quot;: 2}ok: [dbserver] =&gt; (item=3) =&gt; {    &quot;msg&quot;: 3}ok: [dbserver] =&gt; (item=4) =&gt; {    &quot;msg&quot;: 4}ok: [dbserver] =&gt; (item=5) =&gt; {    &quot;msg&quot;: 5}ok: [dbserver] =&gt; (item=6) =&gt; {    &quot;msg&quot;: 6}</code></pre><p>当with_items块序列下面有两个自定义的列表时，我们如何让debug模块将每个小列表作为一个小整体输出，而不应该输出小列表中的每个元素呢？我们可以使用with_list关键字，替换上例playbook中的with_items关键字。</p><pre><code>---- hosts: dbserver  remote_user: root  tasks:  - debug:      msg: &quot;{{ item }}&quot;    with_list:     - [1,2,3]    - [4,5,6]ok: [dbserver] =&gt; (item=[1, 2, 3]) =&gt; {        # with_list块序列只会循环最外层的每一项,而with_items则是循环处理每一个元素    &quot;msg&quot;: [        1,         2,         3    ]}ok: [dbserver] =&gt; (item=[4, 5, 6]) =&gt; {    &quot;msg&quot;: [        4,         5,         6    ]}</code></pre><h2 id="元素对齐合并"><a href="#元素对齐合并" class="headerlink" title="元素对齐合并"></a>元素对齐合并</h2><p>with_together可以将两个列表中的元素对齐合并，如果两个列表元素不一致，缺少的元素值为null</p><pre><code>---- hosts: dbserver  remote_user: root  tasks:  - debug:      msg: &#39;{{ item }}&#39;    with_together:    - [1,2,3]    - [a,b,c]ok: [dbserver] =&gt; (item=[1, u&#39;a&#39;]) =&gt; {    &quot;msg&quot;: [        1,         &quot;a&quot;    ]}ok: [dbserver] =&gt; (item=[2, u&#39;b&#39;]) =&gt; {    &quot;msg&quot;: [        2,         &quot;b&quot;    ]}ok: [dbserver] =&gt; (item=[3, u&#39;c&#39;]) =&gt; {    &quot;msg&quot;: [        3,         &quot;c&quot;    ]}</code></pre><h2 id="元素两两组合"><a href="#元素两两组合" class="headerlink" title="元素两两组合"></a>元素两两组合</h2><p><strong>需求:</strong> 我们需要创建三个目录，这三个目录下面都有相同的子目录，我们使用ansible-playbook的方式去循环创建，需要用到with_cartesian这个关键字</p><pre><code># 需要创建的目录结构如下:dir1/sofm    dir1/bindir2/sofm    dir2/bindir3/sofm    dir3/bin---- hosts: dbserver  remote_user: root  tasks:  - file:      state: directory      path: &#39;/{{ item[0] }}/{{ item[1] }}&#39;    with_cartesian:    - [dir1,dir2,dir3]    - [sofm,bin]</code></pre><p>执行playbook会将两个列表的元素两两组合，使用item[0]和item[1]来获取每一次循环的值</p><pre><code>PLAY [dbserver] ******************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]TASK [file] **********************************************************************************************************************changed: [dbserver] =&gt; (item=[u&#39;dir1&#39;, u&#39;sofm&#39;])changed: [dbserver] =&gt; (item=[u&#39;dir1&#39;, u&#39;bin&#39;])changed: [dbserver] =&gt; (item=[u&#39;dir2&#39;, u&#39;sofm&#39;])changed: [dbserver] =&gt; (item=[u&#39;dir2&#39;, u&#39;bin&#39;])changed: [dbserver] =&gt; (item=[u&#39;dir3&#39;, u&#39;sofm&#39;])changed: [dbserver] =&gt; (item=[u&#39;dir3&#39;, u&#39;bin&#39;])PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ansible的循环&quot;&gt;&lt;a href=&quot;#ansible的循环&quot; class=&quot;headerlink&quot; title=&quot;ansible的循环&quot;&gt;&lt;/a&gt;ansible的循环&lt;/h1&gt;&lt;p&gt;我们在编写playbook的时候，不可避免的要执行一些重复性操作，比如指定安
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的变量(10)</title>
    <link href="https://www.missf.top/post/4736d6b2.html"/>
    <id>https://www.missf.top/post/4736d6b2.html</id>
    <published>2020-05-28T02:13:41.000Z</published>
    <updated>2020-06-02T07:51:22.029Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的变量"><a href="#ansible的变量" class="headerlink" title="ansible的变量"></a>ansible的变量</h1><p>在ansible中使用变量，能让我们的工作变得更加灵活。</p><h2 id="变量定义规则"><a href="#变量定义规则" class="headerlink" title="变量定义规则"></a>变量定义规则</h2><ul><li><strong>变量名应该由字母、数字、下划线组成</strong></li><li><strong>变量名需要以字母开头</strong></li><li><strong>ansible内置的关键字不能作为变量名</strong></li></ul><h1 id="在playbook中使用变量"><a href="#在playbook中使用变量" class="headerlink" title="在playbook中使用变量"></a>在playbook中使用变量</h1><p>使用vars关键字定义名为package1值为nginx的变量，在task中使用进行调用</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">package1</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">yum</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"{{ package1 }}"</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> installed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用块序列化语法定义变量"><a href="#使用块序列化语法定义变量" class="headerlink" title="使用块序列化语法定义变量"></a>使用块序列化语法定义变量</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">vars</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">testvar1</span><span class="token punctuation">:</span> a1  <span class="token punctuation">-</span> <span class="token key atrule">testvar2</span><span class="token punctuation">:</span> b2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用属性的方式定义变量"><a href="#使用属性的方式定义变量" class="headerlink" title="使用属性的方式定义变量"></a>使用属性的方式定义变量</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义两个变量</span>      <span class="token key atrule">conf80</span><span class="token punctuation">:</span> /etc/nginx/conf.d/80.conf          <span class="token key atrule">conf8080</span><span class="token punctuation">:</span> /etc/nginx/conf.d/8080.conf  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"{{ nginx.conf80 }}"</span>    <span class="token comment" spellcheck="true"># 第一种调用方法</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"{{ nginx['conf8080']}}"</span>    <span class="token comment" spellcheck="true"># 第二种调用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> 如果引用变量时，变量处于开头的位置，那么变量必须要用双引号引起来，否则语法会报错</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"{{ nginx['conf8080']}}"</span>    <span class="token comment" spellcheck="true"># 引用这种变量处于开头位置的必须使用引号引起来</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /root/<span class="token punctuation">{</span><span class="token punctuation">{</span> nginx<span class="token punctuation">[</span><span class="token string">'conf8080'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 这样的不用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引入文件内的变量"><a href="#引入文件内的变量" class="headerlink" title="引入文件内的变量"></a>引入文件内的变量</h2><p>创建nginx_vars.yaml文件，直接在文件中以自己喜欢的方式定义变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">testvar1</span><span class="token punctuation">:</span> zxc<span class="token key atrule">testvar2</span><span class="token punctuation">:</span> qwe<span class="token punctuation">-</span> <span class="token key atrule">testvar3</span><span class="token punctuation">:</span> rty<span class="token punctuation">-</span> <span class="token key atrule">testvar4</span><span class="token punctuation">:</span> poi<span class="token key atrule">nginx</span><span class="token punctuation">:</span>  <span class="token key atrule">conf1</span><span class="token punctuation">:</span> /usr/local/nginx/conf/nginx1.conf  <span class="token key atrule">conf2</span><span class="token punctuation">:</span> /usr/local/nginx/conf/nginx2.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在playbook中以vars_files关键字引入文件中的变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># vars关键字和vars_files关键字可以同时使用</span>  <span class="token punctuation">-</span> /root/vars.yaml  <span class="token key atrule">vars_files</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> /playbook/nginx_vars.yaml  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"{{ nginx.conf80 }}"</span>      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"{{ nginx['conf8080']}}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="变量与setup模块"><a href="#变量与setup模块" class="headerlink" title="变量与setup模块"></a>变量与setup模块</h1><p>前面我们说过在执行playbook的时候，默认都会运行一个名为<strong>Gathering Facts</strong>的任务，这个任务会收集管理节点的相关信息(例如管理节点的IP地址，主机名，系统版本，硬件配置等信息)，这些被收集到的信息都会保存在对应的变量中，我们想要使用这些信息时，可以获取对应的变量，从而使用这些信息。关于setup模块具体查看前面ansible模块学习。</p><h2 id="查看从管理节点收集到的所有相关信息"><a href="#查看从管理节点收集到的所有相关信息" class="headerlink" title="查看从管理节点收集到的所有相关信息"></a>查看从管理节点收集到的所有相关信息</h2><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m setup# 由于返回信息的比较多，这里不作示例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看管理节点的内存使用情况"><a href="#查看管理节点的内存使用情况" class="headerlink" title="查看管理节点的内存使用情况"></a>查看管理节点的内存使用情况</h2><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m setup -a 'filter=ansible_memory_mb'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="在管理节点创建自定义变量"><a href="#在管理节点创建自定义变量" class="headerlink" title="在管理节点创建自定义变量"></a>在管理节点创建自定义变量</h2><p>除了ansible默认收集的信息以外，我们还能够在管理节点写入一些自定义变量，这些自定义变量也是可以被setup模块收集到。</p><p>首先在管理节点创建自定义变量的文件hello.fact，此类文件必须以*.fact命名</p><pre class="line-numbers language-shell"><code class="language-shell"># 管理节点mkdir -p /etc/ansible/facts.dvim /etc/ansible/facts.d/hello.fact[info]name: mwjage: 24# 控制节点ansible dbserver -m setup -a "filter=ansible_local"        # 使用ansible_local关键字过滤信息得到管理节点的自定义变量10.10.110.122 | SUCCESS => {    "ansible_facts": {        "ansible_local": {            "hello": {                "info": {                    "age": "24",                     "name": "mwj"                }            }        },         "discovered_interpreter_python": "/usr/bin/python"    },     "changed": false}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> 管理节点上的hello.fact文件必须不是可执行文件，不然这个文件不会被成功读取，具体可查看ansible官方文档有详细说明。</p><p>在管理节点的/etc/ansible/facts.d/这个目录是使用ansible_local关键字过滤时的默认路径，如果想要自定义路径可以使用fact_path关键字定义</p><pre class="line-numbers language-shell"><code class="language-shell">ansible dbserver -m setup -a "fact_path=/tmp/facts.d/"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="变量与debug模块"><a href="#变量与debug模块" class="headerlink" title="变量与debug模块"></a>变量与debug模块</h1><p>debug模块是帮我们进行调试的，可以把对我们有用的信息输出到控制台上，以便能够定位问题。</p><h2 id="playbook中使用debug模块"><a href="#playbook中使用debug模块" class="headerlink" title="playbook中使用debug模块"></a>playbook中使用debug模块</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> touch file    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/debug.txt      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug demo    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> this is debug info<span class="token punctuation">,</span>File created successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行playbook模块查看信息"><a href="#运行playbook模块查看信息" class="headerlink" title="运行playbook模块查看信息"></a>运行playbook模块查看信息</h2><p>如下图所示，在touch文件之后会输出我们定义好的debug信息</p><pre class="line-numbers language-shell"><code class="language-shell">PLAY [all] ***********************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]ok: [webserver]TASK [touch file] ****************************************************************************************************************changed: [webserver]changed: [dbserver]TASK [debug demo] ****************************************************************************************************************ok: [webserver] => {    "msg": "this is debug info,File created successfully"}ok: [dbserver] => {    "msg": "this is debug info,File created successfully"}PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   webserver                  : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用debug模块输出变量信息"><a href="#使用debug模块输出变量信息" class="headerlink" title="使用debug模块输出变量信息"></a>使用debug模块输出变量信息</h2><p>debug模块除了能够使用msg参数输出自定义的信息，还能够使用var参数直接输出变量中的信息</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>     <span class="token key atrule">testvar</span><span class="token punctuation">:</span> this is a debug variable  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug demo    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">var</span><span class="token punctuation">:</span> testvar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用debug模块的msg参数一样可以打印变量信息</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug demo    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"Remote host memory information: {{ ansible_memory_mb }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-shell"><code class="language-shell">PLAY [all] ***********************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]ok: [webserver]TASK [debug demo] ****************************************************************************************************************ok: [webserver] => {    "msg": "Remote host memory information: {u'real': {u'total': 216, u'used': 213, u'free': 3}, u'swap': {u'cached': 0, u'total': 1023, u'free': 1022, u'used': 1}, u'nocache': {u'used': 163, u'free': 53}}"}ok: [dbserver] => {    "msg": "Remote host memory information: {u'real': {u'total': 216, u'used': 212, u'free': 4}, u'swap': {u'cached': 0, u'total': 1023, u'free': 1013, u'used': 10}, u'nocache': {u'used': 170, u'free': 46}}"}PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   webserver                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ansible_memory_mb其中其实包含了 “nocache”、”real”、 “swap”三个部分的信息，我们只想获得”real”部分的信息，在playbook中引用变量时可以使用如下示例:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"Remote host memory information: {{ ansible_memory_mb.real }}"</span><span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"Remote host memory information: {{ ansible_memory_mb['real'] }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="注册变量"><a href="#注册变量" class="headerlink" title="注册变量"></a>注册变量</h1><p>ansible的模块运行之后都会返回一些<strong>返回值</strong>，只是默认情况下，这些<strong>返回值</strong>并不会显示而已，我们可以把这些返回值写入到某个变量中，这样我们就能够通过引用对应的变量从而获取到这些返回值了，这种将模块的返回值写入到变量中的方法被称为<strong>注册变量</strong>。</p><p>下面这个playbook有两个任务，第一个任务使用shell模块执行了一条命令，然后在这个任务下使用register注册了一个testvar的变量，第二个任务是使用debug模块的var参数打印这个变量，最后输出shell模块的返回值。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test shell    <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"echo test > /tmp/test"</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> testvar  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> shell module return values    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">var</span><span class="token punctuation">:</span> testvar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>playbook执行的结果如下图，返回的是一个json格式的数据，我们还可以使用<strong>&lt;!–￼11–&gt;</strong>或者<strong>&lt;!–￼12–&gt;</strong>指定key来获取某一项特定的值</p><pre class="line-numbers language-shell"><code class="language-shell">PLAY [dbserver] ******************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]TASK [test shell] ****************************************************************************************************************changed: [dbserver]TASK [shell module return values] ************************************************************************************************ok: [dbserver] => {    "testvar": {        "changed": true,         "cmd": "echo test > /tmp/test",         "delta": "0:00:00.025987",         "end": "2020-06-02 22:34:36.185101",         "failed": false,         "rc": 0,         "start": "2020-06-02 22:34:36.159114",         "stderr": "",         "stderr_lines": [],         "stdout": "",         "stdout_lines": []    }}PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想要查看模块对应的返回值，可以先查找官方手册，但并不是所有模块的官方手册中都对模块的返回值进行了描述，你可以自己去官网查看模块的返回值，这些返回值不仅仅能够用于输出，通常我们会利用到这些返回值，比如通过模块的返回值决定之后的一些动作，所以注册变量在playbook中还是会被经常用到的，在之后的文章中我们会给出示例。</p><h1 id="变量与用户交互信息"><a href="#变量与用户交互信息" class="headerlink" title="变量与用户交互信息"></a>变量与用户交互信息</h1><p>在运行shell脚本时，有些时候需要用户输入信息，脚本再根据用户输入的信息决定下一步的动作，这种交互是必须的。我们也可以在playbook中实现这种交互，首先提示用户输入信息，然后将用户输入的信息存放到指定的变量中，当我们需要使用这些信息时，只要引用对应的变量即可。</p><p>下面我们使用vars_prompt关键字定义了两个变量，变量名为别为your_name和your_age，变量下面是提示用户输入时的信息</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars_prompt</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"your_name"</span>      <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"what is your name"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span> <span class="token punctuation">:</span> <span class="token string">"your_age"</span>      <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"how old are you"</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> output  vars    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> your name is <span class="token punctuation">{</span><span class="token punctuation">{</span>your_name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>you are <span class="token punctuation">{</span><span class="token punctuation">{</span>your_age<span class="token punctuation">}</span><span class="token punctuation">}</span> years old.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>playbook执行如下图，提示用户输入信息时默认是不显示信息的，这和输入密码的场景类似</p><pre class="line-numbers language-shell"><code class="language-shell">what is your name: how old are you: PLAY [dbserver] ******************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]TASK [output  vars] **************************************************************************************************************ok: [dbserver] => {    "msg": "your name is mwj,you are 24 years old."}PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要用户输入信息时显示信息内容，可以将private参数设置为no</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars_prompt</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"your_name"</span>      <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"what is your name"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span> <span class="token punctuation">:</span> <span class="token string">"your_age"</span>      <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"how old are you"</span>      <span class="token key atrule">private</span><span class="token punctuation">:</span> no    <span class="token comment" spellcheck="true"># 显示用户输入的内容</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> output  vars    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> your name is <span class="token punctuation">{</span><span class="token punctuation">{</span>your_name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>you are <span class="token punctuation">{</span><span class="token punctuation">{</span>your_age<span class="token punctuation">}</span><span class="token punctuation">}</span> years old.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以为提示信息设置默认值，如果用户不输入任何信息就将默认值赋予变量，如果用户输入信息，就把输入的信息赋值给变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars_prompt</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"your_name"</span>    <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token string">"what is your name\n"</span>    <span class="token key atrule">private</span><span class="token punctuation">:</span> no    <span class="token key atrule">default</span><span class="token punctuation">:</span> mike  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> output  vars    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> your name is <span class="token punctuation">{</span><span class="token punctuation">{</span>your_name<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面playbook的执行过程如下，中括号内的内容是我们设置的默认值，如果用户直接回车那就将中括号内的内容直接赋值给变量</p><pre class="line-numbers language-shell"><code class="language-shell">what is your name [mike]: mwjPLAY [dbserver] ******************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [dbserver]TASK [output  vars] **************************************************************************************************************ok: [dbserver] => {    "msg": "your name is mwj"}PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="通过命令行传入变量"><a href="#通过命令行传入变量" class="headerlink" title="通过命令行传入变量"></a>通过命令行传入变量</h1><p>我们可以在执行playbook时直接传入需要使用到的变量。编写一个playbook，打印一个passwd的变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"passing in variables from the command line"</span>    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ passwd }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="执行playbook时传入变量"><a href="#执行playbook时传入变量" class="headerlink" title="执行playbook时传入变量"></a>执行playbook时传入变量</h2><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --extra-vars "passwd=mdf123456" passwd.yaml# --extra-vars参数可以简写成-e，还可以一次性传入多个变量，用空格隔开ansible-playbook -e "passwd=mdf123456 username=ewe" passwd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> 如果playbook中并没有定义passwd变量，在执行playbook时也没有传入passwd变量，则会报错。如果在playbook中事先定义好了passwd变量，在执行时再次传入名字相同的变量，最终还是以传入的变量值为准，命令行传入的变量的优先级要高于playbook中的变量。</p><p>不仅ansible-playbook可以使用-e传递变量，ansible命令行一样可以，在执行ad-hoc命令时可以使用下面的方法传入变量</p><pre class="line-numbers language-shell"><code class="language-shell">ansible dbserver -e "name=mwj" -m shell -a "echo my name in {{ name }}"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="json格式传入变量"><a href="#json格式传入变量" class="headerlink" title="json格式传入变量"></a>json格式传入变量</h2><p>除了以键值对的方式传入变量，我们还可以传入json格式的变量</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook passwd.yaml -e '{"username":"mwj","passwd":"123456"}'ansible-playbook passwd.yaml -e '{"countlist":["one","two","three","four"]}'    # {{countlist[0]}}或{{countlist.0}}引用变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="执行playbook时传入变量文件"><a href="#执行playbook时传入变量文件" class="headerlink" title="执行playbook时传入变量文件"></a>执行playbook时传入变量文件</h2><p>编写变量文件，可以是json格式或者yaml格式的文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">namevar</span><span class="token punctuation">:</span> mwj<span class="token key atrule">countlist</span><span class="token punctuation">:</span><span class="token punctuation">-</span> one<span class="token punctuation">-</span> two<span class="token punctuation">-</span> three<span class="token punctuation">-</span> four<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>playbook内容调用变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbderver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"name"</span>    <span class="token key atrule">debug</span><span class="token punctuation">:</span>    <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ namevar }} {{ countlist[0] }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行传入对应的文件，使用<strong>@</strong>符号加上变量文件的路径，变量文件中的所有变量都可以在playbook中引用</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook test.yaml -e '@/ansible/var1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="在主机清单中配置变量"><a href="#在主机清单中配置变量" class="headerlink" title="在主机清单中配置变量"></a>在主机清单中配置变量</h1><p>在主机清单中，可以配置我们的管理节点，也可以将部分管理节点分为一组，其实，在配置清单时还可以为主机或主机组设置变量</p><h2 id="主机变量"><a href="#主机变量" class="headerlink" title="主机变量"></a>主机变量</h2><p>在主机清单中配置变量时，可以同时为管理节点配置对应的变量，当操作这个主机时，即可直接使用对应的变量，而其他主机不能引用到这个变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># ini风格</span>dbserver ansible_host=10.1.1.70 name<span class="token punctuation">:</span> mwj age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token comment" spellcheck="true"># yaml风格</span><span class="token key atrule">all</span><span class="token punctuation">:</span>  <span class="token key atrule">children</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span>      <span class="token key atrule">hosts</span><span class="token punctuation">:</span>        <span class="token key atrule">dbserver</span><span class="token punctuation">:</span>          <span class="token key atrule">ansible_host</span><span class="token punctuation">:</span> 10.10.110.122          <span class="token key atrule">ansible_port</span><span class="token punctuation">:</span> <span class="token number">22</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> mwj          <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">24</span>        <span class="token key atrule">webserver</span><span class="token punctuation">:</span>          <span class="token key atrule">ansible_host</span><span class="token punctuation">:</span> 10.10.110.123          <span class="token key atrule">ansible_port</span><span class="token punctuation">:</span> <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在命令行引用主机变量，也可以在playbook中引用主机变量</p><pre class="line-numbers language-shell"><code class="language-shell">ansible dbserver -m shell -a 'echo {{name}}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用层级关系定义更复杂的主机变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">all</span><span class="token punctuation">:</span>  <span class="token key atrule">children</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span>      <span class="token key atrule">hosts</span><span class="token punctuation">:</span>        <span class="token key atrule">dbserver</span><span class="token punctuation">:</span>          <span class="token key atrule">ansible_host</span><span class="token punctuation">:</span> 10.10.110.122          <span class="token key atrule">ansible_port</span><span class="token punctuation">:</span> <span class="token number">22</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span>             <span class="token key atrule">n1</span><span class="token punctuation">:</span> mike            <span class="token key atrule">n2</span><span class="token punctuation">:</span> masha            <span class="token key atrule">n3</span><span class="token punctuation">:</span> laki<span class="token comment" spellcheck="true"># 引用时使用{{ name.n1 }}或{{ name['n1'] }}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主机组变量"><a href="#主机组变量" class="headerlink" title="主机组变量"></a>主机组变量</h2><p> 在主机清单中，我们可以将多个主机分为一组，这样方便我们同时去操作同一组的管理节点，我们可以为这个主机组定义变量，组内的所有主机都可以使用</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># ini风格</span><span class="token punctuation">[</span>webserver<span class="token punctuation">]</span>web01 ansible_host<span class="token punctuation">:</span> 10.10.110.121web02 ansible_host<span class="token punctuation">:</span> 10.10.110.122web03 ansible_host<span class="token punctuation">:</span> 10.10.110.123<span class="token punctuation">[</span>webserver<span class="token punctuation">:</span>vars<span class="token punctuation">]</span>path="/usr/local/nginx/html/"user="root"<span class="token comment" spellcheck="true"># yaml格式</span><span class="token key atrule">all</span><span class="token punctuation">:</span>  <span class="token key atrule">children</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span>      <span class="token key atrule">hosts</span><span class="token punctuation">:</span>        <span class="token key atrule">dbserver</span><span class="token punctuation">:</span>          <span class="token key atrule">ansible_host</span><span class="token punctuation">:</span> 10.10.110.122          <span class="token key atrule">ansible_port</span><span class="token punctuation">:</span> <span class="token number">22</span>        <span class="token key atrule">webserver</span><span class="token punctuation">:</span>          <span class="token key atrule">ansible_host</span><span class="token punctuation">:</span> 10.10.110.123          <span class="token key atrule">ansible_port</span><span class="token punctuation">:</span> <span class="token number">22</span>      <span class="token key atrule">vars</span><span class="token punctuation">:</span>        <span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token string">"root"</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/usr/local/nginx/html/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="set-fact定义变量"><a href="#set-fact定义变量" class="headerlink" title="set_fact定义变量"></a>set_fact定义变量</h1><p>set_fact是一个模块，我们可以通过set_fact模块在tasks中定义变量testvar1，然后打印这个变量</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">set_fact</span><span class="token punctuation">:</span>      <span class="token key atrule">testvar1</span><span class="token punctuation">:</span> mid  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ testvar1 }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="set-fact定义变量的特殊性"><a href="#set-fact定义变量的特殊性" class="headerlink" title="set_fact定义变量的特殊性"></a>set_fact定义变量的特殊性</h2><p>通过set_fact模块创建的变量还有一个特殊性，过set_fact创建的变量就像主机上的facts信息一样，可以在之后的play中被引用。而我们使用vars关键字创建的变量则不能被其他playbook所引用到。</p><p>下面这个playbook有两个play，第一个play中有两个变量分别是ts1和ts2，它们分别用vars和set_fact定义，只有使用set_fact定义的ts2变量，才能被下面这个play所引用，而使用vars定义的ts1变量则不能被下面的play所引用。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">ts1</span><span class="token punctuation">:</span> team1  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">set_fact</span><span class="token punctuation">:</span>      <span class="token key atrule">ts2</span><span class="token punctuation">:</span> team2  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ ts1 }}---{{ ts2 }}"</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> webserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> get ts1    <span class="token comment" spellcheck="true"># 这里引用会报错</span>    <span class="token key atrule">debug</span><span class="token punctuation">:</span>       <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ ts1 }}"</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> get ts2    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ ts2 }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> set_fact变量类似于管理节点的全局变量，可以跨play获取变量，注册变量也能被之后的play所引用。</p><h1 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h1><p>除了我们各种各样的定义变量之外，ansible还有一些内置的变量供我们使用，这些内置变量的变量名是被ansible所保留的，我们定义变量时不能使用这些变量名。</p><h2 id="内置变量ansible-version"><a href="#内置变量ansible-version" class="headerlink" title="内置变量ansible_version"></a>内置变量ansible_version</h2><p>查看ansible的版本</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m debug -a 'msg={{ansible_version}}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="内置变量hostvars"><a href="#内置变量hostvars" class="headerlink" title="内置变量hostvars"></a>内置变量hostvars</h2><p>hostvars可以帮助我们在操作当前管理节点时获取到其他管理节点中的信息。下面playbook有两个play，第一个没有任何task，只是将webserver主机的信息收集起来，供后面的play调用。第二个play则是使用了debug模块打印了webserver的内置变量hostvars，输出了webserver的IP地址，这就是在操作dbserver管理节点时获取了webserver管理节点的信息。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"gather facts of webserver"</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> webserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"get facts webserver"</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> dbserver  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ hostvars['webserver'].ansible_ens32.ipv4 }}"</span><span class="token comment" spellcheck="true"># 如果没有第一个play，在执行时调用[Gathering Facts]任务，将webserver的信息收集起来，后面dbserver调用这个变量就会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置变量inventory-hostname"><a href="#内置变量inventory-hostname" class="headerlink" title="内置变量inventory_hostname"></a>内置变量inventory_hostname</h2><p>通过inventory_hostname变量可以获取到管理节点的当前主机名称，注意这个不是指Linux系统的主机名，而是对应管理节点在控制节点的主机清单中的配置名称。</p><pre class="line-numbers language-shell"><code class="language-shell"># 主机清单[abc]10.10.110.122dbserver ansible_host: 10.10.110.123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用内置变量inventory_hostname获取各个主机的对应的主机名</p><pre class="line-numbers language-shell"><code class="language-shell">ansible abc -m debug -a 'msg={{inventory_hostname}}'10.10.110.122 | SUCCESS => {    "msg": "10.10.110.122"    }dbserver | SUCCESS => {    "msg": "dbserver"}# 定义是IP则返回IP，定义是别名则返回别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置变量inventory-hostname-short"><a href="#内置变量inventory-hostname-short" class="headerlink" title="内置变量inventory_hostname_short"></a>内置变量inventory_hostname_short</h2><p>与内置变量inventory_hostname类似，通过inventory_hostname_short也可以获取当前play操作的管理节点在清单中对应的名称，但是这个名称更加简短，</p><pre class="line-numbers language-shell"><code class="language-shell">[abc]10.10.110.122dbserver.com ansible_host=10.10.110.123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按上面主机清单的配置，我们可以使用inventory_hostname_short获取到管理节点的简短名称</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m debug -a 'msg={{inventory_hostname_short}}'10.10.110.122 | SUCCESS => {    "msg": "10"}dbserver.com | SUCCESS => {    "msg": "dbserver"}# 可以看到无论是IP还是主机名，inventory_hostname_short都会取得主机名中第一个"."之前的字符作为主机的简短名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置变量play-hosts"><a href="#内置变量play-hosts" class="headerlink" title="内置变量play_hosts"></a>内置变量play_hosts</h2><p>通过内置变量play_hosts可以获取到当前play所操作的所有管理节点的主机名列表</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> 10.10.110.122<span class="token punctuation">,</span>dbserver.com  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debug    <span class="token key atrule">debug</span><span class="token punctuation">:</span>      <span class="token key atrule">msg</span><span class="token punctuation">:</span> <span class="token string">"{{ play_hosts }}"</span><span class="token comment" spellcheck="true"># 返回的是所操作的所有管理节点的主机名列表</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.10.110.122<span class="token punctuation">]</span> =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"10.10.110.122"</span><span class="token punctuation">,</span>         <span class="token string">"dbserver.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token key atrule">ok</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dbserver.com<span class="token punctuation">]</span> =<span class="token punctuation">></span> <span class="token punctuation">{</span>    <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"10.10.110.122"</span><span class="token punctuation">,</span>         <span class="token string">"dbserver.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置变量inventory-dir"><a href="#内置变量inventory-dir" class="headerlink" title="内置变量inventory_dir"></a>内置变量inventory_dir</h2><p>我们可以通过inventory_dir变量获取到ansible主机中清单文件的存放路径</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m debug -a 'msg={{inventory_dir}}'10.10.110.122 | SUCCESS => {    "msg": "/etc/ansible"}dbserver.com | SUCCESS => {    "msg": "/etc/ansible"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的tags(9)</title>
    <link href="https://www.missf.top/post/dd3a7968.html"/>
    <id>https://www.missf.top/post/dd3a7968.html</id>
    <published>2020-05-27T02:38:40.000Z</published>
    <updated>2020-06-02T07:51:22.023Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的tags用法"><a href="#ansible的tags用法" class="headerlink" title="ansible的tags用法"></a>ansible的tags用法</h1><p>我们学习ansible，以后都是要编写各种各样的playbook的。假如我们有一天，写了一个很长很长的playbook，其中包含了非常多的任务，这其实没有什么问题，但是我有时候可能只是需要执行这个playbook的一部分任务而已，而非每一次都执行playbook的全部任务，这个时候我们可以借助tags实现这个需求。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task1      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> t1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> t2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面定义了两个task任务，每个任务有自己的tags，我们可以在执行playbook时借助标签指定只执行那些任务，而忽略其他任务。</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --tags=t2 testtags.yaml    # 只执行t2标签的task任务ansible-playbook --skip-tags=t1 testtags.yaml    # 跳过t1标签任务，其他的任务都会执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="tags的三种语法"><a href="#tags的三种语法" class="headerlink" title="tags的三种语法"></a>tags的三种语法</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">语法一</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> t1 <span class="token punctuation">-</span> t2<span class="token key atrule">语法二</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> t1<span class="token punctuation">,</span>t2<span class="token key atrule">语法三</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'t1'</span><span class="token punctuation">,</span><span class="token string">'t2'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以为一个任务添加多个标签,下面两个task任务都有一个共同的tag1标签，当执行时指定tag1标签，下面两个任务都会执行</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task1      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> t1<span class="token punctuation">,</span>tag1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'t2'</span><span class="token punctuation">,</span><span class="token string">'tag1'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具有共同标签的任务，可以将共同标签从task中提取出来写在play中，下面的两个task任务分别有自己的t1和t2标签，同时又具有共同的t3标签，tags写在tasks上面时，tasks会继承当前play中的tags。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tags</span><span class="token punctuation">:</span> t3  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task1      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> t1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> task2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/task2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch    <span class="token key atrule">tags</span><span class="token punctuation">:</span> t2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用标签时，可以一次性指定多个标签，调用多个标签需要用逗号隔开</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --tags=t1,t2 testtags.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们还可以在调用标签时先概览一下playbook中的标签</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --list-tags testtags.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="tags的五个内置标签"><a href="#tags的五个内置标签" class="headerlink" title="tags的五个内置标签"></a>tags的五个内置标签</h2><ul><li><strong>always:</strong> 当把任务的tags的值指定为always时，那么这个任务就总是会被执行，除非你使用’–skip-tags’选项明确指定跳过这个任务</li><li><strong>never:</strong> 当把任务的tags的值指定为never时，那么这个任务就总是不会被执行，2.5版本中新加入的特殊tag</li><li><strong>tagged:</strong> 调用标签时使用的，只执行有标签的任务，没有任何标签的任务不会被执行</li><li><strong>untagged:</strong> 只执行没有标签的任务，但是如果某些任务包含always标签，那么这些任务也会被执行</li><li><strong>all:</strong> 执行所有标签</li></ul><p>只执行有标签的任务，没有任何标签的任务不会被执行</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --tags tagged testtag.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跳过包含标签的任务，即使对应的任务包含always标签，也会被跳过</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --skip-tags tagged testtag.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只执行没有标签的任务，但是如果某些任务包含always标签，那么这些任务也会被执行</p><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --tags untagged testtag.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的handlers(8)</title>
    <link href="https://www.missf.top/post/b93ea0db.html"/>
    <id>https://www.missf.top/post/b93ea0db.html</id>
    <published>2020-05-26T07:13:48.000Z</published>
    <updated>2020-06-02T07:51:22.020Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的handlers用法"><a href="#ansible的handlers用法" class="headerlink" title="ansible的handlers用法"></a>ansible的handlers用法</h1><p>许多的Linux服务在修改配置文件后都是需要重启服务的，以便能够重新读取配置文件，使新的配置能够生效。那怎么用playbook实现这个简单的功能呢？下面我们来编写一个修改nginx端口的playbook，并且在修改完之后重启nginx。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> modify config    <span class="token key atrule">replace</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/nginx/nginx.conf      <span class="token key atrule">regexp</span><span class="token punctuation">:</span> <span class="token string">"listen(.*)80;"</span>    <span class="token comment" spellcheck="true"># 替换nginx端口为8080</span>      <span class="token key atrule">replace</span><span class="token punctuation">:</span> <span class="token string">"listen 8080;"</span>      <span class="token key atrule">backup</span><span class="token punctuation">:</span> yes  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart nginx        <span class="token comment" spellcheck="true"># 重启nginx服务</span>    <span class="token key atrule">service</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">state</span><span class="token punctuation">:</span> restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意思考:</strong> 这个playbook虽然可以帮助我们成功修改nginx端口并重启nginx服务，但是大家请注意如果我再次执行这个playbook的话，nginx端口已经是8080了，由于ansible幂等性的缘故，所以modify config这个task没有发生状态的改变，所以这一步返回了绿色的信息，但是nginx的服务还是被重启了，其实我们并没有真正去改变nginx的配置文件，但是却还是重启了nginx服务，这是因为重启服务这个任务是写死了的。这种多余的重启是不需要的。那么在playbook中就是使用handlers来解决这种问题的，下面我们就继续以nginx服务这个小例子来学习playbook的handlers用法。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> modify config    <span class="token key atrule">replace</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/nginx/nginx.conf      <span class="token key atrule">regexp</span><span class="token punctuation">:</span> <span class="token string">"listen(.*)80;"</span>      <span class="token key atrule">replace</span><span class="token punctuation">:</span> <span class="token string">"listen 8080;"</span>      <span class="token key atrule">backup</span><span class="token punctuation">:</span> yes    <span class="token key atrule">notify</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在modify config这个任务调用handlers任务列表的restart nginx任务(认真理解这句话)</span>      restart nginx  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 定义一个handlers任务列表</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart nginx    <span class="token key atrule">service</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">state</span><span class="token punctuation">:</span> restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面示例我们使用handlers用法，如果modify config这个task的状态被真正修改过了，notify就会调用handlers任务列表的restart nginx任务，就会执行重启nginx服务，这样就能达到只有nginx配置文件被真正修改了，才会去重启nginx服务。</p><h1 id="handlers是一种任务列表"><a href="#handlers是一种任务列表" class="headerlink" title="handlers是一种任务列表"></a>handlers是一种任务列表</h1><p>在playbook中handlers和tasks是同级别的，这是因为handlers也是任务列表的一种。只不过handlers中的任务是被用于tasks任务列表的notify调用罢了。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> make testfile1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile1      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">notify</span><span class="token punctuation">:</span> ht2  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> make testfile2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile2      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">notify</span><span class="token punctuation">:</span> ht1  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/ht1      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面playbook的执行过程如下:</p><pre class="line-numbers language-shell"><code class="language-shell">PLAY [all] ***********************************************************************************************************************TASK [Gathering Facts] ***********************************************************************************************************ok: [webserver]ok: [dbserver]TASK [make testfile1] ************************************************************************************************************changed: [webserver]changed: [dbserver]TASK [make testfile2] ************************************************************************************************************changed: [webserver]changed: [dbserver]RUNNING HANDLER [ht1] ************************************************************************************************************changed: [webserver]changed: [dbserver]RUNNING HANDLER [ht2] ************************************************************************************************************changed: [dbserver]changed: [webserver]PLAY RECAP ***********************************************************************************************************************dbserver                   : ok=5    changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   webserver                  : ok=5    changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，所有task执行完毕后，才会执行各个handler，而且handler的执行顺序与handler在playbook中的定义顺序是相同的，与handler被notify调用的顺序无关，这一点大家要注意。如果你想要在执行完某些task以后立即执行对应的handler，则需要使用meta模块。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> make testfile1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile1      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">notify</span><span class="token punctuation">:</span> ht2  <span class="token punctuation">-</span> <span class="token key atrule">meta</span><span class="token punctuation">:</span> flush_handlers    <span class="token comment" spellcheck="true"># 定义一个meta任务，表示立即执行之前task任务对应的handlers</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> make testfile3    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile3      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">notify</span><span class="token punctuation">:</span> ht1  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile4      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht2    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家可以看到下图的执行顺序，是执行了make testfile1这个task之后，立即执行它所对应的ht2这个handlers</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ecdcfa1c2a9a83be515c4bf.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="handlers分组"><a href="#handlers分组" class="headerlink" title="handlers分组"></a>handlers分组</h1><p>我们可以将handlers任务列表分组，将多个handlers任务组成一个组，然后在task任务列表notify一个handlers组，这时候task任务执行完之后就会一次性执行多个handlers任务</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> make testfile1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile1      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory    <span class="token key atrule">notify</span><span class="token punctuation">:</span> handlers group1  <span class="token punctuation">-</span> <span class="token key atrule">meta</span><span class="token punctuation">:</span> flush_handlers  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht1    <span class="token key atrule">listen</span><span class="token punctuation">:</span> handlers group1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile4      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ht2    <span class="token key atrule">listen</span><span class="token punctuation">:</span> handlers group1    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /testdir/testfile2      <span class="token key atrule">state</span><span class="token punctuation">:</span> touch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将ht1和ht2这两个handlers任务都监听handlers group1这一个组，这时候在task任务列表notify “handlers group1”这个组名时，就执行这个组的所有handlers任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的playbook(7)</title>
    <link href="https://www.missf.top/post/1b138d79.html"/>
    <id>https://www.missf.top/post/1b138d79.html</id>
    <published>2020-05-24T06:24:36.000Z</published>
    <updated>2020-06-02T07:51:22.021Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Ansible-playbook初识"><a href="#Ansible-playbook初识" class="headerlink" title="Ansible playbook初识"></a>Ansible playbook初识</h1><p>前一章我们学习了ansible的模块，在控制节点上使用了很多ansible的命令对管理节点进行配置和管理，但是在我们真正的工作场景中，如果需要配置一个nginx服务，其实并不是在控制节点执行ansible命令去实现的，你可以想象一下，如果我们需要对管理节点做大量的操作，是不是就是要在控制节点执行非常多的命令呢，而且直接执行命令的方式对管理不同的管理节点时，命令又是需要修改的，这并不是我们想要的。其实ansible是可以写成”脚本”的，注意这里所说的脚本，并不是说将大量的ansible命令放到shell脚本里面去，ansible在部署较为复杂的任务时，有自己的一套执行流程，称为”剧本”，剧本翻译过来就是我们所说的playbook。编写playbook需要遵循yaml语法，那什么又是yaml语法呢，它是为了方便人类读写而设计出来的一种通用的数据串行化格式。</p><h1 id="编写第一个playbook"><a href="#编写第一个playbook" class="headerlink" title="编写第一个playbook"></a>编写第一个playbook</h1><p>playbook文件都以”yaml”或”yml”作为文件后缀，这里我们创建一个名为first.yaml的playbook文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 将下面的ansible命令转化为playbook</span>ansible all <span class="token punctuation">-</span>m pingansible all <span class="token punctuation">-</span>m file <span class="token punctuation">-</span>a 'path=/etc/nodes state=directory'<span class="token comment" spellcheck="true"># playbook的写法:</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ping nodes    <span class="token key atrule">ping</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mkdir directory    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/nodes      <span class="token key atrule">state</span><span class="token punctuation">:</span> directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第一行:</strong> 使用三个横杠作为开始，在YAML语法中，”—“表示文档开始</p><p><strong>第二行:</strong> 使用”-“作为开头表示一个块序列的节点，后面使用hosts关键字指定了要操作的主机</p><p><strong>第三行:</strong> 使用remote_user关键字可以指定在管理节点进行操作时使用哪个用户进行操作</p><p><strong>第四行:</strong> 使用tasks关键字指明要进行操作的任务列表，之后的行都属于tasks键值对中的值</p><p>tasks之后的行都属于任务列表的任务，可以看出任务列表一共有两个任务，每个任务以”-“开头，每个任务都有自己的名字，任务名字使用name关键字进行指定，第一个任务使用ping模块，ping模块在使用时不需要指定任何参数。第二个任务使用file模块，使用file模块时，指定了path参数和state参数的值。</p><h1 id="运行playbook"><a href="#运行playbook" class="headerlink" title="运行playbook"></a>运行playbook</h1><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~/playbook]# ansible-playbook first.yaml PLAY [all] *********************************************************************************************************************************************************TASK [Gathering Facts] *********************************************************************************************************************************************ok: [10.10.110.123]ok: [10.10.110.122]TASK [ping nodes] **************************************************************************************************************************************************ok: [10.10.110.123]ok: [10.10.110.122]TASK [mkdir directory] *********************************************************************************************************************************************ok: [10.10.110.122]ok: [10.10.110.123]PLAY RECAP *********************************************************************************************************************************************************10.10.110.122              : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   10.10.110.123              : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上所示，playbook执行后返回了一些信息，这些信息是这次剧本运行的概况。<strong>PLAY [all]</strong>表示这次运行的playbook有一个’play’是针对所有主机运行的，一个playbook可以是由一个或者多个play组成的。这个play包含了三个任务，这三个任务分别是<strong>TASK [Gathering Facts]</strong>，<strong>TASK [ping nodes]</strong>，<strong>TASK [mkdir directory]</strong>。我们只创建了两个任务，为什么却执行了三个任务呢？其实每个paly在执行前都会执行一个默认任务，这个默认任务就是<strong>TASK [Gathering Facts]</strong>，它会收集当前play对应的目标主机的相关信息，收集完这些基础信息后，才会执行我们指定的任务，这里它是收集我们这个play的所有主机的信息，然后返回主机的IP地址。第二个任务是用ping模块去测试管理节点的状态，给我们返回的是绿色的信息，表示管理节点的状态没有发生改变。第三个任务是创建目录，这里如果管理节点没有/etc/nodes目录，则会返回黄色的信息，表示在管理节点上创建了目录，管理节点的状态发生了改变。这是再次执行playbook，发现创建目录任务的返回信息变成了绿色的，是因为已经创建过目录了，由于幂等性的原因，管理节点的状态没有发生改变。返回信息的最后一个<strong>PLAY RECAP</strong>中可以对所有主机的执行情况进行回顾。</p><h1 id="检查playbook语法"><a href="#检查playbook语法" class="headerlink" title="检查playbook语法"></a>检查playbook语法</h1><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --syntax-check first.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果执行语法检查命令之后，只返回了playbook的名称，就表示没有语法错误。</p><h1 id="模拟执行playbook"><a href="#模拟执行playbook" class="headerlink" title="模拟执行playbook"></a>模拟执行playbook</h1><pre class="line-numbers language-shell"><code class="language-shell">ansible-playbook --check first.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>除了对playbook进行语法测试，我们还能够模拟执行playbook，模拟执行并不是真正的执行，只是假装执行一下，playbook中的任务并不会真正在目标主机中运行，所以你可以放心大胆的进行模拟，模拟运行功能可以帮助我们’预估’playbook是否能够正常执行。</p><p><strong>注意:</strong> 使用上述命令进行模拟时，一些任务可能会报错，这可能是因为报错的任务在执行时需要依赖之前的其他任务的完成结果，但是因为是模拟执行，所以之前的任务并不会真正的执行，既然之前的任务没有真正的执行，自然不会产生对应的结果，所以后面的任务就报错了。也就是说，我们并不能完全以模拟的反馈结果作为playbook是否能够正常运行的判断依据，只能通过模拟大概的预估一下而已。</p><h1 id="使用playbook安装nginx"><a href="#使用playbook安装nginx" class="headerlink" title="使用playbook安装nginx"></a>使用playbook安装nginx</h1><h2 id="目录文件规划"><a href="#目录文件规划" class="headerlink" title="目录文件规划"></a>目录文件规划</h2><pre class="line-numbers language-shell"><code class="language-shell">tree /root/playbook//root/playbook/├── index.html.j2├── nginx.conf└── nginx.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写playbook"><a href="#编写playbook" class="headerlink" title="编写playbook"></a>编写playbook</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义变量，可以在nginx.conf文件中调用</span>    <span class="token key atrule">http_port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">max_clients</span><span class="token punctuation">:</span> <span class="token number">65535    </span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ensure nginx is at the latest version    <span class="token key atrule">yum</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">state</span><span class="token punctuation">:</span> installed  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> write the nginx config file    <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 模板模块，将当前目录下的nginx.conf文件(文件里面定义的变量会自动赋值再拷贝)拷贝到管理节点</span>      <span class="token key atrule">src</span><span class="token punctuation">:</span> nginx.conf      <span class="token key atrule">dest</span><span class="token punctuation">:</span> /etc/nginx/nginx.conf  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> write the site file    <span class="token key atrule">template</span><span class="token punctuation">:</span>      <span class="token key atrule">src</span><span class="token punctuation">:</span> index.html.j2      <span class="token key atrule">dest</span><span class="token punctuation">:</span> /usr/share/nginx/html/index.html    <span class="token key atrule">notify</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> restart nginx  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ensure nginx is running    <span class="token key atrule">service</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">state</span><span class="token punctuation">:</span> started  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart nginx      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=nginx state=restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写nginx配置文件"><a href="#编写nginx配置文件" class="headerlink" title="编写nginx配置文件"></a>编写nginx配置文件</h2><pre class="line-numbers language-shell"><code class="language-shell">#user  nobody;worker_processes  auto;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  {{ max_clients }};    # 调用nginx.yaml中定义的变量}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    server {        listen       {{ http_port }};        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {            root   /usr/share/nginx/html/;            index  index.html index.htm;        }        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }        # deny access to .htaccess files, if Apache's document root        # concurs with nginx's one        #        #location ~ /\.ht {        #    deny  all;        #}    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写index-html-j2文件"><a href="#编写index-html-j2文件" class="headerlink" title="编写index.html.j2文件"></a>编写index.html.j2文件</h2><pre class="line-numbers language-shell"><code class="language-shell">Hello Ansible!This is {{ansible_all_ipv4_addresses}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="在ansible控制节点上查看"><a href="#在ansible控制节点上查看" class="headerlink" title="在ansible控制节点上查看"></a>在ansible控制节点上查看</h2><pre class="line-numbers language-shell"><code class="language-shell">curl 10.10.110.122Hello Ansible!This is [u'10.10.110.122']    # 这个是可变变量curl 10.10.110.123Hello Ansible!This is [u'10.10.110.123']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible的yaml基本语法(6)</title>
    <link href="https://www.missf.top/post/b39d16c2.html"/>
    <id>https://www.missf.top/post/b39d16c2.html</id>
    <published>2020-05-23T08:37:52.000Z</published>
    <updated>2020-06-02T07:51:22.027Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="ansible的yaml基本语法"><a href="#ansible的yaml基本语法" class="headerlink" title="ansible的yaml基本语法"></a>ansible的yaml基本语法</h1><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li>yaml文件以”—“作为文档的开始，”…”作为文档的结束</li><li># 表示注释，从这个字符一直到行尾，都会被解析器忽略</li><li>相同缩进级别的行以”-“(破折号和空格)开头的组成一个列表</li></ul><h1 id="yaml支持的三种数据结构"><a href="#yaml支持的三种数据结构" class="headerlink" title="yaml支持的三种数据结构"></a>yaml支持的三种数据结构</h1><ul><li><strong>数组:</strong> 一组按次序排列的值，又称为序列（sequence） / 列表（list）</li><li><strong>对象:</strong> 键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li><li><strong>纯量:</strong> 单个的、不可再分的值</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>相同缩进级别的行以“- ”（破折号和空格）开头组成一个列表就是数组</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">fruits</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> Apple    <span class="token punctuation">-</span> Banana    <span class="token punctuation">-</span> orange    <span class="token punctuation">-</span> melon<span class="token comment" spellcheck="true"># 行内表示法</span><span class="token key atrule">fruits</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'melon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>对象的一组键值对，使用冒号结构表示(冒号后面要有个空格)</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">sb</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Alex    <span class="token key atrule">job</span><span class="token punctuation">:</span> python    <span class="token key atrule">skill</span><span class="token punctuation">:</span> brag<span class="token comment" spellcheck="true"># 行内表示法</span><span class="token key atrule">sb</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Alex<span class="token punctuation">,</span> <span class="token key atrule">job</span><span class="token punctuation">:</span> python<span class="token punctuation">,</span> <span class="token key atrule">skill</span><span class="token punctuation">:</span> brag<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h1><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><pre><code>number: 12float: 15.20</code></pre><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><pre><code>表示true的值true, True, TRUE, yes, Yes, YES, on, On, ON, y, Y表示false的值false, False, FALSE, no, No, NO, off, Off, OFF, n, N</code></pre><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>yaml 允许使用两个感叹号，强制转换数据类型</p><pre><code>a: !!str 123d: !!str true    # 这个true的数据类型不再是布尔值，而是str类型</code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串默认不使用引号表示</p><pre><code>str: 这是字符串s1: &#39;内容\n字符串&#39;    # 如果字符之中包含空格和特殊字符，需要放在引号之中，单引号和双引号都可以使用，双引号不会对特殊字符转义</code></pre><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p><strong>null:</strong> 用<strong>~</strong>表示</p><pre><code>parent: ~ </code></pre><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><strong>&amp;</strong>用来建立锚点(defaults)，<strong>&lt;&lt;</strong>表示合并到当前数据，*****用来引用锚点</p><pre><code>defaults: &amp;defaults    adapter: postgres    host: localhostdevelopment:     database: myapp_development    &lt;&lt;: *defaultstest:    database: myapp_test    &lt;&lt;: *defaults# 上面的写法等同于下面的代码:defaults:    adapter: postgres    host: localhostdevelopment:  database: myapp_development  adapter: postgres  host: localhosttest:  database: myapp_test  adapter: postgres  host: localhost</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>palybooks更多的yaml语法请参考: <a href="http://docs.ansible.com/YAMLSyntax.html" target="_blank" rel="noopener">http://docs.ansible.com/YAMLSyntax.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>使用coding持续集成Java项目</title>
    <link href="https://www.missf.top/post/1b979c3e.html"/>
    <id>https://www.missf.top/post/1b979c3e.html</id>
    <published>2020-05-18T07:42:59.000Z</published>
    <updated>2020-06-02T07:51:22.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="coding介绍"><a href="#coding介绍" class="headerlink" title="coding介绍"></a>coding介绍</h1><p>在说到持续集成这方面，相信所有做运维的小伙伴都知道Jenkins，就是那个拿着托盘的老头子。但是说到coding，可能很多人都没听说过。什么是coding呢？<strong>coding涵盖了软件开发从构想到交付的一切所需，使研发团队在云端高效协同，实践敏捷开发与 DevOps，提升软件交付质量与速度。</strong>这是来自官网的介绍，下面就让我们一起学习coding吧！</p><h1 id="第一次接触coding"><a href="#第一次接触coding" class="headerlink" title="第一次接触coding"></a>第一次接触coding</h1><p>在去年的七月份，我有幸参加了腾讯的<strong>724</strong>运维分享日，就在那时候接触到了coding。</p><p>这是腾讯滨海大厦四楼，现在看着还历历在目，但是当年的<strong>sz number one</strong>却散落在天涯！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec233ecc2a9a83be541ae66.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>一群运维小伙伴看着这个墙哈哈大笑…</p><p>和一群志同道合的人在一起时，即使不认识也会有莫名的亲切感啊。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2342ec2a9a83be541f551.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第一次看到coding的介绍时都不知道说的啥，现在回头看时才觉得自己成长了。</p><p>(就如Alex吹牛逼说的: 如果你不觉得一年前的自己是傻逼，那就说明你这一年都没有成长)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2346dc2a9a83be542325e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>下图是coding创始人张海龙先生</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2351cc2a9a83be542dc4e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>额…扯远了，下面就让我们来学习coding吧！</p><h1 id="注册coding"><a href="#注册coding" class="headerlink" title="注册coding"></a>注册coding</h1><p>coding所有的东西都是在这个云平台上实现的，所谓的使研发团队在云端高效协同说的就是这个吧！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2389bc2a9a83be546aef6.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="选择DevOps项目模板"><a href="#选择DevOps项目模板" class="headerlink" title="选择DevOps项目模板"></a>选择DevOps项目模板</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2396dc2a9a83be547a27d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="填写项目基本信息"><a href="#填写项目基本信息" class="headerlink" title="填写项目基本信息"></a>填写项目基本信息</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec23a32c2a9a83be548918f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="下载若依的源码"><a href="#下载若依的源码" class="headerlink" title="下载若依的源码"></a>下载若依的源码</h2><p><a href="https://gitee.com/y_project/RuoYi" target="_blank" rel="noopener"><strong>若依源码gitee地址</strong></a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec23f18c2a9a83be54dda29.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="配置若依数据库"><a href="#配置若依数据库" class="headerlink" title="配置若依数据库"></a>配置若依数据库</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec25331c2a9a83be5701a8a.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>将若依自带的两个SQL文件导入到ry数据库</p><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><pre class="line-numbers language-shell"><code class="language-shell">git initgit add .git commit -m "第一次提交"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="配置coding-SSH秘钥"><a href="#配置coding-SSH秘钥" class="headerlink" title="配置coding SSH秘钥"></a>配置coding SSH秘钥</h2><p>在Windows电脑生成ssh密钥对，然后将id_rsa.pub公钥添加到coding SSH公钥</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2422ec2a9a83be550f8a4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="推送本地仓库到coding"><a href="#推送本地仓库到coding" class="headerlink" title="推送本地仓库到coding"></a>推送本地仓库到coding</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec23aa7c2a9a83be549074e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong><code>注意:</code></strong> 如果已经在coding配置了ssh秘钥，git添加远程仓库的时候不要使用https的地址，不然还是会提示需要输入coding的账号密码</p><pre class="line-numbers language-shell"><code class="language-shell">git remote add origin git@e.coding.net:missf/RuoYi.git    # 配置了SSH秘钥的，一定要填写项目的git地址git push -u origin master    # 这样推送时就不需要输入账号密码啦<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24554c2a9a83be557070c.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h1><h2 id="创建持续集成任务"><a href="#创建持续集成任务" class="headerlink" title="创建持续集成任务"></a>创建持续集成任务</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec245a3c2a9a83be5575d81.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="新建构建计划"><a href="#新建构建计划" class="headerlink" title="新建构建计划"></a>新建构建计划</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24603c2a9a83be557c74d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="录入项目凭据"><a href="#录入项目凭据" class="headerlink" title="录入项目凭据"></a>录入项目凭据</h2><p>在服务器生成SSH秘钥对，将私钥录入到coding的凭据管理，coding就能持续集成部署代码到服务器</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24a4fc2a9a83be55de761.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="编写静态配置的-Jenkinsfile"><a href="#编写静态配置的-Jenkinsfile" class="headerlink" title="编写静态配置的 Jenkinsfile"></a>编写静态配置的 Jenkinsfile</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec246cac2a9a83be558be50.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>配置环境变量</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24d43c2a9a83be561df7f.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里附上完整Jenkinsfile</p><pre class="line-numbers language-shell"><code class="language-shell">pipeline {  agent any  stages {    stage('检出') {      steps {        checkout([$class: 'GitSCM', branches: [[name: env.GIT_BUILD_REF]],        userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])      }    }    stage('构建') {      steps {        echo '构建中...'        sh 'java -version'        sh 'mvn package'        echo '构建完成.'      }    }    stage('压缩jar包') {      steps {        echo '压缩中...'        sh 'cd /root/workspace/ruoyi-admin/target/ && tar -zcf /tmp/ruoyi-admin.tar.gz ruoyi-admin.jar'        echo '压缩完成.'      }    }    stage('部署') {      steps {        echo '部署中...'        script {          def remote = [:]          remote.name = 'java-server'          remote.allowAnyHosts = true          remote.host = "${env.REMOTE_HOST}"          remote.port = 50312          remote.user = "${env.REMOTE_USER_NAME}"          // 把「CODING 凭据管理」中的「凭据 ID」填入 credentialsId，而 id_rsa 无需修改           withCredentials([sshUserPrivateKey(credentialsId: "${env.REMOTE_CRED}", keyFileVariable: 'id_rsa')]) {            remote.identityFile = id_rsa            // SSH 上传文件到服务器            sshPut remote: remote, from: '/tmp/ruoyi-admin.tar.gz', into: '/tmp/'            // 解压缩            sshCommand remote: remote,  sudo: false, command: "tar -zxf /tmp/ruoyi-admin.tar.gz -C /home/ruoyi/"            // 执行Java应用启停脚本            sshCommand remote: remote,  sudo: true, command: "sh /home/ruoyi/start.sh stop && sh /home/ruoyi/start.sh start"          }        }        echo '部署完成'      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="触发规则"><a href="#触发规则" class="headerlink" title="触发规则"></a>触发规则</h2><p>本地仓库推送代码到master分支时就会自动触发持续集成任务</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24750c2a9a83be559800d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="开启缓存目录"><a href="#开启缓存目录" class="headerlink" title="开启缓存目录"></a>开启缓存目录</h2><p>开启缓存目录后可以大大提升构建的速度</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec24803c2a9a83be55a9565.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="立即构建"><a href="#立即构建" class="headerlink" title="立即构建"></a>立即构建</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec250bbc2a9a83be5668e32.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="查看构建过程"><a href="#查看构建过程" class="headerlink" title="查看构建过程"></a>查看构建过程</h2><p>构建失败可以查看完整日志分析失败原因</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec2510dc2a9a83be56769bd.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="服务器的启停脚本"><a href="#服务器的启停脚本" class="headerlink" title="服务器的启停脚本"></a>服务器的启停脚本</h2><pre class="line-numbers language-shell"><code class="language-shell">[root@java-server ~]# cd /home/ruoyi/[root@java-server ruoyi]# lltotal 65080drwxr-xr-x 2 root root     4096 May 18 10:18 logs-rw-r--r-- 1 root root       67 May 18 17:04 nohup.out-rw-r--r-- 1 root root 66627886 May 18 17:04 ruoyi-admin.jar-rwxr-xr-x 1 root root      760 May 18 14:29 start.sh[root@java-server ruoyi]# cat start.sh #!/bin/bashWORKSPACE=/home/ruoyiif [ -d "${WORKSPACE}" ]; then    cd ${WORKSPACE}else    echo "${WORKSPACE} directory does not exist"    exit 1fiAPP_NAME='ruoyi-admin.jar'USE_JAVA_HOME='/usr/local/jdk1.8.0_211'JVM_OPTS='-Xms512m -Xmx512m'CONFIG_OPTS=''if [ $1 == 'start' ]; then    echo 'start service '$APP_NAME    nohup java -jar ${JVM_OPTS} ${APP_NAME} > ${WORKSPACE}/nohup.out 2>&1 &elif [ $1 == 'stop' ]; then    echo 'stop service '$APP_NAME    PID=$(ps -ef | grep -v grep | grep ${APP_NAME} | awk '{print $2}')    if [ -z ${PID} ]; then        echo ${APP_NAME} ' had stopped'    else        kill ${PID}        sleep 2        if [ $? -ne 0 ]; then        echo ${APP_NAME} ' stop failed'        exit 1        fi    fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查看持续集成的效果"><a href="#查看持续集成的效果" class="headerlink" title="查看持续集成的效果"></a>查看持续集成的效果</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ec26162c2a9a83be5ac20ab.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;coding介绍&quot;&gt;&lt;a href=&quot;#coding介绍&quot; class=&quot;headerlink&quot; title=&quot;coding介绍&quot;&gt;&lt;/a&gt;coding介绍&lt;/h1&gt;&lt;p&gt;在说到持续集成这方面，相信所有做运维的小伙伴都知道Jenkins，就是那个拿着托盘的老头子。
      
    
    </summary>
    
    
      <category term="coding" scheme="https://www.missf.top/categories/coding/"/>
    
    
      <category term="coding" scheme="https://www.missf.top/tags/coding/"/>
    
      <category term="持续集成" scheme="https://www.missf.top/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>ansible模块学习(5)</title>
    <link href="https://www.missf.top/post/cd036e92.html"/>
    <id>https://www.missf.top/post/cd036e92.html</id>
    <published>2020-05-12T03:12:59.000Z</published>
    <updated>2020-06-02T07:51:22.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="setup模块"><a href="#setup模块" class="headerlink" title="setup模块"></a>setup模块</h1><p>setup模块主要用于获取主机信息，每个管理节点在接收控制节点命令之前，会将主机的信息告知控制节点</p><ul><li><strong>filter:</strong> 用于进行条件过滤，如果设置，仅返回匹配过滤条件的信息</li></ul><table><thead><tr><th>关键字</th><th>说明</th><th>返回值例子</th></tr></thead><tbody><tr><td>ansible_nodename</td><td>节点名</td><td>“6-dns-1.hunk.tech”</td></tr><tr><td>ansible_fqdn</td><td>FQDN名</td><td>“6-dns-1.hunk.tech”</td></tr><tr><td>ansible_hostname</td><td>主机短名称</td><td>“6-dns-1”</td></tr><tr><td>ansible_domain</td><td>主机域名后缀</td><td>“hunk.teh”</td></tr><tr><td>ansible_memtotal_mb</td><td>总物理内存</td><td>“ansible_memtotal_mb”: 222</td></tr><tr><td>ansible_swaptotal_mb</td><td>SWAP总大小</td><td>“1023”</td></tr><tr><td>ansible_processor</td><td>CPU信息</td><td>Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz</td></tr><tr><td>ansible_processor_cores</td><td>CPU核心数量</td><td>4</td></tr><tr><td>ansible_processor_vcpus</td><td>CPU逻辑核心数量</td><td>2</td></tr><tr><td>ansible_all_ipv4_addresses</td><td>有所IPV4地址</td><td>192.168.0.200</td></tr><tr><td>ansible_all_ipv6_addresses</td><td>所有IPV6地址</td><td></td></tr><tr><td>ansible_default_ipv4</td><td>默认网关的网卡配置信息</td><td></td></tr><tr><td>ansible_eth2</td><td>具体某张网卡信息</td><td>不同系统名称需要变化</td></tr><tr><td>ansible_dns</td><td>DNS设置信</td><td></td></tr><tr><td>ansible_architecture</td><td>系统架构</td><td>x86_64</td></tr><tr><td>ansible_machine</td><td>主机类型</td><td>x86_64</td></tr><tr><td>ansible_kernel</td><td>内核版本</td><td>“2.6.32-696.el6.x86_64”</td></tr><tr><td>ansible_distribution</td><td>发行版本</td><td>“CentOS”</td></tr><tr><td>ansible_distribution_major_version</td><td>操作系统主版本号</td><td>“6”</td></tr><tr><td>ansible_distribution_release</td><td>发行版名称</td><td>“Final”</td></tr><tr><td>ansible_distribution_version</td><td>完整版本号</td><td>“7.4.1708”</td></tr><tr><td>ansible_pkg_mgr</td><td>软件包管理方式</td><td>“yum”</td></tr><tr><td>ansible_service_mgr</td><td>进行服务方式</td><td>“systemd”</td></tr><tr><td>ansible_os_family</td><td>家族系列</td><td>“RedHat”</td></tr><tr><td>ansible_cmdline</td><td>内核启动参数</td><td></td></tr><tr><td>ansible_selinux</td><td>SElinux状态</td><td>“disabled”</td></tr><tr><td>ansible_env</td><td>当前环境变量参数</td><td></td></tr><tr><td>ansible_date_time</td><td>时间相关</td><td></td></tr><tr><td>ansible_python_version</td><td>python版本</td><td>“2.6.6”</td></tr><tr><td>ansible_lvm</td><td>LVM卷相关信息</td><td></td></tr><tr><td>ansible_mounts</td><td>所有挂载点</td><td></td></tr><tr><td>ansible_device_links</td><td>所有挂载的设备的UUID和卷标名</td><td></td></tr><tr><td>ansible_devices</td><td>所有/dev/下的正在使用的设备的信息</td><td></td></tr><tr><td>ansible_user_dir</td><td>执行用户的家目录</td><td>“/root”</td></tr><tr><td>ansible_user_gecos</td><td>执行用户的描述信息</td><td>“The root “</td></tr><tr><td>ansible_user_gid</td><td>执行用户的的GID</td><td>0</td></tr><tr><td>ansible_user_id</td><td>执行用户的的用户名</td><td>“root”</td></tr><tr><td>ansible_user_shell</td><td>执行用户的shell类型</td><td>“/bin/bash”</td></tr><tr><td>ansible_user_uid</td><td>执行用户的UID</td><td>0</td></tr></tbody></table><p>查看管理节点的python版本信息</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m setup -a 'filter=ansible_python_version'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看管理节点的发行版本</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m setup -a 'filter=ansible_distribution'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h1><p>ansible的默认模块，可以不用-m指定，-a是command的参数</p><ul><li><strong>free_form:</strong> 其实没有名为“free form”的实际参数，command模块接受自由格式的命令运行</li><li><strong>chdir:</strong> 在执行对应的命令之前，会先进入到chdir参数指定的目录中</li><li><strong>creates:</strong> 如果指定的文件存在时，就不执行对应命令</li><li><strong>removes:</strong> 当指定的文件不存在时，就不执行对应命令</li></ul><p>查看管理节点/etc/目录下的hosts文件内容</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -a "chdir=/etc cat hosts"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看管理节点/etc/目录下的hosts文件内容，如果存在/etc/passwd文件则不执行</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -a "chdir=/etc creates=/etc/passwd cat hosts"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>command模块不支持调用<code>$HOME</code>这样的变量，还有像<code>&lt;</code>, <code>&gt;</code>, <code>|</code>, <code>;</code>, <code>&amp;</code>这些正则和通配符都将不可用，但是command 模块更安全，因为他不受用户环境的影响。 也很大的避免了潜在的shell注入风险。</p><h1 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a>shell模块</h1><p>shell 模块可以帮助我们在远程主机上执行命令。与command模块不同的是，shell模块在远程主机中执行命令时，会经过远程主机上的 <code>/bin/sh</code> 程序处理，能够使用<code>&lt;</code>, <code>&gt;</code>, <code>|</code>, <code>;</code>, <code>&amp;</code>这些符号和环境变量。</p><ul><li><strong>free_form:</strong> 其实没有名为“free form”的实际参数，command模块接受自由格式的命令运行</li><li><strong>chdir:</strong> 在执行对应的命令之前，会先进入到chdir参数指定的目录中</li><li><strong>creates:</strong> 如果指定的文件存在时，就不执行对应命令</li><li><strong>removes:</strong> 当指定的文件不存在时，就不执行对应命令</li><li><strong>executable:</strong> 默认shell模块会调用远程主机中的/bin/sh去执行对应的命令，也可以指定shell，需要使用绝对路径</li></ul><p>shell模块在管理节点上执行命令时，支持管道和重定向等符号</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m shell -a 'chdir=/etc executable=/bin/bash cat hosts >/tmp/hosts.bak'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="script模块"><a href="#script模块" class="headerlink" title="script模块"></a>script模块</h1><p>script模块可以帮助我们在管理节点上执行控制节点上的脚本，也就是说在管理节点上执行脚本不需要把脚本拷贝过去</p><ul><li><strong>free_form:</strong> 指定需要执行的脚本，其实没有名为“free form”的实际参数</li><li><strong>chdir:</strong> 在执行对应的脚本之前，会先进入到chdir参数指定的目录中</li><li><strong>creates:</strong> 如果指定的文件存在时，就不执行脚本</li><li><strong>removes:</strong> 当指定的文件不存在时，就不执行脚本</li></ul><p>在管理节点上执行控制节点的/root/test.sh脚本，执行之前切换到/opt目录</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m script -a 'chdir=/opt /root/test.sh'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h1><p>copy模块的作用就是将Control node的文件拷贝到Managed nodes</p><ul><li><strong>scr:</strong> 用于指定控制节点上被copy的文件或目录</li><li><strong>dest:</strong> 用于指定文件将被拷贝到管理节点的路径，dest为必须参数</li><li><strong>content:</strong> 当不使用src指定拷贝的文件时，可以使用content直接指定文件内容，src与content两个参数必有其一</li><li><strong>force:</strong> 当管理节点的目标路径存在同名文件，并且两个文件内容不同，是否强制覆盖，可选值有yes和no，默认值为yes</li><li><strong>backup:</strong> 当管理节点的目标路径存在同名文件，并且两个文件内容不同，是否对管理节点的文件进行备份，可选值有yes和no</li><li><strong>owner:</strong> 指定文件拷贝到管理节点后的属主，但是管理节点上必须有对应的用户</li><li><strong>group:</strong> 指定文件拷贝到管理节点后的属组，但是管理节点上必须有对应的组</li><li><strong>mode:</strong> 指定文件拷贝到管理节点后的权限，可以使用mode=0644表示，也使用mode=u+x表示</li></ul><p>将控制节点的/etc/hosts文件复制到管理节点的/root目录下，如果管理节点的/root目录已经存在文件，则会默认覆盖</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m copy -a "src=/etc/hosts dest=/root/"# 如无意外这里你看到的字体颜色是黄色的，这是成功执行并且状态发生了改变的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制文件，指定文件的属主和属组，需要注意的是管理节点必须存在对应的用户和组</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m copy -a "src=/etc/hosts dest=/tmp/ owner=mwj group=mwj"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制文件，如果管理节点的目标路径已存在同名文件且内容不相同，则对管理节点的文件先进行备份，再把控制节点的文件复制到管理节点</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m copy -a "src=/etc/hosts dest=/tmp/ backup=yes"# 在返回的结果列表能看到: "backup_file": "/tmp/hosts.15575.2020-05-12@22:28:50~"# ansibel是用哈希值去校验两个文件的内容是否一致的 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a>file模块</h1><p>file模块可以完成对文件增删查改的基本操作</p><ul><li><strong>path:</strong> 用于指定要操作的文件或目录，必须参数</li><li><strong>state:</strong> ansible无法从<code>path=/test/a/b</code>得知我们想要创建目录还是文件，所以需要使用state参数配和path来声明操作的类型<ul><li><strong>state=directory</strong> 创建的是目录</li><li><strong>state=touch</strong> 创建的是文件</li><li><strong>state=link</strong> 创建的是软连接文件</li><li><strong>state=hard</strong> 创建的是硬链接文件</li><li><strong>state=absent</strong> 删除文件或者目录，absent意为”缺席”</li></ul></li><li><strong>src:</strong> 当state设置为link或者hard时，我们必须指明软硬链链接到哪个文件，通过src参数即可指定链接源</li><li><strong>force:</strong> 当state=link的时候，可配合force=yes参数强制创建链接文件，但是强制创建会有两种情况<ul><li><strong>情况一:</strong> 当要创建的链接文件所指向的源文件并不存在时，使用此参数可以先强制创建出链接文件</li><li><strong>情况二:</strong> 当要创建链接文件的路径中已经存在与链接文件同名的文件时，将force设置为yes，会将同名文件覆盖为链接文件</li></ul></li><li><strong>owner:</strong> 用于指定被操作文件或目录的属主</li><li><strong>group:</strong> 用于指定被操作文件或目录的属组</li><li><strong>mdoe:</strong> 用于指定被操作文件或目录的权限，使用mode=755，设置特殊权限则可以使用mode=4700</li><li><strong>recurse:</strong> 当要操作的对象为目录，将recurse设置为yes，可以递归的修改目录中文件的属性</li></ul><p>在管理节点上创建一个名为testdir的目录，如果目录已存在则不进行任何操作</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m file -a "path=/testdir/ state=directory"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上创建一个名为testfile的文件，如果文件已存在则会更新文件的时间戳</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m file -a "path=/testdir/testfile state=touch"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点创建一个名为/testdir/linkfile的链接文件，链接的源文件/testdir/testfile已存在</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m file -a "path=/testdir/linkfile state=link src=/testdir/testfile"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上删除指定的文件或目录</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m file -a "path=/testdir/testfile state=absent"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="fetch模块"><a href="#fetch模块" class="headerlink" title="fetch模块"></a>fetch模块</h1><p>从管理节点拉取文件到控制节点</p><ul><li><strong>dest:</strong> 用来存放从管理节点拉取到的文件</li><li><strong>src:</strong> 管理节点被拉取的文件，必须是文件不能是目录</li><li><strong>flat:</strong> 默认为no，会将拉取到控制节点的文件以hostname/file的命名存放在dest目录，如果为yes，则直接按文件名存放</li><li><strong>Validate_checksum:</strong> 拉取文件之后进行MD5检查</li></ul><p>拉取管理节点的/etc/hosts文件到控制节点的/data/目录</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m fetch -a "src=/etc/hosts dest=/data/"# 这里flat默认为no，所以拉取之后存放的方式是这样的tree /data//data/├── 10.10.110.122│   └── etc│       └── hosts└── 10.10.110.123    └── etc        └── hostsansible all -m fetch -a "src=/etc/hosts dest=/data/ flat=yes"    # flat=yes是直接按文件名存放tree /data//data/└── hosts    # 只有一个hosts文件是因为第一个hosts被覆盖掉了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="blockinfile模块"><a href="#blockinfile模块" class="headerlink" title="blockinfile模块"></a>blockinfile模块</h1><p>blockinfile模块可以帮助我们在指定的文件中插入”一段文本”，这段文本是被标记过的，我们在这段文本上做了记号，以便在以后的操作中可以通过”标记”找到这段文本，然后修改或者删除它</p><ul><li><strong>path:</strong> 指定要操作的文件</li><li><strong>block:</strong> 此参数用于指定我们想要插入的那”一段文本”，此参数有一个别名叫”content”，使用content或block的作用是相同的</li><li><strong>marker:</strong> 自定义开始和结束的标记，marker=#{mark}test:开始为# BEGIN test，结束为# END test</li><li><strong>insertafter:</strong> 在插入一段文本时，默认会在文件的末尾插入文本，如果你想要将文本插入在某一行的后面，可以使用此参数指定对应的行</li><li><strong>insertbefore:</strong> 在插入一段文本时，默认会在文件的末尾插入文本，如果你想要将文本插入在某一行的前面，可以使用此参数指定对应的行</li><li><strong>backup:</strong> 是否在修改文件之前对文件进行备份</li><li><strong>create:</strong> 当要操作的文件并不存在时，是否创建对应的文件</li></ul><p>在管理节点的/testdir/rc.local文件末尾插入一行systemctl start mariadb</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m blockinfile -a 'path=/testdir/rc.local block="systemctl start mariadb"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自定义插入的开始和结束的标记</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m blockinfile -a 'path=/testdir/rc.local block="systemctl restart mysqld\nnginx -s reload" marker="#{mark} serivce to start"'# 查看被插入的文本#BEGIN serivce to startsystemctl restart mysqldnginx -s reload#END serivce to start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用create参数，如果指定的文件不存在则创建它</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m blockinfile -a 'path=/testdir/date block="今天是5月12号\n汶川地震12周年" marker="#{mark} 日期记录" create=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用backup参数，可以在操作修改文件之前对文件进行备份</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m blockinfile -a 'path=/testdir/date block="今天是5月12号\n汶川地震12周年" marker="#{mark} 日期记录" backup=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="lineinfile模块"><a href="#lineinfile模块" class="headerlink" title="lineinfile模块"></a>lineinfile模块</h1><p>我们可以借助lineinfile模块，确保”某一行文本”存在于指定的文件中，还可以根据正则表达式替换”某一行文本”</p><ul><li><strong>path:</strong> 指定要操作的文件</li><li><strong>line:</strong> 使用此参数指定文本内容</li><li><strong>regexp:</strong> 使用正则表达式匹配对应的行</li><li><strong>state:</strong> 当想要删除对应的文本时，需要将state参数的值设置为absent</li><li><strong>backrefs:</strong> 开启后向引用，line参数中就能对regexp参数中的分组进行后向引用了</li><li><strong>insertafter:</strong> 借助insertafter参数可以将文本插入到“指定的行”之后</li><li><strong>insertbefore:</strong> 借助insertbefore参数可以将文本插入到“指定的行”之前</li><li><strong>backup:</strong> 是否在修改文件之前对文件进行备份</li><li><strong>create:</strong> 当要操作的文件并不存在时，是否创建对应的文件</li></ul><p>确保”test lineinfile”这行文本存在于/testdir/date文件中，如果存在则不做任何操作，如果不存在则在末尾插入</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m lineinfile -a 'path=/testdir/date line="test lineinfile"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据正则表达式替换”某一行”，如果多行能够匹配正则，只有最后匹配的行才会被替换，如果没有匹配到则会在末尾插入line的内容</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m lineinfile -a 'path=/testdir/date regexp="^test" line="被替换后的内容"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据正则匹配删除对应的行，如果文件多行都与正则匹配，则删除多行</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m lineinfile -a 'path=/testdir/date regexp="^#.*-$" state=absent'    # 删除#开头-结尾中间有任意个字符的行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/testdir/date文件的”#Hello saltstack,Hiiii”这一行之后插入123</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m lineinfile -a 'path=/testdir/date line="123" insertafter="#Hello saltstack,Hiiii"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="find模块"><a href="#find模块" class="headerlink" title="find模块"></a>find模块</h1><p>find模块可以帮助我们在管理节点中查找符合条件的文件，就像find命令一样</p><ul><li><strong>paths:</strong> 必须参数，指定在哪个目录中查找文件，可以指定多个路径，路径间用逗号隔开</li><li><strong>recurse:</strong> 默认只会在指定的目录中查找文件，当recurse参数设置为yes时，表示会递归的查找文件</li><li><strong>hidden:</strong> 默认不会去查找隐藏文件，只有当hidden参数的值设置为yes时才会查找隐藏文件</li><li><strong>file_type:</strong> 默认只会根据条件查找”文件”，可以通过file_type指定文件类型，any | directory | file | link</li><li><strong>patterns:</strong> 使用此参数指定需要查找的文件名称，支持使用shell(比如通配符)或者正则表达式去匹配文件名称</li><li><strong>use_regex:</strong> 当use_regex设置为yes时，表示使用python正则解析patterns参数中的表达式</li><li><strong>contains:</strong> 使用此参数可以根据文章内容查找文件，此参数的值为一个正则表达式</li><li><strong>age:</strong> 用此参数可以根据时间范围查找文件，默认以文件的mtime为标准与指定的时间进行对比</li><li><strong>age_stamp:</strong> 文件的时间属性中有三个时间种类:atime、ctime、mtime，当我们根据时间范围查找文件时，可以指定以哪个时间种类为准</li><li><strong>size:</strong> 使用此参数可以根据文件大小查找文件</li><li><strong>get_checksum:</strong> 当有符合查找条件的文件被找到时，会同时返回对应文件的sha1校验码</li></ul><p>在管理节点的/etc目录中查找包含www字符串的文件，不进行递归并忽略隐藏文件</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc contains=".*www.*"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录查找以.sh结尾的文件，包括隐藏文件并进行递归查找</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc patterns="*.sh" hidden=yes recurse=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录查找链接文件，包括隐藏文件并进行递归查找</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc file_type=link hidden=yes recurse=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录查找以.sh结尾的文件，只不过patterns对应的表达式为正则表达式，包括所有文件类型</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc patterns="\*.sh" file_type=any use_regex=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录递归查找mtime在4天以内的文件</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc age=-4d recurse=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录递归查找大于2G的文件</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc size=2g recurse=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点的/etc目录递归查找.conf结尾的文件，并且返回符合条件的文件的sha1校验码</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m find -a 'paths=/etc patterns="*.conf" recurse=yes get_checksum=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="replace模块"><a href="#replace模块" class="headerlink" title="replace模块"></a>replace模块</h1><p>replace模块可以根据我们指定的正则表达式替换文件中的字符串，文件中所有被正则匹配到的字符串都会被替换</p><ul><li><strong>path:</strong> 必须参数，指定要操作的文件，别名:dest | destfile | name</li><li><strong>regexp:</strong> 必须参数，指定一个python正则表达式，文件中与正则匹配的字符串将会被替换</li><li><strong>replace:</strong> 指定最终要替换成的字符串</li><li><strong>backup:</strong> 是否在修改文件之前对文件进行备份，最好设置为yes</li></ul><p>将管理主机的/testdir/date文件中所有的ansible替换为saltstack，操作前进行文件备份</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m replace -a 'path=/testdir/date regexp="ansible" replace=saltstack backup=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h1><p>cron模块可以帮助我们配置管理节点的计划任务，功能相当于crontab命令</p><ul><li><strong>minute:</strong> 用于设置分钟值，格式为minute=5，如不指定此参数，则分钟值默认为 *</li><li><strong>hour:</strong> 用于设置小时值，格式为hour=5，如不指定此参数，则小时值默认为 *</li><li><strong>day:</strong> 用于设置日值，如不指定此参数，则日值默认为 *</li><li><strong>month:</strong> 用于设置月值，如不指定此参数，则月值默认为 *</li><li><strong>weekday:</strong> 用于设置周值，如不指定此参数，则月值默认为 *</li><li><strong>special_time:</strong> 时间设定格式为@reboot或者@hourly，这种@开头的时间设定格式则需要使用special_time参数进行设置</li></ul><p><strong>注意:</strong> 如果以上参数都不设置，则默认使用 <strong>* * * * *</strong> ，表示每分钟都执行一次。我们应该谨慎设置时间参数</p><ul><li><strong>user:</strong> 设置当前计划任务属于哪个用户，不指定则默认为管理员用户</li><li><strong>job:</strong> 执行计划任务中需要实际执行的命令或脚本</li><li><strong>name:</strong> 设置计划任务的名称，方便我们以后根据名称修改或者删除计划任务</li><li><strong>state:</strong> 可以根据已有名称的计划任务进行修改和删除，当删除时需要将state的值设置为absent</li><li><strong>disabled:</strong> 可以将已有名称的计划任务注释，但使用此参数除了指定任务名称还需要指定job以及时间的设定，否则注释任务时，任务的时间会被修改</li><li><strong>backup:</strong> 当此参数设置为yes，那么修改和删除计划任务时，会在管理节点的tmp目录下创建备份文件</li></ul><p>在管理节点创建名为test cron计划任务，每天的12点5分，任务内容为将test重定向到/tmp/test</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m cron -a 'name="test cron" minute=5 hour=12 job="echo test > /tmp/test"'# 管理节点的计划任务构建如下:#Ansible: test cron5 12 * * * echo test > /tmp/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在管理节点创建名为day cron计划任务，每三天执行一次。与执行当天的14点5分开始执行，任务内容为输出test</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m cron -a 'name="day cron" minute=5 hour=14 day=*/3 job="echo test"'# 管理节点的计划任务构建如下:#Ansible: day cron5 14 */3 * * echo test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在管理节点创建名为day cron计划任务，任务在重启时执行，任务内容为输出test</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m cron -a 'name="day cron" special_time=reboot job="echo test"'# 由于已存在day cron任务，ansible就会认为我们是需要修改这个任务，计划任务被修改为:#Ansible: day cron@reboot echo test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在管理节点注释掉我们之前创建的test cron任务，注释时进行备份</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m cron -a 'name="test cron" minute=5 hour=12 job="echo test > /tmp/test" disabled=yes backup=yes'# 符合注释条件的计划任务就会被注释掉:#Ansible: test cron#5 12 * * * echo test > /tmp/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果你注释计划任务时，设置了错误的时间和job，那么注释对应任务时(以name去对应)，时间和job的设定也会发生改变</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m cron -a 'name="test cron" hour=23 job="echo test > /tmp/test" disabled=yes backup=yes'#Ansible: test cron#* 23 * * * echo test > /tmp/test    # 注释的同时，时间设定也会改变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h1><p>service模块可以对管理节点上的服务进行管理，例如启动或停止管理节点的nginx服务。但前提是这个服务必须被BSD init | OpenRC | SysV | Solaris SMF | systemd | upstart中的任意一种所管理，意思就是这个服务在centos6管理节点能以service nginx start启动，在centos7管理节点能以systemctl start nginx启动。如果管理节点上的服务无法通过这样的方式启动，那么service模块也无法对它进行管理。</p><ul><li><strong>name:</strong> 用于指定操作的服务名称，例如name=nginx</li><li><strong>state:</strong> 用户指定服务的状态，可用值有started | stopped | restarted | reloaded</li><li><strong>enabled:</strong> 用于指定是否将服务设置为开机启动项，设置为yes则表示开机启动，设置为no表示不会开机启动</li></ul><p>在管理节点上启动nginx服务</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m service -a 'name=nginx state=started'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上启动mysql服务并设置为开机启动</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m service -a 'name=mysql state=started enabled=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h1><p>user模块可用帮助我们在管理节点上创建用户、修改用户、删除用户、为用户创建密钥对等操作</p><ul><li><p><strong>name:</strong> 必须参数，用于指定要操作的用户名称</p></li><li><p><strong>group:</strong> 用于指定用户所在的基本组</p></li><li><p><strong>shell:</strong> 用于指定用户的默认shell</p></li><li><p><strong>uid:</strong> 用于指定用户的uid号</p></li><li><p><strong>expires:</strong> 用于指定用户的过期时间</p></li><li><p><strong>comment:</strong> 用于指定用户的注释信息</p></li><li><p><strong>state:</strong> 用于指定用户是否存在于远程主机中，默认值为present，表示用户需要存在，当设置为absent时表示删除用户</p></li><li><p><strong>remove:</strong> 默认值为no，表示删除用户时不会删除家目录，设置为yes则表示删除用户时删除用户家目录</p></li><li><p><strong>password:</strong> 用于指定用户的密码，但是这个密码不能是明文的密码</p></li><li><p><strong>generate_ssh_key:</strong> 默认值为no，如果设置为yes则表示为用户在家目录的.ssh下创建密钥对，如果对应的路径已有同名密钥对则不进行任何操作</p></li><li><p>*<em>ssh_key_file: *</em>默认值为yes，使用此参数自定义生成ssh私钥的路径和名称</p></li><li><p><strong>ssh_key_passph rase:</strong> 当generate_ssh_key参数的值为yes时，在创建证书时使用此参数设置私钥的密码</p></li><li><p><strong>ssh_key_type:</strong> 当generate_ssh_key参数的值为yes时，在创建证书时使用此参数设置密钥对的类型</p><p>在管理节点上创建mis用户，并把用户添加到root组，如果用户已存在则不做任何操作</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m user -a 'name=mis group=root'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上删除mis用户，同时把用户家目录也删除</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m user -a 'name=mis state=absent remove=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上创建mis用户，指定用户的注释信息，设置用户过期时间是2020-06-15</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m user -a 'name=mis comment="missf.top" expires=1592150400'# 先使用"date -d 2020-06-15 +%s"命令得到Unix时间戳<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在管理节点上为mis用户设置密码，加密字符串可以使用python得到</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m user -a 'name=mis password="$6$d62UFoKtSRA9Yaq4$qtvyr5atLdoXgvXOhktU.baVqbtlcaWc9dizmM41Bc9XOaTZW/Pqaxb8pofS5Wo4n5Nu/CEk8GEsKnC2zTfEl1"'可以使用 import crypt; crypt.crypt("123456") 得到123456加密之后的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在管理节店上为mis用户生成密钥对，同时指定私钥密码为123456，密钥对的类型为dsa，如不指定密钥对类型默认为rsa</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m user -a 'name=mis generate_ssh_key=yes ssh_key_passphrase="123456" ssh_key_type=dsa'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="group模块"><a href="#group模块" class="headerlink" title="group模块"></a>group模块</h1><p>group模块可以帮助我们在管理节点上管理用户组</p><ul><li><p><strong>name:</strong> 必须参数，用于指定要操作的组名称</p></li><li><p><strong>state:</strong> 用于指定组的状态，present | absent，设置为absent时表示为删除组</p></li><li><p><strong>gid:</strong> 可以指定组的gid</p><p>确保管理节点上存在mkd组，如果没有则创建，如果已存在则不做任何操作</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m group -a 'name=mkd'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点上删除mkd组，前提是不能有用户把被删除的组当成主组，不然不能成功删除</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m group -a 'name=mkd state=absent'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="yum-repository模块"><a href="#yum-repository模块" class="headerlink" title="yum_repository模块"></a>yum_repository模块</h1><p>yum_repository模块可以帮助我们在管理节点上管理yum仓库</p><ul><li><strong>name:</strong> 必须参数，指定要操作的唯一仓库ID，repo配置文件中括号的仓库ID</li><li><strong>baseurl:</strong> 用于设置yum仓库的baseurl</li><li><strong>description:</strong> 用于设置仓库的注释信息，repo配置文件中name字段对应的内容</li><li><strong>file:</strong> 用户设置仓库的配置文件名称，就是repo配置文件的前缀，如不指定则默认以仓库ID命名</li><li><strong>enabled:</strong> 用于设置是否激活对应的yum源</li><li><strong>gpgcheck:</strong> 用于设置是否开启rpm包验证功能，默认值为no表示不开启包验证，设置为yes表示开启</li><li><strong>gpgcakey:</strong> 当开启包验证功能时，使用此参数指定验证包所需的公钥</li><li><strong>state:</strong> 默认值为present，设置为absent表示删除对应的yum源</li></ul><p>在管理节点上创建前缀为aliepel的repo文件，设置注释信息和不验证包功能</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m yum_repository -a 'name=aliepel description="alibaba_epel" baseurl=https://mirrors.aliyun.com/epel/$releasever\Server/$basearch/  gpgcheck=no'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在管理节点创建指定名称为ali的repo文件，但是不启用它</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m yum_repository -a 'name=aliepel description="alibaba_epel" file=ali baseurl=https://mirrors.aliyun.com/epel/$releasever\Server/$basearch/ gpgcheck=no enabled=no'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a>yum模块</h1><p>yum模块可以帮助我们在管理节点上管理软件包</p><ul><li><strong>name:</strong> 必须参数，用于指定需要管理的软件包名字</li><li><strong>state:</strong> 用户指定软件包的状态，默认是present，表示确认已安装软件包，installed与present等效，absent和removed等效，表示删除对应的软件包</li><li><strong>disable_gpg_check:</strong> 用于禁用对rpm包的公钥gpg验证，默认值为no表示不禁用验证，设置为yes表示禁用验证，如果yum源没有开启验证需要将此参数设置为yes</li><li><strong>enablerepo:</strong> 用于安装软件包时临时启用yum源，想要从A源安装软件，但是A源没有启用时，这个参数设置为yes表示临时启用</li><li><strong>disablerepo:</strong> 用于安装软件包时临时禁用yum源，当多个源中同时存在软件包时，可以临时禁用某个源</li></ul><p>确保管理节点上安装了nginx，禁用rpm包验证</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m yum -a 'name=nginx state=installed disable_gpg_check=yes'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确保管理节点上安装了Telnet，并禁用rpm包验证和临时禁用local源</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -m yum -a 'name=telnet disable_gpg_check=yes disablerepo=local'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible主机清单(4)</title>
    <link href="https://www.missf.top/post/334c7279.html"/>
    <id>https://www.missf.top/post/334c7279.html</id>
    <published>2020-05-10T02:12:59.000Z</published>
    <updated>2020-06-02T07:51:22.024Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="认识主机清单"><a href="#认识主机清单" class="headerlink" title="认识主机清单"></a>认识主机清单</h1><p>Ansible可同时操作属于一个组的多台主机， 组和主机之间的关系通过 <code>inventory</code> 文件配置. 默认的文件路径为 <code>/etc/ansible/hosts</code>，执行命令的时候使用 <code>-i</code> 参数即可指定主机清单。</p><h1 id="主机清单示例"><a href="#主机清单示例" class="headerlink" title="主机清单示例"></a>主机清单示例</h1><p>主机清单文件主要有 <strong>ini</strong> 和 <strong>yaml</strong> 格式两种语法格式</p><pre class="line-numbers language-shell"><code class="language-shell">mail.example.com       # 定义主机fqdn地址, 需要已经与控制节点ssh互信localhost ansible_connection=local  # ansible_connection可以定义连接类型, local是在本地执行,默认是smarthost4 ansible_host=10.10.110.123 ansible_port=50312 ansible_user=root ansible_password=12345 # 指定别名，定义主机ssh连接信息www[1:50].example.com # 定义 1-50范围内的主机www-[a:d].example.com # 定义 a-d 范围内的主机[dbservers]three.example.com  ansible_python_interpreter=/usr/local/bin/python3  # 定义python执行ansible，这个是指定被控节点的python192.168.77.123  ansible_ruby_interpreter=/usr/bin/ruby.1.9.3  # 定义ruby执行文件webservers:vars] # 定义webservers组的变量ntp_server=ntp.example.comproxy=proxy.example.com[server:children] # 定义server组的子成员，执行server组时，webservers和dbservers组内的管理节点也会执行webserversdbservers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ini和yaml格式对比"><a href="#ini和yaml格式对比" class="headerlink" title="ini和yaml格式对比"></a>ini和yaml格式对比</h1><pre class="line-numbers language-shell"><code class="language-shell"># 先写出ini风格[dbserver]db1 ansible_host=10.10.110.122 ansible_port=22 ansible_user=root ansible_password=0[webserver]web1 ansible_host=10.10.110.123 ansible_port=22 ansible_user=root ansible_password=0[server:children]dbserverwebserver# 定义子组成员时，需要children关键字# 和上面一样的配置，这是yaml风格的写法all:  children:    server:      children:        dbserver:          hosts:            10.10.110.122        webserver:          hosts:            10.10.110.123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yaml格式配置的还是挺复杂的，可读性也差，建议使用<code>ini</code>方式来设置主机清单。</p></blockquote><h1 id="默认组"><a href="#默认组" class="headerlink" title="默认组"></a>默认组</h1><p>在主机清单中，ansible会自动的生成两个组。</p><ul><li><strong>all</strong> 所有的主机</li><li><strong>ungrouped</strong> 包含没有组的主机</li></ul><p>尽管这两个组是永远存在的，但也有可能是隐藏的，不会出现group_names之类的组列表中。</p><h1 id="主机变量和组变量"><a href="#主机变量和组变量" class="headerlink" title="主机变量和组变量"></a>主机变量和组变量</h1><p>如果你不想在主机清单中定义主机的变量或者组的变量，ansible还支持在特定的目录中定义变量，变量文件必须以yaml语法定义。</p><p>默认在<strong>/etc/ansible/host_vars/</strong> 目录中定义主机变量，文件名称以主机名称命名，结束可以用”.yml”,”.yaml”,”.json”三种格式。</p><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/ansible/host_vars/db1ntp_server: acme.example.orgdatabase_server: storage.example.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认在 <code>/etc/ansible/group_vars/</code> 目录中定义组变量，文件名称以组名称命名，结束可以用”.yml”,”.yaml”,”.json”三种格式。</p><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/ansible/group_vars/dbserverntp_server: acme.example.orgdatabase_server: storage.example.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>变量优先级问题，如果在各个环节都设置了变量，到底哪个变量生效呢？优先顺序，all最低，host最高:</p><ul><li>all group</li><li>parent group</li><li>child group</li><li>host</li></ul><h1 id="使用多个主机清单"><a href="#使用多个主机清单" class="headerlink" title="使用多个主机清单"></a>使用多个主机清单</h1><p>在命令参数中，使用多个 <code>-i</code> 就可以指定多个主机清单</p><pre class="line-numbers language-shell"><code class="language-shell">ansible all -i staging -i production -m pingansible all -i /tmp/staging -i /tmp/production -m ping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="使用-ssh-秘钥连接主机"><a href="#使用-ssh-秘钥连接主机" class="headerlink" title="使用 ssh 秘钥连接主机"></a>使用 ssh 秘钥连接主机</h1><pre class="line-numbers language-shell"><code class="language-shell"># 生成秘钥ssh-keygen -t rsa# 发送公钥文件到管理节点ssh-copy-id -i /root/.ssh/id_rsa.pub -p 22 root@10.10.110.122# 现在主机清单里不用再填写账号密码了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible快速开始(3)</title>
    <link href="https://www.missf.top/post/bf783834.html"/>
    <id>https://www.missf.top/post/bf783834.html</id>
    <published>2020-05-09T01:12:59.000Z</published>
    <updated>2020-06-02T07:51:22.033Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Ansible快速开始"><a href="#Ansible快速开始" class="headerlink" title="Ansible快速开始"></a>Ansible快速开始</h1><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><p>control os: <code>centos 7.7 x64</code></p><p>ansible version: <code>2.9.7</code></p><p>python version:<code>2.7.5</code></p><h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><p><strong>在Control node上去连接Managed nodes</strong></p><h1 id="定义主机清单"><a href="#定义主机清单" class="headerlink" title="定义主机清单"></a>定义主机清单</h1><blockquote><p>定义一个简单的通过ssh认证的主机清单</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/ansible/hosts10.10.110.122 ansible_user=root ansible_pass=0 ansible_port=22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主机清单的配置含义:</p><ul><li><code>ansible_host</code> 定义管理节点ip地址</li><li><code>ansible_user</code> 连接管理节点的用户</li><li><code>ansible_pass</code> 连接管理节点的用户密码</li><li><code>ansible_port</code> 连接端口号默认是22</li></ul><h1 id="执行ansible命令"><a href="#执行ansible命令" class="headerlink" title="执行ansible命令"></a>执行ansible命令</h1><blockquote><p>测试Control node和Managed nodes的连接状态</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">ansible 10.10.110.122 -m ping# 命令中的含义 -192.168.77.135 用于匹配主机清单中的主机名称 -m ping 指定 ping 模块，用于测试与管理节点的连接状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果提示如下错误:</p><p>10.10.110.122 | FAILED! =&gt; {<br>    “msg”: “Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host’s fingerprint to your known_hosts file to manage this host.”<br>}</p><p>这是因为Control node和Managed nodes第一次连接需要先添加指纹信息，可以先使用ssh连接一次，如果机器太多的话，可以在ansible配置文件开启host_key_checking = False</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">cat /etc/ansible/ansible.cfghost_key_checking = False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>再次测试连接状态</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">ansible 10.10.110.122 -m ping10.10.110.122 | SUCCESS => {    "ansible_facts": {        "discovered_interpreter_python": "/usr/bin/python"    },     "changed": false,     "ping": "pong"}# 看到"ping": "pong"表示连接成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible安装(2)</title>
    <link href="https://www.missf.top/post/3ebd0a7f.html"/>
    <id>https://www.missf.top/post/3ebd0a7f.html</id>
    <published>2020-05-08T03:12:59.000Z</published>
    <updated>2020-06-02T07:51:22.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="安装-Ansible"><a href="#安装-Ansible" class="headerlink" title="安装 Ansible"></a>安装 Ansible</h1><blockquote><p><strong>对管理主机的要求</strong></p><p>目前,只要机器上安装了 Python 2（版本2.6或2.7）或Python 3（版本3.5及更高版本）都可以运行Ansible (windows系统不可以做管理主机) 管理主机的系统可以是 Red Hat, Debian, CentOS, macOS, BSD的各种版本。</p></blockquote><blockquote><p><strong>对节点主机的要求</strong></p><p>通常我们使用 ssh 与节点通信，默认使用 sftp. 如果 sftp 不可用，可在 ansible.cfg 配置文件中配置成 scp 的方式. 在节点上也需要安装Python 2（2.6或更高版本）或Python 3（3.5或更高版本）</p><p>如果节点启用了<code>selinux</code>, 在使用<code>copy</code>/<code>file</code>/<code>template</code>时需要安装 <code>libselinux-python</code> 包。</p></blockquote><h1 id="在管理节点上安装Ansible"><a href="#在管理节点上安装Ansible" class="headerlink" title="在管理节点上安装Ansible"></a>在管理节点上安装Ansible</h1><pre class="line-numbers language-shell"><code class="language-shell"># Centos/RHELwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repowget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repoyum install -y ansible# Ubuntusudo apt updatesudo apt install software-properties-commonsudo apt-add-repository --yes --update ppa:ansible/ansiblesudo apt install ansible<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="bash命令行自动补全"><a href="#bash命令行自动补全" class="headerlink" title="bash命令行自动补全"></a>bash命令行自动补全</h1><blockquote><p>在Ansible 2.9之后，就支持了命令行参数补齐功能</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell"># Centos/RHELyum install -y epel-releaseyum install -y python-argcomplete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="将补全加入环境变量"><a href="#将补全加入环境变量" class="headerlink" title="将补全加入环境变量"></a>将补全加入环境变量</h1><pre class="line-numbers language-shell"><code class="language-shell">activate-global-python-argcompletesource /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ansible介绍(1)</title>
    <link href="https://www.missf.top/post/c55d25e0.html"/>
    <id>https://www.missf.top/post/c55d25e0.html</id>
    <published>2020-05-07T08:12:59.000Z</published>
    <updated>2020-06-02T07:51:22.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Ansible介绍"><a href="#Ansible介绍" class="headerlink" title="Ansible介绍"></a>Ansible介绍</h1><p>Ansible 是2012年推出的一种通用自动化工具，ansible也是我接触的第一个自动化运维工具，ansible可以帮助我们完成一些批量任务，或者完成一些经常性的重复工作，在服务器集群场景下，ansible是我们运维的利器，Ansible 在2015年时被Redhat公司收购。Ansible是用Python编写的，它使用SSH在不同的机器上执行命令。Ansible是无代理的，这使得入手更容易。您只需要在相关机器上安装SSH和Python。Ansible使用声明式YAML语言”playbook”将一组主机(“hosts”)映射到定义明确的角色。</p><p>也许你会说，我写个shell脚本不也一样能实现批量服务器的管理吗？这里我想说的是，ansible支持一些优秀的特性:</p><ul><li>支持幂等性</li><li>No Agent</li><li>支持palybook实现复杂的任务</li><li>使用yaml语言</li></ul><p>先来说说什么是<strong>幂等性</strong>，假如我要在目标主机安装Nginx，但是我不确定这个主机是否已经安装了Nginx，当使用ansible完成这个任务时，问题就会变得简单，如果目标主机已经安装Nginx，则ansible不会进行任何操作，如果目标主机未安装Nginx，ansible才会开始工作，ansible是<strong>以导向为结果</strong>的，我们指定一个状态，ansible就会自动判断，把服务器的状态调整为我们指定的状态，我多次执行，结果都是一样的，这就是幂等性。</p><p>使用zabbix监控一百台服务器，这一百台服务器都需要安装zabbix  agent，但是ansible是不需要在管理节点上安装客户端代理程序的，因为它基于ssh工作，只要Control node能通过ssh连接到Managed nodes就能通过ansible管理对应的管理节点了，还有就是ansible的控制节点不用单独启动服务，能直接运行命令。</p><h1 id="Ansible的目标"><a href="#Ansible的目标" class="headerlink" title="Ansible的目标"></a>Ansible的目标</h1><p><strong>实现一切自动化</strong></p><h1 id="Ansible的应用场景"><a href="#Ansible的应用场景" class="headerlink" title="Ansible的应用场景"></a>Ansible的应用场景</h1><ul><li>自动化部署应用</li><li>自动化管理配置</li><li>自动化的持续交付</li><li>自动化的云服务管理</li><li>自动化网络设备管理</li></ul><h1 id="Ansible的工作原理"><a href="#Ansible的工作原理" class="headerlink" title="Ansible的工作原理"></a>Ansible的工作原理</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5eb61cb0c2a9a83be555278f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>安装ansible到管理节点，定义好主机清单，编写好palybook，就能运行ansible批量管理管理节点。步骤如下:</p><ol><li>在控制节点上安装ansible</li><li>配置主机清单: 将被控节点的连接信息配置到主机清单中</li><li>定义playbook: 指定运行主机和执行任务</li></ol><h1 id="对节点主机的要求"><a href="#对节点主机的要求" class="headerlink" title="对节点主机的要求"></a>对节点主机的要求</h1><p>通常我们使用 ssh 与节点通信，默认使用 sftp. 如果 sftp 不可用，可在 ansible.cfg 配置文件中配置成 scp 的方式. 在节点上也需要安装Python 2（2.6或更高版本）或Python 3（3.5或更高版本）</p><h1 id="Ansible的概念"><a href="#Ansible的概念" class="headerlink" title="Ansible的概念"></a>Ansible的概念</h1><h2 id="控制节点-Control-node"><a href="#控制节点-Control-node" class="headerlink" title="控制节点(Control node)"></a>控制节点(Control node)</h2><p>任何装有Ansible的机器可称为 <strong>控制节点</strong> 。 您可以从任何控制节点运行命令和剧本，并调用<code>/usr/bin/ansible</code>或<code>/usr/bin/ansible-playbook</code>命令，您可以将任何安装了Python的计算机用作控制节点,笔记本电脑,共享桌面和服务器都可以运行Ansible。 但是不能将Windows计算机用作控制节点。您也可以有多个控制节点。</p><h2 id="管理节点-Managed-nodes"><a href="#管理节点-Managed-nodes" class="headerlink" title="管理节点(Managed nodes)"></a>管理节点(Managed nodes)</h2><p>使用Ansible管理的网络设备或服务器可称为 <strong>管理节点</strong>。 受管节点有时也称为 <strong>主机</strong> 。 受管节点上是不需要安装Ansible的。</p><h2 id="主机清单-Inventory"><a href="#主机清单-Inventory" class="headerlink" title="主机清单(Inventory)"></a>主机清单(Inventory)</h2><p>托管节点的列表。库存文件有时也称为主机文件。您的目录可以为每个托管节点指定诸如IP地址之类的信息。库存还可以组织托管节点，创建和嵌套组，以便于扩展。</p><h2 id="模块-Modules"><a href="#模块-Modules" class="headerlink" title="模块(Modules)"></a>模块(Modules)</h2><p>Ansible执行的具体代码。每个模块都有特定的用途，从管理特定类型数据库的用户到管理特定类型网络设备上的VLAN接口。您可以使用任务调用单个模块，也可以调用剧本中的几个不同模块。</p><h2 id="任务-Tasks"><a href="#任务-Tasks" class="headerlink" title="任务(Tasks)"></a>任务(Tasks)</h2><p>Ansible的行动单位。tasks包含一组由module组成的任务列表, 您可以使用特别的命令一次性执行单个任务。</p><h2 id="剧本-Playbooks"><a href="#剧本-Playbooks" class="headerlink" title="剧本(Playbooks)"></a>剧本(Playbooks)</h2><p>保存了已排序的任务列表，因此可以按此顺序重复运行这些任务。剧本可以包括变量和任务。剧本是用 <strong>YAML</strong> 编写的，易于阅读、编写、共享和理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://www.missf.top/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://www.missf.top/tags/ansible/"/>
    
      <category term="自动化运维" scheme="https://www.missf.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day07</title>
    <link href="https://www.missf.top/post/44a3d96e.html"/>
    <id>https://www.missf.top/post/44a3d96e.html</id>
    <published>2020-04-28T11:42:45.000Z</published>
    <updated>2020-06-02T07:51:22.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>一般情况下，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 闭包</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">6</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b <span class="token operator">=</span> <span class="token number">8</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token punctuation">)</span>    res<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h1><p>我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for…in…中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。那么，在这个迭代过程中就应该有一个“记录员”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“记录员”称为迭代器(Iterator)。可迭代对象的本质就是可以向我们提供一个这样的“记录员”即迭代器帮助我们对其进行迭代遍历使用</p><h2 id="转化成迭代器"><a href="#转化成迭代器" class="headerlink" title="转化成迭代器"></a>转化成迭代器</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 内部含有"__iter__"并且含有"__next__"方法的就是迭代器，遵循迭代器协议</span>s2 <span class="token operator">=</span> <span class="token string">"cdfv"</span>ol <span class="token operator">=</span> s2<span class="token punctuation">.</span>__iter__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 可迭代对象通过__iter__或者iter()方法转化成迭代器</span><span class="token comment" spellcheck="true"># print(ol)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一个next对应一个值，一一对应</span><span class="token keyword">print</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cdfv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断对象是否为迭代器"><a href="#判断对象是否为迭代器" class="headerlink" title="判断对象是否为迭代器"></a>判断对象是否为迭代器</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断一个对象是否是可迭代对象，方法一</span>s1 <span class="token operator">=</span> <span class="token string">'asdf'</span>jo <span class="token operator">=</span> iter<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将可迭代对象转化成迭代器</span><span class="token keyword">print</span><span class="token punctuation">(</span>jo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__iter__"</span> <span class="token keyword">in</span> dir<span class="token punctuation">(</span>jo<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">"__next__"</span> <span class="token keyword">in</span> dir<span class="token punctuation">(</span>jo<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断是否同时含有这两个方法</span><span class="token operator">&lt;</span>str_iterator object at <span class="token number">0x000000FE3E7E0898</span><span class="token operator">></span><span class="token boolean">True</span><span class="token comment" spellcheck="true"># 判断一个对象是否是可迭代对象，方法二</span><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable<span class="token punctuation">,</span>Iterator   <span class="token comment" spellcheck="true"># 导入Iterable,Iterator方法</span>so <span class="token operator">=</span> <span class="token string">'asdf'</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>so<span class="token punctuation">,</span>Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 判断对象是否是可迭代</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>so<span class="token punctuation">,</span>Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 判断对象是否是迭代器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>生成器本质上是迭代器，生成器是自己用Python代码写的迭代器，平时我们用iter将一个迭代对象转化成迭代器，是调用iter方法底层的C代码实现的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将一个函数变成生成器函数</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">789</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> fun<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将函数赋值使用next打印，不能使用fun()调用函数进行打印</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一个next去取一个yield的值，之所以打印三个值是函数内部打印的，next(s)只打印了789</span><span class="token number">123</span><span class="token number">456</span><span class="token number">789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成器的send方法"><a href="#生成器的send方法" class="headerlink" title="生成器的send方法"></a>生成器的send方法</h2><p>一个send对应一个yield，但是如果send中有传值，就会将这个值发送给上一个yield</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 1.定义函数</span>    a <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">123</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token string">'有志青年'</span>    <span class="token keyword">yield</span> <span class="token string">'好好学习'</span>    <span class="token keyword">yield</span> <span class="token string">'天天向上'</span>genor <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2.函数赋值</span><span class="token keyword">print</span><span class="token punctuation">(</span>genor<span class="token punctuation">.</span>send<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 3.取一个yield，打印123</span><span class="token keyword">print</span><span class="token punctuation">(</span>genor<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Alex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 4.取下一个yield，并将Alex赋值给上一个yield，先执行的a = Alex;print(a),再打印有志青年</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成器的yield-from"><a href="#生成器的yield-from" class="headerlink" title="生成器的yield from"></a>生成器的yield from</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'努力'</span><span class="token punctuation">,</span><span class="token string">'奋斗'</span><span class="token punctuation">,</span><span class="token string">'向上'</span><span class="token punctuation">,</span><span class="token string">'乐观'</span><span class="token punctuation">]</span>    <span class="token keyword">yield</span> lst   <span class="token comment" spellcheck="true"># 将列表当成一个整体</span>genor <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>genor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'努力'</span><span class="token punctuation">,</span> <span class="token string">'奋斗'</span><span class="token punctuation">,</span> <span class="token string">'向上'</span><span class="token punctuation">,</span> <span class="token string">'乐观'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'努力'</span><span class="token punctuation">,</span><span class="token string">'奋斗'</span><span class="token punctuation">,</span><span class="token string">'向上'</span><span class="token punctuation">,</span><span class="token string">'乐观'</span><span class="token punctuation">]</span>    <span class="token keyword">yield</span> <span class="token keyword">from</span> lst  <span class="token comment" spellcheck="true"># 将列表中的每个元素逐个输出</span>genor <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(next(genor))</span><span class="token keyword">for</span> i <span class="token keyword">in</span> genor<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>努力奋斗向上乐观<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="列表所有值-1"><a href="#列表所有值-1" class="headerlink" title="列表所有值+1"></a>列表所有值+1</h1><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>i <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#  info[0] = 0 + 1</span>    info<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="列表推导式和生成器表达式"><a href="#列表推导式和生成器表达式" class="headerlink" title="列表推导式和生成器表达式"></a>列表推导式和生成器表达式</h1><h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>列表推导式就是用一行代码构建一个简单或者复杂的列表，减少代码量的同时又可以装逼</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 构建一个1 - 25的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'python%s期'</span> <span class="token operator">%</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 构建一个稍微复杂的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 构建一个30以内所有能被3整除的数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 所有能被3整除的数的平方</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'青年%s号'</span> <span class="token operator">%</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'*'</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 如果i能被3整除就为*，否则从range里面取值</span><span class="token comment" spellcheck="true"># 将列表中至少含有两个e的字符串放到一个列表中</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Tefe'</span><span class="token punctuation">,</span><span class="token string">'oIred'</span><span class="token punctuation">,</span><span class="token string">'Edvl'</span><span class="token punctuation">,</span><span class="token string">'fgte'</span><span class="token punctuation">,</span><span class="token string">'vfeke'</span><span class="token punctuation">,</span><span class="token string">'vfd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'dcvr'</span><span class="token punctuation">,</span><span class="token string">'vfer'</span><span class="token punctuation">,</span><span class="token string">'vfree'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>ll <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> names<span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> i<span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>            ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name <span class="token keyword">for</span> i <span class="token keyword">in</span> names <span class="token keyword">for</span> name <span class="token keyword">in</span> i <span class="token keyword">if</span> name<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 列表推导式能一行代码完成</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h2><p>生成器表达式与列表推导式几乎一模一样，就是[]换成了(),但是生成器在内存方面更占优势，列表推导式是一次性将数据加载到内存，而生成器则是取一点生成一点，更加节省内存</p><pre class="line-numbers language-python"><code class="language-python">genor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'python%s期'</span> <span class="token operator">%</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>genor<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> genor<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">:</span>None <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 值为None，key从range(1,11)取</span>am <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'s'</span><span class="token punctuation">:</span><span class="token string">'cd'</span><span class="token punctuation">,</span><span class="token string">'wf'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'r5'</span><span class="token punctuation">:</span><span class="token string">'km'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span>key <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> am<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将字典的键值对换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h1><pre class="line-numbers language-python"><code class="language-python">lp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lp<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 匿名函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 针对这种自有返回值的函数，可以写成简化的匿名函数</span>func <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x <span class="token operator">*</span> y        <span class="token comment" spellcheck="true"># 只能写成一行</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">)</span>suf <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">:</span>x <span class="token operator">*</span> y <span class="token operator">*</span> z<span class="token keyword">print</span><span class="token punctuation">(</span>suf<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day06</title>
    <link href="https://www.missf.top/post/33a4e9f8.html"/>
    <id>https://www.missf.top/post/33a4e9f8.html</id>
    <published>2020-04-27T05:45:29.000Z</published>
    <updated>2020-06-02T07:51:22.012Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><p>​                                                                                                                                                                                </p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><code>思考:不能使用len方法去统计一个字符串的长度</code></p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'cdvfdcmkcd'</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">]</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">:</span>    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以实现，但如果我在多处使用就会有重复性的代码。初学者一定要培养一种对代码完美的偏执，其实这也是面向过程编程的缺点:代码重复性较多，代码的可读性差。</p><h1 id="函数初识"><a href="#函数初识" class="headerlink" title="函数初识"></a>函数初识</h1><p>一个函数就是封装一个功能</p><pre class="line-numbers language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">my_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义函数名my_len</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">:</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>my_len<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用函数，不调用不会执行代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h1><p>函数中遇到return直接结束，给函数的调用者返回一个值，不写默认为None</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫荒原饮露'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在学习Python'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在让自己变得更加优秀'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>    <span class="token comment" spellcheck="true"># 直接结束函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我以后要...'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># return后面的不会输出</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'加油'</span><span class="token punctuation">)</span>我叫荒原饮露我在学习Python我在让自己变得更加优秀加油<span class="token comment" spellcheck="true"># 如果不写返回值，默认返回一个None</span>df <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>我叫荒原饮露我在学习Python我在让自己变得更加优秀None<span class="token comment" spellcheck="true"># 返回多个值</span><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'faker'</span><span class="token punctuation">,</span><span class="token string">'doinb'</span><span class="token punctuation">,</span><span class="token string">'jacklove'</span>skt<span class="token punctuation">,</span>fpx<span class="token punctuation">,</span>ig <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>skt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fpx<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ig<span class="token punctuation">)</span>fakerdoinbjacklove<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 函数的定义:形式参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'faker'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token number">2</span>y <span class="token operator">=</span> <span class="token number">3</span>date<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 函数的执行者:实际参数,将实参x,y传递给形参a,b</span>faker<span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span>positon<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 实参和形参的位置必须要对应</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s附近的%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>positon<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span>date<span class="token punctuation">(</span><span class="token string">'深圳'</span><span class="token punctuation">,</span><span class="token string">'女性'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 调用函数时，传入两个参数</span>深圳附近的女性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="键值对参数"><a href="#键值对参数" class="headerlink" title="键值对参数"></a>键值对参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span>tq<span class="token punctuation">,</span>name<span class="token punctuation">,</span>dc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 形式参数与实际参数的键对应，位置不需对应</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫%s,我喜欢的季节是%s,我学习%s已经一个月了'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>tq<span class="token punctuation">,</span>dc<span class="token punctuation">)</span><span class="token punctuation">)</span>date<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"小马哥"</span><span class="token punctuation">,</span>tq<span class="token operator">=</span><span class="token string">"秋季"</span><span class="token punctuation">,</span>dc<span class="token operator">=</span><span class="token string">"Python"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 以键值对的方式传入实际参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="混合参数"><a href="#混合参数" class="headerlink" title="混合参数"></a>混合参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 注意:位置参数必须在关键字参数的前面，不然会报错</span><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span>home<span class="token punctuation">,</span>tq<span class="token punctuation">,</span>name<span class="token punctuation">,</span>dc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫%s,我喜欢的季节是%s,我学习%s已经一个月了'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>tq<span class="token punctuation">,</span>dc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s赚钱%s花,一分别想带回%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>cs<span class="token punctuation">,</span>cs<span class="token punctuation">,</span>home<span class="token punctuation">)</span><span class="token punctuation">)</span>date<span class="token punctuation">(</span><span class="token string">'深圳'</span><span class="token punctuation">,</span><span class="token string">'家'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"小马哥"</span><span class="token punctuation">,</span>tq<span class="token operator">=</span><span class="token string">"秋季"</span><span class="token punctuation">,</span>dc<span class="token operator">=</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span>soft<span class="token punctuation">,</span>posi<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 默认参数需要放置位置参数的后面</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打开%s软件,搜索%s附近的%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>soft<span class="token punctuation">,</span>posi<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span>date<span class="token punctuation">(</span><span class="token string">'约会'</span><span class="token punctuation">,</span>posi<span class="token operator">=</span><span class="token string">'深圳南山区'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="万能参数"><a href="#万能参数" class="headerlink" title="万能参数"></a>万能参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 万能参数：两个形式参数，接收所有的位置参数，关键字参数</span><span class="token keyword">def</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 位置参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 关键字参数</span>date<span class="token punctuation">(</span><span class="token string">'南山区'</span><span class="token punctuation">,</span><span class="token string">'18'</span><span class="token punctuation">,</span>posi<span class="token operator">=</span><span class="token string">'深圳'</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'laddyboy'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'南山区'</span><span class="token punctuation">,</span> <span class="token string">'18'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将位置参数返回为一个元组</span><span class="token punctuation">{</span><span class="token string">'posi'</span><span class="token punctuation">:</span> <span class="token string">'深圳'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'laddyboy'</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 将关键字参数返回为一个字典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="的魔性用法"><a href="#的魔性用法" class="headerlink" title="*的魔性用法"></a>*的魔性用法</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># *的魔性用法</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span>kwargs<span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token string">'mk,j'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">**</span><span class="token punctuation">{</span><span class="token string">'ed'</span><span class="token punctuation">:</span><span class="token string">'12'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">**</span><span class="token punctuation">{</span><span class="token string">'cds'</span><span class="token punctuation">:</span><span class="token string">'lkj'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在调用函数时*是将多个元组的元素整合成一个元组，**是将多个字典整合成一个字典</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token string">'ed'</span><span class="token punctuation">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token string">'cds'</span><span class="token punctuation">:</span> <span class="token string">'lkj'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="形参的顺序问题"><a href="#形参的顺序问题" class="headerlink" title="形参的顺序问题"></a>形参的顺序问题</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'oi'</span><span class="token punctuation">,</span><span class="token string">'cd'</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"alex"</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span>男<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'oi'</span><span class="token punctuation">,</span> <span class="token string">'cd'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'alex'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 按照位置参数 *args 默认参数 **kwargs的顺序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="判断数值大小"><a href="#判断数值大小" class="headerlink" title="判断数值大小"></a>判断数值大小</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义两个形式参数，用来接收实际参数</span>    <span class="token keyword">if</span> a <span class="token operator">></span> b<span class="token punctuation">:</span>        <span class="token keyword">return</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><pre class="line-numbers language-python"><code class="language-python">dc <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token keyword">if</span> <span class="token number">6</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token keyword">else</span> <span class="token string">"B"</span>  <span class="token comment" spellcheck="true"># 如果条件成立dc就等于A，否则等于B</span><span class="token keyword">print</span><span class="token punctuation">(</span>dc<span class="token punctuation">)</span>A<span class="token keyword">def</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> a <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token keyword">else</span> b    <span class="token comment" spellcheck="true"># 如果a大于b，就return a否则return b</span>df <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token number">150</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数的命名空间"><a href="#函数的命名空间" class="headerlink" title="函数的命名空间"></a>函数的命名空间</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 函数的命名空间</span>name <span class="token operator">=</span> <span class="token string">'alex'</span>age <span class="token operator">=</span> <span class="token string">'23'</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sex <span class="token operator">=</span> <span class="token string">'女'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 变量赋值时会在内存中开辟一个名称空间用来存放变量名和对应的值</span><span class="token comment" spellcheck="true"># 定义函数时会在内存中开辟一个函数内存地址，但不会存放函数体的内容</span><span class="token comment" spellcheck="true"># 但函数调用时会再开辟一个临时名称空间，存放函数体的内容，并且临时名称空间随着函数的调用结束而消失</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在python解释器开始执行之后, 就会在内存中开辟一个空间, 每当遇到一个变量的时候, 就把变量名和值之间的关系记录下来, 但是当遇到函数定义的时候, 解释器只是把函数名读入内存, 表示这个函数存在了, 至于函数内部的变量和逻辑, 解释器是不关心的. 也就是说一开始的时候函数只是加载进来, 仅此而已, 只有当函数被调用和访问的时候, 解释器才会根据函数内部声明的变量来进行开辟变量的内部空间. 随着函数执行完毕, 这些函数内部变量占用的空间也会随着函数执行完毕而被清空</p><p>我们给这个存放名字与值的关系的空间起了一个名字——命名空间</p><ul><li>全局名称空间:存放的是py文件中变量与值的对应关系</li><li>局部名称空间:存放的是函数体里面的变量与值的对应关系</li><li>内置名称空间:内置函数，关键字等</li></ul><h2 id="加载到内存的顺序"><a href="#加载到内存的顺序" class="headerlink" title="加载到内存的顺序"></a>加载到内存的顺序</h2><p>内置名称空间 —&gt; 全局名称空间 —&gt; 局部名称空间(当函数执行时)</p><h2 id="取值顺序"><a href="#取值顺序" class="headerlink" title="取值顺序"></a>取值顺序</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 取值顺序，就近原则</span><span class="token comment" spellcheck="true"># 局部名称空间 ---> 全局名称空间</span>name <span class="token operator">=</span> <span class="token string">'mwj'</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'lok'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span>lok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="globals和locals"><a href="#globals和locals" class="headerlink" title="globals和locals"></a>globals和locals</h1><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'li'</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'alex'</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">'qw'</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>globals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回一个字典：包含全局作用域的所有内容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 返回一个字典：当前作用域的所有内容</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'__name__'</span><span class="token punctuation">:</span> <span class="token string">'__main__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>_frozen_importlib_external<span class="token punctuation">.</span>SourceFileLoader object at <span class="token number">0x0000009D39BA5860</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'__annotations__'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>module <span class="token string">'builtins'</span> <span class="token punctuation">(</span>built<span class="token operator">-</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">:</span> <span class="token string">'C:/Python3.7/Python_Scripts/t5.py'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token string">'fun'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function fun at <span class="token number">0x0000009D39B5C1E0</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'qw'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 高阶函数</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>    fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span>    fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">)</span>fun3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 555 333 222 111 666,代码从上至下执行，函数调用函数</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1 4 2 5,从上至下执行，函数定义之后不调用则不会被输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="global-nonlocal"><a href="#global-nonlocal" class="headerlink" title="global nonlocal"></a>global nonlocal</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># global nonlocal</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> name    name <span class="token operator">=</span> <span class="token string">"alex"</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以在局部声明一个全局变量，如果不声明为全局变量，print(name)不输出alex</span><span class="token comment" spellcheck="true"># 原本内层函数不能对外层函数的变量只能引用不能修改</span><span class="token keyword">def</span> <span class="token function">war</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"alex"</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nonlocal name    <span class="token comment" spellcheck="true"># 使用nonlocal 可以使内层函数对外层函数进行修改</span>        name <span class="token operator">+=</span> <span class="token string">"b"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>war<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="局部作用域不能引用全局作用域变量"><a href="#局部作用域不能引用全局作用域变量" class="headerlink" title="局部作用域不能引用全局作用域变量"></a>局部作用域不能引用全局作用域变量</h1><pre class="line-numbers language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 执行报错</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 可以打印</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行会报错，是因为局部作用域不能对全局作用域的变量只能引用不能修改</span><span class="token comment" spellcheck="true"># 通过global在局部作用域声明，可以进行修改</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> count    count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数名作为函数的参数"><a href="#函数名作为函数的参数" class="headerlink" title="函数名作为函数的参数"></a>函数名作为函数的参数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in fun"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in fun1"</span><span class="token punctuation">)</span>fun<span class="token punctuation">(</span>fun1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用fun函数并且将fun1作为参数，输出的是fun1函数的内存地址，fun1函数被作为参数时是一个变量</span><span class="token operator">&lt;</span>function fun1 at <span class="token number">0x00000055024C9620</span><span class="token operator">></span><span class="token keyword">in</span> fun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数名可以当做函数的返回值"><a href="#函数名可以当做函数的返回值" class="headerlink" title="函数名可以当做函数的返回值"></a>函数名可以当做函数的返回值</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 函数名可以当做函数的返回值</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in fun"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in fun1"</span><span class="token punctuation">)</span>re <span class="token operator">=</span> fun<span class="token punctuation">(</span>fun1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token keyword">in</span> fun<span class="token operator">&lt;</span>function fun1 at <span class="token number">0x00000030B6739620</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day05</title>
    <link href="https://www.missf.top/post/aaadb842.html"/>
    <id>https://www.missf.top/post/aaadb842.html</id>
    <published>2020-04-26T05:21:29.000Z</published>
    <updated>2020-06-02T07:51:22.011Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Python文件操作"><a href="#Python文件操作" class="headerlink" title="Python文件操作"></a>Python文件操作</h1><h2 id="全部读取"><a href="#全部读取" class="headerlink" title="全部读取"></a>全部读取</h2><pre class="line-numbers language-python"><code class="language-python">file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"d:\java_restart2.sh"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 文件路径，文件编码，操作方式</span>content <span class="token operator">=</span> file1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将读取到文件的内容复制给content</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印文件的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="读取n个字符"><a href="#读取n个字符" class="headerlink" title="读取n个字符"></a>读取n个字符</h2><pre class="line-numbers language-python"><code class="language-python">file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"d:\java_restart2.sh"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> file1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="按行读取"><a href="#按行读取" class="headerlink" title="按行读取"></a>按行读取</h2><pre class="line-numbers language-python"><code class="language-python">file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"d:\java_restart2.sh"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> file1<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="返回列表"><a href="#返回列表" class="headerlink" title="返回列表"></a>返回列表</h2><pre class="line-numbers language-python"><code class="language-python">file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"d:\java_restart2.sh"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> file1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回一个列表，用原文件的每一行作为列表的每一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for循环读取"><a href="#for循环读取" class="headerlink" title="for循环读取"></a>for循环读取</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 读取大文件时逐行读取防止内存崩溃，涉及到迭代器</span>file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"d:\java_restart2.sh"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> file1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>file1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="读取文件的方式"><a href="#读取文件的方式" class="headerlink" title="读取文件的方式"></a>读取文件的方式</h1><ul><li><code>read()</code> 全部读取</li><li><code>read(n)</code> 读取n个字符</li><li><code>readline()</code> 按行读取</li><li><code>readlines()</code> 返回一个列表，列表的元素是原文件的每一行数据</li><li><code>for循环读取</code> 读取大文件时逐行读取防止内存崩溃</li></ul><h1 id="写入文件的方式"><a href="#写入文件的方式" class="headerlink" title="写入文件的方式"></a>写入文件的方式</h1><h2 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h2><pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打开文件句柄</span>content <span class="token operator">=</span> f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 写入操作</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭文件句柄</span><span class="token comment" spellcheck="true"># 如果写入文件不存在，open()将自动创建它</span><span class="token comment" spellcheck="true"># 如果文件已存在已有内容，会清空再写入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写入多行"><a href="#写入多行" class="headerlink" title="写入多行"></a>写入多行</h2><pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 加换行符</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊\n"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊\n"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在打开一个文件句柄后，可以重新写入多次而不被清空，只有在文件句柄被关闭后，下一次写入才会被清空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="追加文件内容"><a href="#追加文件内容" class="headerlink" title="追加文件内容"></a>追加文件内容</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 没有文件创建文件追加内容，有此文件则在原文件的末尾追加新内容</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊\n"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"我也不知道写什么啊\n"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="读写非文字类文件"><a href="#读写非文字类文件" class="headerlink" title="读写非文字类文件"></a>读写非文字类文件</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 音视频或者图片类型的文件，以bytes读取和写入</span>f3 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"tr.jpg"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"rb"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用rb模式打开一张图片</span>content <span class="token operator">=</span> f3<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 以bytes读取原图片数据</span>f4 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"ting.jpg"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span>f4<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 将数据写到一个新文件图片</span>f3<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f4<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="读写模式"><a href="#读写模式" class="headerlink" title="读写模式"></a>读写模式</h1><h2 id="先读后写"><a href="#先读后写" class="headerlink" title="先读后写"></a>先读后写</h2><pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 读取内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"alex"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 写入内容，这里是以追加的方式写入，不会清空文件内容</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调整光标写入"><a href="#调整光标写入" class="headerlink" title="调整光标写入"></a>调整光标写入</h2><pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将光标调整到最前</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"jkl"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 在最前面写入jkl，会将原来前面的三个字符替换掉</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将光标调到最后面</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"ooo"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 在下一行写入ooo</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="强制保存"><a href="#强制保存" class="headerlink" title="强制保存"></a>强制保存</h2><pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"TES.123"</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#强制保存，相当于Crtl + s</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断文件句柄是否可读可写"><a href="#判断文件句柄是否可读可写" class="headerlink" title="判断文件句柄是否可读可写"></a>判断文件句柄是否可读可写</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># readable writeable</span>f2 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 写入模式</span><span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取会报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>readable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 由于是写入模式不能读</span><span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>writable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="按照字节调整光标位置"><a href="#按照字节调整光标位置" class="headerlink" title="按照字节调整光标位置"></a>按照字节调整光标位置</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># tell seek</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file2"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 读取文件，光标会移动到下一行</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取当前文件指针的位置</span>f1<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 移动指针到指定的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从指针位置往后读取</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="截取文件"><a href="#截取文件" class="headerlink" title="截取文件"></a>截取文件</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># truncate 只能在可写的模式下截取原文件，只能从头截取</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> f1<span class="token punctuation">.</span>truncate<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 截取文件的前12个字节,文件其他内容会被清空，只保留截取到的字节</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>中华人民<span class="token comment" spellcheck="true"># utf-8编码下，一个中文字符等于三个字节，如果是截取4个字节会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="with-open操作方式"><a href="#with-open操作方式" class="headerlink" title="with open操作方式"></a>with open操作方式</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.自动关闭文件句柄</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file4"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>    content <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.同一语句可操作创建多个文件句柄</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">,</span>open<span class="token punctuation">(</span><span class="token string">"file2"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对file1进行读取操作</span>    f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"777"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对file2进行写入操作</span><span class="token comment" spellcheck="true"># 3.with open 可能引起IO错误的操作</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>    f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打开文件句柄f1进行读取操作，文件句柄自动关闭</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file1"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>        f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"777"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 又打开文件句柄f2进行写操作，如果文件句柄f1没有及时关闭又打开了f2文件句柄程序就会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关于文件的修改"><a href="#关于文件的修改" class="headerlink" title="关于文件的修改"></a>关于文件的修改</h1><p>文件的数据都是存放在硬盘上的，因此只存在覆盖，不存在修改一说，我们平时看到的修改文件，都是模拟出来的效果，修改file5文件中的Alex字符为Sb，并且将原文件复制为新文件file.bak，删除原文件，修改新文件的名字为file5，修改速度非常快，根本看不到生成的file5.bak文件，具体的说有两种实现方式</p><ol><li>将硬盘存放的该文件的内容全部加载到内存，在内存中是可以修改的，修改完毕后，再由内存覆盖到硬盘</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># file5文件内容</span>Alex是个屌丝，即使Alex有特斯拉也还是屌丝你们真逗，Alex再牛逼，也掩饰不了资深屌丝的气息<span class="token keyword">import</span> os<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file5"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">,</span>open<span class="token punctuation">(</span><span class="token string">"file5.bak"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 打开两个文件句柄，f1只读，f2可写</span>    old_content <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将f1内容赋值给old_content</span>    new_content <span class="token operator">=</span> old_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span><span class="token string">"Sb"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将Alex替换为Sb的数据赋值给new_content</span>    f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>new_content<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将新数据写入f2</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"file5"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除文件file5</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"file5.bak"</span><span class="token punctuation">,</span><span class="token string">"file5"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将新文件命名为file5</span><span class="token comment" spellcheck="true"># 这样有一个不好的地方，old_content = f1.read()这里是一次性将文件加载到内存中的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>将硬盘存放的该文件的内容一行一行地读入内存，修改完毕就写入新文件，最后用新文件覆盖源文件</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"file5"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">,</span>open<span class="token punctuation">(</span><span class="token string">"file5.bak"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">:</span>            new_line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"Sb"</span><span class="token punctuation">,</span><span class="token string">"Alex"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将一行的数据替换完成赋值给新的一行</span>        f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>new_line<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 逐行写入</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"file5"</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"file5.bak"</span><span class="token punctuation">,</span><span class="token string">"file5"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 不会将文件一次加载到内存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day04</title>
    <link href="https://www.missf.top/post/ddaa88d4.html"/>
    <id>https://www.missf.top/post/ddaa88d4.html</id>
    <published>2020-04-25T10:21:29.000Z</published>
    <updated>2020-06-02T07:51:22.006Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="基础数据类型补充"><a href="#基础数据类型补充" class="headerlink" title="基础数据类型补充"></a>基础数据类型补充</h1><h2 id="判断数值是否相等"><a href="#判断数值是否相等" class="headerlink" title="判断数值是否相等"></a>判断数值是否相等</h2><pre class="line-numbers language-python"><code class="language-python">top1 <span class="token operator">=</span> <span class="token string">'alex'</span>top2 <span class="token operator">=</span> <span class="token string">'alex'</span><span class="token keyword">print</span><span class="token punctuation">(</span>top1 <span class="token operator">==</span> top2<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存地址"><a href="#内存地址" class="headerlink" title="内存地址"></a>内存地址</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打印mem会先找到mem的内存地址，然后再找到内存地址指向的数据</span>mem <span class="token operator">=</span> <span class="token string">'mk'</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">170332332864</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断内存地址是否相同"><a href="#判断内存地址是否相同" class="headerlink" title="判断内存地址是否相同"></a>判断内存地址是否相同</h2><pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f <span class="token operator">==</span> g<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>f <span class="token keyword">is</span> g<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># 判断的是两个对象的内存地址是否相同,虽然f的值等于g，但是内存地址却不是指向同一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><strong>数据类型</strong></th><th><strong>可变/不可变</strong></th></tr></thead><tbody><tr><td>整型</td><td>不可变</td></tr><tr><td>字符串</td><td>不可变</td></tr><tr><td>元组</td><td>不可变</td></tr><tr><td>列表</td><td>可变</td></tr><tr><td>集合</td><td>可变</td></tr><tr><td>字典</td><td>可变</td></tr></tbody></table><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 代码块</span>代码全都是基于代码块去运行的，一个文件就是一个代码块，不同的文件就是不同的代码块<span class="token comment" spellcheck="true"># 代码块的缓存机制</span>Python在执行同一个代码块的初始化对象的命令时，会检查其值是否已经存在，如果存在，会将其重用，如果有同样的记录那么它会重复使用这个字典中的值，但是要注意的是，只有在同一个代码块下，才会实现这个缓存机制满足此机制的数据类型<span class="token punctuation">:</span>int str bool优点：节省内存，提升性能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="小数据池"><a href="#小数据池" class="headerlink" title="小数据池"></a>小数据池</h1><p>Python自动将-5~256的整数进行了缓存，当你将这些整数赋值给变量时，并不会重新创建对象，而是使用已经创建好的缓存对象。python会将一定规则的字符串在字符串驻留池中，创建一份，当你将这些字符串赋值给变量时，并不会重新创建对象， 而是使用在字符串驻留池中创建好的对象。</p><ol><li>小数据(又称驻留机制、驻存机制)</li><li>能够应用于不同的代码块</li><li>适应的数据类型:int str bool</li><li>int:-5 ~ 256</li><li>str:一定条件下的str满足小数据池</li><li>bool:全部</li><li>优点:节省内存 提升性能</li></ol><h1 id="编码进阶"><a href="#编码进阶" class="headerlink" title="编码进阶"></a>编码进阶</h1><p>不同的编码之间不能互相识别（会出现报错或者乱码），文字通过网络传输，或者硬盘存储不能使用Unicode编码方式。</p><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><pre class="line-numbers language-python"><code class="language-python">早期的密码本，英文字母，数字，特殊字符<span class="token number">8</span>位<span class="token punctuation">(</span>bit<span class="token punctuation">)</span> <span class="token operator">==</span> 1byte在ascll码中<span class="token punctuation">,</span><span class="token number">8</span>位bit表示一个字节表示一个字符hello  <span class="token operator">=</span>  <span class="token number">01101000</span> <span class="token number">01100101</span> <span class="token number">01100111</span> <span class="token number">0110011</span> <span class="token number">01100101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><pre class="line-numbers language-python"><code class="language-python">万国码包含全世界所有的文字<span class="token number">32</span>位bit表示<span class="token number">4</span>个字节表示一个字符a<span class="token punctuation">:</span><span class="token number">10001000</span> <span class="token number">00010010</span> <span class="token number">00100000</span> <span class="token number">00010010</span>中<span class="token punctuation">:</span><span class="token number">00000000</span> <span class="token number">10010010</span> <span class="token number">00000000</span> <span class="token number">10010010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="utf-8"><a href="#utf-8" class="headerlink" title="utf-8"></a>utf-8</h2><pre class="line-numbers language-python"><code class="language-python">最少用<span class="token number">8</span>位表示一个字符a<span class="token punctuation">:</span><span class="token number">01000010</span><span class="token punctuation">,</span><span class="token number">8</span>位bit表示一个字节表示一个字符欧洲文字<span class="token punctuation">:</span><span class="token number">00000010</span> <span class="token number">00100000</span>    <span class="token number">16</span>位bit表示两个字节表示一个字符中国文字<span class="token punctuation">:</span><span class="token number">00000010</span> <span class="token number">00000010</span> <span class="token number">00000010</span> <span class="token number">24</span>位bit表示三个字节表示一个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gbk"><a href="#gbk" class="headerlink" title="gbk"></a>gbk</h2><pre class="line-numbers language-python"><code class="language-python">最包含英文和自己国家的语言a<span class="token punctuation">:</span><span class="token number">00000010</span>     <span class="token number">8</span>位bit表示一个字节表示一个字符中<span class="token punctuation">:</span><span class="token number">00000010</span> <span class="token number">0000001016</span>     <span class="token number">16</span>位bit表示两个字节表示一个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在Python3x环境下，唯独str类型的内部编码方式是Unicode，</p></blockquote><blockquote><p>所以Python3x中的字符串不能用于直接的网络传输和文件存储</p></blockquote><blockquote><p>补充一个数据类型：bytes类型，与str类型是海尔兄弟，</p></blockquote><blockquote><p>bytes内部编码方式为非Unicode，bytes类型能用于网络传输和文件存储，还拥有str的其他特性</p></blockquote><blockquote><p>但是bytes中文是16进制表示，看不懂，所以常用的还是str类型</p></blockquote><h2 id="bytes类型"><a href="#bytes类型" class="headerlink" title="bytes类型"></a>bytes类型</h2><pre class="line-numbers language-python"><code class="language-python">b1 <span class="token operator">=</span> <span class="token string">'alex'</span>b2 <span class="token operator">=</span> b<span class="token string">'alex'</span><span class="token keyword">print</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span>type<span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span>alex <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span>type<span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span>b<span class="token string">'alex'</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bytes'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># str ---> gbk</span>s0 <span class="token operator">=</span> <span class="token string">'荒原饮露'</span>b1 <span class="token operator">=</span> s0<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 编码，将字符串转换为gbk</span><span class="token keyword">print</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span>b<span class="token string">'\xbb\xc4\xd4\xad\xd2\xfb\xc2\xb6'</span>    <span class="token comment" spellcheck="true"># 可以看到 一个中文两个字节</span>y2 <span class="token operator">=</span> b1<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 解码</span><span class="token keyword">print</span><span class="token punctuation">(</span>y2<span class="token punctuation">)</span>荒原饮露<span class="token comment" spellcheck="true"># str ---> utf-8</span>s2 <span class="token operator">=</span> <span class="token string">'努力奋斗'</span>b2 <span class="token operator">=</span> s2<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span>b<span class="token string">'\xe5\x8a\xaa\xe5\x8a\x9b\xe5\xa5\x8b\xe6\x96\x97'</span>    <span class="token comment" spellcheck="true"># 一个中文三个字节</span>b3 <span class="token operator">=</span> b2<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span>努力奋斗<span class="token comment" spellcheck="true"># gbk ---> utf-8</span>si <span class="token operator">=</span> <span class="token string">'编码'</span>s1 <span class="token operator">=</span> si<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>b<span class="token string">'\xb1\xe0\xc2\xeb'</span> <span class="token comment" spellcheck="true"># 得到gbk编码的bytes类型</span><span class="token number">1</span> <span class="token operator">=</span> s1<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解码再加密</span>b2 <span class="token operator">=</span> b1<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span>b<span class="token string">'\xe7\xbc\x96\xe7\xa0\x81'</span>    <span class="token comment" spellcheck="true"># utf-8编码的bytes类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 赋值运算</span>jk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>yu <span class="token operator">=</span> jk        <span class="token comment" spellcheck="true"># yu变量和jk变量都指向同一个内存地址</span>yu<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">789</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 修改这个列表的时候，两个变量的值都被修改</span><span class="token keyword">print</span><span class="token punctuation">(</span>jk<span class="token punctuation">,</span>yu<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><pre class="line-numbers language-python"><code class="language-python">lo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'de'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'er'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>ko <span class="token operator">=</span> lo<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ko拷贝lo的列表，得到一样的数据，但是浅copy只会拷贝内存中的第一层数据</span>lo<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'lp'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># lo往列表追加一个元素lp</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>lo<span class="token punctuation">)</span><span class="token punctuation">,</span>lo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>ko<span class="token punctuation">)</span><span class="token punctuation">,</span>ko<span class="token punctuation">)</span><span class="token number">205292790408</span> <span class="token punctuation">[</span><span class="token string">'de'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'er'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'lp'</span><span class="token punctuation">]</span>        <span class="token number">205293284808</span> <span class="token punctuation">[</span><span class="token string">'de'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'er'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 可以看到两个列表的内存地址都是不一样的，往lo列表追加lp元素，ko列表是没有跟随lo列表追加lp元素的</span>lo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'io'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 往lo列表的小列表里面追加io元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>ko<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'de'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'er'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'io'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'lp'</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'de'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'er'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'io'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 可以看到，lo和ko列表的小列表都被追加了io元素，简而言之，列表里面的小列表里面的元素是共用的。ko拷贝lo的列表，只会拷贝lo外层列表，而不会拷贝lo的内层列表，lo外层列表发生改变ko不会跟随，但是lo内层列表发生改变ko会跟随，复制一个列表时，lo = ['de',15,['er',4,2]]，de和15元素的地址发生改变，['er',4,2]小列表的元素还是指向原来的地址</span><span class="token comment" spellcheck="true"># 全切片是浅copy</span>ki <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cf'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'ijni'</span><span class="token punctuation">,</span><span class="token string">'678'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span>ji <span class="token operator">=</span> ki<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>ki<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'mk'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ki<span class="token punctuation">,</span>ji<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cf'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'ijni'</span><span class="token punctuation">,</span> <span class="token string">'678'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'mk'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'cf'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'ijni'</span><span class="token punctuation">,</span> <span class="token string">'678'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'mk'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 深copy会在内存中对原列表以及列表里面的可变的数据类型重新创建一份，而列表中不可变得数据类型还是沿用原来的</span><span class="token keyword">import</span> copylo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span><span class="token string">'ty'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'rt'</span><span class="token punctuation">,</span><span class="token string">'km'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span>ko <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>lo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>ko<span class="token punctuation">)</span>lo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>ko<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span> <span class="token string">'ty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rt'</span><span class="token punctuation">,</span> <span class="token string">'km'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span> <span class="token string">'ty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rt'</span><span class="token punctuation">,</span> <span class="token string">'km'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span> <span class="token string">'ty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rt'</span><span class="token punctuation">,</span> <span class="token string">'km'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'fr'</span><span class="token punctuation">,</span> <span class="token string">'ty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rt'</span><span class="token punctuation">,</span> <span class="token string">'km'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 往lo小列表追加元素，ko的小列表的元素不是指向原来的地址，ko的小列表元素没有被改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="深拷贝和浅拷贝的区别"><a href="#深拷贝和浅拷贝的区别" class="headerlink" title="深拷贝和浅拷贝的区别"></a>深拷贝和浅拷贝的区别</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 以下所有的内容都是基于内存地址来说的。</span><span class="token comment" spellcheck="true"># 可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型</span><span class="token comment" spellcheck="true"># 不可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型</span><span class="token comment" spellcheck="true"># 总结：不可变数据类型更改后地址发生改变，可变数据类型更改地址不发生改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="深拷贝和浅拷贝的需要注意的点"><a href="#深拷贝和浅拷贝的需要注意的点" class="headerlink" title="深拷贝和浅拷贝的需要注意的点"></a>深拷贝和浅拷贝的需要注意的点</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在浅拷贝时，拷贝出来的新对象的地址和原对象是不一样的，但是新对象里面的可变元素（如列表）的地址和原对象里的可变元素的地址是相同的，也就是说浅拷贝它拷贝的是浅层次的数据结构（不可变元素），对象里的可变元素作为深层次的数据结构并没有被拷贝到新地址里面去，而是和原对象里的可变元素指向同一个地址，所以在新对象或原对象里对这个可变元素做修改时，两个对象是同时改变的，但是深拷贝不会这样，这个是浅拷贝相对于深拷贝最根本的区别</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day03</title>
    <link href="https://www.missf.top/post/43ce1d77.html"/>
    <id>https://www.missf.top/post/43ce1d77.html</id>
    <published>2020-04-24T10:14:29.000Z</published>
    <updated>2020-06-02T07:51:22.009Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 代入验证码项目，输入姓名密码之后有空格也不会报错</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>passworrd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token string">'AeTrd'</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>your_code <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入验证码:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> your_code <span class="token operator">==</span> code<span class="token punctuation">:</span>    <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'alex'</span> <span class="token operator">and</span> passworrd <span class="token operator">==</span> <span class="token string">'sb'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名或者密码错误'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'验证码不正确'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="将一行字符串竖着打印"><a href="#将一行字符串竖着打印" class="headerlink" title="将一行字符串竖着打印"></a>将一行字符串竖着打印</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># while循环</span>t <span class="token operator">=</span> <span class="token string">'荒原饮露cchkskhdiqwuey'</span>s <span class="token operator">=</span> len<span class="token punctuation">(</span>t<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 先统计字符串的长度</span><span class="token comment" spellcheck="true"># print(s)</span>index <span class="token operator">=</span> <span class="token number">0</span>       <span class="token comment" spellcheck="true"># 设定一个索引值</span><span class="token keyword">while</span> index <span class="token operator">&lt;</span> s<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果索引值小于变量s则进入循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 从0开始打印字符串的索引，直到index&lt;s不成立退出循环</span>    index <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true"># index每次自增1</span><span class="token comment" spellcheck="true"># for循环</span>t <span class="token operator">=</span> <span class="token string">'荒原饮露cchkskhdiqwuey'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 还可以进行拼接，print(i+'lo')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="猜数字"><a href="#猜数字" class="headerlink" title="猜数字"></a>猜数字</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 猜数字,只有猜对了才会退出</span>num <span class="token operator">=</span> <span class="token number">66</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    cai <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入你要猜的数字:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cai <span class="token operator">></span> num<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜的数字大了！"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> cai <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜的数字小了"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜对了！"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token comment" spellcheck="true"># 三次猜测不对就退出</span>num <span class="token operator">=</span> <span class="token number">66</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入数字:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> j <span class="token operator">></span> num<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数字大了!"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数字小了!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜对了!"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式一</span>content <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入内容:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 将输入的字符串，去掉前后两端的空格</span>plus_index <span class="token operator">=</span> content<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 找到加号位置，并返回加号的索引数</span>num1 <span class="token operator">=</span> content<span class="token punctuation">[</span><span class="token punctuation">:</span>plus_index<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 取加号前面的区域并且去掉空格</span>num2 <span class="token operator">=</span> content<span class="token punctuation">[</span>plus_index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 取加号后面的区域也去掉空格</span>sum3 <span class="token operator">=</span> int<span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>num2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将取到的无空格值相加</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方式二</span>content <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入内容:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 将输入的字符串，进行去前后两端的空格</span>li <span class="token operator">=</span> content<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 将字符串转换为列表，指定以+进行分割</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token string">'15  '</span><span class="token punctuation">,</span> <span class="token string">'    16'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 将得到的元素相加</span>sum1 <span class="token operator">=</span> int<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 将字符串类型的两个元素强制转换为int，会去掉空格</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="为什么需要列表"><a href="#为什么需要列表" class="headerlink" title="为什么需要列表"></a>为什么需要列表</h2><ul><li>字符串如果长度过于长取值时会很费劲，取出来的数据是字符串类型，使用不方便</li><li>字符串有长度限制(只能存储少量的字符串类型的数据)</li><li>基于以上原因Python提供了一个另外的数据类型:容器类数据类型</li></ul><h2 id="什么是列表"><a href="#什么是列表" class="headerlink" title="什么是列表"></a>什么是列表</h2><ul><li>列表能存储大量的、不同的数据类型，列表存放什么数据类型，取出来之后还是什么数据类型</li><li>列表可以存放的数据类型:数字，字符串，布尔值，小列表，元组，字典，集合，对象</li><li>32位Python的限制是 536870912</li><li>64位Python的限制是 1152921504606846975</li><li>列表是有序的、有索引值的、可切片、方便取值</li></ul><h2 id="列表取值"><a href="#列表取值" class="headerlink" title="列表取值"></a>列表取值</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 取第一个元素</span>sl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span><span class="token string">'荒原'</span><span class="token punctuation">,</span><span class="token string">'154'</span><span class="token punctuation">]</span>sl1 <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>sl<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出索引和索引类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>sl1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># alex &lt;class 'list'> 定义列表时是字符串</span>sl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span><span class="token string">'荒原'</span><span class="token punctuation">,</span><span class="token string">'154'</span><span class="token punctuation">]</span>sl1 <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 0 1 2，顾首不顾尾，只取前两个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>sl1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ['alex', '荒原']</span><span class="token comment" spellcheck="true"># 反向取值</span>sl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span><span class="token string">'荒原'</span><span class="token punctuation">,</span><span class="token string">'154'</span><span class="token punctuation">]</span>sl1 <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sl1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ['154', '荒原', 'alex']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的增加"><a href="#列表的增加" class="headerlink" title="列表的增加"></a>列表的增加</h2><pre class="line-numbers language-python"><code class="language-python">sl<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 增加abc元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">)</span>sl<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 增加布尔值</span><span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">)</span>name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 空列表</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果不执行break,则一直执行while True</span>    username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用户输入字符串</span>    <span class="token keyword">if</span> username<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span><span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 如果输入是q，无论大小写都执行break</span>    name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断到不是q则增加到列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 插入</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>lk<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'yu'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在索引1的位置，插入'yu',索引从零开始 </span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span> <span class="token string">'yu'</span><span class="token punctuation">,</span> <span class="token string">'ctr'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 迭代者追加</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>lk<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span> <span class="token string">'ctr'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>lk<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'asd'</span><span class="token punctuation">,</span><span class="token string">'cvf'</span><span class="token punctuation">,</span><span class="token string">'cdd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span> <span class="token string">'ctr'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'asd'</span><span class="token punctuation">,</span> <span class="token string">'cvf'</span><span class="token punctuation">,</span> <span class="token string">'cdd'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的删除"><a href="#列表的删除" class="headerlink" title="列表的删除"></a>列表的删除</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 按照索引去删除</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>ret <span class="token operator">=</span> lk<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除索引为1的元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 按照元素去删除</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>lk<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'tpo'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 指定删除那个</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 清空列表</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>lk<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># del</span><span class="token number">1</span><span class="token punctuation">.</span>按照索引删除单个元素lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token keyword">del</span> lk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token punctuation">.</span>按照切片删除一部分元素lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token keyword">del</span> lk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token number">3</span><span class="token punctuation">.</span>按照切片（步长）删除一部分元素lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">]</span>s <span class="token operator">=</span> lk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 取区域为0-5，步长为2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token string">'cff'</span><span class="token punctuation">]</span><span class="token keyword">del</span> lk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 取区域为0-5，步长为2，这些元素全部删除</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ctr'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'ioo'</span><span class="token punctuation">,</span> <span class="token string">'tyy'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的修改"><a href="#列表的修改" class="headerlink" title="列表的修改"></a>列表的修改</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 利用索引修改</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">]</span>lk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'we'</span>        <span class="token comment" spellcheck="true"># 利用索引定义要修改的元素的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 利用切片修改</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">]</span>lk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'op'</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'tpo'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'cff'</span><span class="token punctuation">,</span> <span class="token string">'ioo'</span><span class="token punctuation">,</span> <span class="token string">'tyy'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 利用切片+步长修改</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">]</span>lk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'op'</span>        <span class="token comment" spellcheck="true"># 注意步长的个数和修改后的字符串个数</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'ctr'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'cff'</span><span class="token punctuation">,</span> <span class="token string">'ioo'</span><span class="token punctuation">,</span> <span class="token string">'tyy'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的查询"><a href="#列表的查询" class="headerlink" title="列表的查询"></a>列表的查询</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 按照索引查询</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印一个</span><span class="token comment" spellcheck="true"># for 循环</span><span class="token keyword">for</span> i <span class="token keyword">in</span> lk<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出列表所有元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的其他操作"><a href="#列表的其他操作" class="headerlink" title="列表的其他操作"></a>列表的其他操作</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算列表元素的总个数</span>lk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mjk'</span><span class="token punctuation">,</span><span class="token string">'ctr'</span><span class="token punctuation">,</span><span class="token string">'tpo'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">,</span><span class="token string">'ioo'</span><span class="token punctuation">,</span><span class="token string">'tyy'</span><span class="token punctuation">,</span><span class="token string">'cff'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">8</span><span class="token comment" spellcheck="true"># 计算某个元素出现的个数</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'cff'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token comment" spellcheck="true"># 通过元素找索引，找到第一个返回，找不到就报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>lk<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'ctr'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 从小到大排列</span>fg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>fg<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 从大到小排列</span>fg<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 列表翻转</span>fg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>fg<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fg<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 英文字符排序，按照元素首字母的ASCLL码的大小排序</span>fg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dfg'</span><span class="token punctuation">,</span><span class="token string">'arfd'</span><span class="token punctuation">,</span><span class="token string">'wer'</span><span class="token punctuation">,</span><span class="token string">'fgv'</span><span class="token punctuation">]</span>fg<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'arfd'</span><span class="token punctuation">,</span> <span class="token string">'dfg'</span><span class="token punctuation">,</span> <span class="token string">'fgv'</span><span class="token punctuation">,</span> <span class="token string">'wer'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a>列表的嵌套</h2><pre class="line-numbers language-python"><code class="language-python">ll <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'taibai'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 列表里面有嵌套的小列表</span><span class="token comment" spellcheck="true"># 将taibai改成大写</span>ll<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> ll<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 往小列表追加元素'老男孩教育'</span>ll<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'老男孩教育'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将alex改成alexsb</span>ll<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ll<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'sb'</span><span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印嵌套列表元素</span>lj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wedi'</span><span class="token punctuation">,</span><span class="token string">'lko'</span><span class="token punctuation">,</span><span class="token string">'cjd'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'dkd'</span><span class="token punctuation">,</span><span class="token string">'oto'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> lj<span class="token punctuation">:</span>    <span class="token keyword">if</span> type<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> list<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 加个判断如果某个元素类型为list，则再循环一遍，打印出来</span>        <span class="token keyword">for</span> o <span class="token keyword">in</span> i<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 否则正常打印</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>用来存放一些重要的信息，放在列表中不安全，需要一个容器类的数据类型，比如：个人信息，密码等。元组不能修改，但是元组里面的列表可以修改。</p><pre class="line-numbers language-python"><code class="language-python">tu <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义一个元组</span>tu<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'12'</span>    <span class="token comment" spellcheck="true"># 往列表里面追加元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>tu<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'12'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 存放一些重要数据时，需要用元组存放</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>列表如果存储大量的数据，查询速度相对较慢，因为列表存储的数据一般没有什么关联性。针对这个问题，Python提供了一个基础数据类型：字典(dict)</p><h2 id="回顾数据类型"><a href="#回顾数据类型" class="headerlink" title="回顾数据类型"></a>回顾数据类型</h2><table><thead><tr><th>分类</th><th>数据类型</th></tr></thead><tbody><tr><td>容器型数据类型</td><td>list，tuple，dict，set</td></tr><tr><td>非容器型数据类型</td><td>str，bool，int</td></tr><tr><td>可变数据类型（不可哈希）</td><td>list，dict，set</td></tr><tr><td>不可变数据类型（可哈希）</td><td>str，bool，int，tuple</td></tr></tbody></table><p>字典是由键值对形式存储的数据类型，字典的键必须是不可变的数据类型，唯一不重复的，字典的值可以是任意数据类型或者对象。基于字典的键是不可变的，字典的键会通过一种哈希算法，将键的值换算成内存地址，所以字典的查询速度非常快。字典在Python3.6之前是无序的，在3.6及以后字典会按照字典创建时的顺序排列。字典可以存储大量关联性数据。</p><h2 id="字典的增加"><a href="#字典的增加" class="headerlink" title="字典的增加"></a>字典的增加</h2><pre class="line-numbers language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 用字典定义三个键值对</span>dic<span class="token punctuation">[</span><span class="token string">'dfgh'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">150</span>   <span class="token comment" spellcheck="true"># 没有则添加这个键值对</span>dic<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">28</span>     <span class="token comment" spellcheck="true"># 有age这个键就将值覆盖为28</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">,</span> <span class="token string">'dfgh'</span><span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">}</span>dic<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'port'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 没有这个键值对就会添加并赋值为空</span>dic<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'yiyi'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 有name这个值则不修改，没有则增加</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">,</span> <span class="token string">'port'</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典的删除"><a href="#字典的删除" class="headerlink" title="字典的删除"></a>字典的删除</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pop 通过键去删除键值对</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>ret <span class="token operator">=</span> dic<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'sex'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 删除一个不存在的键就会报错</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>        ret1 <span class="token operator">=</span> dic<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'name2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 为了程序能执行下去，想要不报错的话，可以添加一个返回值</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>ty <span class="token operator">=</span> dic<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'re'</span><span class="token punctuation">,</span><span class="token string">'没有此键'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ty<span class="token punctuation">)</span>没有此键<span class="token comment" spellcheck="true"># clear 清空</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>dic<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># popitem 删除最后一个键值对，3.5之前是随机删除，3.6删除最后一个键值对</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>lo <span class="token operator">=</span> dic<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 删除整个字典</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span><span class="token keyword">del</span> dic<span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典的修改"><a href="#字典的修改" class="headerlink" title="字典的修改"></a>字典的修改</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 改</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>dic<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">28</span>        <span class="token comment" spellcheck="true">#重新定义age键的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># update 更新</span>dic1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>dic2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'nji'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'18'</span><span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'001'</span><span class="token punctuation">}</span>dic2<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dic1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将dic1字典中的键值对覆盖添加到dic2，dic1不变</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'001'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># update 正常添加</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span>dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span>weight<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span>high<span class="token operator">=</span><span class="token number">175</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#一次添加多个键值对</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">,</span> <span class="token string">'weight'</span><span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token string">'high'</span><span class="token punctuation">:</span> <span class="token number">175</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典的查询"><a href="#字典的查询" class="headerlink" title="字典的查询"></a>字典的查询</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 按键查对应的值，没有此键会报错</span>barrytr <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age1'</span><span class="token punctuation">,</span><span class="token string">'没有此键'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义没有此键时的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span>没有此键<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典的其他操作"><a href="#字典的其他操作" class="headerlink" title="字典的其他操作"></a>字典的其他操作</h2><pre class="line-numbers language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dict_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'barry'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'man'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dict_items<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'barry'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'man'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># for循环得到的是keys值</span><span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>nameagesex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典的嵌套联系"><a href="#字典的嵌套联系" class="headerlink" title="字典的嵌套联系"></a>字典的嵌套联系</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字典的嵌套练习</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'l1'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token string">'太白'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token number">20181225</span><span class="token punctuation">,</span>        <span class="token string">'place'</span><span class="token punctuation">:</span> <span class="token string">'深圳校区'</span><span class="token punctuation">,</span>        <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'python3期'</span><span class="token punctuation">,</span>        <span class="token string">'name_list'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'awq'</span><span class="token punctuation">,</span> <span class="token string">'xx'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 1.给小列表['alex', '太白'] alex后面插入一个字符串，'aaa'</span>dic<span class="token punctuation">[</span><span class="token string">'l1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.将id对应的3变成1</span>dic<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 3.将1对应的字典的data的值变成20181224</span>dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20181224</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.将name_list对应的awq全部变成大写</span>dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name_list'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name_list'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5.将name_list对应的xx删除</span>dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name_list'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将字典数据格式化输出"><a href="#将字典数据格式化输出" class="headerlink" title="将字典数据格式化输出"></a>将字典数据格式化输出</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 格式化输出</span>msg <span class="token operator">=</span> <span class="token string">'我叫%s,我身高%s，年龄%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'ed'</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将字典数据格式化输出</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'barry'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span>mk <span class="token operator">=</span> <span class="token string">'我叫%(name)s,今年%(age)s,性别%(sex)s'</span> <span class="token operator">%</span> dic<span class="token keyword">print</span><span class="token punctuation">(</span>mk<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="返回一个新的字典"><a href="#返回一个新的字典" class="headerlink" title="返回一个新的字典"></a>返回一个新的字典</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 返回一个新的字典，键从可迭代对象里面获取，值不变</span>dic1 <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token string">'top'</span><span class="token punctuation">,</span><span class="token string">'ed'</span><span class="token punctuation">)</span>dic2 <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'lop'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'努力'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">:</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token string">'ed'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'lop'</span><span class="token punctuation">:</span> <span class="token string">'努力'</span><span class="token punctuation">}</span>dicu <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dicu<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 坑:值如果是一个可变的数据类型，那么所有的值都是一个内存地址</span>dicu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dicu<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alex'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 给dicu[1]这个列表赋值000，所有列表的值都是000，因为列表所有的值都指向一个内存地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据类型的补充"><a href="#数据类型的补充" class="headerlink" title="数据类型的补充"></a>数据类型的补充</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 数据类型的补充</span>str <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> list splitlist <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> str join<span class="token number">0</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>false<span class="token comment" spellcheck="true"># 列表和元组的互换</span><span class="token comment" spellcheck="true"># list &lt;---> tuple</span>jk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>yu <span class="token operator">=</span> tuple<span class="token punctuation">(</span>jk<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>yu<span class="token punctuation">)</span>uy <span class="token operator">=</span> list<span class="token punctuation">(</span>yu<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>uy<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dict ---> list</span>dico <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'kasha'</span><span class="token punctuation">,</span><span class="token string">'ui'</span><span class="token punctuation">:</span><span class="token string">'io'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>dico<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'ui'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dict ---> tuple</span>dich <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'yu'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>dich<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 元组中只有一个元素并且没有逗号，则它不是元组，它与元素数据类型相同</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'al'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'al'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'al'</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span class="token number">1</span> al <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将索引为奇数位的元素删除"><a href="#将索引为奇数位的元素删除" class="headerlink" title="将索引为奇数位的元素删除"></a>将索引为奇数位的元素删除</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将索引为奇数位的元素删除,列表是不等长的</span><span class="token comment" spellcheck="true"># 方法一</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token keyword">del</span> li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 1-所有，步长为2</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法二</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">]</span>new_li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># 定义一个空列表</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 循环</span>    <span class="token keyword">if</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 如果能被2整除</span>        new_li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果能整除，就加入到new_li列表里面，这样索引是奇数位的元素就被删除了</span>li <span class="token operator">=</span> new_li<span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法三</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        li<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将字典中键含有k元素的键值对删除"><a href="#将字典中键含有k元素的键值对删除" class="headerlink" title="将字典中键含有k元素的键值对删除"></a>将字典中键含有k元素的键值对删除</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将字典中键含有k元素的键值对删除</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'ko'</span><span class="token punctuation">:</span><span class="token string">'ty'</span><span class="token punctuation">,</span><span class="token string">'df'</span><span class="token punctuation">:</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token string">'13k'</span><span class="token punctuation">:</span><span class="token string">'hu'</span><span class="token punctuation">,</span><span class="token string">'jl'</span><span class="token punctuation">:</span><span class="token string">'lp'</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 循环列表时不能改变字典的大小</span>lo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># 定义一个空的列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> dict<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 将字典循环给i，赋值时是只将key赋值</span>    <span class="token keyword">if</span> <span class="token string">'k'</span> <span class="token keyword">in</span> i<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果k存在于i中</span>       lo<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 则把这些有k元素的键值对添加到lo这个空字典</span><span class="token keyword">for</span> y <span class="token keyword">in</span> lo<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将lo字典循环给y</span>    dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>y<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 通过键去删除键值对</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中</span>s1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>y <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s1<span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token number">1</span> H<span class="token number">2</span> e<span class="token number">3</span> l<span class="token number">4</span> l<span class="token number">5</span> os2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"top"</span><span class="token punctuation">,</span><span class="token string">"jun"</span><span class="token punctuation">,</span><span class="token string">"mid"</span><span class="token punctuation">,</span><span class="token string">"adc"</span><span class="token punctuation">,</span><span class="token string">"sup"</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s2<span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token number">1</span> top<span class="token number">2</span> jun<span class="token number">3</span> mid<span class="token number">4</span> adc<span class="token number">5</span> su<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合创建"><a href="#集合创建" class="headerlink" title="集合创建"></a>集合创建</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 集合的创建</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"er"</span><span class="token punctuation">,</span><span class="token string">"mk"</span><span class="token punctuation">,</span><span class="token string">"lk"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>set2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'lk'</span><span class="token punctuation">,</span><span class="token string">'oi'</span><span class="token punctuation">,</span><span class="token string">"er"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 不一定要{}或者(),只要是迭代对象就行</span><span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合的无序特点"><a href="#集合的无序特点" class="headerlink" title="集合的无序特点"></a>集合的无序特点</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 集合是无序的</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"rng"</span><span class="token punctuation">,</span><span class="token string">"skt"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">}</span>set1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"fpx"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'rng'</span><span class="token punctuation">,</span> <span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'skt'</span><span class="token punctuation">,</span> <span class="token string">'fpx'</span><span class="token punctuation">,</span> <span class="token string">'we'</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#增加一个元素，不会按照顺序添加，每一次执行代码，顺序都会改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合的迭代增加"><a href="#集合的迭代增加" class="headerlink" title="集合的迭代增加"></a>集合的迭代增加</h2><pre class="line-numbers language-python"><code class="language-python">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"rng"</span><span class="token punctuation">,</span><span class="token string">"skt"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">}</span>set1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">"fpx"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#迭代增加会把整个字符串拆分为多个字符进行增加</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'skt'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'rng'</span><span class="token punctuation">,</span> <span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'we'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合的删除"><a href="#集合的删除" class="headerlink" title="集合的删除"></a>集合的删除</h2><pre class="line-numbers language-python"><code class="language-python">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"rng"</span><span class="token punctuation">,</span><span class="token string">"skt"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">}</span>set1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"skt"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 指定删除元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'we'</span><span class="token punctuation">,</span> <span class="token string">'rng'</span><span class="token punctuation">}</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"rng"</span><span class="token punctuation">,</span><span class="token string">"skt"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">}</span>set1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 随机删除一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"rng"</span><span class="token punctuation">,</span><span class="token string">"skt"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">}</span>set1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 清空集合</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合的元素是不可变类型"><a href="#集合的元素是不可变类型" class="headerlink" title="集合的元素是不可变类型"></a>集合的元素是不可变类型</h2><pre class="line-numbers language-python"><code class="language-python">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"gb"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"rf"</span><span class="token punctuation">,</span><span class="token string">"gb"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 集合里面存在列表元素，执行会报错</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"we"</span><span class="token punctuation">,</span><span class="token string">"gb"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"vf"</span><span class="token punctuation">,</span><span class="token string">"jin"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 集合里面存在元组元素可以执行，因为元组是不可变类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面试必考"><a href="#面试必考" class="headerlink" title="面试必考"></a>面试必考</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 面试必考</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将list1和list2的元素集合起来并去重</span>new_list <span class="token operator">=</span> list1 <span class="token operator">+</span> list2<span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span>new_set <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>new_list<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#将new_list转换为集合，再转换为list</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_set<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="电影投票"><a href="#电影投票" class="headerlink" title="电影投票"></a>电影投票</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 电影投票:程序先给出几个目前正在上映的电影列表. 由用户给每个电影投票.</span><span class="token comment" spellcheck="true"># 最终将该用户投票信息公布出来 lst = ['北京遇上西雅图', '解救吴先生', '美国往事', '西西里的美丽传说']</span>lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'北京遇上西雅图'</span><span class="token punctuation">,</span> <span class="token string">'解救吴先生'</span><span class="token punctuation">,</span> <span class="token string">'美国往事'</span><span class="token punctuation">,</span> <span class="token string">'西西里的美丽传说'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(lst)</span>dic <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>lst<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#定义一个字典，key来自lst列表，值是0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> num<span class="token punctuation">,</span>name <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>lst<span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#定义电影序号和电影来自lst列表</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}\t{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#列出电影序号和电影</span>    name_num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入你喜欢的电影序号，或者q/Q退出:'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#记录用户所喜欢的电影序号</span>    <span class="token keyword">if</span> name_num<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#如果用户输入的是数字则进入，否则输出206行的：你输入有误，请重新输入</span>        name_num <span class="token operator">=</span> int<span class="token punctuation">(</span>name_num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用户输入的必须是整数</span>        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> name_num <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#控制用户输入数字的范围必须是比0大，比列表总长度小</span>            dic<span class="token punctuation">[</span>lst<span class="token punctuation">[</span>name_num<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>   <span class="token comment" spellcheck="true">#将用户输入的值记录到dic空字典，lst[name_num-1] == dic字典的第一元素，是0</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已成功为%s投票'</span> <span class="token operator">%</span><span class="token punctuation">(</span>lst<span class="token punctuation">[</span>name_num<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提示用户投票成功</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有该序号的电影，请重新输入"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#如果输入的范围不对，提示没有这个序号的电影</span>    <span class="token keyword">elif</span> name_num<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#如果用户输入q就退出</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你输入有误，请重新输入"</span><span class="token punctuation">)</span><span class="token keyword">for</span> movie_name<span class="token punctuation">,</span>total_num <span class="token keyword">in</span> dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#以列表返回可遍历的键值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s电影的总得票数%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>movie_name<span class="token punctuation">,</span>total_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day02</title>
    <link href="https://www.missf.top/post/34c92de1.html"/>
    <id>https://www.missf.top/post/34c92de1.html</id>
    <published>2020-04-24T04:14:29.000Z</published>
    <updated>2020-06-02T07:51:22.008Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 格式化输出</span>name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span>job <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入职业："</span><span class="token punctuation">)</span>hobby <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入爱好"</span><span class="token punctuation">)</span>msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""------ info of %s ------Name    : %sAge     : %sjob     : %sHobbie  : %s------ end ------"""</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>job<span class="token punctuation">,</span>hobby<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 坑:单个%号默认被当成一个占位符，如果想单纯的表示%号，请使用%%</span>msg <span class="token operator">=</span> <span class="token string">'我叫%s,今年%s岁,python入门1%%.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'荒原饮露'</span><span class="token punctuation">,</span><span class="token string">'23'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c = a + b 将 a + b 的运算结果赋值给c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c *<em>= a 等效于 c = c *</em> a</td></tr><tr><td>//=</td><td>取整赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr><tr><td>and</td><td>“与”，如果 x 为False，x and y 返回False，否则返回y的计算值</td><td>两边为True才为True</td></tr><tr><td>or</td><td>“或”， 如果 x 为True，返回True，否则它返回y的计算值</td><td>一边为True则为True</td></tr><tr><td>not</td><td>“非”， 如果 x 为True，返回False，如果 x 为False，返回True</td><td>True则False，反之</td></tr></tbody></table><h1 id="逻辑运算符的优先级"><a href="#逻辑运算符的优先级" class="headerlink" title="逻辑运算符的优先级"></a>逻辑运算符的优先级</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">not</span> <span class="token operator">></span> <span class="token operator">and</span> <span class="token operator">></span> <span class="token operator">or</span><span class="token operator">and</span>     两个条件必须同时成立才为<span class="token boolean">True</span><span class="token operator">or</span>         两个条件有一个成立则为<span class="token boolean">True</span><span class="token operator">not</span>     条件为<span class="token boolean">True</span>则结果为<span class="token boolean">False</span>，条件为<span class="token boolean">False</span>则结果为<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符的不等式计算"><a href="#运算符的不等式计算" class="headerlink" title="运算符的不等式计算"></a>运算符的不等式计算</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span>两边式子同时成立，才会为<span class="token boolean">True</span>，否则为<span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">or</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">and</span> <span class="token number">6</span> <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span>先计算<span class="token operator">and</span>，式子为<span class="token boolean">False</span> <span class="token operator">or</span> <span class="token boolean">True</span>，结果则为<span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">and</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">or</span> <span class="token number">4</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">and</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">or</span> <span class="token number">9</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span>先计算<span class="token operator">and</span>，式子为<span class="token boolean">False</span> <span class="token operator">or</span> <span class="token boolean">False</span> <span class="token operator">or</span> <span class="token boolean">False</span>，结果为<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符数字计算"><a href="#运算符数字计算" class="headerlink" title="运算符数字计算"></a>运算符数字计算</h2><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">or</span> y     <span class="token comment" spellcheck="true"># if x is True，return x else return y.如果x为True则返回X，否则返回y</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">or</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">or</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">or</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token comment" spellcheck="true"># x and y和x or y是相反的</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">and</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span> <span class="token operator">and</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">2</span> <span class="token operator">or</span> <span class="token number">3</span> <span class="token operator">and</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">or</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编码初识"><a href="#编码初识" class="headerlink" title="编码初识"></a>编码初识</h1><p>ASCII</p><pre class="line-numbers language-python"><code class="language-python">ASCII<span class="token punctuation">:</span>早期的密码本，只包含英文字母，数字，特殊字符与<span class="token number">01</span>的对应关系采用 <span class="token number">8</span>位比特（bit） <span class="token operator">==</span> 1byte（字节）在ascll编码中 <span class="token number">8</span>位比特表示一个字节表示一个字符h e l l o  <span class="token operator">=</span>  <span class="token number">01101000</span> <span class="token number">01100101</span> <span class="token number">01100111</span> <span class="token number">0110011</span> <span class="token number">01100101</span>缺点<span class="token punctuation">:</span>只为英文使用者考虑，不能处理中文和其他国家的文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GBK</p><pre class="line-numbers language-python"><code class="language-python">由于ASCII编码，于是每个国家都提出了不同的编码来适应自己的语言GBK 只包含本国文字（以及英文字母，数字，特殊字符）与<span class="token number">01</span>对应关系GBK是采用单双字节变长编码，英文使用单字节编码，完全兼容ASCII字符编码，中文部分采用双字节编码a 太 白 <span class="token operator">=</span> <span class="token number">01101000</span> <span class="token number">01100101</span> <span class="token number">01100111</span> <span class="token number">0110011</span> <span class="token number">01100101</span>    <span class="token comment" spellcheck="true"># 1个英文占1个字节，1个中文字符占2个字节，共5字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>UNICODE</p><pre class="line-numbers language-python"><code class="language-python">由于ASCII编码的局限性，unicode应运而生unicode<span class="token punctuation">:</span>万国码，将全世界所有的文字都统一到一套编码里面采用<span class="token number">32</span>位比特<span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token operator">==</span> 4byte在unicode编码中 <span class="token number">32</span>位比特表示<span class="token number">4</span>个字节表示一个字符a：<span class="token number">00000000</span> <span class="token number">00010010</span> <span class="token number">00000000</span> <span class="token number">00010010</span>中：<span class="token number">00000000</span> <span class="token number">10010010</span> <span class="token number">00000000</span> <span class="token number">10010010</span>缺点<span class="token punctuation">:</span>如果使用unicode编码来存储英文，这会大量浪费空间，因为我们知道一个英文字符只占一个字节，而另外三个字节就浪费掉了，这样在存储和传输上非常不划算<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UTF-8</p><pre class="line-numbers language-python"><code class="language-python">utf<span class="token number">-8</span><span class="token punctuation">:</span>包含全世界所有的文字与二进制<span class="token number">01</span>的对应关系<span class="token punctuation">,</span>最少用<span class="token number">8</span>位表示一个字符utf<span class="token number">-8</span>是一种针对Unicode的可变长度字符编码<span class="token punctuation">,</span>是对Unicode编码的压缩和优化，将所有的字符和符号进行分类英文<span class="token punctuation">:</span> <span class="token number">00000010</span> <span class="token number">8</span>位表示一个字节表示一个字符欧洲文字<span class="token punctuation">:</span> <span class="token number">00000010</span> <span class="token number">00100000</span>    <span class="token number">16</span>位表示两个字节表示一个字符中国<span class="token punctuation">(</span>亚洲<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">00000010</span> <span class="token number">00000010</span> <span class="token number">00000010</span> <span class="token number">24</span>位表示三个字节表示一个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子</p><pre class="line-numbers language-python"><code class="language-python"><span class="token string">'old男孩'</span>GBK<span class="token punctuation">:</span><span class="token number">7</span>个字节utf<span class="token number">-8</span><span class="token punctuation">:</span><span class="token number">9</span>个字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="十进制转换为二进制"><a href="#十进制转换为二进制" class="headerlink" title="十进制转换为二进制"></a>十进制转换为二进制</h1><p>关键要点:除二取余，倒序排列，高位补零。</p><p>将十进制数42不断除以2，得到的余数非别是:010101，然后倒序排列，42所对应的二进制就是101010，然后高位补零就是:00101010</p><p>负整数转换为二进制，以-42为例，先得到42的二进制，然后取反(0变1，1变0)再加一，就是11010101 + 1，结果为11010110</p><h1 id="二进制转换成十进制"><a href="#二进制转换成十进制" class="headerlink" title="二进制转换成十进制"></a>二进制转换成十进制</h1><table><thead><tr><th>1</th><th>0</th><th>0</th><th>1</th><th>0</th><th>1</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>1 * 2^7</td><td>0 * 2^6</td><td>0 * 2^5</td><td>1 * 2^4</td><td>0 * 2^3</td><td>1 * 2^2</td><td>1 * 2^1</td><td>0 * 2^0</td></tr></tbody></table><p>将这些数相加，得到的就是10010110这个二进制数的十进制数</p><p>128 + 0 + 0 + 16 + 0 + 4 + 2 + 0 = 150</p><h1 id="数据类型之间的转换"><a href="#数据类型之间的转换" class="headerlink" title="数据类型之间的转换"></a>数据类型之间的转换</h1><pre class="line-numbers language-python"><code class="language-python">int（整数）         <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> bool（布尔值）非零即<span class="token boolean">True</span>bool（布尔值）     <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> int（整数）<span class="token boolean">True</span> <span class="token number">1</span> <span class="token boolean">False</span> <span class="token number">0</span>str（字符串）     <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> bool（布尔值）非空即<span class="token boolean">True</span>str（字符串）    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> int（整数）str（<span class="token number">13</span>   ）转换为整数，会强制去掉空格变成int（<span class="token number">13</span>）bool（布尔值）     <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> str（字符串）还是<span class="token boolean">True</span>，但是str类型的<span class="token boolean">True</span>，失去<span class="token boolean">True</span>的意义y <span class="token operator">=</span> <span class="token boolean">True</span>u <span class="token operator">=</span> str<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>type<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>    <span class="token comment" spellcheck="true"># 由于是str数据类型的True，下面的3 + u会报错，如果是bool数据类型的True可以与数字相加</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串的切片"><a href="#字符串的切片" class="headerlink" title="字符串的切片"></a>字符串的切片</h1><h2 id="字符串索引示意图"><a href="#字符串索引示意图" class="headerlink" title="字符串索引示意图"></a>字符串索引示意图</h2><p>请记住切片原则:<code>顾首不顾尾</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic.imgdb.cn/item/5ea14b57c2a9a83be5caa515.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="按照索引取值"><a href="#按照索引取值" class="headerlink" title="按照索引取值"></a>按照索引取值</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'python骑士计划第三期'</span>        s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>s2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># p</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 期</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="按照切片取值"><a href="#按照切片取值" class="headerlink" title="按照切片取值"></a>按照切片取值</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'python骑士计划第三期'</span>        <span class="token comment" spellcheck="true"># 照切片取值，顾首不顾尾，s5 = s[6:-3] 6就是第六个字符以后，-3就是倒数第三个字符以前</span>s3 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 是从零开始数。取整个字符串可以写成s3 = s[:6],取整个字符串是s3 = s[:]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># python</span>s4 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 相当于s[0:6]，0可以不写，默认从零开始</span><span class="token keyword">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># python</span>s5 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 骑士计划</span>s6 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 骑士计划</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切片加步长取值"><a href="#切片加步长取值" class="headerlink" title="切片加步长取值"></a>切片加步长取值</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 步长就是每一步的长度，取pto字符串，要先划分区域，再定义隔几个字符去取</span>s <span class="token operator">=</span> <span class="token string">'python骑士计划第三期'</span>s7 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 划分区域为 0-6（区域为:python，从首个字符串开始取），步长为2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s7<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># pto</span>s8 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 划分区域为 7-最后（区域为:士计划第三期，从第七个字符之后开始取），步长为2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s8<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 士划三</span>s9 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 倒叙取值要加上反向步长</span><span class="token keyword">print</span><span class="token punctuation">(</span>s9<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 期三第</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 后面是-1所以是反向取值，区域定义为 0-5（python），但是区域也是反向的，所以是从期到n的区域里面取</span>骑士计划第三期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h1><h2 id="capitalize-首字母大写"><a href="#capitalize-首字母大写" class="headerlink" title="capitalize() 首字母大写"></a>capitalize() 首字母大写</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'faker'</span>s1 <span class="token operator">=</span> s<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># faker</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Faker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="center-将字符串居中"><a href="#center-将字符串居中" class="headerlink" title="center() 将字符串居中"></a>center() 将字符串居中</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'missf.top'</span>s1 <span class="token operator">=</span> s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>                    missf<span class="token punctuation">.</span>top                         <span class="token comment" spellcheck="true"># 设置50的长度并把字符串居中</span>s2 <span class="token operator">=</span> s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>missf<span class="token punctuation">.</span>top<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>    <span class="token comment" spellcheck="true"># 设置50的长度定义填充物并把字符串居中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="swapcase-大小写翻转"><a href="#swapcase-大小写翻转" class="headerlink" title="swapcase() 大小写翻转"></a>swapcase() 大小写翻转</h2><pre class="line-numbers language-python"><code class="language-python">sr <span class="token operator">=</span> <span class="token string">'KubeRnEteS'</span><span class="token keyword">print</span><span class="token punctuation">(</span>sr<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kUBErNeTEs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="title-非字母隔开单词的首字母大写"><a href="#title-非字母隔开单词的首字母大写" class="headerlink" title="title() 非字母隔开单词的首字母大写"></a>title() 非字母隔开单词的首字母大写</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'tpshow9nohup@mid'</span>        <span class="token comment" spellcheck="true"># 注意：第一个字母也会变成大写</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Tpshow9Nohup@Mid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="upper-不区分大小写"><a href="#upper-不区分大小写" class="headerlink" title="upper() 不区分大小写"></a>upper() 不区分大小写</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用途:验证码不区分大小写</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入姓名:"</span><span class="token punctuation">)</span>passworrd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码:"</span><span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token string">'AeTrd'</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>your_code <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入验证码:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> your_code <span class="token operator">==</span> code<span class="token punctuation">:</span>    <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'alex'</span> <span class="token operator">and</span> passworrd <span class="token operator">==</span> <span class="token string">'sb'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名或者密码错误'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'验证码不正确'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="startswich-endswith-判断以什么为开头和结尾"><a href="#startswich-endswith-判断以什么为开头和结尾" class="headerlink" title="startswich() endswith() 判断以什么为开头和结尾"></a>startswich() endswith() 判断以什么为开头和结尾</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'mowenjieadcarry'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 字符串不是以o开头，结果为False</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'mo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span>    <span class="token comment" spellcheck="true"># 字符串以mo开头，结果为True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 切割五个字符之后是否是j开头，结果为True</span><span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'ry'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断以什么为结尾</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="find-index-通过元素找索引"><a href="#find-index-通过元素找索引" class="headerlink" title="find() index() 通过元素找索引"></a>find() index() 通过元素找索引</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'mowenjieadcarry'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">8</span>    <span class="token comment" spellcheck="true"># 返回a元素前面的索引数</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">11</span>    <span class="token comment" spellcheck="true"># 从第九个字符后面开始找，找到的是第二个a</span><span class="token comment" spellcheck="true"># find和index功能几乎一样，区别只有find找不到会返回-1,index会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="strip-默认去除字符串前后的空格-换行符-制表符"><a href="#strip-默认去除字符串前后的空格-换行符-制表符" class="headerlink" title="strip() 默认去除字符串前后的空格/换行符/制表符"></a>strip() 默认去除字符串前后的空格/换行符/制表符</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># strip()    默认去除字符串前后两端的空格，换行符，制表符</span>s <span class="token operator">=</span> <span class="token string">'\n barry \t \n'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># barry</span><span class="token comment" spellcheck="true"># strip 去除字符串两边的字符</span>s <span class="token operator">=</span> <span class="token string">'kkohuang yuan yin lure'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'kore'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 会把kore切割成最小单位，从前后两边逐个去除</span>huang yuan yin lu<span class="token comment" spellcheck="true"># lstrip 只从前面去除</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'k'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ohuang yuan yin lure<span class="token comment" spellcheck="true"># rstrip() 只从后面去除</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'re'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kkohuang yuan yin lu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="split-将字符串转化为列表"><a href="#split-将字符串转化为列表" class="headerlink" title="split() 将字符串转化为列表"></a>split() 将字符串转化为列表</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'kkohuang yuan yin lure'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 默认以空格分割元素</span><span class="token punctuation">[</span><span class="token string">'kkohuang'</span><span class="token punctuation">,</span> <span class="token string">'yuan'</span><span class="token punctuation">,</span> <span class="token string">'yin'</span><span class="token punctuation">,</span> <span class="token string">'lure'</span><span class="token punctuation">]</span>t <span class="token operator">=</span> <span class="token string">'top:mid:adc'</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 指定以冒号进行分割</span><span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'mid'</span><span class="token punctuation">,</span> <span class="token string">'adc'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 指定以冒号进行分割,分割一次</span><span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'mid:adc'</span><span class="token punctuation">]</span>t <span class="token operator">=</span> <span class="token string">':mid:adc'</span>    <span class="token comment" spellcheck="true"># 只有两个分割符，但是转换成列表之后参数个数是n+1</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'mid'</span><span class="token punctuation">,</span> <span class="token string">'adc'</span><span class="token punctuation">]</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="join-列表转化为字符串"><a href="#join-列表转化为字符串" class="headerlink" title="join() 列表转化为字符串"></a>join() 列表转化为字符串</h2><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token string">':mid:adc'</span>s9 <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将每个字符通过指定的连接符连接在一起</span><span class="token keyword">print</span><span class="token punctuation">(</span>s9<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span>m<span class="token operator">-</span>i<span class="token operator">-</span>d<span class="token operator">-</span><span class="token punctuation">:</span><span class="token operator">-</span>a<span class="token operator">-</span>d<span class="token operator">-</span>c    t1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'liz'</span><span class="token punctuation">,</span><span class="token string">'zsd'</span><span class="token punctuation">,</span><span class="token string">'awa'</span><span class="token punctuation">]</span>s10 <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 以空格为分隔符</span><span class="token keyword">print</span><span class="token punctuation">(</span>s10<span class="token punctuation">)</span>liz zsd awa            <span class="token comment" spellcheck="true"># 将列表的多个元素转换回字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="replace-字符串替换"><a href="#replace-字符串替换" class="headerlink" title="replace() 字符串替换"></a>replace() 字符串替换</h2><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token string">'faker是世界第一中单，faker也是一个屌丝，faker'</span>s11 <span class="token operator">=</span> t<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'faker'</span><span class="token punctuation">,</span><span class="token string">'55开'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 可以指定替换的次数，不指定次数则全部替换</span><span class="token keyword">print</span><span class="token punctuation">(</span>s11<span class="token punctuation">)</span><span class="token number">55</span>开是世界第一中单，<span class="token number">55</span>开也是一个屌丝，faker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="format-格式化输出"><a href="#format-格式化输出" class="headerlink" title="format() 格式化输出"></a>format() 格式化输出</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一种</span>s <span class="token operator">=</span> <span class="token string">'我叫{}，我玩{}，我主玩的位置是{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'bang'</span><span class="token punctuation">,</span><span class="token string">'英雄联盟'</span><span class="token punctuation">,</span><span class="token string">'adc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我叫bang，我玩英雄联盟，我主玩的位置是adc</span><span class="token comment" spellcheck="true"># 第二种</span>s <span class="token operator">=</span> <span class="token string">'我叫{0}，今年{1}，性别{2}，我依然叫{0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'20'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我叫小明，今年20，性别女，我依然叫小明</span><span class="token comment" spellcheck="true"># 第三种</span>s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""我叫{name}，今年{age}，性别{sex}，我依然叫{name}"""</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'小明'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我叫小明，今年20，性别女，我依然叫小明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="is-判断字符串和数字组成"><a href="#is-判断字符串和数字组成" class="headerlink" title="is 判断字符串和数字组成"></a>is 判断字符串和数字组成</h2><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span><span class="token string">'huanyuan135'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 判断字符串由字母或数字组成</span><span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 判断字符串只由字母组成</span><span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 判断字符串只由数字组成</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="count-计算字符串中某个字符出现的次数"><a href="#count-计算字符串中某个字符出现的次数" class="headerlink" title="count 计算字符串中某个字符出现的次数"></a>count 计算字符串中某个字符出现的次数</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'cdcdcdcdcdjvnjfnvjfn:jsvnsvpojwpd'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算这个字符串f字符出现的次数</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 切片，顾首不顾尾，从零开始到第八个字符的前面截断</span><span class="token number">4</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 从零开始数，第八个字符到结束</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="len-统计字符串长度"><a href="#len-统计字符串长度" class="headerlink" title="len 统计字符串长度"></a>len 统计字符串长度</h2><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'cdcdcdcdcdjvnjfnvjfn:jsvnsvpojwpd'</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 内置函数</span><span class="token number">33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础day01</title>
    <link href="https://www.missf.top/post/adc07c5b.html"/>
    <id>https://www.missf.top/post/adc07c5b.html</id>
    <published>2020-04-23T04:14:29.000Z</published>
    <updated>2020-06-02T07:51:22.005Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>我曾踏足山巅，也曾进入低谷，二者都让我受益良多。</strong></p><p>​                                                                                                                                                                      <strong>——塔里克</strong></p></blockquote><h1 id="Python发展史"><a href="#Python发展史" class="headerlink" title="Python发展史"></a>Python发展史</h1><ul><li>创始人:Guido，国人叫龟叔，在1989年的圣诞节写出来的</li><li>2005 - 2012，龟叔去了谷歌工作，谷歌大量使用Python</li><li>2005年国内第一家使用Python的公司—豆瓣</li><li>2012年国内兴起云计算的热潮，Python借助OpenStack又火了一把</li><li>2014年AI兴起，大量的公司使用Python去写算法</li><li>直到2017年Python才真正进入大众的视野</li></ul><h1 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h1><ul><li>WEB开发:最火的Python web框架Django，还有支持异步高并发的Tornado，短小精悍的flask</li><li>网络编程:支持高并发的Twisted网络框架</li><li>爬虫:Python在爬虫领域几乎是霸主地位，具有非常多的爬虫模块支持</li><li>云计算:著名的云计算框架OpenStack就是用Python写的</li><li>人工智能和数据分析:Python是目前人工智能和数据分析领域公认的必备语言</li><li>自动化运维:在Linux运维领域，Python能做很多事情，特别是处理数据的能力非常出色</li><li>游戏开发:Python能做游戏开发，但是使用Python开发游戏的公司可能没有这么多</li></ul><h1 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h1><p>核心:通过编译器将人类写出来的代码一次性全部编译成机器语言让计算机可以识别和执行</p><p>代表语言：c，c++，golang，java</p><p>优点:执行效率高</p><p>缺点:开发效率低，不可以跨平台</p><p>一般多用于研究所、研究院，对执行效率要求高，大数据的计算、底层的开发</p><h1 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h1><p>核心:解释器逐行解释代码，再逐行执行（python是解释器，java中叫虚拟机）</p><p>代表语言:Python，php，Java，ruby</p><p>优点:开发效率高，可以跨平台，可移植性强</p><p>缺点:执行效率相对编译型语言慢</p><h1 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h1><p>优点</p><ol><li>Python是一门高级语言，不用关心底层内存指针等等</li><li>由于Python开源的本质，Python已经被移植到许多平台，具备非常高的可移植性</li><li>Python可以嵌入c语言的代码，c语言也可以嵌入Python的代码，具备可嵌入性</li><li>大量现有的第三方库和模块的支持，使得开发效率大大提高</li></ol><p>缺点</p><ol><li>执行速度比编译型语言慢，如果运行Python花了0.1s，同样的代码c语言花了0.01秒，这样c就比Python快了十倍</li><li>Python源码是以明文形式存放的，如果项目要求源代码必须是加密的，一开始就不应该选择Python</li><li>线程不能利用多核CPU的问题，这也是Python被人诟病最多的一个缺点</li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>官方解释:将程序中一些中间结果暂时存到内存中，供后面程序调用</p><h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><ul><li>变量必须由数字，字母，下划线任意组合</li><li>不能是数字开头</li><li>不能使用Python中的关键字（具体关键字后面再介绍）</li><li>变量要具有描述性</li><li>变量不能过长</li><li>变量不能使用中文</li><li>尽量使用驼峰体</li></ul><h2 id="定义Python变量"><a href="#定义Python变量" class="headerlink" title="定义Python变量"></a>定义Python变量</h2><pre class="line-numbers language-python"><code class="language-python">age1 <span class="token operator">=</span> <span class="token number">12</span>age2 <span class="token operator">=</span> age1age3 <span class="token operator">=</span> age2age2 <span class="token operator">=</span> <span class="token number">24</span><span class="token keyword">print</span> <span class="token punctuation">(</span>age1<span class="token punctuation">,</span>age2<span class="token punctuation">,</span>age3<span class="token punctuation">)</span><span class="token number">12</span> <span class="token number">24</span> <span class="token number">12</span><span class="token comment" spellcheck="true"># 注意：程序中会大量的出现和使用变量，变量中会暂存一些少量的数据，给其他变量代指</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Python常量"><a href="#Python常量" class="headerlink" title="Python常量"></a>Python常量</h1><p>常量，用于定义不变的值。例如:身份证号，圆周率，历史记载，新中国成立时间:1949101</p><h2 id="使用常量"><a href="#使用常量" class="headerlink" title="使用常量"></a>使用常量</h2><p>Python中的常量可以改变（不像c改变常量会报错），但约定俗成Python中将变量全部变成大写，就是表示常量，将一些不想让别人改变的量设置成常量，放在文件最上面</p><h1 id="Python注释"><a href="#Python注释" class="headerlink" title="Python注释"></a>Python注释</h1><p>对某一段代码做解释说明，一般是精简的代码，别人可能看不懂，需要做简单的解释</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#好好学习，天天向上</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''被注释的内容'''</span><span class="token triple-quoted-string string">"""被注释的内容"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基础数据类型初识"><a href="#基础数据类型初识" class="headerlink" title="基础数据类型初识"></a>基础数据类型初识</h1><h2 id="int-整型"><a href="#int-整型" class="headerlink" title="int 整型"></a>int 整型</h2><pre class="line-numbers language-python"><code class="language-python">i1 <span class="token operator">=</span> <span class="token number">10</span>i2 <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span> <span class="token punctuation">(</span>i1 <span class="token operator">*</span> i2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="str-字符串"><a href="#str-字符串" class="headerlink" title="str 字符串"></a>str 字符串</h2><pre class="line-numbers language-python"><code class="language-python">python中凡是用引号引起来的内容就是字符串数据类型ret1 <span class="token operator">=</span> <span class="token string">'荒原饮露'</span>ret2 <span class="token operator">=</span> <span class="token string">"荒原饮露"</span>ret3 <span class="token operator">=</span> <span class="token triple-quoted-string string">"""荒原饮露"""</span>ret4 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''荒原饮露'''</span><span class="token keyword">print</span> <span class="token punctuation">(</span>ret1<span class="token punctuation">,</span>ret2<span class="token punctuation">,</span>ret3<span class="token punctuation">,</span>ret4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bool-布尔值"><a href="#bool-布尔值" class="headerlink" title="bool 布尔值"></a>bool 布尔值</h2><pre class="line-numbers language-python"><code class="language-python">true     <span class="token comment" spellcheck="true"># 真</span>false    <span class="token comment" spellcheck="true"># 假</span>用于判断条件，逻辑语句真假<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="单双引号搭配使用"><a href="#单双引号搭配使用" class="headerlink" title="单双引号搭配使用"></a>单双引号搭配使用</h2><pre class="line-numbers language-python"><code class="language-python">msg <span class="token operator">=</span> <span class="token string">"I' m huangyuanyinlu,18 year"</span><span class="token keyword">print</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># I' m huangyuanyinlu,18 year</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="字符串相加相乘"><a href="#字符串相加相乘" class="headerlink" title="字符串相加相乘"></a>字符串相加相乘</h2><pre class="line-numbers language-python"><code class="language-python">a1 <span class="token operator">=</span> <span class="token string">'Alex'</span>a2 <span class="token operator">=</span> <span class="token string">'sb'</span><span class="token keyword">print</span> <span class="token punctuation">(</span>a1 <span class="token operator">+</span> a2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Alexsb</span><span class="token keyword">print</span> <span class="token punctuation">(</span>a1 <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># AlexAlexAlexAlexAlexAlexAlexAlexAlexAlex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="input-用户交互"><a href="#input-用户交互" class="headerlink" title="input 用户交互"></a>input 用户交互</h1><p>让用户输入用户名密码，得到用户输入的数据，起到了人与程序的交互作用</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的名字："</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的年龄："</span><span class="token punctuation">)</span>sex <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的性别："</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里注意一点:凡是input得到的值，都是字符串数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将用户输入的变量进行拼接"><a href="#将用户输入的变量进行拼接" class="headerlink" title="将用户输入的变量进行拼接"></a>将用户输入的变量进行拼接</h2><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的名字："</span><span class="token punctuation">)</span>age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的年龄："</span><span class="token punctuation">)</span>sex <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的性别："</span><span class="token punctuation">)</span>msg <span class="token operator">=</span> <span class="token string">'我的姓名是'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token string">'我的年龄是'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token string">'我的性别是'</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'.'</span><span class="token keyword">print</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 我的姓名是荒原饮露,我的年龄是23,我的性别是男</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="if-流程控制语句"><a href="#if-流程控制语句" class="headerlink" title="if 流程控制语句"></a>if 流程控制语句</h1><h2 id="if-单分支"><a href="#if-单分支" class="headerlink" title="if 单分支"></a>if 单分支</h2><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> input <span class="token punctuation">(</span><span class="token string">"请输入年龄:"</span><span class="token punctuation">)</span>age <span class="token operator">=</span> int<span class="token punctuation">(</span>age<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Python3x之后，input得到的数据都是字符串类型</span><span class="token keyword">print</span> <span class="token punctuation">(</span>age<span class="token punctuation">,</span>type<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输出变量的数据类型</span><span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你已经不是10岁的小孩了'</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="if-多分支"><a href="#if-多分支" class="headerlink" title="if 多分支"></a>if 多分支</h2><pre class="line-numbers language-python"><code class="language-python">jineng <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入你的技能:'</span><span class="token punctuation">)</span><span class="token keyword">if</span> jineng <span class="token operator">==</span> <span class="token string">'三分球'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以参加三分球大赛'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> jineng <span class="token operator">==</span> <span class="token string">'中投'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以参加中距离投篮'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> jineng <span class="token operator">==</span> <span class="token string">'突破'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'可以参加1V1对抗赛'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'买票进场吧'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 登陆示例</span>username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入用户名：'</span><span class="token punctuation">)</span>password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入密码：'</span><span class="token punctuation">)</span><span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'荒原饮露'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">'123'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码错误'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名不存在'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 买票示例</span>has_ticket <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入车票号码:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>knife_length <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入刀的长度:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> has_ticket <span class="token operator">==</span> <span class="token number">23</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'车票检查通过，准备开始安检'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> knife_length <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刀不超过20厘米，允许上车'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刀超过20厘米，不允许上车'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有车票"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h1><h2 id="单次循环"><a href="#单次循环" class="headerlink" title="单次循环"></a>单次循环</h2><pre class="line-numbers language-python"><code class="language-python">flag <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> flag<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'麦迪'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'科比'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'杜兰特'</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'詹姆斯'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># flag = False后面的依然会输出，因为运行到最后才会重新回到while</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打印1到100"><a href="#打印1到100" class="headerlink" title="打印1到100"></a>打印1到100</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一</span>count <span class="token operator">=</span> <span class="token number">1</span>flag <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> flag<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 方法二</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 不要见方法二代码少就不去理解方法一，因为方法一包含flag = True的编程思想</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算1加到100"><a href="#计算1加到100" class="headerlink" title="计算1加到100"></a>计算1加到100</h2><pre class="line-numbers language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">1</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;=</span> <span class="token number">101</span><span class="token punctuation">:</span>   sum <span class="token operator">=</span> sum <span class="token operator">+</span> count   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>   <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># break是直接终止循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h1><pre class="line-numbers language-python"><code class="language-python">打印<span class="token number">1</span>到<span class="token number">10</span>，但是跳过<span class="token number">7</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token comment" spellcheck="true"># continue是跳出本次循环，继续执行下一个循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 判断count的值，直接+1</span>        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="打印100以内的偶数"><a href="#打印100以内的偶数" class="headerlink" title="打印100以内的偶数"></a>打印100以内的偶数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 利用对2取余去判断是否偶数</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 每次自加2去打印偶数，虽然这样的做法不专业，但是也是体现灵活编程思维的一种方式</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="while-else"><a href="#while-else" class="headerlink" title="while else"></a>while else</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># while else :只有在while循环被break打断时，才不会执行else程序，否则循环完之后一定会执行else程序</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loop"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环正常执行"</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loop"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环正常执行"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># while循环没有被打断，打印完Loop1-6之后还是会打印循环正常执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我曾踏足山巅，也曾进入低谷，二者都让我受益良多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​                                                                          
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.missf.top/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://www.missf.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.missf.top/post/4a17b156.html"/>
    <id>https://www.missf.top/post/4a17b156.html</id>
    <published>2019-03-28T04:14:29.000Z</published>
    <updated>2020-06-02T07:51:22.003Z</updated>
    
    <content type="html"><![CDATA[<p>所有无法深入问题本质的那些人，最终都将离开这个行业。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所有无法深入问题本质的那些人，最终都将离开这个行业。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Hello World" scheme="https://www.missf.top/categories/Hello-World/"/>
    
    
      <category term="Hello World" scheme="https://www.missf.top/tags/Hello-World/"/>
    
  </entry>
  
</feed>
